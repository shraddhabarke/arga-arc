{
  "exceljet2modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (str.substr s (+ 1 (str.lastindexof s \".\")) (- (str.len s) (+ 1 (str.lastindexof s \".\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- 1 (str.len _arg_0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- 1 (str.len _arg_0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" -1)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\" -1))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \".\"))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" 0)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```s-expression\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n     \"\")\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)) 1))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \".\"))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 379.435,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((s String)) String (str.substr s (+ 1 (str.lastindexof s \".\")) (- (str.len s) (+ 1 (str.lastindexof s \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- 1 (str.len _arg_0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- 1 (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" -1)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\" -1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" 0)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))"
    ],
    "constants": [
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        "",
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      ".",
      -1
    ]
  },
  "31753108modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```scheme\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1)))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1)))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 13 (- (str.indexof _arg_0 \" \" 14) 13))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1)))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n  (str.substr _arg_0 13 9)\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 21))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```"
    ],
    "time_diff_ms": 961.09,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 (- (str.indexof _arg_0 \" \" 14) 13))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 21))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))"
    ],
    "constants": [
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        9,
        14
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        9,
        14
      ],
      [
        21,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        " "
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        21,
        14
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        "",
        " "
      ],
      [
        21,
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        14,
        22
      ],
      [
        14,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        9,
        14
      ],
      [
        14,
        " "
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        " "
      ],
      [
        14,
        " "
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        13,
        14,
        " "
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        0,
        1,
        " "
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        9,
        14
      ],
      [
        9,
        13
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        21,
        14
      ],
      [
        14,
        22
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      9,
      13,
      14,
      21,
      22,
      " "
    ]
  },
  "find-nth-occurrence-of-charactermodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n         (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n           (ite (= _arg_1 2) next-pos\n                (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int\n                    (ite (or (= i len) (= count n))\n                         i\n                         (ite (= (str.at s i) \",\")\n                              (helper s n (+ i 1) (+ count 1))\n                              (helper s n (+ i 1) count))))))\n      (- (helper _arg_0 _arg_1 0 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n      pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2)\n          next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let loop ((n _arg_1) (p pos))\n          (if (= n 1)\n              p\n              (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((helper (lambda ((s String) (c String) (n Int) (i Int)) Int\n                  (ite (= n 0) (- i 1)\n                       (let ((pos (str.indexof s c i)))\n                         (ite (= pos -1) -1\n                              (helper s c (- n 1) (+ pos 1))))))))\n    (helper s \"_\" n 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s ch n idx)\n                    (ite (or (= n 0) (= idx (str.len s)))\n                         (- idx 1)\n                         (ite (= (str.at s idx) ch)\n                              (find-nth s ch (- n 1) (+ idx 1))\n                              (find-nth s ch n (+ idx 1)))))))\n    (find-nth _arg_0 \",\" _arg_1 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n c i)\n                    (if (= n 0) i\n                        (let ((next (str.indexof s c (+ i 1))))\n                          (if (= next -1) -1\n                              (find-nth s (- n 1) c next)))))))\n    (find-nth _arg_0 _arg_1 \",\" -1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (<= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (<= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (<= _arg_1 1)\n        pos\n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))\n          (if (= next -1)\n              -1\n              (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((helper (lambda ((s String) (c String) (n Int) (i Int) (count Int)) Int\n                  (if (or (= i (str.len s)) (= count n))\n                      i\n                      (helper s c n (+ i 1) (if (= (str.at s i) c) (+ count 1) count))))))\n    (helper s \",\" n 0 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let loop ((i 1) (pos pos))\n        (ite (= i _arg_1) pos\n          (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ pos 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n c)\n                    (let loop ((i 0) (count 0))\n                      (if (>= count n)\n                          i\n                          (let ((pos (str.indexof s c i)))\n                            (if (= pos -1)\n                                -1\n                                (loop (+ pos 1) (+ count 1)))))))))\n    (find-nth _arg_0 _arg_1 \",\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let loop ((idx 0) (count 0))\n      (ite (or (= idx len) (= count _arg_1))\n           idx\n           (loop (+ idx 1) (ite (= (str.at _arg_0 idx) \",\") (+ count 1) count))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((occurrence (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        occurrence\n        (+ occurrence 1 (f (str.substr _arg_0 (+ occurrence 1) (- (str.len _arg_0) (+ occurrence 1))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n        (ite (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int\n                   (ite (or (= count n) (= i len))\n                        i\n                        (helper s n (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count))))))\n      (helper _arg_0 _arg_1 0 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((helper (lambda ((s String) (n Int) (idx Int))\n                    (ite (= n 0)\n                         idx\n                         (ite (= idx len)\n                              -1\n                              (let ((next-idx (str.indexof s \",\" (+ idx 1))))\n                                (helper s (- n 1) next-idx)))))))\n      (helper _arg_0 _arg_1 -1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n      pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2)\n          next\n          (let ((final (str.indexof _arg_0 \"_\" (+ next 1))))\n            final))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n i)\n                    (if (or (= n 0) (= i (str.len s)))\n                        -1\n                        (let ((pos (str.indexof s \"_\" i)))\n                          (if (= pos -1)\n                              -1\n                              (if (= n 1)\n                                  pos\n                                  (find-nth s (- n 1) (+ pos 1)))))))))\n    (find-nth _arg_0 _arg_1 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n           (ite (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next\n              (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth\n         (lambda (s n pos count)\n           (ite (= n count) pos\n             (let ((next (str.indexof s \"_\" (+ pos 1))))\n               (ite (= next -1) -1\n                 (find-nth s n (+ next 1) (+ count 1))))))))\n    (find-nth _arg_0 _arg_1 -1 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((find-nth\n           (lambda ((str String) (ch Int) (count Int) (pos Int))\n             (ite (or (= count _arg_1) (>= pos len))\n                  pos\n                  (ite (= (str.at str pos) \",\")\n                       (find-nth str ch (+ count 1) (+ pos 1))\n                       (find-nth str ch count (+ pos 1)))))))\n      (find-nth _arg_0 44 0 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((helper (lambda ((s String) (c Int) (i Int)) Int\n                  (if (= i 0)\n                      -1\n                      (let ((pos (str.indexof s \",\" c)))\n                        (if (= pos -1)\n                            -1\n                            (if (= i 1)\n                                pos\n                                (helper s (+ pos 1) (- i 1)))))))))\n    (helper _arg_0 0 _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0))\n        (count 1))\n    (ite (= _arg_1 1)\n      pos\n      (let loop ((pos pos) (count count))\n        (ite (< count _arg_1)\n          (loop (str.indexof _arg_0 \",\" (+ pos 1)) (+ count 1))\n          pos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (if (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next\n              (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((find-nth\n          (lambda (s n c i)\n            (if (= n 0)\n                i\n                (let ((idx (str.indexof s c i)))\n                  (if (= idx -1)\n                      -1\n                      (find-nth s (- n 1) c (+ idx 1))))))))\n    (find-nth s n \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((len (str.len s)))\n    (let rec ((i 0) (count 0))\n      (ite (or (= i len) (= count n))\n           i\n           (rec (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n           (ite (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) idx\n      (let ((next (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))) (- _arg_1 1))))\n        (ite (= next -1) -1 (+ idx 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((helper (lambda ((s String) (ch String) (n Int) (i Int) (count Int)) Int\n                   (ite (or (= n 0) (= i (str.len s)))\n                        (- i 1)\n                        (ite (= (str.at s i) ch)\n                             (helper s ch (- n 1) (+ i 1) (+ count 1))\n                             (helper s ch n (+ i 1) count))))))\n    (helper _arg_0 \",\" _arg_1 0 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n           (ite (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let loop ((i 1) (p pos))\n        (ite (= i _arg_1) p\n          (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ p 1))))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (if (= _arg_1 2)\n          next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (str.indexof _arg_0 \",\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next\n              (str.indexof _arg_0 \",\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((rec (lambda ((s String) (n Int) (i Int)) Int\n                 (if (or (= n 0) (>= i len))\n                     (- len 1)\n                     (if (= (str.at s i) \",\")\n                         (if (= n 1)\n                             i\n                             (rec s (- n 1) (+ i 1)))\n                         (rec s n (+ i 1)))))))\n      (rec _arg_0 _arg_1 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int\n                   (ite (or (= i len) (= count n))\n                        i\n                        (helper s n (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count))))))\n      (helper _arg_0 _arg_1 0 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (<= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) Int\n  (let ((find-nth\n         (lambda (s n ch idx count)\n           (if (or (= idx (str.len s)) (= count n))\n               idx\n               (find-nth s n ch (+ idx 1) (if (= (str.at s idx) ch) (+ count 1) count))))))\n    (find-nth s n \",\" 0 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next -1) -1 (+ pos next 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next-pos -1) -1 (+ pos 1 next-pos))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((pos (str.indexof s \"_\" 0)))\n    (if (<= n 1)\n        pos\n        (let loop ((i 1) (pos pos))\n          (if (= i n)\n              pos\n              (loop (+ i 1) (str.indexof s \"_\" (+ pos 1))))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let loop ((n _arg_1) (p pos))\n        (ite (= n 1) p\n          (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1))))))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) Int\n  (let ((find-nth\n         (lambda (s c n idx)\n           (if (= n 0)\n               idx\n               (let ((next-idx (str.indexof s c (+ idx 1))))\n                 (if (= next-idx -1)\n                     -1\n                     (find-nth s c (- n 1) next-idx)))))))\n    (find-nth s \"_\" n -1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let loop ((i 1) (p pos))\n          (if (= i _arg_1)\n              p\n              (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ p 1))))))))\n```",
      "```lisp\n(if (<= _arg_1 0) -1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0 _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((new-str (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))\n          (+ pos 1 (f new-str (- _arg_1 1)))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((find-nth (lambda (s c n)\n                    (let loop ((i 0) (count 0))\n                      (if (>= count n)\n                          i\n                          (let ((idx (str.indexof s c i)))\n                            (if (= idx -1)\n                                -1\n                                (loop (+ idx 1) (+ count 1)))))))))\n    (find-nth s \",\" n)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth-occurrence \n          (lambda (s c n)\n            (let ((len (str.len s)))\n              (letrec ((helper (lambda (i count)\n                                (ite (>= i len)\n                                     -1\n                                     (ite (and (= (str.at s i) c) (= count n))\n                                          i\n                                          (helper (+ i 1) (ite (= (str.at s i) c) (+ count 1) count)))))))\n                (helper 0 0))))))\n    (find-nth-occurrence _arg_0 \" \" _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth\n         (lambda (s c n)\n           (let loop ((i 0) (count 0))\n             (if (>= count n)\n                 i\n                 (let ((pos (str.indexof s c i)))\n                   (if (= pos -1)\n                       -1\n                       (loop (+ pos 1) (+ count 1)))))))))\n    (find-nth _arg_0 \",\" _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (+ pos 1 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (let loop ((n _arg_1) (p pos))\n        (if (= n 1)\n          p\n          (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (if (= _arg_1 2)\n          next-pos\n          (str.indexof _arg_0 \"_\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (if (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n           (ite (= _arg_1 2)\n                next-pos\n                (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```"
    ],
    "time_diff_ms": 589.262,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int (ite (or (= i len) (= count n)) i (ite (= (str.at s i) \",\") (helper s n (+ i 1) (+ count 1)) (helper s n (+ i 1) count)))))) (- (helper _arg_0 _arg_1 0 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let loop ((n _arg_1) (p pos)) (if (= n 1) p (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((helper (lambda ((s String) (c String) (n Int) (i Int)) Int (ite (= n 0) (- i 1) (let ((pos (str.indexof s c i))) (ite (= pos -1) -1 (helper s c (- n 1) (+ pos 1)))))))) (helper s \"_\" n 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s ch n idx) (ite (or (= n 0) (= idx (str.len s))) (- idx 1) (ite (= (str.at s idx) ch) (find-nth s ch (- n 1) (+ idx 1)) (find-nth s ch n (+ idx 1))))))) (find-nth _arg_0 \",\" _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n c i) (if (= n 0) i (let ((next (str.indexof s c (+ i 1)))) (if (= next -1) -1 (find-nth s (- n 1) c next))))))) (find-nth _arg_0 _arg_1 \",\" -1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (<= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (<= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (<= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((helper (lambda ((s String) (c String) (n Int) (i Int) (count Int)) Int (if (or (= i (str.len s)) (= count n)) i (helper s c n (+ i 1) (if (= (str.at s i) c) (+ count 1) count)))))) (helper s \",\" n 0 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let loop ((i 1) (pos pos)) (ite (= i _arg_1) pos (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ pos 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n c) (let loop ((i 0) (count 0)) (if (>= count n) i (let ((pos (str.indexof s c i))) (if (= pos -1) -1 (loop (+ pos 1) (+ count 1))))))))) (find-nth _arg_0 _arg_1 \",\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let loop ((idx 0) (count 0)) (ite (or (= idx len) (= count _arg_1)) idx (loop (+ idx 1) (ite (= (str.at _arg_0 idx) \",\") (+ count 1) count)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((occurrence (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) occurrence (+ occurrence 1 (f (str.substr _arg_0 (+ occurrence 1) (- (str.len _arg_0) (+ occurrence 1))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int (ite (or (= count n) (= i len)) i (helper s n (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count)))))) (helper _arg_0 _arg_1 0 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((helper (lambda ((s String) (n Int) (idx Int)) (ite (= n 0) idx (ite (= idx len) -1 (let ((next-idx (str.indexof s \",\" (+ idx 1)))) (helper s (- n 1) next-idx))))))) (helper _arg_0 _arg_1 -1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (let ((final (str.indexof _arg_0 \"_\" (+ next 1)))) final)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n i) (if (or (= n 0) (= i (str.len s))) -1 (let ((pos (str.indexof s \"_\" i))) (if (= pos -1) -1 (if (= n 1) pos (find-nth s (- n 1) (+ pos 1))))))))) (find-nth _arg_0 _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n pos count) (ite (= n count) pos (let ((next (str.indexof s \"_\" (+ pos 1)))) (ite (= next -1) -1 (find-nth s n (+ next 1) (+ count 1)))))))) (find-nth _arg_0 _arg_1 -1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((find-nth (lambda ((str String) (ch Int) (count Int) (pos Int)) (ite (or (= count _arg_1) (>= pos len)) pos (ite (= (str.at str pos) \",\") (find-nth str ch (+ count 1) (+ pos 1)) (find-nth str ch count (+ pos 1))))))) (find-nth _arg_0 44 0 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((helper (lambda ((s String) (c Int) (i Int)) Int (if (= i 0) -1 (let ((pos (str.indexof s \",\" c))) (if (= pos -1) -1 (if (= i 1) pos (helper s (+ pos 1) (- i 1))))))))) (helper _arg_0 0 _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0)) (count 1)) (ite (= _arg_1 1) pos (let loop ((pos pos) (count count)) (ite (< count _arg_1) (loop (str.indexof _arg_0 \",\" (+ pos 1)) (+ count 1)) pos))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((find-nth (lambda (s n c i) (if (= n 0) i (let ((idx (str.indexof s c i))) (if (= idx -1) -1 (find-nth s (- n 1) c (+ idx 1)))))))) (find-nth s n \",\" 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((len (str.len s))) (let rec ((i 0) (count 0)) (ite (or (= i len) (= count n)) i (rec (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((idx (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) idx (let ((next (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ idx 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((helper (lambda ((s String) (ch String) (n Int) (i Int) (count Int)) Int (ite (or (= n 0) (= i (str.len s))) (- i 1) (ite (= (str.at s i) ch) (helper s ch (- n 1) (+ i 1) (+ count 1)) (helper s ch n (+ i 1) count)))))) (helper _arg_0 \",\" _arg_1 0 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let loop ((i 1) (p pos)) (ite (= i _arg_1) p (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ p 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \",\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \",\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((rec (lambda ((s String) (n Int) (i Int)) Int (if (or (= n 0) (>= i len)) (- len 1) (if (= (str.at s i) \",\") (if (= n 1) i (rec s (- n 1) (+ i 1))) (rec s n (+ i 1))))))) (rec _arg_0 _arg_1 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((helper (lambda ((s String) (n Int) (i Int) (count Int)) Int (ite (or (= i len) (= count n)) i (helper s n (+ i 1) (ite (= (str.at s i) \",\") (+ count 1) count)))))) (helper _arg_0 _arg_1 0 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (<= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((find-nth (lambda (s n ch idx count) (if (or (= idx (str.len s)) (= count n)) idx (find-nth s n ch (+ idx 1) (if (= (str.at s idx) ch) (+ count 1) count)))))) (find-nth s n \",\" 0 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos next 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next-pos -1) -1 (+ pos 1 next-pos)))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((pos (str.indexof s \"_\" 0))) (if (<= n 1) pos (let loop ((i 1) (pos pos)) (if (= i n) pos (loop (+ i 1) (str.indexof s \"_\" (+ pos 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let loop ((n _arg_1) (p pos)) (ite (= n 1) p (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1)))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((find-nth (lambda (s c n idx) (if (= n 0) idx (let ((next-idx (str.indexof s c (+ idx 1)))) (if (= next-idx -1) -1 (find-nth s c (- n 1) next-idx))))))) (find-nth s \"_\" n -1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let loop ((i 1) (p pos)) (if (= i _arg_1) p (loop (+ i 1) (str.indexof _arg_0 \"_\" (+ p 1)))))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) Int (if (<= _arg_1 0) -1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0 _arg_1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((new-str (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))) (+ pos 1 (f new-str (- _arg_1 1))))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((find-nth (lambda (s c n) (let loop ((i 0) (count 0)) (if (>= count n) i (let ((idx (str.indexof s c i))) (if (= idx -1) -1 (loop (+ idx 1) (+ count 1))))))))) (find-nth s \",\" n))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth-occurrence (lambda (s c n) (let ((len (str.len s))) (letrec ((helper (lambda (i count) (ite (>= i len) -1 (ite (and (= (str.at s i) c) (= count n)) i (helper (+ i 1) (ite (= (str.at s i) c) (+ count 1) count))))))) (helper 0 0)))))) (find-nth-occurrence _arg_0 \" \" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s c n) (let loop ((i 0) (count 0)) (if (>= count n) i (let ((pos (str.indexof s c i))) (if (= pos -1) -1 (loop (+ pos 1) (+ count 1))))))))) (find-nth _arg_0 \",\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (+ pos 1 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let loop ((n _arg_1) (p pos)) (if (= n 1) p (loop (- n 1) (str.indexof _arg_0 \"_\" (+ p 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \"_\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (if (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))"
    ],
    "constants": [
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        ",",
        44,
        1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        ",",
        -1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        ",",
        2,
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "_",
      44,
      ",",
      " ",
      -1
    ]
  },
  "clean-and-reformat-telephone-numbersmodified.sl": {
    "completions": [
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"(\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"(\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```"
    ],
    "time_diff_ms": 687.006,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"(\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"(\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))"
    ],
    "constants": [
      [
        "",
        ")",
        "-",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ]
    ],
    "all_constants": [
      "",
      ")",
      "<",
      "-",
      ".",
      " ",
      "("
    ]
  },
  "17212077modified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n  (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.substr _arg_0 0 2)\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```"
    ],
    "time_diff_ms": 152.624,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 2)))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))"
    ],
    "constants": [
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ]
    ],
    "all_constants": [
      0,
      2,
      4,
      5,
      6,
      "/"
    ]
  },
  "11604909modified.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 (- start 1) 3)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 3)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 3)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0)) \" \" 1))\n```\n",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0)) \".\" 0) 1)) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \".\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= next -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (let ((dot (str.indexof _arg_0 \".\" start)))\n                (if (= dot -1)\n                    \"\"\n                    (let ((end (str.indexof _arg_0 \" \" dot)))\n                      (if (= end -1)\n                          (str.substr _arg_0 start (- (str.len _arg_0) start))\n                          (str.substr _arg_0 start (- end start)))))))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((substr (str.substr _arg_0 (+ next 1) 3)))\n        (ite (str.contains substr \".\")\n             (str.substr _arg_0 (+ next 1) 3)\n             (str.substr _arg_0 (+ next 1) 5))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\"\n\"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0)))\n     \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (let ((start (str.indexof _arg_0 \" \" 0)))\n       (str.substr _arg_0 (+ start 1) (str.indexof _arg_0 \".\" start)))\n     \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\"\n\"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\"\n\"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- next start)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0)) 2))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n     \"\")\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \".\" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) \n                            (- (str.indexof _arg_0 \".\" 0) \n                               (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n     \"\")\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\" \n(ite (str.contains _arg_0 \"2.6\") \"2.6\" \n(ite (str.contains _arg_0 \"3.5\") \"3.5\" \n(ite (str.contains _arg_0 \"5.1\") \"5.1\" \n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((dot (str.indexof _arg_0 \".\" start)))\n        (if (and (>= dot 0) (<= dot next))\n            (str.substr _arg_0 (- dot 1) (+ 3 (str.indexof _arg_0 \".\" dot)))\n            \"\")))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n     \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (>= start 1)\n      (let ((prefix (str.substr _arg_0 (- start 1) 1)))\n        (if (or (= prefix \"1\") (= prefix \"2\") (= prefix \"3\") (= prefix \"4\") (= prefix \"5\") (= prefix \"6\") (= prefix \"7\") (= prefix \"8\") (= prefix \"9\") (= prefix \"0\"))\n          (str.substr _arg_0 (- start 1) (+ 2 (str.indexof _arg_0 \".\" (+ start 1))))\n          \"\"))\n      \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \" \" 0) -2))\n     \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((i (str.indexof _arg_0 \".\" 0)))\n    (if (= i -1)\n        \"\"\n        (let ((j (str.indexof _arg_0 \".\" (+ i 1))))\n          (if (= j -1)\n              (str.substr _arg_0 (- i 1) 3)\n              (str.substr _arg_0 (- i 1) (- j (- i 1))))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n     \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 3 (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0))))\n  \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((mid (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((end (str.indexof _arg_0 \" \" (+ mid 1))))\n        (str.substr _arg_0 (+ mid 1) (- end (+ mid 1)))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\"\n\"\")))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 3)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \".\" 0)\n    3))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (let ((start (str.indexof _arg_0 \".\" 0)))\n          (let ((prefix (str.substr _arg_0 (- start 1) 1)))\n               (ite (str.contains prefix \" \")\n                    (str.substr _arg_0 (- start 1) 3)\n                    (str.substr _arg_0 (- start 1) 4))))\n     \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\" \n(ite (str.contains _arg_0 \"2.6\") \"2.6\" \n(ite (str.contains _arg_0 \"3.5\") \"3.5\" \n(ite (str.contains _arg_0 \"5.1\") \"5.1\" \n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" (- (str.indexof _arg_0 \".\" 0) 2)) 3)\n     \"\")\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((dot (str.indexof _arg_0 \".\" 0)))\n        (ite (and (>= dot 0) (< dot next))\n             (str.substr _arg_0 (- dot 1) 3)\n             (str.substr _arg_0 (+ start 1) (- next start 1)))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Windows\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"Windows\" 0) 8) 3)\n     (ite (str.contains _arg_0 \"Linux\")\n          (str.substr _arg_0 (+ (str.indexof _arg_0 \"Linux\" 0) 6) 3)\n          (ite (str.contains _arg_0 \"Server\")\n               (str.substr _arg_0 (+ (str.indexof _arg_0 \"Server\" 0) 7) 3)\n               (str.substr _arg_0 4 3))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0))))\n    (if (and (>= start 0) (>= end 0))\n        (str.substr _arg_0 start (- end start 2))\n        \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"6.1\") \"6.1\"\n(ite (str.contains _arg_0 \"2.6\") \"2.6\"\n(ite (str.contains _arg_0 \"3.5\") \"3.5\"\n(ite (str.contains _arg_0 \"5.1\") \"5.1\"\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))\n```"
    ],
    "time_diff_ms": 134.384,
    "solutions": [
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 (- start 1) 3))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 3)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 3))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0)) \" \" 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0)) \".\" 0) 1)) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \".\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (if (= next -1) (str.substr _arg_0 start (str.len _arg_0)) (let ((dot (str.indexof _arg_0 \".\" start))) (if (= dot -1) \"\" (let ((end (str.indexof _arg_0 \" \" dot))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (let ((substr (str.substr _arg_0 (+ next 1) 3))) (ite (str.contains substr \".\") (str.substr _arg_0 (+ next 1) 3) (str.substr _arg_0 (+ next 1) 5)))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (str.indexof _arg_0 \".\" start))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- next start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0)) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (let ((dot (str.indexof _arg_0 \".\" start))) (if (and (>= dot 0) (<= dot next)) (str.substr _arg_0 (- dot 1) (+ 3 (str.indexof _arg_0 \".\" dot))) \"\"))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (>= start 1) (let ((prefix (str.substr _arg_0 (- start 1) 1))) (if (or (= prefix \"1\") (= prefix \"2\") (= prefix \"3\") (= prefix \"4\") (= prefix \"5\") (= prefix \"6\") (= prefix \"7\") (= prefix \"8\") (= prefix \"9\") (= prefix \"0\")) (str.substr _arg_0 (- start 1) (+ 2 (str.indexof _arg_0 \".\" (+ start 1)))) \"\")) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \" \" 0) -2)) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((i (str.indexof _arg_0 \".\" 0))) (if (= i -1) \"\" (let ((j (str.indexof _arg_0 \".\" (+ i 1)))) (if (= j -1) (str.substr _arg_0 (- i 1) 3) (str.substr _arg_0 (- i 1) (- j (- i 1)))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 3 (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((mid (str.indexof _arg_0 \" \" (+ start 1)))) (let ((end (str.indexof _arg_0 \" \" (+ mid 1)))) (str.substr _arg_0 (+ mid 1) (- end (+ mid 1))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (let ((start (str.indexof _arg_0 \".\" 0))) (let ((prefix (str.substr _arg_0 (- start 1) 1))) (ite (str.contains prefix \" \") (str.substr _arg_0 (- start 1) 3) (str.substr _arg_0 (- start 1) 4)))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \" \" (- (str.indexof _arg_0 \".\" 0) 2)) 3) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (let ((dot (str.indexof _arg_0 \".\" 0))) (ite (and (>= dot 0) (< dot next)) (str.substr _arg_0 (- dot 1) 3) (str.substr _arg_0 (+ start 1) (- next start 1))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Windows\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"Windows\" 0) 8) 3) (ite (str.contains _arg_0 \"Linux\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"Linux\" 0) 6) 3) (ite (str.contains _arg_0 \"Server\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"Server\" 0) 7) 3) (str.substr _arg_0 4 3))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 3)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0)))) (if (and (>= start 0) (>= end 0)) (str.substr _arg_0 start (- end start 2)) \"\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" \"\")))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        3,
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        3,
        " "
      ],
      [
        0,
        1,
        3,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        3,
        ".",
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        1,
        3,
        5,
        ".",
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        "",
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        ".",
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        2,
        ".",
        " "
      ],
      [
        0,
        1,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        "",
        4,
        ".",
        " "
      ],
      [
        0,
        3,
        "."
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        1,
        "",
        ".",
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        1,
        "",
        3,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        "",
        3,
        ".",
        " "
      ],
      [
        0,
        1,
        "8",
        2,
        "",
        "3",
        ".",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        "",
        ".",
        " ",
        -2
      ],
      [
        0,
        "",
        1,
        3,
        ".",
        -1
      ],
      [
        0,
        "",
        4,
        ".",
        " "
      ],
      [
        0,
        "",
        3,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        "."
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        3,
        4,
        ".",
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        "",
        2,
        3,
        ".",
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        1,
        3,
        ".",
        " "
      ],
      [
        0,
        3,
        4,
        6,
        7,
        8,
        "Linux",
        "Server",
        "Windows"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        3,
        " "
      ],
      [
        0,
        "",
        2,
        ".",
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      3,
      4,
      5,
      2,
      6,
      7,
      "3",
      8,
      "Linux",
      ".",
      "5.1",
      "6.1",
      "5",
      "Server",
      "6",
      " ",
      "7",
      "0",
      "3.5",
      "2.6",
      "Windows",
      "8",
      "4",
      "9",
      "2",
      "1",
      "1.0",
      -2,
      -1
    ]
  },
  "stackoverflow4modified.sl": {
    "completions": [
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \"))\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```s-expression\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \"))\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")\n```",
      "```s\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```scheme\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \",\" \" \")\n```"
    ],
    "time_diff_ms": 239.144,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \")))"
    ],
    "constants": [
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ],
      [
        ",",
        " "
      ]
    ],
    "all_constants": [
      "",
      "<",
      ",",
      " ",
      ">"
    ]
  },
  "remove-text-by-positionmodified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```s\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```s\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```"
    ],
    "time_diff_ms": 801.888,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))"
    ],
    "constants": [
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ]
    ],
    "all_constants": [
      1,
      12,
      "/"
    ]
  },
  "44789427modified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```s-expression\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```"
    ],
    "time_diff_ms": 336.302,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "-"
    ]
  },
  "stackoverflow11modified.sl": {
    "completions": [
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 23 19)\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" PAX\"))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 21 100)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```scheme\n(str.substr _arg_0 20 (- (str.len _arg_0) 20))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX \" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\") (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) 100)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 950.542,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 23 19)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" PAX\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 21 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 20 (- (str.len _arg_0) 20))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\") (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"PAX\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        19,
        23
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        " PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        100,
        21
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        20
      ],
      [
        0,
        " PAX "
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        100,
        "PAX"
      ],
      [
        0,
        "PAX"
      ]
    ],
    "all_constants": [
      0,
      " PAX",
      " PAX ",
      100,
      "_",
      19,
      "PAX",
      21,
      20,
      23,
      " "
    ]
  },
  "stackoverflow3modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) -1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (or (= lastDigitPos -1) (= lastDigitPos (str.len _arg_0)))\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 (int.to.str 9) (str.indexof _arg_0 (int.to.str 8) (str.indexof _arg_0 (int.to.str 7) (str.indexof _arg_0 (int.to.str 6) (str.indexof _arg_0 (int.to.str 5) (str.indexof _arg_0 (int.to.str 4) (str.indexof _arg_0 (int.to.str 3) (str.indexof _arg_0 (int.to.str 2) (str.indexof _arg_0 (int.to.str 1) (str.indexof _arg_0 (int.to.str 0) 0))))))))))))\n    (ite (< lastDigitPos 0) \"\" (str.substr _arg_0 (+ lastDigit",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) -1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (>= idx 0)\n        (str.substr _arg_0 (+ idx 1) (str.len _arg_0))\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.substr _arg_0 0 (- (str.len _arg_0) 1)) \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"0\" 0)))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((s String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse s) \"0\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr s (- (str.len s) last-digit-pos 1) (str.len s)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))\n    (if (= last-digit-pos -1)\n      \"\"\n      (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"1\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"9\" 0))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (ite (< pos 0) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 1))))\n    (if (= pos -1) \"\" (str.substr _arg_0 pos (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) + 1) + 1) + 1)))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (or (= last-digit-pos -1) (= last-digit-pos (str.len _arg_0)))\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitPos -1) \"\"\n      (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n      \"\"\n      (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1)) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= lastDigitPos -1) \"\"\n      (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos) lastDigitPos))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= idx -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 idx)))))\n```",
      "```scheme\n(define-fun f ((s String)) String\n  (let ((i (str.indexof s \" \" (str.len s))))\n    (if (= i -1) \"\" (str.substr s (+ i 1) (- (str.len s) (+ i 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (str.len _arg_0))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"0\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.reverse (str.substr (str.reverse _arg_0) 0 last-digit-pos)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.trim (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(if (str.contains _arg_0 \" \")\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1))\n    \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigit (str.indexof _arg_0 (int.to.str 9) 0)))\n    (ite (= lastDigit -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) last-digit-pos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitIndex -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" -1)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 (str.substr \"0123456789\" 0 1) 0)))\n    (if (= lastDigitIndex -1)\n        \"\"\n        (str.trim (str.substr _arg_0 (+ lastDigitIndex 1) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (let ((pos (ite (>= last-digit-pos 0) last-digit-pos (str.indexof _arg_0 \"8\" 0))))\n      (let ((pos (ite (>= pos 0) pos (str.indexof _arg_0 \"7\" 0))))\n        (let ((pos (ite (>= pos 0) pos (str.indexof _arg_0 \"6\" 0))))\n          (let ((pos (ite (>= pos 0) pos (str.indexof _arg_0 \"5\" 0))))\n            (let ((pos (ite (>= pos 0) pos (str.indexof _arg_0 \"4\" 0))))\n              (let ((pos (ite (>= pos 0) pos (str.indexof",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ 1 idx) (- (str.len _arg_0) (+ 1 idx))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= last-digit-pos -1) \n        \"\" \n        (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ 1 last-digit-pos) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 (int.to.str 9) 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) 0))))\n```"
    ],
    "time_diff_ms": 923.26,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) -1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (or (= lastDigitPos -1) (= lastDigitPos (str.len _arg_0))) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      null,
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) -1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (>= idx 0) (str.substr _arg_0 (+ idx 1) (str.len _arg_0)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.substr _arg_0 0 (- (str.len _arg_0) 1)) \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"0\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((s String)) String (let ((last-digit-pos (str.indexof (str.reverse s) \"0\" 0))) (if (= last-digit-pos -1) \"\" (str.substr s (- (str.len s) last-digit-pos 1) (str.len s))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit (str.indexof _arg_0 \"9\" 0))) (if (= last-digit -1) \"\" (str.substr _arg_0 (+ last-digit 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"1\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (ite (< pos 0) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 1)))) (if (= pos -1) \"\" (str.substr _arg_0 pos (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) + 1) + 1) + 1))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (or (= last-digit-pos -1) (= last-digit-pos (str.len _arg_0))) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos) lastDigitPos)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= idx -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 idx))))))",
      "((define-fun f ((s String)) String (let ((i (str.indexof s \" \" (str.len s)))) (if (= i -1) \"\" (str.substr s (+ i 1) (- (str.len s) (+ i 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (str.len _arg_0))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"0\" 0))) (if (= last-digit-pos -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 last-digit-pos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= lastDigitPos -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= last-digit-pos -1) \"\" (str.trim (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \" \") (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigit (str.indexof _arg_0 (int.to.str 9) 0))) (ite (= lastDigit -1) \"\" (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) last-digit-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitIndex -1) \"\" (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" -1))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 (str.substr \"0123456789\" 0 1) 0))) (if (= lastDigitIndex -1) \"\" (str.trim (str.substr _arg_0 (+ lastDigitIndex 1) (str.len _arg_0)))))))",
      null,
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ 1 idx) (- (str.len _arg_0) (+ 1 idx)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) last-digit-pos) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ 1 last-digit-pos) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 (int.to.str 9) 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str 9) 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 (int.to.str 9) 0))))))"
    ],
    "constants": [
      [
        1,
        9,
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      null,
      [
        1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        1,
        9,
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "0",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "0",
        -1
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "1",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        "0",
        -1
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        9,
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        1,
        "9"
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        1,
        "",
        "0123456789",
        -1
      ],
      null,
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        9,
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        9
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "0123456789",
      9,
      "9",
      "0",
      " ",
      "1",
      -1
    ]
  },
  "initials-longmodified.sl": {
    "completions": [
      "```scheme\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n)\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) 0) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n)\n```",
      "```(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (let ((first (str.substr name 0 1))\n        (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1)))\n    (str.++ first \".\" last \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0 1) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (let ((first-initial (str.substr name 0 1))\n        (last-initial (str.substr name (+ 1 (str.indexof name \" \" 0)) 1)))\n    (str.++ first-initial \".\" last-initial \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (let ((first-initial (str.substr name 0 1))\n        (dot \".\")\n        (space \" \")\n        (last-initial (str.substr name (+ 1 (str.indexof name space 0)) 1)))\n    (str.++ first-initial dot last-initial dot))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (let ((first (str.at name 0))\n        (last (str.at name (str.indexof name \" \" 0))))\n    (str.++ first \".\" last \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (let ((first (str.at name 0))\n        (dot (str.indexof name \" \" 0)))\n    (str.++ (str.at name 0) \".\" (str.at name (+ dot 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (let ((first (str.++ (str.substr name 0 1) \".\")))\n    (str.++ first (str.substr name (str.indexof name \" \" 0) 2)))\n)\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (let ((first (str.substr name 0 1))\n        (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1)))\n    (str.++ first \".\" last \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```"
    ],
    "time_diff_ms": 505.203,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) 0) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (let ((first (str.substr name 0 1)) (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1))) (str.++ first \".\" last \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0 1) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (let ((first-initial (str.substr name 0 1)) (last-initial (str.substr name (+ 1 (str.indexof name \" \" 0)) 1))) (str.++ first-initial \".\" last-initial \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (let ((first-initial (str.substr name 0 1)) (dot \".\") (space \" \") (last-initial (str.substr name (+ 1 (str.indexof name space 0)) 1))) (str.++ first-initial dot last-initial dot))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (let ((first (str.at name 0)) (last (str.at name (str.indexof name \" \" 0)))) (str.++ first \".\" last \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (let ((first (str.at name 0)) (dot (str.indexof name \" \" 0))) (str.++ (str.at name 0) \".\" (str.at name (+ dot 1)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (let ((first (str.++ (str.substr name 0 1) \".\"))) (str.++ first (str.substr name (str.indexof name \" \" 0) 2)))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (let ((first (str.substr name 0 1)) (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1))) (str.++ first \".\" last \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        2,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ".",
      " "
    ]
  },
  "phone-7modified.sl": {
    "completions": [
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 697.084,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9
    ]
  },
  "43606446modified.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) 3)\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 15 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 18 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 21 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 10 3)\n```",
      "```lisp\n(str.substr _arg_0 18 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 19 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 18 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 14 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 18 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 18 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 12 3)\n```",
      "```lisp\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 17 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```"
    ],
    "time_diff_ms": 614.67,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 15 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 18 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 21 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 18 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 19 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 18 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 18 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 18 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \",\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 17 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))"
    ],
    "constants": [
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        3,
        14
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        3,
        14
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        3,
        13
      ],
      [
        3,
        14
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        3,
        ","
      ],
      [
        17,
        3
      ],
      [
        3,
        15
      ],
      [
        3,
        13
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        17,
        3
      ],
      [
        18,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        17,
        3
      ],
      [
        3,
        21
      ],
      [
        16,
        3
      ],
      [
        3,
        14
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        17,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        17,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        10,
        3
      ],
      [
        18,
        3
      ],
      [
        3,
        13
      ],
      [
        3,
        19
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        16,
        3
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        3,
        14
      ],
      [
        17,
        3
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        17,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        18,
        3
      ],
      [
        3,
        13
      ],
      [
        3,
        14
      ],
      [
        3,
        13
      ],
      [
        16,
        3
      ],
      [
        18,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        18,
        3
      ],
      [
        3,
        13
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        3,
        12
      ],
      [
        16,
        3
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        17,
        3
      ],
      [
        3,
        13
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        3,
        13
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      10,
      12,
      13,
      14,
      15,
      16,
      ",",
      17,
      18,
      19,
      21,
      ">"
    ]
  },
  "extract-nth-word-from-text-stringmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.substr words 0 (- (str.indexof words \" \" 0) 0)) \" \") (str.substr words 1 (- (str.indexof words \" \" 1) 1))) _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr \n    (str.replace \n      (str.replace _arg_0 \" \" \"/\")\n      \",\" \"/\")\n    (str.indexof \n      (str.replace \n        (str.replace _arg_0 \" \" \"/\")\n        \",\" \"/\")\n      \"/\" \n      (- _arg_1 1))\n    (str.indexof \n      (str.replace \n        (str.replace _arg_0 \" \" \"/\")\n        \",\" \"/\")\n      \"/\" \n      _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (str.at (str.split _arg_0 \" \") (- _arg_1 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (nth_word _arg_0 _arg_1))\n\n(define-fun nth_word ((s String) (n Int)) String\n  (let ((start (str.indexof s \" \" 0)))\n    (if (= n 1)\n        (if (= start -1) s (str.substr s 0 start))\n        (nth_word (str.substr s (+ start 1) (- (str.len s) start 1)) (- n 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ words \" \") (str.++ words \" \")) _arg_1)))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\"\n      (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (nth 0 (str.split _arg_0 \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"/\") (- (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" (* (- _arg_1 1) (str.len (str.substr (str.replace _arg_0 \" \" \"/\") 0 1)))) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (- _arg_1 1)) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" _arg_1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1)))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (if (or (< n 1) (> n (str.len words)))\n        \"\"\n        (str.at words (- n 1)))))\n```",
      "```lisp\n  (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str (- _arg_1 1)) \"0\")) (- (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str _arg_1) \"0\")) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str (- _arg_1 1)) \"0\"))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at (str.++ words \" \") (str.indexof words \" \" (- n 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (and (>= _arg_1 1) (< _arg_1 (str.len words)))\n         (str.at words (- _arg_1 1))\n         \"\")))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (ite (and (>= n 1) (<= n (str.len words)))\n         (str.at words (- n 1))\n         \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (- _arg_1 2))))) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (- _arg_1 1))))))\n```",
      "```lisp\n(if (<= _arg_1 0)\n    \"\"\n    (let ((words (str.split _arg_0 \" \")))\n      (if (>= _arg_1 (str.len words))\n          \"\"\n          (str.at words _arg_1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (ite (and (>= n 1) (< n (str.len words)))\n         (str.at words (- n 1))\n         \"\")))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.replace s \" \" \"/\")))\n    (str.replace (str.substr words (str.indexof words \"/\" (- n 1)) (str.indexof words \"/\" n)) \"/\" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.++ (str.at words (- _arg_1 1)) \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.replace _arg_0 \".\" \" \")))\n    (str.substr words\n      (str.indexof words \" \" (- _arg_1 1))\n      (str.indexof (str.substr words (str.indexof words \" \" (- _arg_1 1))) \" \" 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((start (str.indexof s \" \" 0)))\n    (if (= n 1)\n        (str.substr s 0 start)\n        (str.substr (str.substr s (+ start 1) (- (str.len s) (+ start 1))) 0 (str.indexof (str.substr s (+ start 1) (- (str.len s) (+ start 1))) \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (nth 0 (str.split _arg_0 \" \") _arg_1)\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (ite (< _arg_1 1) 0 (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (nth-word _arg_0 _arg_1))\n\n(define-fun nth-word ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (ite (= _arg_1 0) 0 (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (str.substr (str.++ _arg_0 \" \") \n              (str.indexof (str.++ \" \" _arg_0 \" \") \" \" \n                           (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1)) \n              (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" \n                              (+ (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1)) \n                 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```"
    ],
    "time_diff_ms": 729.881,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.substr words 0 (- (str.indexof words \" \" 0) 0)) \" \") (str.substr words 1 (- (str.indexof words \" \" 1) 1))) _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (- _arg_1 1)) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.split _arg_0 \" \") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (nth_word _arg_0 _arg_1)) (define-fun nth_word ((s String) (n Int)) String (let ((start (str.indexof s \" \" 0))) (if (= n 1) (if (= start -1) s (str.substr s 0 start)) (nth_word (str.substr s (+ start 1) (- (str.len s) start 1)) (- n 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ words \" \") (str.++ words \" \")) _arg_1))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 0 (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \" \" \"/\") (- (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" (* (- _arg_1 1) (str.len (str.substr (str.replace _arg_0 \" \" \"/\") 0 1)))) 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (- _arg_1 1)) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (if (or (< n 1) (> n (str.len words))) \"\" (str.at words (- n 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str (- _arg_1 1)) \"0\")) (- (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str _arg_1) \"0\")) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"/\") \"/\" (str.++ (int.to.str (- _arg_1 1)) \"0\"))))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at (str.++ words \" \") (str.indexof words \" \" (- n 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (and (>= _arg_1 1) (< _arg_1 (str.len words))) (str.at words (- _arg_1 1)) \"\"))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (ite (and (>= n 1) (<= n (str.len words))) (str.at words (- n 1)) \"\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (- _arg_1 2))))) (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof (str.replace (str.replace _arg_0 \" \" \"/\") \",\" \"\") \"/\" (- _arg_1 1))))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (<= _arg_1 0) \"\" (let ((words (str.split _arg_0 \" \"))) (if (>= _arg_1 (str.len words)) \"\" (str.at words _arg_1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (ite (and (>= n 1) (< n (str.len words))) (str.at words (- n 1)) \"\"))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.replace s \" \" \"/\"))) (str.replace (str.substr words (str.indexof words \"/\" (- n 1)) (str.indexof words \"/\" n)) \"/\" \" \"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.++ (str.at words (- _arg_1 1)) \"\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.replace _arg_0 \".\" \" \"))) (str.substr words (str.indexof words \" \" (- _arg_1 1)) (str.indexof (str.substr words (str.indexof words \" \" (- _arg_1 1))) \" \" 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((start (str.indexof s \" \" 0))) (if (= n 1) (str.substr s 0 start) (str.substr (str.substr s (+ start 1) (- (str.len s) (+ start 1))) 0 (str.indexof (str.substr s (+ start 1) (- (str.len s) (+ start 1))) \" \" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 0 (str.split _arg_0 \" \") _arg_1)))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (ite (< _arg_1 1) 0 (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (nth-word _arg_0 _arg_1)) (define-fun nth-word ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (ite (= _arg_1 0) 0 (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.++ _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1)) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1)) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        ",",
        1,
        "/",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "/",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        ",",
        1,
        "/",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        "/",
        ",",
        "0",
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        0,
        2,
        "/",
        ",",
        " "
      ],
      [
        0,
        "",
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        "/",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        ".",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      ".",
      "/",
      ",",
      "0",
      " ",
      -1
    ]
  },
  "remove-leading-and-trailing-spaces-from-textmodified.sl": {
    "completions": [
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```(str.trim _arg_0)```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \"\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n  (str.trim _arg_0)\n)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \")\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```s\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```s-expression\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.trim _arg_0)\n```"
    ],
    "time_diff_ms": 368.332,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \"\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))"
    ],
    "constants": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        "",
        "  ",
        " "
      ],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        "",
        "  ",
        " "
      ],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      []
    ],
    "all_constants": [
      "",
      "  ",
      " "
    ]
  },
  "phone-5-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((start 1)\n        (end (str.indexof name \" \" 1)))\n    (str.substr name start (- end start))))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 587.058,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((start 1) (end (str.indexof name \" \" 1))) (str.substr name start (- end start)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "count-total-words-in-a-cellmodified.sl": {
    "completions": [
      "```lisp\n  (str.len (str.replace (str.replace _arg_0 \",\" \"\") \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```\n",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```\n",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\"))\n        (spaces (str.len (str.replace _arg_0 trimmed \"\"))))\n    (+ spaces 1)))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (+ 1 (- (str.len _arg_0) (str.len trimmed)))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.replace _arg_0 \",\" \" \")))\n    (+ 1 (str.len (str.replace words \" \" \"\")) (- (str.len words)))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.replace _arg_0 \",\" \" \")))\n    (+ 1 (str.len (str.replace words \" \" \"\")))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"a\")))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.split _arg_0 \" \")))\n    (str.len (str.replace (str.++ words \" \") \" \" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\")))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((s (str.replace _arg_0 \",\" \" \")))\n    (str.len (str.split s \" \"))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \",\" \"\")))\n    (str.len (str.split trimmed \" \"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= trimmed \"\") 0\n      (+ 1 (str.len (str.replace _arg_0 \" \" \"\" (- (str.len _arg_0) (str.len trimmed))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.split _arg_0 \" \")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) \n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \",\" \"\"))\n        (cleaned (str.replace (str.replace trimmed \".\" \"\") \" \" \" \")))\n    (str.len (str.replace cleaned \" \" \"\"))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.replace _arg_0 \",\" \" \")))\n    (let ((words (str.replace words \".\" \" \")))\n      (let ((words (str.replace words \"/\" \" \")))\n        (str.len (str.split words \" \"))))))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.replace _arg_0 \",\" \" \")))\n    (str.len (str.split words \" \"))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((words (str.replace _arg_0 \",\" \" \")))\n    (let ((words (str.replace words \".\" \" \")))\n      (let ((words (str.replace words \"/\" \" \")))\n        (let ((words (str.replace words \"=\" \" \")))\n          (let ((words (str.replace words \"+\" \" \")))\n            (str.len (str.split words \" \"))))))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```"
    ],
    "time_diff_ms": 580.668,
    "solutions": [
      "((define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace _arg_0 \",\" \"\") \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\")) (spaces (str.len (str.replace _arg_0 trimmed \"\")))) (+ spaces 1))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (+ 1 (- (str.len _arg_0) (str.len trimmed))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.replace _arg_0 \",\" \" \"))) (+ 1 (str.len (str.replace words \" \" \"\")) (- (str.len words))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.replace _arg_0 \",\" \" \"))) (+ 1 (str.len (str.replace words \" \" \"\"))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.split _arg_0 \" \"))) (str.len (str.replace (str.++ words \" \") \" \" \"\")))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \",\" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((s (str.replace _arg_0 \",\" \" \"))) (str.len (str.split s \" \")))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \",\" \"\"))) (str.len (str.split trimmed \" \")))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= trimmed \"\") 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\" (- (str.len _arg_0) (str.len trimmed)))))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \",\" \"\")) (cleaned (str.replace (str.replace trimmed \".\" \"\") \" \" \" \"))) (str.len (str.replace cleaned \" \" \"\")))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.replace _arg_0 \",\" \" \"))) (let ((words (str.replace words \".\" \" \"))) (let ((words (str.replace words \"/\" \" \"))) (str.len (str.split words \" \")))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.replace _arg_0 \",\" \" \"))) (str.len (str.split words \" \")))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((words (str.replace _arg_0 \",\" \" \"))) (let ((words (str.replace words \".\" \" \"))) (let ((words (str.replace words \"/\" \" \"))) (let ((words (str.replace words \"=\" \" \"))) (let ((words (str.replace words \"+\" \" \"))) (str.len (str.split words \" \")))))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))"
    ],
    "constants": [
      [
        "",
        ",",
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "a",
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        ",",
        " "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        ",",
        ".",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        ",",
        ".",
        "/",
        " "
      ],
      [
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ],
      [
        ",",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "=",
        "+",
        ".",
        "/",
        ",",
        " "
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "=",
      "+",
      ".",
      "/",
      ",",
      " ",
      "a"
    ]
  },
  "stackoverflow8modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- 0 (str.len _arg_0))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 0 (str.len _arg_0))) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- 1 (str.len _arg_0)))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 1 (str.len _arg_0))) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```"
    ],
    "time_diff_ms": 496.531,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- 0 (str.len _arg_0))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 0 (str.len _arg_0))) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- 1 (str.len _arg_0)))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- 1 (str.len _arg_0))) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        "/n",
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      "/n",
      1,
      "/",
      0
    ]
  },
  "strip-numeric-characters-from-cellmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" \"9\")))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\" \"\")) \"\")) \"\")) \"\")) \"\")) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.replace (str.++ \"1\" (str.replace (str.++ \"2\" (str.replace (str.++ \"3\" (str.replace (str.++ \"4\" (str.replace (str.++ \"5\" (str.replace (str.++ \"6\" (str.replace (str.++ \"7\" (str.replace (str.++ \"8\" (str.replace (str.++ \"9\" \"\" \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\")) \"\"))",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\")))))))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```synth\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 (str.replace _arg_0 \"0\" \"\") 0) (str.len _arg_0)) \"\")\n```",
      "```(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\"))```",
      "```s-expression\n(str.replace _arg_0 (str.substr _arg_0 0 1) (ite (str.contains \"0123456789\" (str.substr _arg_0 0 1)) \"\" (str.substr _arg_0 0 1)))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```lisp\n  (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \" \" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\")))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace_all _arg_0 \"0\" (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```s\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"0\" 0) 1) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 (int.to.str 0) 0) 1) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```(str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\")))))))\n```",
      "```s-expression\n(str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" \"9\" \"\")))))))))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```"
    ],
    "time_diff_ms": 206.745,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" \"9\")))))))))) \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\" \"\")) \"\")) \"\")) \"\")) \"\")) \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 (str.replace _arg_0 \"0\" \"\") 0) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 1) (ite (str.contains \"0123456789\" (str.substr _arg_0 0 1)) \"\" (str.substr _arg_0 0 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \" \" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 \"0\" (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all (str.replace_all _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"0\" 0) 1) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 (int.to.str 0) 0) 1) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" (str.++ \"9\" \"0\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" \"9\" \"\")))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))"
    ],
    "constants": [
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        0,
        "0"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        0,
        1,
        "0123456789",
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5",
        " "
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        0,
        1,
        "0",
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        0,
        1,
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      "",
      "8",
      0,
      "0123456789",
      1,
      "[0-9]",
      "3",
      "4",
      "9",
      "2",
      "1",
      "6",
      "7",
      "0",
      "5",
      " "
    ]
  },
  "phone-9modified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \"\") \"-\" \".\"))```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")```",
      "```(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```(str.replace (str.replace name \"-\" \".\") \" \" \"\")```",
      "```scheme\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```(str.replace (str.replace name \"-\" \".\") \" \" \"\")```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace name \" \" \"\") \"-\" \".\")```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace name \" \" \"\") \"-\" \".\")```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n)\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace name \" \" \"\") \"-\" \".\")```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace name \"+\" \"\") \"-\" \".\")```",
      "```(str.replace (str.replace name \"-\" \".\") \"+\" \"\")```",
      "```(str.replace (str.replace name \"-\" \".\") \" \" \"\")```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```(str.replace (str.replace name \"-\" \".\") \" \" \"\")```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```s\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```(str.replace (str.replace name \"-\" \".\") \" \" \"\")```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```"
    ],
    "time_diff_ms": 591.758,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \"\") \"-\" \".\"))))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+\" \"\")))",
      null,
      null,
      null,
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      null,
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))"
    ],
    "constants": [
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ "
      ],
      null,
      [
        "-",
        "."
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "-",
        ".",
        ",",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "-",
        ".",
        ",",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      null,
      null,
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "",
        1,
        "-",
        ".",
        ",",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      3,
      "+",
      "-",
      ".",
      ",",
      "+ ",
      " "
    ]
  },
  "initialsmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```s-expression\n(define-fun f (name String) String\n  (str.++ \n    (str.++ \n      (str.substr name 0 1) \n      \".\") \n    (str.++ \n      (str.substr name \n        (+ 1 (str.indexof name \" \" 0)) \n        1) \n      \".\")))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.++ (str.substr name 0 1) \".\") \n          (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.++ (str.substr name 0 1) \".\")\n    (str.++ (str.substr name (str.indexof name \" \" 0) 1) \".\")\n  )\n)\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```"
    ],
    "time_diff_ms": 870.626,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (str.indexof name \" \" 0) 1) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      " "
    ]
  },
  "phone-10-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1))\n          \"(\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n          \") \"\n          (str.substr name (+ (str.indexof name \" \" 0) 5) 3)\n          \"-\"\n          (str.substr name (+ (str.indexof name \" \" 0) 9) 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 4) (- (str.len name) (+ (str.indexof name \" \" 0) 4))))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 (+ 3 (str.indexof name \" \" 0))) \" (\" (str.substr name (+ 4 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \" \" 0)) 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) (str.substr name 10 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "````\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1))\n          \"(\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n          \") \"\n          (str.substr name (+ (str.indexof name \" \" 0) 4) 3)\n          \"-\"\n          (str.substr name (+ (str.indexof name \" \" 0) 8) 3)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```"
    ],
    "time_diff_ms": 838.806,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) 3) \"-\" (str.substr name (+ (str.indexof name \" \" 0) 9) 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 4) (- (str.len name) (+ (str.indexof name \" \" 0) 4))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (+ 3 (str.indexof name \" \" 0))) \" (\" (str.substr name (+ 4 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \" \" 0)) 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) (str.substr name 10 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 4) 3) \"-\" (str.substr name (+ (str.indexof name \" \" 0) 8) 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        3,
        5,
        9,
        "-",
        " ",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        " ",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        7,
        8,
        " ",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        3,
        4,
        8,
        "-",
        " ",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      1,
      " (",
      3,
      4,
      5,
      7,
      8,
      9,
      10,
      "-",
      12,
      " ",
      ") ",
      "("
    ]
  },
  "39060015modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\"))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/delete words in the area /\") \n    (str.replace _arg_0 \"/delete words in the area /\" \"\") \n    _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 1 (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1) 0))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)))) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/delete words in the area /\")\n  (str.replace _arg_0 \"/delete words in the area /\" \"\")\n  _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1) + 1) (str.len _arg_0)))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\") 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 1)) 1)) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))\n             (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1) \n                         (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1))))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 8)) (str.indexof _arg_0 \"/delete\" 0)))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)))) \"\")\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/keep\" 0) (str.len _arg_0)))\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"keep\")) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)))) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 5)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1)) \"/\") 1)) \"\")\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/delete words in the area /\")\n    (str.replace _arg_0 \"/delete words in the area /\" \"\")\n    _arg_0)\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (+ (str.indexof _arg_0 \"/keep\" 0) 5) (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))\n             (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 5)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\"))\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) \n    (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\"))\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1)) \"/\") 1)) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) \n    (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (- (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \" /\" 0)) (str.indexof _arg_0 \" /\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) \"/\" \"\")\n     _arg_0)\n```",
      "```lisp\n    (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/keep\" 0)))\n    (if (= start -1)\n      \"\"\n      (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) \n          (str.substr _arg_0 (str.indexof _arg_0 \"/keep\" 0) (str.len _arg_0))))\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) \n  (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 1))))\n      (if (or (= start -1) (= end -1))\n          _arg_0\n          (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))))))\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \" \" 0)) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \" /\" 0)))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) \n    (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\"))\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete words in the area /\" 0) (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 25)) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/delete words in the area /\")\n    (str.replace _arg_0 \"/delete words in the area /\" \"\")\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/delete words in the area /\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/delete words in the area /\" 0)) \n             (str.substr _arg_0 \n                         (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 26) \n                         (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 26))))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 6)) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/ \" (str.indexof _arg_0 \"/delete\" 0)) 2)) \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) \n             (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) \"/\" 0) 2) (str.len _arg_0)))\n     _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\"))) \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0))\n        (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))\n    (if (and (>= start 0) (> end start))\n        (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (str.len _arg_0)))\n        _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 1 (str.indexof _arg_0 \"/ \" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" /\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 8)) (str.indexof _arg_0 \"/delete\" 0)))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)) 2)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)))\n```"
    ],
    "time_diff_ms": 580.804,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\"))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.replace _arg_0 \"/delete words in the area /\" \"\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 1 (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1) 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.replace _arg_0 \"/delete words in the area /\" \"\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1) + 1) (str.len _arg_0))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\") 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 1)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) 1)))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 8)) (str.indexof _arg_0 \"/delete\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/keep\" 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"keep\")) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 5)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1)) \"/\") 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.replace _arg_0 \"/delete words in the area /\" \"\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (+ (str.indexof _arg_0 \"/keep\" 0) 5) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 5)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1)) \"/\") 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (- (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \" /\" 0)) (str.indexof _arg_0 \" /\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) \"/\" \"\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/keep\" 0))) (if (= start -1) \"\" (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/keep\" 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (- (str.indexof _arg_0 \"/keep\" 0) (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 1)))) (if (or (= start -1) (= end -1)) _arg_0 (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \" \" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \" /\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete words in the area /\" 0) (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 25)) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.replace _arg_0 \"/delete words in the area /\" \"\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/delete words in the area /\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 26) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/delete words in the area /\" 0) 26)))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 6)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/ \" (str.indexof _arg_0 \"/delete\" 0)) 2)) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) \"/\" 0) 2) (str.len _arg_0))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\") (- (str.indexof _arg_0 \"/keep\") (str.indexof _arg_0 \"/delete\"))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\"))) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0)) (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))) (if (and (>= start 0) (> end start)) (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (str.len _arg_0))) _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 1 (str.indexof _arg_0 \"/ \" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \" /\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" /\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/delete\" 0) 8)) (str.indexof _arg_0 \"/delete\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ 8 (str.indexof _arg_0 \"/delete\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \" /\" (str.indexof _arg_0 \"/delete\" 0)) 2)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "",
        " /",
        "/delete"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "",
        "/",
        "/delete"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        8,
        "/",
        "/delete"
      ],
      [
        0,
        "",
        8,
        " /",
        "/delete"
      ],
      [
        0,
        "/keep",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "keep",
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete",
        "/keep"
      ],
      [
        0,
        "",
        5,
        "/keep",
        "/delete"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "/"
      ],
      [
        0,
        "",
        5,
        "/keep",
        "/delete"
      ],
      [
        0,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        5,
        "/keep",
        "/delete"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "/delete",
        "/keep"
      ],
      [
        0,
        8,
        "/delete",
        ""
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        " /"
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/keep",
        -1
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        "/keep",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/delete",
        "/keep"
      ],
      [
        0,
        1,
        "/",
        -1
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        "/",
        " "
      ],
      [
        0,
        1,
        "",
        "/",
        " /"
      ],
      [
        0,
        8,
        "/delete",
        ""
      ],
      [
        0,
        25,
        "/delete words in the area /",
        ""
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        26,
        "/delete words in the area /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        "",
        6,
        "/keep",
        "/delete"
      ],
      [
        0,
        "",
        2,
        "/ ",
        "/delete"
      ],
      [
        0,
        1,
        2,
        "/"
      ],
      [
        "",
        "/delete",
        "/keep"
      ],
      [
        "",
        "/",
        " "
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "",
        1,
        "/",
        " "
      ],
      [
        0,
        1,
        "",
        "/ ",
        "/delete"
      ],
      [
        "",
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        " /"
      ],
      [
        0,
        "",
        8,
        "/",
        "/delete"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        8,
        "/delete",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        2,
        " /",
        "/delete"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        "/"
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "keep",
      2,
      5,
      6,
      "/ ",
      8,
      "/",
      "/keep",
      " /",
      "/delete words in the area /",
      " ",
      25,
      26,
      "/delete",
      -1
    ]
  },
  "phone-7-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.substr name 6 3))\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 6 3)\n```",
      "```s-expression\n(str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 557.329,
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9
    ]
  },
  "stackoverflow6modified.sl": {
    "completions": [
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"= \" 0) 2))\n```",
      "```lisp\n(str.substr _arg_0 33 (- (str.len _arg_0) 33))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2)) (+ (str.indexof _arg_0 \"= \" 0) 2))) \"\")\n```",
      "```lisp\n(str.substr _arg_0 34 (- (str.len _arg_0) 34))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 33 (- (str.len _arg_0) 33))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 37 (- (str.len _arg_0) 37))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"=\" 0)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```s\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"=\" 0) 2))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 37 (- (str.len _arg_0) 37))\n```",
      "```scheme\n(str.substr _arg_0 33 (- (str.len _arg_0) 33))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```s-expression\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 38 (- (str.len _arg_0) 38))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) \" \") \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 32 (- (str.len _arg_0) 32))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 54 0) (- (str.len _arg_0) 54))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 41 (- (str.len _arg_0) 41))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 35 (- (str.len _arg_0) 35))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```s\n(str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 35 (- (str.len _arg_0) 35))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"=\" 0) 2))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```"
    ],
    "time_diff_ms": 535.659,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"= \" 0) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 33 (- (str.len _arg_0) 33))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2)) (+ (str.indexof _arg_0 \"= \" 0) 2))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 34 (- (str.len _arg_0) 34))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 33 (- (str.len _arg_0) 33))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 37 (- (str.len _arg_0) 37))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"=\" 0)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"=\" 0) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 37 (- (str.len _arg_0) 37))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 33 (- (str.len _arg_0) 33))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 38 (- (str.len _arg_0) 38))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) \" \") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 32 (- (str.len _arg_0) 32))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 54 0) (- (str.len _arg_0) 54))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 41 (- (str.len _arg_0) 41))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 35 (- (str.len _arg_0) 35))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"= \" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 35 (- (str.len _arg_0) 35))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"=\" 0) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))"
    ],
    "constants": [
      [
        0,
        2,
        "= "
      ],
      [
        0,
        "= ",
        100
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        33
      ],
      [
        0,
        "= ",
        100
      ],
      [
        0,
        "",
        2,
        " ",
        "= "
      ],
      [
        34
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        33
      ],
      [
        0,
        2,
        "= "
      ],
      [
        37
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "=",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "=",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "=",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        37
      ],
      [
        33
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        38
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "-",
        "="
      ],
      [
        0,
        "",
        2,
        "=",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "=",
        " "
      ],
      [
        32
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "-",
        "="
      ],
      [
        0,
        54
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        41
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "=",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "-",
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        35
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        "= ",
        100
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "-",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        35
      ],
      [
        0,
        2,
        "-",
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ]
    ],
    "all_constants": [
      0,
      33,
      2,
      "",
      100,
      34,
      37,
      "=",
      38,
      32,
      41,
      35,
      "-",
      54,
      " ",
      "= "
    ]
  },
  "strip-non-numeric-charactersmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\") (str.replace _arg_0 \"2\" \"\") (str.replace _arg_0 \"3\" \"\") (str.replace _arg_0 \"4\" \"\") (str.replace _arg_0 \"5\" \"\") (str.replace _arg_0 \"6\" \"\") (str.replace _arg_0 \"7\" \"\") (str.replace _arg_0 \"8\" \"\") (str.replace _arg_0 \"9\" \"\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \" \" \"\") \".\" \"\") \",\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\") \"A",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \" \" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \",\" \"\") \".\" \"\") \"/\" \"\") \"-\" \"\") \"(\" \"\") \")\" \"\") \"+\" \"\") \"%\" \"\") \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"a\" \"\") \"b\" \"\") \"c",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"0\") \"1\" \"1\") \"2\" \"2\") \"3\" \"3\") \"4\" \"4\") \"5\" \"5\") \"6\" \"6\") \"7\"",
      "```lisp\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "```s-expression\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\") \"A",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"0\") \"1\" \"1\") \"2\" \"2\") \"3\" \"3\") \"4\" \"4\") \"5\" \"5\") \"6\" \"6\") \"7\" \"7\") \"8\" \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str",
      "```lisp\n(str.replace_re_all _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \" \" \"\") \",\" \"\") \".\" \"\") \"-\" \"\") \"+\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")\n```",
      "```s\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace _arg_0 \"1\" \"\") \"0\" \"1\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t",
      "```s-expression\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"",
      "```s-expression\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\") \"A\" \"\") \"B\" \"\") \"C\" \"\") \"D\" \"\") \"E\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace_re_all _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\")))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\") \"A",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")\n```",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\") \"A",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"%\" \"\") \" \" \"\") \".\" \"\") \",\" \"\") \"-\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"",
      "```lisp\n(str.replace_re _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\") (str.replace _arg_0 \"2\" \"\") (str.replace _arg_0 \"3\" \"\") (str.replace _arg_0 \"4\" \"\") (str.replace _arg_0 \"5\" \"\") (str.replace _arg_0 \"6\" \"\") (str.replace _arg_0 \"7\" \"\") (str.replace _arg_0 \"8\" \"\") (str.replace _arg_0 \"9\" \"\"))\n```"
    ],
    "time_diff_ms": 316.629,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\") (str.replace _arg_0 \"2\" \"\") (str.replace _arg_0 \"3\" \"\") (str.replace _arg_0 \"4\" \"\") (str.replace _arg_0 \"5\" \"\") (str.replace _arg_0 \"6\" \"\") (str.replace _arg_0 \"7\" \"\") (str.replace _arg_0 \"8\" \"\") (str.replace _arg_0 \"9\" \"\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \" \" \"\") \".\" \"\") \",\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))))",
      null,
      "((define-fun f (_arg_0 String) String\\`\\`\\`lisp (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"0\") \"1\" \"1\") \"2\" \"2\") \"3\" \"3\") \"4\" \"4\") \"5\" \"5\") \"6\" \"6\") \"7\")",
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\")))",
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\"))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace_re_all _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \" \" \"\") \",\" \"\") \".\" \"\") \"-\" \"\") \"+\" \"\") \"(\" \"\") \")\" \"\")",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\")))",
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace _arg_0 \"1\" \"\") \"0\" \"1\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))",
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\")))",
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")))",
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re_all _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\"))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"%\" \"\") \" \" \"\") \".\" \"\") \",\" \"\") \"-\" \"\"))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\")))",
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") (str.replace _arg_0 \"1\" \"\") (str.replace _arg_0 \"2\" \"\") (str.replace _arg_0 \"3\" \"\") (str.replace _arg_0 \"4\" \"\") (str.replace _arg_0 \"5\" \"\") (str.replace _arg_0 \"6\" \"\") (str.replace _arg_0 \"7\" \"\") (str.replace _arg_0 \"8\" \"\") (str.replace _arg_0 \"9\" \"\"))))"
    ],
    "constants": [
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        ".",
        "9",
        ",",
        "2",
        "1",
        "0",
        "6",
        "5",
        " "
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      null,
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      null,
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      null,
      null,
      [
        "",
        "3",
        "2",
        "1",
        "0"
      ],
      null,
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "5"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "1",
        "0"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        ")",
        "+",
        "3",
        "-",
        "4",
        ".",
        "9",
        ",",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5",
        " ",
        "("
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0"
      ],
      [
        "",
        "j",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      null,
      [
        "",
        "1",
        "0"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      null,
      null,
      [
        "",
        "0"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "l",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "0"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "6",
        "5"
      ],
      null,
      null,
      null,
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h"
      ],
      null,
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      [
        "",
        "0"
      ],
      [
        "",
        "0"
      ],
      null,
      [
        "",
        "1",
        "0"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "l",
        "g",
        "m",
        "b",
        "a",
        "h",
        "i"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0"
      ],
      null,
      [
        "",
        "3",
        "2",
        "1",
        "0"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0",
        "5"
      ],
      null,
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "5"
      ],
      [
        "",
        " "
      ],
      null,
      [
        "",
        "j",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "l",
        "g",
        "m",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      [
        "",
        " "
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      null,
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "3",
        "4",
        "9",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5"
      ],
      null,
      [
        "",
        "8",
        "3",
        "%",
        "-",
        "4",
        ".",
        "9",
        ",",
        "2",
        "1",
        "6",
        "7",
        "0",
        "5",
        " "
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "j",
        "k",
        "e",
        "f",
        "c",
        "d",
        "l",
        "g",
        "m",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      null,
      null,
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      null,
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ]
    ],
    "all_constants": [
      "",
      "3",
      "-",
      ".",
      "l",
      "g",
      "[^0-9]",
      "5",
      "(",
      ")",
      "k",
      "c",
      "0",
      "6",
      "7",
      " ",
      "%",
      "f",
      "d",
      "m",
      "b",
      "i",
      "8",
      "j",
      "+",
      "4",
      "e",
      "9",
      ",",
      "2",
      "1",
      "a",
      "h"
    ]
  },
  "stackoverflow1modified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \" Inc\")\n       (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n       _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \" Inc\") \n       (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n       _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((res (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))\n    (str.replace res \", LLC\" \"\")))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```"
    ],
    "time_diff_ms": 256.245,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((res (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))) (str.replace res \", LLC\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))"
    ],
    "constants": [
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        "Inc",
        "Inc."
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc."
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        "Inc",
        "Inc."
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ]
    ],
    "all_constants": [
      "",
      0,
      ", LLC",
      "Inc.",
      "LLC",
      " LLC",
      " Inc",
      "Inc",
      " Inc."
    ]
  },
  "get-last-wordmodified.sl": {
    "completions": [
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n  (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"_\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```scheme\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" -1) 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \" -1) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```scheme\n(str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" -1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \" \") (- (str.len _arg_0) (str.lastindexof _arg_0 \" \")))\n```"
    ],
    "time_diff_ms": 220.311,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"_\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" -1) 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \" -1) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"/\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") \" \" -1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \" \") (- (str.len _arg_0) (str.lastindexof _arg_0 \" \")))))"
    ],
    "constants": [
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "_",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        "",
        0,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        1,
        "/",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        "/",
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        "/",
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "_",
      "/",
      " ",
      -1
    ]
  },
  "phone-5modified.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```s-expression\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 3)```",
      "```lisp\n(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n  (str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 3)\n)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```s-expression\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n  (str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```(str.substr name 1 3)```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n  (str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 632.445,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      " "
    ]
  },
  "phone-6-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```s-expression\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```"
    ],
    "time_diff_ms": 310.51,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4
    ]
  },
  "get-last-line-in-cellmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") (str.substr last-line 3 (str.len last-line)) _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"/n\")\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))))\n       _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (let ((lastLineStart (str.indexof _arg_0 \"/n\" (+ idx 2))))\n          (if (= lastLineStart -1)\n              (str.substr _arg_0 (+ idx 2) (str.len _arg_0))\n              (str.substr _arg_0 (+ lastLineStart 2) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 2) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (str.len _arg_0))\n```",
      "```scheme\n(if (str.contains _arg_0 \"/n\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))\n    _arg_0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") 1000)\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 3) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \"/n\") 3)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (let ((last-index (str.indexof _arg_0 \"/n\" -1)))\n    (if (= last-index -1)\n        _arg_0\n        (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (- (str.len _arg_0) (str.lastindexof _arg_0 \"/n\")))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) 1000000)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 2) (- (str.len _arg_0) (+ last-index 2))))))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \"/n\" -1)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 (+ idx 3) (str.len _arg_0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (let ((idx (str.lastindexof _arg_0 \"/n\")))\n    (if (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(if (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" -1) 3))) _arg_0)\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```scheme\n  (let ((idx (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))))\n    (ite (str.prefixof \"/n\" last-line) (str.substr last-line 2 (str.len last-line)) last-line))\n)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 2) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \"/n\") 2)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\" -1))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))\n```"
    ],
    "time_diff_ms": 357.358,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") (str.substr last-line 3 (str.len last-line)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (if (= idx -1) _arg_0 (let ((lastLineStart (str.indexof _arg_0 \"/n\" (+ idx 2)))) (if (= lastLineStart -1) (str.substr _arg_0 (+ idx 2) (str.len _arg_0)) (str.substr _arg_0 (+ lastLineStart 2) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") 1000)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 3) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \"/n\") 3)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((last-index (str.indexof _arg_0 \"/n\" -1))) (if (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" -1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (- (str.len _arg_0) (str.lastindexof _arg_0 \"/n\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) 1000000)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 2) (- (str.len _arg_0) (+ last-index 2)))))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" -1))) (if (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.lastindexof _arg_0 \"/n\"))) (if (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" -1) 3))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0)))) (ite (str.prefixof \"/n\" last-line) (str.substr last-line 2 (str.len last-line)) last-line))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 2) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \"/n\") 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\" -1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))))"
    ],
    "constants": [
      [
        "/n",
        3
      ],
      [
        "/n",
        -1
      ],
      [
        "/n",
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        2,
        -1
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        -1
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        1,
        3
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        2,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1000
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        3
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        -1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        2,
        -1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        -1
      ],
      [
        "/n"
      ],
      [
        "/n",
        0,
        1000000
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        2,
        -1
      ],
      [
        "/n",
        1,
        2,
        -1
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        2,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1,
        3,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        2
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        3,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        2
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        2
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      1000000,
      1000,
      "/n",
      -1
    ]
  },
  "phone-9-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace name \" \" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n)\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```"
    ],
    "time_diff_ms": 921.708,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \" \" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\"))))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      "+",
      "-",
      ".",
      " "
    ]
  },
  "38871714modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```(str.replace _arg_0 \"<\" \"\")```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n(str.replace _arg_0 \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n(str.replace _arg_0 \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 \"<\" \"\")\n  (str.replace _arg_0 \">\" \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" (str.replace _arg_0 \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```"
    ],
    "time_diff_ms": 427.203,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" (str.replace _arg_0 \">\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      ">",
      "<"
    ]
  },
  "phone-5-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 1)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 1)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 1) 1)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 1)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (- (str.indexof name \" \" 1) 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 1) 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 1)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (- (str.indexof name \" \" 1) 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 652.673,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 1) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 1) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 1) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 1) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "initials_smallmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0 1) 1) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (str.indexof name \" \" 0) 2) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (let ((first-initial (str.substr name 0 1))\n        (second-initial (str.substr name (+ 1 (str.indexof name \" \" 0)) 1)))\n    (str.++ first-initial \".\" second-initial \".\")))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (str.indexof name \" \" 0) 2) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```"
    ],
    "time_diff_ms": 563.212,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0 1) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (str.indexof name \" \" 0) 2) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (let ((first-initial (str.substr name 0 1)) (second-initial (str.substr name (+ 1 (str.indexof name \" \" 0)) 1))) (str.++ first-initial \".\" second-initial \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (str.indexof name \" \" 0) 2) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 0 1) 0 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        2,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        2,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ".",
      " "
    ]
  },
  "get-domain-name-from-urlmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))\n    \"/\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\")\n  _arg_0)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1)))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\") \n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 9)))\n    (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) (+ slash-pos 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0 0 pos)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0) 2)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0))))\n    (str.substr _arg_0 0 (+ idx 1))))\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") \n    (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\") \n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))))\n    (str.substr _arg_0 0 slash-pos)))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 9)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1)))))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (+ idx 1)))))\n```",
      "```scheme\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 8)))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) (+ slash-pos 1)))))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1))) \"/\")\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) _arg_0)\n```",
      "```lisp\n(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((prefix (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))))\n    (str.++ prefix \"/\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0))))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 0 (ite (= (str.at _arg_0 idx) \"/\") (+ idx 1) idx)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0))))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (+ idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\"))\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= slash-pos -1)\n         _arg_0\n         (str.substr _arg_0 0 (+ slash-pos 1)))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))\n     _arg_0)\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\")\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 idx)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ slash-pos 1))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n  _arg_0)\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))))\n    (str.substr _arg_0 0 slash-pos)))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (+ pos 1))))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\"))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \n    \"/\"))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))))\n    (str.substr _arg_0 0 end)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ slash-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))))\n```"
    ],
    "time_diff_ms": 476.203,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 9))) (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) (+ slash-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 0 pos))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0) 2)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))) (str.substr _arg_0 0 end))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx)))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0)))) (str.substr _arg_0 0 (+ idx 1)))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8)))) (str.substr _arg_0 0 slash-pos))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 9))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1))))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (+ idx 1))))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 8)))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) (+ slash-pos 1))))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1))) \"/\")))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((prefix (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))) (str.++ prefix \"/\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 end))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0)))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 (+ end 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (ite (= (str.at _arg_0 idx) \"/\") (+ idx 1) idx))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0)))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8)))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (+ idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 end))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 (+ slash-pos 1))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 idx))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ slash-pos 1)))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8)))) (str.substr _arg_0 0 slash-pos))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 0 end))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (+ pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= idx -1) (str.len _arg_0) idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))) (str.substr _arg_0 0 end))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ slash-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8)))))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        1,
        9,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        1,
        "/",
        0
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        1,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        1,
        9,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        -1,
        "/",
        "//"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        1,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        8,
        0,
        "/",
        1
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      8,
      9,
      "/",
      "//",
      -1
    ]
  },
  "get-middle-name-from-full-namemodified.sl": {
    "completions": [
      "```scheme\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ start 1))))\n    (ite (or (= start -1) (= end -1)) \"\"\n      (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (if (str.contains _arg_0 \" \")\n      (let ((first-space (str.indexof _arg_0 \" \" 0))\n            (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n        (if (= last-space -1)\n            \"\"\n            (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))\n      \"\")\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 0)\n      \"\"\n      (if (= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            \"\"\n            (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (ite (= start -1)\n           \"\"\n           (ite (= end -1)\n                \"\"\n                (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((first-space (str.indexof s \" \" 0)))\n    (if (= first-space -1) \"\"\n      (let ((rest (str.substr s (+ first-space 1) (- (str.len s) (+ first-space 1))))\n            (second-space (str.indexof rest \" \" 0)))\n        (if (= second-space -1) \"\"\n          (str.substr rest 0 second-space))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (< start 0) \"\"\n      (ite (< end 0) \"\"\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.++ (str.at _arg_0 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (str.at _arg_0 0)) 2)\n        \"\"\n        (str.++ (str.at parts 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (str.at parts 1) 0)) (- (str.indexof _arg_0 (str.at parts 2) 0) (+ 1 (str.indexof _arg_0 (str.at parts 1) 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            \"\"\n            (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) \"\"\n              (str.substr _arg_0 (+ 1 start) (- end start 1))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (and (>= start 0) (>= end 0))\n        (str.substr _arg_0 (+ start 1) (- end start 1))\n        \"\")))\n```",
      "```scheme\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end (+ 1 start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (ite (= start -1) \"\"\n        (ite (= end -1) \"\"\n          (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            \"\"\n            (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.trim (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.trim (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0)))\n    (let ((space2 (str.indexof _arg_0 \" \" (+ space1 1))))\n      (if (= space2 -1)\n          \"\"\n          (let ((space3 (str.indexof _arg_0 \" \" (+ space2 1))))\n            (if (= space3 -1)\n                (str.substr _arg_0 (+ space1 1) (- (str.len _arg_0) (+ space1 1)))\n                (str.substr _arg_0 (+ space1 1) (- space3 (+ space1 1)))))))))\n```",
      "```lisp\n  (if (str.contains _arg_0 \" \")\n    (let ((first-space (str.indexof _arg_0 \" \" 0))\n          (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n      (if (= last-space -1) \"\"\n          (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))\n    \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\") (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (>= (str.len _arg_0) 3)\n        (str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))) \" \")\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\" \n      (ite (= end -1) \"\" \n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= space1 -1) (= space2 -1))\n        \"\"\n        (str.substr _arg_0 (+ space1 1) (- space2 space1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (if (= (str.len parts) 2)\n            \"\"\n            (str.++ (nth parts 1) \" \" (nth parts 2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (if (= end -1)\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= space1 -1) (= space2 -1))\n        \"\"\n        (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))))\n    (ite (or (= start -1) (= end -1)) \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((sp (str.indexof s \" \" 0)))\n    (ite (= sp -1) \"\"\n      (let ((ep (str.indexof s \" \" (+ sp 1))))\n        (ite (= ep -1) \"\"\n          (str.substr s (+ sp 1) (- ep sp 1)))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\" \n      (ite (= end -1) \"\" \n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (if (<= (str.len words) 2)\n        \"\"\n        (str.++ (str.at words 1) (if (<= (str.len words) 3) \"\" (str.++ \" \" (str.at words 2)))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (nth 1 parts) (if (= (str.len parts) 3) \"\" (str.++ \" \" (nth 2 parts)))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            \"\"\n            (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1)) \"\"\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (and (>= start 0) (> end start))\n      (str.substr _arg_0 (+ start 1) (- end start 1))\n      \"\")))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(if (<= (str.count _arg_0 \" \") 1) \"\" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (and (>= start 0) (> end start))\n        (str.substr _arg_0 (+ start 1) (- end start 1))\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (if (<= (str.len words) 2)\n        \"\"\n        (str.++ (nth words 1) \" \" (nth words 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= space2 -1)\n        \"\"\n        (str.substr _arg_0 (+ space1 1) (- space2 space1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end (+ 1 start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (< (str.len _arg_0) 2)\n        \"\"\n        (str.++ (str.++ (str.at _arg_0 1) \" \") (str.at _arg_0 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= space1 -1) (= space2 -1))\n        \"\"\n        (str.substr _arg_0 (+ space1 1) (- space2 (+ space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            \"\"\n            (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```"
    ],
    "time_diff_ms": 56.756,
    "solutions": [
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ start 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \" \") (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= last-space -1) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      null,
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((s String)) String (let ((first-space (str.indexof s \" \" 0))) (if (= first-space -1) \"\" (let ((rest (str.substr s (+ first-space 1) (- (str.len s) (+ first-space 1)))) (second-space (str.indexof rest \" \" 0))) (if (= second-space -1) \"\" (str.substr rest 0 second-space)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (< start 0) \"\" (ite (< end 0) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.++ (str.at _arg_0 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (str.at _arg_0 0)) 2) \"\" (str.++ (str.at parts 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (str.at parts 1) 0)) (- (str.indexof _arg_0 (str.at parts 2) 0) (+ 1 (str.indexof _arg_0 (str.at parts 1) 0)))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (and (>= start 0) (>= end 0)) (str.substr _arg_0 (+ start 1) (- end start 1)) \"\"))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.trim (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.trim (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0))) (let ((space2 (str.indexof _arg_0 \" \" (+ space1 1)))) (if (= space2 -1) \"\" (let ((space3 (str.indexof _arg_0 \" \" (+ space2 1)))) (if (= space3 -1) (str.substr _arg_0 (+ space1 1) (- (str.len _arg_0) (+ space1 1))) (str.substr _arg_0 (+ space1 1) (- space3 (+ space1 1))))))))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \" \") (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= last-space -1) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\") (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (>= (str.len _arg_0) 3) (str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))) \" \") \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= space1 -1) (= space2 -1)) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (if (= (str.len parts) 2) \"\" (str.++ (nth parts 1) \" \" (nth parts 2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= space1 -1) (= space2 -1)) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((s String)) String (let ((sp (str.indexof s \" \" 0))) (ite (= sp -1) \"\" (let ((ep (str.indexof s \" \" (+ sp 1)))) (ite (= ep -1) \"\" (str.substr s (+ sp 1) (- ep sp 1))))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ 1 start) (- end (+ 1 start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (if (<= (str.len words) 2) \"\" (str.++ (str.at words 1) (if (<= (str.len words) 3) \"\" (str.++ \" \" (str.at words 2))))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (nth 1 parts) (if (= (str.len parts) 3) \"\" (str.++ \" \" (nth 2 parts))))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (and (>= start 0) (> end start)) (str.substr _arg_0 (+ start 1) (- end start 1)) \"\"))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (if (<= (str.count _arg_0 \" \") 1) \"\" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (and (>= start 0) (> end start)) (str.substr _arg_0 (+ start 1) (- end start 1)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (if (<= (str.len words) 2) \"\" (str.++ (nth words 1) \" \" (nth words 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= space2 -1) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (< (str.len _arg_0) 2) \"\" (str.++ (str.++ (str.at _arg_0 1) \" \") (str.at _arg_0 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= space1 -1) (= space2 -1)) \"\" (str.substr _arg_0 (+ space1 1) (- space2 (+ space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      null,
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        0,
        " "
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        "",
        1,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      3,
      " ",
      -1
    ]
  },
  "35744094modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.replace _arg_0 \"https=//www.\" \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(ite (str.suffixof \"/\" _arg_0)\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) (+ (str.indexof _arg_0 \"//\" 0) 2)))\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```s-expression\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```lisp\n(str.replace _arg_0 \"https=//www.microsoft.com/\" \"microsoft\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.replace _arg_0 \"https=//www.\" \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.replace _arg_0 \"https=//www.\" \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 8) 2))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"//\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 8 (str.indexof _arg_0 \"/\" 8))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```",
      "```lisp\n(if (str.contains _arg_0 \"mac\") \"mac\" \n  (if (str.contains _arg_0 \"windows\") \"windows\" \n    (if (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```"
    ],
    "time_diff_ms": 348.359,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//www.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"/\" _arg_0) (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) (+ (str.indexof _arg_0 \"//\" 0) 2))) (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//www.microsoft.com/\" \"microsoft\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//www.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//www.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 8) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"//\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"/\" 8)) (- (str.len _arg_0) (+ 8 (str.indexof _arg_0 \"/\" 8))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"mac\") \"mac\" (if (str.contains _arg_0 \"windows\") \"windows\" (if (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))"
    ],
    "constants": [
      [
        8,
        1,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        "https=//www.",
        ""
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "https=//www.microsoft.com/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "https=//www.",
        ""
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "https=//www.",
        ""
      ],
      [
        8,
        1,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        0,
        1,
        "//"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        8,
        "/",
        "//"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      "https=//www.microsoft.com/",
      8,
      "microsoft",
      "windows",
      "/",
      "mac",
      "https=//www.",
      "//"
    ]
  },
  "extract-text-between-parenthesesmodified.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.to.int\n    (str.substr _arg_0\n      (+ 1 (str.indexof _arg_0 \"<\" 0))\n      (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((s String)) Int\n  (str.to.int \n    (str.substr s \n      (+ 1 (str.indexof s \"<\" 0)) \n      (- (str.indexof s \">\" 0) \n         (+ 1 (str.indexof s \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int\n    (str.substr _arg_0\n      (+ 1 (str.indexof _arg_0 \"<\" 0))\n      (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```scheme\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```"
    ],
    "time_diff_ms": 356.749,
    "solutions": [
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((s String)) Int (str.to.int (str.substr s (+ 1 (str.indexof s \"<\" 0)) (- (str.indexof s \">\" 0) (+ 1 (str.indexof s \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))"
    ],
    "constants": [
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ]
    ],
    "all_constants": [
      0,
      1,
      ">",
      "<"
    ]
  },
  "phone-5-longmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```scheme\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 1))```"
    ],
    "time_diff_ms": 751.781,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "phone-9-long-repeatmodified.sl": {
    "completions": [
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\") \",\" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+ \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) (str.substr name 3 1) \".\") (str.substr name 5 1) \".\") (str.substr name 9 1) \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) (str.substr name 8 3) (str.replace (str.substr name 8 3) \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \" \" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \" \" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 2) (str.substr name 4 3) \".\") (str.substr name 8 3) \".\") (str.substr name 12 3) \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 2) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```"
    ],
    "time_diff_ms": 310.847,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\") \",\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+ \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) (str.substr name 3 1) \".\") (str.substr name 5 1) \".\") (str.substr name 9 1) \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) (str.substr name 8 3) (str.replace (str.substr name 8 3) \"-\" \".\"))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) (str.replace (str.substr name 4 3) \"-\" \".\")) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\"))))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \" \" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \" \" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) (str.substr name 4 3) \".\") (str.substr name 8 3) \".\") (str.substr name 12 3) \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \",\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 2) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 2) \"-\" \".\") (str.substr name 4 3) \"-\" \".\") (str.substr name 8 3) \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))"
    ],
    "constants": [
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        ",",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        3,
        5,
        9,
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "-",
        "."
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "-",
        "."
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        "-",
        "."
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        "-",
        "."
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        2,
        3,
        4,
        "-",
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      null,
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        ",",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        12,
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        "-",
        "."
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "-",
        "."
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "+",
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      2,
      3,
      4,
      5,
      "+",
      9,
      8,
      "-",
      ".",
      12,
      ",",
      "+ ",
      " "
    ]
  },
  "exceljet1modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) 4294967295)\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) (+ (str.len _arg_1) (- (str.indexof _arg_1 \".\" 0) (str.indexof _arg_1 \"_\" 0)))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```s-expression\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```scheme\n(str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) 100)\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```"
    ],
    "time_diff_ms": 29.923,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) 4294967295)))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) (+ (str.len _arg_1) (- (str.indexof _arg_1 \".\" 0) (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"@\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (str.indexof _arg_1 \"_\" 0) 100)))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\") 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))"
    ],
    "constants": [
      [
        0,
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        "_",
        4294967295
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "@"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "@"
      ],
      [
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        100,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      100,
      "_",
      ".",
      "@",
      4294967295
    ]
  },
  "phone-7-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 289.417,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9
    ]
  },
  "extract-word-containing-specific-textmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".com\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- start (- (str.indexof _arg_0 \" \" (- start 1)) 1)))\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- end (- (str.indexof _arg_0 \" \" (- start 1)) 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".com\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (+ start 4)))\n        (let ((begin (str.rindexof (str.substr _arg_0 0 end) \" \" 0)))\n          (str.substr _arg_0 (+ begin 1) (- end begin 1)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n              (str.indexof _arg_0 \"@\" 0) \n              (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \".com\")\n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \".com\" 0) (str.indexof _arg_0 \" \" 0) -4))\n     \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" \"\")\n```",
      "```lisp\n  (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)) (str.indexof _arg_0 \"@\" 0))) \"@\" \"_\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" (- (str.indexof _arg_0 \"@\" 0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"@\") \n     (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n     \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \".com\" 0) 11)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= end -1)\n        (str.substr _arg_0 start (str.len _arg_0))\n        (str.substr _arg_0 start (- end start)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```scheme\n  (str.replace _arg_0 \" \" \"%20\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".com\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) \n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) \n       (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \".com\" 0) 11)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)) (str.indexof _arg_0 \".\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```"
    ],
    "time_diff_ms": 647.912,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".com\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- start (- (str.indexof _arg_0 \" \" (- start 1)) 1))) (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- end (- (str.indexof _arg_0 \" \" (- start 1)) 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".com\" 0))) (if (= start -1) \"\" (let ((end (+ start 4))) (let ((begin (str.rindexof (str.substr _arg_0 0 end) \" \" 0))) (str.substr _arg_0 (+ begin 1) (- end begin 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".com\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \".com\" 0) (str.indexof _arg_0 \" \" 0) -4)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)) (str.indexof _arg_0 \"@\" 0))) \"@\" \"_\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" (- (str.indexof _arg_0 \"@\" 0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"@\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \".com\" 0) 11)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"%20\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".com\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \".com\" 0) 11)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)) (str.indexof _arg_0 \".\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))"
    ],
    "constants": [
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        ".com",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        1,
        4,
        ".com",
        " ",
        -1
      ],
      [
        0,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "",
        ".com",
        " ",
        -4
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "",
        "@",
        " "
      ],
      [
        0,
        "@",
        "_",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        "@"
      ],
      [
        0,
        1,
        "",
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        ".com",
        0,
        11
      ],
      [
        0,
        "@"
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "."
      ],
      [
        0,
        "@",
        " "
      ],
      [
        "%20",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        ".com",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        0,
        "@"
      ],
      [
        ".com",
        0,
        11
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        "@",
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        "@",
        " "
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "%20",
      4,
      "_",
      11,
      ".",
      ".com",
      "@",
      " ",
      -4,
      -1
    ]
  },
  "stackoverflow7modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```s-expression\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```s-expression\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```"
    ],
    "time_diff_ms": 529.3,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      ""
    ]
  },
  "phone-6-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 385.016,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4
    ]
  },
  "43120683modified.sl": {
    "completions": [
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\")\n(ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\")\n(ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\")\n(ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```s\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n(ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") \n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") \n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") \n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n     (str.replace _arg_0 \"1\" \" apple\")\n     (ite (str.contains _arg_0 \"2\")\n          (str.replace _arg_0 \"2\" \" bananas\")\n          (ite (str.contains _arg_0 \"3\")\n               (str.replace _arg_0 \"3\" \" strawberries\")\n               (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n     (str.replace _arg_0 \"1\" \" apple\")\n     (ite (str.contains _arg_0 \"2\")\n          (str.replace _arg_0 \"2\" \" bananas\")\n          (ite (str.contains _arg_0 \"3\")\n               (str.replace _arg_0 \"3\" \" strawberries\")\n               (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n    (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n      (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") \n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") \n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") \n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\")\n    (str.replace _arg_0 \"1\" \" apple\")\n    (ite (str.contains _arg_0 \"2\")\n        (str.replace _arg_0 \"2\" \" bananas\")\n        (ite (str.contains _arg_0 \"3\")\n            (str.replace _arg_0 \"3\" \" strawberries\")\n            (str.replace _arg_0 \"4\" \" oranges\"))))\n```"
    ],
    "time_diff_ms": 221.052,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\") (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\") (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\") (ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))"
    ],
    "constants": [
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " bananas",
        "2",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        ", 4",
        ", 2",
        " apple",
        ", 3",
        " bananas",
        ", 1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ]
    ],
    "all_constants": [
      "",
      ", 4",
      "one apple",
      "two bananas",
      "four oranges",
      "3",
      "4",
      " apple",
      "three strawberries",
      ", 2",
      " bananas",
      "2",
      ", 3",
      ", 1",
      "1",
      " oranges",
      " strawberries"
    ]
  },
  "split-text-string-at-specific-charactermodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"_\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```scheme\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((str String) (n Int)) String\n  (ite (= n 1)\n       (str.substr str 0 (str.indexof str \"_\" 0))\n       (str.substr str (+ (str.indexof str \"_\" 0) 1) (str.len str))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```"
    ],
    "time_diff_ms": 788.788,
    "solutions": [
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0)))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"_\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((str String) (n Int)) String (ite (= n 1) (str.substr str 0 (str.indexof str \"_\" 0)) (str.substr str (+ (str.indexof str \"_\" 0) 1) (str.len str)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0)))))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ]
  },
  "phone-7-longmodified.sl": {
    "completions": [
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 10 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 10 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 9 3)\n```",
      "```scheme\n  (str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 10 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 9 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 9 3)\n```",
      "```s-expression\n(str.substr name 7 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 6 3)\n```",
      "```lisp\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 10 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 7 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n  (str.substr name 9 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```lisp\n  (str.substr name 10 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 5 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 7 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n  (str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 289.448,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 10 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 10 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 10 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 10 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 10 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        10,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        10,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        10,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        10,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        10,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9,
      10
    ]
  },
  "phone-6modified.sl": {
    "completions": [
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 260.882,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ]
  },
  "phone-10-longmodified.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 612.179,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        14,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      " (",
      3,
      4,
      ")",
      7,
      8,
      10,
      11,
      "-",
      12,
      14,
      15,
      ") ",
      "("
    ]
  },
  "stackoverflow2modified.sl": {
    "completions": [
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0)))\n```",
      "```lisp\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (= space -1)\n         _arg_0\n         (str.substr _arg_0 0 space)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (= space -1)\n      _arg_0\n      (str.substr _arg_0 0 space)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.replace _arg_0 \"japan\" \"\")\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```"
    ],
    "time_diff_ms": 0.472,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))))",
      "((define-fun f (_arg_0 String) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (= space -1) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (= space -1) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        "j"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "j"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "j"
      ],
      [
        0,
        -1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        -1,
        " "
      ],
      [
        0,
        "j"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        -1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      "j",
      "",
      "japan",
      " ",
      " japan",
      -1
    ]
  },
  "stackoverflow9modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(ite (>= (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 0)\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n  \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") \n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n  _arg_0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))\n```\n",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") \n     (let ((first-space (str.indexof _arg_0 \" \" 0)))\n          (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n               (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n     _arg_0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```scheme\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```",
      "```scheme\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) -1)\n```",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```scheme\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))\n```",
      "```lisp\n  (let ((second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) -1)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) second-space -1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") \n     (let ((first-space (str.indexof _arg_0 \" \" 0)))\n          (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n               (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n     \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))\n```",
      "```lisp\n(ite (>= (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 0)\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0))\n  \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))\n```"
    ],
    "time_diff_ms": 588.876,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (>= (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 0) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) idx 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) -1)))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (let ((second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) -1)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) second-space -1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f (_arg_0 String) String (ite (>= (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 0) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      -1
    ]
  },
  "strip-html-from-text-or-numbersmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```s\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```"
    ],
    "time_diff_ms": 525.396,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))"
    ],
    "constants": [
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ]
    ],
    "all_constants": [
      "",
      "</b>",
      "<b>"
    ]
  },
  "phone-10modified.sl": {
    "completions": [
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 793.979,
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        5,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        9,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        14,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      5,
      ")",
      7,
      8,
      9,
      10,
      11,
      "-",
      13,
      14,
      15,
      12,
      ") ",
      "("
    ]
  },
  "phone-9-longmodified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\") \" \" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (str.len name)) \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```"
    ],
    "time_diff_ms": 825.862,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\") \" \" \".\")))",
      null,
      null,
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        3,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        3,
        "-",
        ".",
        " "
      ],
      null,
      null,
      null,
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "-",
        "."
      ],
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      3,
      "+",
      "-",
      ".",
      " "
    ]
  },
  "exceljet4modified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 \"https://\" \"\"))\n        (url (str.replace url \"http://\" \"\"))\n        (url (str.replace url \"ftp://\" \"\"))\n        (url (str.replace url \"sftp://\" \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (url (str.replace url \"/\" \"\")))\n    url)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```"
    ],
    "time_diff_ms": 454.525,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 \"https://\" \"\")) (url (str.replace url \"http://\" \"\")) (url (str.replace url \"ftp://\" \"\")) (url (str.replace url \"sftp://\" \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (url (str.replace url \"/\" \"\"))) url)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))"
    ],
    "constants": [
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "http://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "http://",
        0,
        1,
        "/",
        "sftp://",
        "ftp://",
        "https://"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        0,
        "",
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        0,
        "",
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        0,
        "",
        "/",
        "//"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ]
    ],
    "all_constants": [
      "",
      "http://",
      0,
      1,
      2,
      "ftp=//",
      "/",
      "https://",
      "ftp://",
      "sftp://",
      "//",
      "https=//"
    ]
  },
  "33619752modified.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n    (ite (str.contains _arg_0 \" Enterprises\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n        (ite (str.contains _arg_0 \" Company\")\n            (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n            (ite (str.contains _arg_0 \" Corporation\")\n                (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Company\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n        (ite (str.suffixof \" Corporation\" _arg_0)\n          (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n          _arg_0)))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0)))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0)))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0)))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\")\n(ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\")\n(ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\")\n(ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\")\n(ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\")\n(ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\")\n(ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\")\n(ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\")\n(ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\")\n(ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n     (ite (str.suffixof \" Enterprises\" _arg_0)\n          (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n          (ite (str.suffixof \" Company\" _arg_0)\n               (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n               (ite (str.suffixof \" Corporation\" _arg_0)\n                    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                    _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") \n(ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") \n(ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") \n(ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") \n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\")\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\")\n(ite (str.suffixof \" Company\" _arg_0) (str.replace _arg_0 \" Company\" \"\")\n(ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\")\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n    (ite (str.contains _arg_0 \" Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n        (ite (str.contains _arg_0 \" Enterprises\")\n            (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n            (ite (str.contains _arg_0 \" Company\")\n                (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n     (ite (str.contains _arg_0 \" Enterprises\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n          (ite (str.contains _arg_0 \" Company\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n               (ite (str.contains _arg_0 \" Corporation\")\n                    (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n                    _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Enterprises\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Inc\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n     (ite (str.contains _arg_0 \"Company\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n          (ite (str.contains _arg_0 \"Corporation\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n               (ite (str.contains _arg_0 \"Enterprises\")\n                    (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n                    _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n     (ite (str.contains _arg_0 \" Enterprises\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n          (ite (str.contains _arg_0 \" Company\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n               (ite (str.contains _arg_0 \" Corporation\")\n                    (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n                    _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\")\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n  (ite (str.contains _arg_0 \" Enterprises\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n    (ite (str.contains _arg_0 \" Company\")\n      (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n      (ite (str.contains _arg_0 \" Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n        _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n    (ite (str.contains _arg_0 \" Enterprises\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n        (ite (str.contains _arg_0 \" Company\")\n            (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n            (ite (str.contains _arg_0 \" Corporation\")\n                (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n     (ite (str.contains _arg_0 \" Enterprises\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n          (ite (str.contains _arg_0 \" Company\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n               (ite (str.contains _arg_0 \" Corporation\")\n                    (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n                    _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n    (ite (str.contains _arg_0 \" Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n        (ite (str.contains _arg_0 \" Enterprises\")\n            (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n            (ite (str.contains _arg_0 \" Company\")\n                (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n     (ite (str.suffixof \" Enterprises\" _arg_0)\n          (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n          (ite (str.suffixof \" Company\" _arg_0)\n               (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n               (ite (str.suffixof \" Corporation\" _arg_0)\n                    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                    _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n  (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n    (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n      (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n        _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\")\n    (str.replace _arg_0 \" Inc\" \"\")\n    (ite (str.contains _arg_0 \" Corporation\")\n        (str.replace _arg_0 \" Corporation\" \"\")\n        (ite (str.contains _arg_0 \" Company\")\n            (str.replace _arg_0 \" Company\" \"\")\n            (ite (str.contains _arg_0 \" Enterprises\")\n                (str.replace _arg_0 \" Enterprises\" \"\")\n                _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Enterprises\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Company\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n(ite (str.suffixof \" Corporation\" _arg_0)\n     (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n     _arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Company\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n(ite (str.suffixof \" Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```scheme\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1))\n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n(ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n(ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n(ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \" Corporation\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n  (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n      (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \" Inc\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))\n     (ite (str.contains _arg_0 \" Corporation\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0))\n          (ite (str.contains _arg_0 \" Company\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0))\n               (ite (str.contains _arg_0 \" Enterprises\")\n                    (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0))\n                    _arg_0))))\n```"
    ],
    "time_diff_ms": 627.803,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") (ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") (ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") (ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") (ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.suffixof \" Company\" _arg_0) (str.replace _arg_0 \" Company\" \"\") (ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Corporation\") (str.replace _arg_0 \" Corporation\" \"\") (ite (str.contains _arg_0 \" Company\") (str.replace _arg_0 \" Company\" \"\") (ite (str.contains _arg_0 \" Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Corporation\" 0) 1)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Company\" 0) 1)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Enterprises\" 0) 1)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)) (ite (str.contains _arg_0 \" Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Corporation\" 0)) (ite (str.contains _arg_0 \" Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Company\" 0)) (ite (str.contains _arg_0 \" Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" Enterprises\" 0)) _arg_0))))))"
    ],
    "constants": [
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        "Corporation",
        " Company",
        " Corporation",
        " Enterprises",
        "Company",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Corporation",
        " Company",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        "Corporation",
        " Company",
        " Corporation",
        " Enterprises",
        "Company",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        "Corporation",
        " Company",
        " Corporation",
        " Enterprises",
        "Company",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        "Corporation",
        " Company",
        " Corporation",
        " Enterprises",
        "Company",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      4,
      "Corporation",
      8,
      " Company",
      " Corporation",
      12,
      " Enterprises",
      "Company",
      " Inc",
      " ",
      "Inc",
      "Enterprises"
    ]
  },
  "phone-6-longmodified.sl": {
    "completions": [
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n  (str.substr name 4 3)\n```",
      "```scheme\n  (str.substr name 4 3)\n)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n  (str.substr name 4 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```s-expression\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 426.029,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4
    ]
  },
  "get-last-name-from-name-with-commamodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) (+ comma-pos 1))) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```lisp\n  (let ((commaPos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ commaPos 1) (- (str.len _arg_0) commaPos 1)) \",\" (str.substr _arg_0 0 commaPos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ \n      (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \n      \",\" \n      (str.substr _arg_0 0 comma-pos))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((commaPos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ commaPos 1) (- (str.len _arg_0) commaPos 1)) \",\" (str.substr _arg_0 0 commaPos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```"
    ],
    "time_diff_ms": 309.071,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) (+ comma-pos 1))) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (let ((commaPos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ commaPos 1) (- (str.len _arg_0) commaPos 1)) \",\" (str.substr _arg_0 0 commaPos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((commaPos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ commaPos 1) (- (str.len _arg_0) commaPos 1)) \",\" (str.substr _arg_0 0 commaPos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ]
    ],
    "all_constants": [
      0,
      ",",
      1
    ]
  },
  "initials-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```scheme\n(define-fun f (name String) String\n  (let ((first (str.substr name 0 1))\n        (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1)))\n    (str.++ first \".\" last \".\")))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```s-expression\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```"
    ],
    "time_diff_ms": 432.522,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (let ((first (str.substr name 0 1)) (last (str.substr name (+ 1 (str.indexof name \" \" 0)) 1))) (str.++ first \".\" last \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      " "
    ]
  },
  "exceljet3modified.sl": {
    "completions": [
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) -1))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n```",
      "```lisp\n(str.replace _arg_0 \" \" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0)\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) 1))\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" \" \"\")\n```"
    ],
    "time_diff_ms": 911.109,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) -1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (+ (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))"
    ],
    "constants": [
      [
        0,
        "",
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        1,
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        "",
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        "",
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "=",
      " ",
      -1
    ]
  },
  "phone-10_shortmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 8)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 434.831,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 8))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        5,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        5,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        8,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      " (",
      3,
      4,
      5,
      ")",
      7,
      8,
      9,
      10,
      11,
      "-",
      13,
      12,
      15,
      ") ",
      "("
    ]
  },
  "get-first-name-from-name-with-commamodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\")\n       (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (str.indexof s \",\" 0) 1)))\n    (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.replace (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)) \" \" \"\")\n       (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)))\n       (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))\n       (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \" \" \"\")\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n      (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (if (= n 1)\n    (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 1 (str.indexof s \",\" 0))))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))\n      (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n      (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n     (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n     (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n    (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 2 (str.indexof s \",\" 0))))\n       (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\")\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n      (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 1 (str.indexof s \",\" 0))))\n       (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```"
    ],
    "time_diff_ms": 948.971,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" \"\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (str.indexof s \",\" 0) 1))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.replace (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)) \" \" \"\") (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \" \" \"\") (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (if (= n 1) (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 1 (str.indexof s \",\" 0)))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 2 (str.indexof s \",\" 0)))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\") (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\") (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s (+ 1 (str.indexof s \",\" 0)) (- (str.len s) (+ 1 (str.indexof s \",\" 0)))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ",",
        " "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ",",
        " "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ",",
        " "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      ",",
      " "
    ]
  },
  "stackoverflow10modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```s-expression\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```"
    ],
    "time_diff_ms": 674.261,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))"
    ],
    "constants": [
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ]
    ],
    "all_constants": [
      4
    ]
  },
  "25239569modified.sl": {
    "completions": [
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```s\n(ite (str.contains _arg_0 \"_BRD_\") (str.replace _arg_0 \"_BRD_\" \"_Branding_\")\n(ite (str.contains _arg_0 \"_LDS_\") (str.replace _arg_0 \"_LDS_\" \"_Leads_\")\n(ite (str.contains _arg_0 \"_DRS_\") (str.replace _arg_0 \"_DRS_\" \"_Direct Response_\") _arg_0)))\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```s\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```scheme\n(str.replace _arg_0 \"_BRD\" \"_Branding\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n  (str.replace _arg_0 \"_BRD_\" \"_Branding_\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```scheme\n(ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\")\n(ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\")\n(ite (str.contains _arg_0 \"_LDS\") (str.replace _arg_0 \"_LDS\" \"_Leads\") _arg_0)))\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\")\n)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"_BRD\" \"_Branding\") \n      \"_DRS\" \"_Direct Response\") \n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace _arg_0 \"_BRD\" \"_Branding\")\n    \"_LDS\" \"_Leads\"\n  )\n)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"_BRD\" \"_Branding\") \n    \"_DRS\" \"_Direct Response\") \n  \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")\n)\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")\n  (str.replace (str.replace _arg_0 \"_DRS\" \"_Direct Response\") \"_BRD\" \"_Branding\")\n)\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"_BRD\" \"_Branding\") \n      \"_DRS\" \"_Direct Response\") \n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace _arg_0 \"_BRD\" \"_Branding\")\n    \"_LDS\" \"_Leads\"\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD_\" \"_Branding_\") \"_LDS_\" \"_Leads_\") \"_DRS_\" \"_Direct Response_\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"LDS\" \"Leads\") \n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace _arg_0 \"_BRD\" \"_Branding\") \n    \"_LDS\" \"_Leads\")\n  (str.replace \n    (str.replace _arg_0 \"_DRS\" \"_Direct Response\") \n    \"_LDS\" \"_Leads\"))\n```"
    ],
    "time_diff_ms": 913.444,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_BRD_\") (str.replace _arg_0 \"_BRD_\" \"_Branding_\") (ite (str.contains _arg_0 \"_LDS_\") (str.replace _arg_0 \"_LDS_\" \"_Leads_\") (ite (str.contains _arg_0 \"_DRS_\") (str.replace _arg_0 \"_DRS_\" \"_Direct Response_\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"_BRD\" \"_Branding\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"_BRD_\" \"_Branding_\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (ite (str.contains _arg_0 \"_LDS\") (str.replace _arg_0 \"_LDS\" \"_Leads\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") (str.replace (str.replace _arg_0 \"_DRS\" \"_Direct Response\") \"_BRD\" \"_Branding\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD_\" \"_Branding_\") \"_LDS_\" \"_Leads_\") \"_DRS_\" \"_Direct Response_\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") (str.replace (str.replace _arg_0 \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))"
    ],
    "constants": [
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_BRD_",
        "_DRS_",
        "_Direct Response_",
        "_Leads_",
        "_LDS_",
        "_Branding_"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Branding",
        "_BRD"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_BRD_",
        "_Branding_"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_DRS",
        "_Direct Response",
        "_BRD"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_DRS",
        "_Direct Response",
        "_BRD"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "Leads",
        "BRD",
        "Branding",
        "LDS"
      ],
      [
        "Leads",
        "BRD",
        "Branding",
        "LDS"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Branding",
        "_BRD",
        "_LDS",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_BRD_",
        "_DRS_",
        "_Direct Response_",
        "_Leads_",
        "_LDS_",
        "_Branding_"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ]
    ],
    "all_constants": [
      "_BRD_",
      "_Direct Response",
      "BRD",
      "DRS",
      "_DRS_",
      "_DRS",
      "_Direct Response_",
      "_Leads_",
      "_LDS",
      "_Leads",
      "_LDS_",
      "_Branding_",
      "LDS",
      "_Branding",
      "_BRD",
      "Branding",
      "Direct Response",
      "Leads"
    ]
  },
  "36462127modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) + 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) \n    _arg_0)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 11 (- (str.len _arg_0) 11))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 10 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 11 6)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) (+ (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 9) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 5) 6)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 10 6)\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) 1) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))\n```",
      "```s-expression\n(str.substr _arg_0 12 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 12 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```"
    ],
    "time_diff_ms": 417.94,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0) + 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 (- (str.len _arg_0) 11))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) (+ (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 9) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 5) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) 1) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        11
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        10,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        11,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        6
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        5,
        "/",
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        10,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      5,
      6,
      9,
      10,
      11,
      12,
      "/"
    ]
  },
  "stackoverflow5modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```"
    ],
    "time_diff_ms": 795.624,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      "="
    ]
  },
  "extract-word-that-begins-with-specific-charactermodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))\n    (ite (= end -1)\n         (str.substr _arg_0 start (- (str.len _arg_0) start))\n         (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 10) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 10) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1) \"\" \n      (let ((end (str.indexof _arg_0 \" \" (+ idx 1))))\n        (if (= end -1) (str.substr _arg_0 idx (- (str.len _arg_0) idx))\n          (str.substr _arg_0 idx (- end idx)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\" \n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= pos -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" pos)))\n          (if (= end -1)\n              (str.substr _arg_0 pos (str.len _arg_0))\n              (str.substr _arg_0 pos (- end pos)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```"
    ],
    "time_diff_ms": 233.614,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))) (ite (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 10) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 10) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ idx 1)))) (if (= end -1) (str.substr _arg_0 idx (- (str.len _arg_0) idx)) (str.substr _arg_0 idx (- end idx))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= pos -1) \"\" (let ((end (str.indexof _arg_0 \" \" pos))) (if (= end -1) (str.substr _arg_0 pos (str.len _arg_0)) (str.substr _arg_0 pos (- end pos))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ _arg_0 \" \") \" \" (str.indexof _arg_0 \"_\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))"
    ],
    "constants": [
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        1,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        10,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        1,
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "_",
      10,
      " ",
      -1
    ]
  }
}