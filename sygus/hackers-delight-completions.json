{
  "hd-25.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) #x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) #x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) #x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvlshr (bvmul x y) \\#x0000000000000020))"
    ],
    "time_ms": 175.281
  },
  "hd-24.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((a (ite (= x #x0000000000000000) #x0000000000000000 (bvlshr x (bvsub (bvnot (bvand (bvsub x #x0000000000000001) x)) #xffffffffffffffff)))))\n  (ite (= a #x0000000000000000) x (bvshl a #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvsub x #x0000000000000001)))\n  (ite (= x #x0000000000000000) #x0000000000000000 (bvshl #x0000000000000001 (bvadd (bvurem (bvnot y) y) #x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvsub x \\#x0000000000000001)))\n  (bvand (bvnot y) (bvsub y (bvand y (bvsub y \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(if (= x #x0000000000000000) \n    x \n    (bvshl #x0000000000000001 (bvsub (bvurem (bvnot x) x) #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvsub x \\#x0000000000000001)))\n  (bvor y (bvlshr y \\#x0000000000000001) (bvlshr y \\#x0000000000000002) (bvlshr y \\#x0000000000000004) (bvlshr y \\#x0000000000000008) (bvlshr y \\#x0000000000000010) (bvlshr y \\#x0000000000000020) (bvlshr y \\#x0000000000000040) (bvadd y \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) #x0000000000000000 (bvlshr (bvsub (bvnot x) #x0000000000000001) (bvnot (bvsub x #x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvlshr \\#x0000000000000001 (bvsub (bvnot x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(if (= x \\#x0000000000000000) x (bvshl \\#x0000000000000001 (bvsub (bvurem (bvnot x) x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(if (= x #x0000000000000000) \n    #x0000000000000000\n    (bvshl #x0000000000000001 (bvsub (bvadd (bvsub (bvnot x) #x0000000000000001) #x0000000000000001) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvsub x \\#x0000000000000001)))\n  (bvshl \\#x0000000000000001 (bvadd (bvurem (bvsub (bvlshr y \\#x0000000000000001) (bvand y \\#x0000000000000001)) \\#x0000000000000001) \\#x0000000000000001))))"
    ],
    "time_ms": 484.638
  },
  "hd-09.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvlshr x #x000000000000003f)))\n  (bvxor (bvsub x t) t)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvlshr x #x000000000000003f)))\n  (bvxor (bvadd x t) t)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvashr x #x000000000000003f)))\n  (bvxor (bvadd x y) y)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvlshr x #x000000000000003f)))\n  (bvxor (bvsub x t) t)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvlshr x #x000000000000003f)))\n  (bvxor (bvsub x y) y)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvlshr x \\#x000000000000003f)))\n  (bvsub (bvxor x y) y)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvashr x #x000000000000003f)))\n  (bvxor (bvadd x y) y)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvashr x #x000000000000003f)))\n  (bvxor (bvsub x y) y)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvlshr x #x000000000000003f)))\n  (bvxor (bvsub x t) t)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvlshr x #x000000000000003f)))\n  (bvxor (bvsub x t) t)))"
    ],
    "time_ms": 323.182
  },
  "hd-26.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl #x0000000000000001 k) #x0000000000000001)) #x0000000000000000) x (bvshl #x0000000000000001 (bvadd k (bvlshr x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl #x0000000000000001 k) #x0000000000000001)) #x0000000000000000) x (bvadd (bvand x (bvneg (bvshl #x0000000000000001 k))) (bvshl #x0000000000000001 k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001)) \\#x0000000000000000) x (bvadd (bvand x (bvneg (bvshl \\#x0000000000000001 k))) (bvshl \\#x0000000000000001 k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl #x0000000000000001 k) #x0000000000000001)) #x0000000000000000) x (bvadd (bvand x (bvneg (bvshl #x0000000000000001 k))) (bvshl #x0000000000000001 k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= k \\#x0000000000000000) x (bvor x (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl #x0000000000000001 k) #x0000000000000001)) #x0000000000000000) x (bvshl #x0000000000000001 (bvadd k (bvlshr x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(let ((mask (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001)))\n  (bvor (bvand x (bvnot mask)) (bvand (bvadd x mask) mask))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvadd (bvand x (bvnot (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001))) (bvshl \\#x0000000000000001 k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) \n     #x0000000000000000 \n     (bvmul (bvadd (bvlshr x k) #x0000000000000001) \n            (bvshl #x0000000000000001 k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64)\n(ite (= (bvand x (bvsub (bvshl #x0000000000000001 k) #x0000000000000001)) #x0000000000000000)\n     x\n     (bvshl #x0000000000000001 (bvadd k (bvlshr x k)))))"
    ],
    "time_ms": 699.129
  },
  "hd-27.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvand x y))"
    ],
    "time_ms": 756.564
  },
  "hd-08.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvadd x (bvnot x)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvadd x (bvnot x)) x))"
    ],
    "time_ms": 985.119
  },
  "hd-23.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((x1 (bvudiv x #x0000000000000002)))\n(let ((x2 (bvand x #x0000000055555555)))\n(let ((x3 (bvand x1 #x0000000055555555)))\n(let ((x4 (bvadd x2 x3)))\n(let ((x5 (bvudiv x4 #x0000000000000004)))\n(let ((x6 (bvand x5 #x0000000033333333)))\n(let ((x7 (bvadd (bvlshr x6 #x0000000000000002) x6)))\n(let ((x8 (bvudiv x7 #x0000000000000010)))\n(let ((x9 (bvand x8 #x0000000F0F0F0F0F)))\n(let ((x10 (bvadd (bvlshr x9 #x0000000000000004) x9)))\n(let ((x11 (bvudiv x10 #x000000000000003F)))\nx11)))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((x1 (bvudiv x #x0000000f0f0f0f0f)))\n      (let ((x2 (bvand x #x0000000055555555)))\n        (let ((x3 (bvand x1 #x0000000055555555)))\n          (let ((x4 (bvudiv (bvadd x2 x3) #x0000000033333333)))\n            (let ((x5 (bvand x4 #x0000000033333333)))\n              (let ((x6 (bvudiv (bvadd x5 (bvlshr x5 #x0000000000000002)) #x000000000000000f)))\n                (let ((x7 (bvand x6 #x000000000000003f)))\n                  (bvadd x7 (bvlshr x7 #x0000000000000001))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(\n  (bvadd \n    (bvadd \n      (bvand x \\#x0000000000000001) \n      (bvand (bvlshr x \\#x0000000000000001) \\#x0000000000000001)\n    )\n    (bvadd \n      (bvand (bvlshr x \\#x0000000000000002) \\#x0000000000000001) \n      (bvadd \n        (bvand (bvlshr x \\#x0000000000000003) \\#x0000000000000001) \n        (bvadd \n          (bvand (bvlshr x \\#x0000000000000004) \\#x0000000000000001) \n          (bvadd \n            (bvand (bvlshr x \\#x0000000000000005) \\#x0000000000000001) \n            (bvadd \n              (bvand (bvlshr x \\#x0000000000000006) \\#x0000000000000001) \n              (bvand (bvlshr x \\#x0000000000000007) \\#x0000000000000001)\n            )\n          )\n        )\n      )\n    )\n  )\n)",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((x (bvxor x (bvlshr x #x0000000000000001))))\n(let ((x (bvand x #x0000000033333333)))\n(let ((x (bvxor x (bvlshr x #x0000000000000002))))\n(let ((x (bvand x #x0000000f0f0f0f0f)))\n(let ((x (bvadd x (bvlshr x #x0000000000000004)))))\n(bvand x #x000000000000003f))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((x1 (bvudiv x #x0000000000000002))) \n(let ((x2 (bvand x1 #x0000000033333333))) \n(let ((x3 (bvand x #x0000000033333333))) \n(let ((x4 (bvadd x2 x3))) \n(let ((x5 (bvudiv x4 #x0000000000000004))) \n(let ((x6 (bvand x5 #x000000000f0f0f0f))) \n(let ((x7 (bvmul x6 #x0000000101010101))) \n(let ((x8 (bvudiv x7 #x0000000800000000))) \n(let ((x9 (bvand x8 #x000000000000003f))) \nx9))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(\n  (bvadd \n    (bvadd \n      (bvand x \\#x000000000000003f) \n      (bvand (bvlshr x \\#x0000000000000002) \\#x000000000000003f)\n    )\n    (bvadd \n      (bvand (bvlshr x \\#x0000000000000004) \\#x000000000000003f)\n      (bvand (bvlshr x \\#x0000000000000006) \\#x000000000000003f)\n    )\n  )\n))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(\n  (bvadd \n    (bvadd \n      (bvadd \n        (bvand x \\#x0000000000000001) \n        (bvand (bvlshr x \\#x0000000000000001) \\#x0000000000000001)\n      ) \n      (bvadd \n        (bvand (bvlshr x \\#x0000000000000002) \\#x0000000000000001) \n        (bvand (bvlshr x \\#x0000000000000003) \\#x0000000000000001)\n      )\n    ) \n    (bvadd \n      (bvadd \n        (bvand (bvlshr x \\#x0000000000000004) \\#x0000000000000001) \n        (bvand (bvlshr x \\#x0000000000000005) \\#x0000000000000001)\n      ) \n      (bvadd \n        (bvand (bvlshr x \\#x0000000000000006) \\#x0000000000000001) \n        (bvand (bvlshr x \\#x0000000000000007) \\#x0000000000000001)\n      )\n    )\n  )\n)",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(\n  (bvadd \n    (bvadd \n      (bvand x \\#x0000000000000001) \n      (bvand (bvlshr x \\#x0000000000000001) \\#x0000000000000001)\n    )\n    (bvadd \n      (bvand (bvlshr x \\#x0000000000000002) \\#x0000000000000001) \n      (bvadd \n        (bvand (bvlshr x \\#x0000000000000003) \\#x0000000000000001) \n        (bvadd \n          (bvand (bvlshr x \\#x0000000000000004) \\#x0000000000000001) \n          (bvadd \n            (bvand (bvlshr x \\#x0000000000000005) \\#x0000000000000001) \n            (bvand (bvlshr x \\#x0000000000000006) \\#x0000000000000001)\n          )\n        )\n      )\n    )\n  )\n)",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(\n  (bvadd\n    (bvadd\n      (bvadd\n        (bvand x \\#x0000000000000001)\n        (bvand (bvlshr x \\#x0000000000000001) \\#x0000000000000001)\n      )\n      (bvadd\n        (bvand (bvlshr x \\#x0000000000000002) \\#x0000000000000001)\n        (bvand (bvlshr x \\#x0000000000000003) \\#x0000000000000001)\n      )\n    )\n    (bvadd\n      (bvadd\n        (bvand (bvlshr x \\#x0000000000000004) \\#x0000000000000001)\n        (bvand (bvlshr x \\#x0000000000000005) \\#x0000000000000001)\n      )\n      (bvadd\n        (bvand (bvlshr x \\#x0000000000000006) \\#x0000000000000001)\n        (bvand (bvlshr x \\#x0000000000000007) \\#x0000000000000001)\n      )\n    )\n  )\n)",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((c (bvor (bvlshr x #x0000000000000020) x)))\n(let ((c (bvor (bvlshr c #x0000000000000010) c)))\n(let ((c (bvor (bvlshr c #x0000000000000008) c)))\n(let ((c (bvor (bvlshr c #x0000000000000004) c)))\n(let ((c (bvor (bvlshr c #x0000000000000002) c)))\n(let ((c (bvor (bvlshr c #x0000000000000001) c)))\n(let ((c (bvand c #x0000000000000044)))\n(let ((c (bvand (bvadd c (bvlshr c #x0000000000000001)) #x0000000000000033)))\n(let ((c (bvmul c #x000000000000000f)))\n(let ((c (bvudiv c #x0000000000000060)))\n(bvand c #x000000000000000f))))))))))))))"
    ],
    "time_ms": 821.257
  },
  "hd-22.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvredxor x) #x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvpop x) #x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvurem (bvxor x (bvlshr x #x0000000000000020)) #x0000000000000001) #x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x \\#x0000000000000001))"
    ],
    "time_ms": 583.614
  },
  "hd-18.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x \\#x0000000000000000)) (= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool\n(and (not (= x #x0000000000000000)) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))"
    ],
    "time_ms": 568.806
  },
  "hd-20.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvand x (bvsub x \\#x0000000000000001))))\n(bvor (bvlshr x (bvadd (bvnot (bvsub y \\#x0000000000000001)) \\#x0000000000000001)) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvand x (bvsub x #x0000000000000001))))\n    (bvor (bvlshr t #x0000000000000001) (bvsub x t))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvand x (bvsub x \\#x0000000000000001))))\n(bvor (bvlshr x \\#x0000000000000001) (bvshl y \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvand x (bvsub x \\#x0000000000000001))))\n  (bvor (bvlshr t (bvadd (bvnot (bvand t (bvlshr t \\#x0000000000000001))) \\#x0000000000000001))\n        (bvshl x (bvadd (bvand (bvnot x) (bvlshr (bvnot x) \\#x0000000000000001)) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvand (bvneg x) (bvadd x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvand x (bvsub x \\#x0000000000000001))))\n  (bvadd (bvxor (bvlshr t \\#x0000000000000001) x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvand (bvnot x) (bvadd x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvand (bvneg x) x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((y (bvadd x \\#x0000000000000001)))\n  (let ((a (bvxor x y)))\n    (let ((b (bvlshr a (bvadd (bvand (bvneg a) x) \\#x0000000000000001))))\n      (bvand y (bvxor b \\#xffffffffffffffff))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(let ((t (bvand x (bvsub x \\#x0000000000000001))))\n    (bvor (bvlshr x (bvadd (bvnot (bvand (bvsub (bvnot t) \\#x0000000000000001) x) \\#x0000000000000001)) \\#x0000000000000001) (bvshl t (bvsub (bvnot (bvand (bvsub (bvnot x) \\#x0000000000000001) t)) \\#x0000000000000001)))))"
    ],
    "time_ms": 885.029
  },
  "hd-21.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x (_ bv0 64)) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x (_ bv0 64)) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #b00) a (ite (= x #b01) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64)\n(ite (= x #x0000000000000000) a (ite (= x a) b c)))"
    ],
    "time_ms": 392.878
  },
  "hd-19.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvand x (bvnot m)) (bvand (bvlshr (bvand x m) k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvand x (bvnot m)) (bvshl (bvand (bvlshr x k) m) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvor (bvand (bvshl (bvand x m) k) m) (bvand (bvlshr (bvand x m) k) m)) (bvand x (bvnot m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvand x (bvnot m)) (bvlshr (bvand x m) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvlshr (bvand x m) k) (bvshl (bvand x (bvnot m)) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvand x (bvnot m)) (bvlshr (bvand x m) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvor (bvand x (bvnot m)) (bvshl (bvand x m) k)) (bvlshr (bvand x m) (bvsub #x0000000000000040 k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvand x (bvnot m)) (bvand (bvshl (bvlshr x k) k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvor (bvor (bvand x (bvnot m)) (bvlshr (bvand x m) k)) (bvshl (bvand x m) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n(bvand (bvor (bvshl (bvand x m) k) (bvlshr (bvand x (bvnot m)) k)) (bvor m (bvshl (bvnot m) k))))"
    ],
    "time_ms": 222.818
  },
  "hd-07.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand (bvnot x) (bvadd x \\#x0000000000000001)))"
    ],
    "time_ms": 77.297
  },
  "hd-10.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvshl x (bvnot y)) (bvshl y (bvnot x))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvshl x (bvurem y x)) (bvshl y (bvurem x y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvurem x y) (bvurem y x)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvurem x y) (bvurem y x)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvlshr x (bvsub #x40 (bvurem (bvnot x) #x40))) (bvlshr y (bvsub #x40 (bvurem (bvnot y) #x40)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(= (bvclz x) (bvclz y)))"
    ],
    "time_ms": 206.522
  },
  "hd-11.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvclz x) (bvclz y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvclz x) (bvclz y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvshl \\#x0000000000000001 x) (bvshl \\#x0000000000000001 y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvclz x) (bvclz y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvshl #x0000000000000001 x) (bvshl #x0000000000000001 y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvshl \\#x0000000000000001 x) (bvshl \\#x0000000000000001 y))"
    ],
    "time_ms": 953.865
  },
  "hd-06.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvadd x (bvnot (bvsub x #x0000000000000001))))"
    ],
    "time_ms": 306.378
  },
  "hd-04.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))"
    ],
    "time_ms": 994.878
  },
  "hd-13.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x \\#x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvlshr x #x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x \\#x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x \\#x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x #x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvlshr x #x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x #x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x #x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x \\#x000000000000003f))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvashr x \\#x000000000000003f))"
    ],
    "time_ms": 674.588
  },
  "hd-12.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool\n(bvult (bvnot x) (bvnot y)))"
    ],
    "time_ms": 31.409
  },
  "hd-05.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvor x (bvsub x \\#x0000000000000001)))"
    ],
    "time_ms": 174.657
  },
  "hd-16.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvor x y))"
    ],
    "time_ms": 634.18
  },
  "hd-01.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))"
    ],
    "time_ms": 997.882
  },
  "hd-17.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))"
    ],
    "time_ms": 927.103
  },
  "hd-15.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))"
    ],
    "time_ms": 512.283
  },
  "hd-02.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvadd x #x0000000000000001)))"
    ],
    "time_ms": 811.292
  },
  "hd-03.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64)\n(bvand x (bvsub x \\#x0000000000000001)))"
    ],
    "time_ms": 173.64
  },
  "hd-14.sl": {
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64)\n(bvudiv (bvadd x y) \\#x0000000000000002))"
    ],
    "time_ms": 30.715
  }
}