{
  "get-first-name-from-name-with-comma.sl": {
    "completions": [
      "(str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.substr\n      _arg_0\n      (+ (str.indexof _arg_0 \",\" 0) 1)\n      (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))\n    )\n    0\n    (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)\n  )\n)",
      "(str.substr (str.substr _arg_0 1 (str.indexof _arg_0 \",\")) 0 (- (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name\n              (str.indexof name \",\" (+ index 1))\n              (str.indexof name \",\" index)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \",\" (+ _arg_1 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 1 (str.indexof _arg_0 \",\")) 0 (- (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (str.indexof name \",\" (+ index 1)) (str.indexof name \",\" index)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \",\" (+ _arg_1 1))))"
    ],
    "constants": [
      [
        "",
        0,
        " ",
        ","
      ],
      [
        1,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        1,
        ","
      ],
      [
        2,
        " ",
        ","
      ],
      [
        1,
        ","
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      ",",
      2,
      " "
    ],
    "time_diff_ms": 138.539
  },
  "strip-html-from-text-or-numbers.sl": {
    "completions": [
      "(str.replace _arg_0 \"<[^>]+>\" \"\")",
      "(str.replace _arg_0 \"<[^>]+>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")\n      \"</b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]+>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]+>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))"
    ],
    "constants": [
      [
        "",
        "<[^>]+>"
      ],
      [
        "",
        "<[^>]+>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ]
    ],
    "all_constants": [
      "",
      "<[^>]*>",
      "<[^>]+>",
      "<b>"
    ],
    "time_diff_ms": 2419.676
  },
  "count-total-words-in-a-cell.sl": {
    "completions": [
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(Start Int (str.len _arg_0))",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int\n    (str.len _arg_0))",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (Start Int (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))"
    ],
    "constants": [
      [],
      [],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [],
      [],
      []
    ],
    "all_constants": [
      "",
      " "
    ],
    "time_diff_ms": 1559.636
  },
  "stackoverflow8.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "\"(str.substr _arg_0 (- (str.indexof _arg_0 \\\"/\\\" 0) 6) 100)\"",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (- (str.indexof _arg_0 \\\"/\\\" 0) 6) 100)\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 6) 100)"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 6) 100)"
    ],
    "time_diff_ms": 2084.973
  },
  "phone-6-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(str.at name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 5))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5))"
    ],
    "constants": [
      [
        5
      ],
      [
        3,
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        5
      ]
    ],
    "all_constants": [
      "(str.at name 4)",
      3,
      4,
      5
    ],
    "time_diff_ms": 1358.497
  },
  "phone-10.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)) )",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 11 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 11 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))"
    ],
    "constants": [
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      2,
      3,
      1,
      5,
      6,
      4,
      "-",
      9,
      10,
      7,
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      13,
      " (",
      "(str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))"
    ],
    "time_diff_ms": 2459.3720000000003
  },
  "phone-6.sl": {
    "completions": [
      "(str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.substr name 5 3))\"",
      "\"(str.at (str.substr name 5 3) 0)\"",
      "(ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 3) 0)\")",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        "(str.at (str.substr name 5 3) 0)"
      ],
      [
        0,
        1,
        2,
        3,
        "+"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      5,
      "(str.substr name 5 3))",
      "(str.at (str.substr name 5 3) 0)",
      "+"
    ],
    "time_diff_ms": 1207.218
  },
  "phone-7-short.sl": {
    "completions": [
      "(str.substr name 6 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \" 0) 2) 3)\n     (str.substr name (+ (str.indexof name \"-\" 0) 1) 3))",
      "(str.substr name 6 3))",
      "(str.substr name 5 3))",
      "(define-fun f ((name String)) String (str.substr name 6 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "\"(str.substr name 6 3))\"",
      "(define-fun f ((name String)) String (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "\"(str.substr name 6 3))\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \" 0) 2) 3) (str.substr name (+ (str.indexof name \"-\" 0) 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        0,
        1,
        2,
        3,
        "-",
        " "
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        "(str.substr name 6 3))"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      5,
      6,
      "-",
      "(str.substr name 6 3))",
      " "
    ],
    "time_diff_ms": 1126.8470000000002
  },
  "phone-7.sl": {
    "completions": [
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ 1 (str.indexof name \" \")) 3)\n     (str.substr name (+ 1 (str.indexof name \" \")) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (= (str.indexof name \" \") -1) (str.substr name 7 3) (str.substr name (+ (str.indexof name \" \") 1) 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.at name 6 5))"
    ],
    "solutions": [
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 1 (str.indexof name \" \")) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) (str.substr name 7 3) (str.substr name (+ (str.indexof name \" \") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 6 5))"
    ],
    "constants": [
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        3,
        7,
        " ",
        -1
      ],
      [
        3,
        6
      ],
      [
        5,
        6
      ]
    ],
    "all_constants": [
      1,
      3,
      5,
      6,
      7,
      "-",
      " ",
      -1
    ],
    "time_diff_ms": 1911.0729999999999
  },
  "univ_6_short.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\")\n               \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\"\n               \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n               \"Ithaca, New York, USA\" \"Ithaca, NY, USA\"\n               \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\"\n               \"College Park, MD\" \"College Park, MD, USA\"\n               \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\"\n               \"New York, NY, USA\" \"New York, NY, USA\"\n               \"New York, New York, USA\" \"New York, NY, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 100) \", \" \n    (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \"University\" \"\") \"NYU\" \"New York University\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"Michigan\" \"Ann Arbor\") \"Columbia\" \"New York\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\") 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 100) \n    \", \" \n    (str.substr col2 0 2) \n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 0 21))",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"PA\\\") \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") 0 (- (str.len col2) 5))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2) \"Phialdelphia\" \"Philadelphia\" \"Los Angeles\" \"Los Angeles\" \"Ithaca, New York\" \"Ithaca, NY\" \"College Park\" \"College Park\" \"Ann Arbor\" \"Ann Arbor\" \"New York, New York\" \"New York, NY\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York, USA\" \"Ithaca, NY, USA\" \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\" \"New York, NY, USA\" \"New York, NY, USA\" \"New York, New York, USA\" \"New York, NY, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \"University\" \"\") \"NYU\" \"New York University\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"Michigan\" \"Ann Arbor\") \"Columbia\" \"New York\") \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\") 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 0 21))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"PA\\\") \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") 0 (- (str.len col2) 5))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2) \"Phialdelphia\" \"Philadelphia\" \"Los Angeles\" \"Los Angeles\" \"Ithaca, New York\" \"Ithaca, NY\" \"College Park\" \"College Park\" \"Ann Arbor\" \"Ann Arbor\" \"New York, New York\" \"New York, NY\"))"
    ],
    "constants": [
      [
        "New York, New York, USA",
        ", USA",
        ", ",
        "New York, NY, USA",
        "Phialdelphia, PA, USA",
        "Ann Arbor, MI, USA",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Los Angeles, CA, USA",
        "Ithaca, NY, USA",
        "College Park, MD",
        "Los Angeles, CA",
        "Ithaca, New York, USA"
      ],
      [
        0,
        3,
        100,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "",
        "Penn",
        " College Park",
        "Ann Arbor",
        "UCLA",
        "Cornell",
        "Columbia",
        "NYU",
        "Michigan",
        "New York",
        "Los Angeles",
        "Philadelphia",
        " College",
        "University ",
        "University",
        " of ",
        "Ithaca",
        "NY",
        "University of ",
        "New York University"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"MI\" \"MI\") 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "(str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\")"
      ],
      [
        0,
        2,
        3,
        100,
        ", USA",
        ", "
      ],
      [
        "Phialdelphia",
        "Philadelphia",
        ", USA",
        ", "
      ],
      [
        0,
        ", USA",
        "Philadelphia",
        "Phialdelphia",
        ", ",
        21
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"University of Pennsylvania\" \"Phialdelphia\") 0 (- (str.len col2) 5))"
      ],
      [
        "New York, NY",
        "Ithaca, New York",
        "Ithaca, NY",
        "New York, New York",
        "Philadelphia",
        "Phialdelphia",
        ", ",
        "Ann Arbor",
        "College Park",
        "Los Angeles"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      3,
      "New York, New York, USA",
      "Los Angeles, CA",
      "Phialdelphia",
      "Ithaca",
      "Penn",
      21,
      "New York, New York",
      "University of ",
      "Ithaca, NY, USA",
      "Columbia",
      "Philadelphia",
      "Ithaca, NY",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"MI\" \"MI\") 0 (- (str.indexof col2 \",\") 1))",
      "University ",
      ", ",
      "(str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\")",
      "New York, NY",
      " College",
      "College Park, MD, USA",
      "New York",
      "College Park, MD",
      "University",
      "Philadelphia, PA, USA",
      "NYU",
      " of ",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      "New York University",
      "Los Angeles",
      "UCLA",
      100,
      "Ann Arbor, MI, USA",
      "Ithaca, New York, USA",
      "College Park",
      "Ithaca, New York",
      "Cornell",
      " College Park",
      "Michigan",
      "Ann Arbor",
      "Phialdelphia, PA, USA",
      "NY",
      ", USA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"University of Pennsylvania\" \"Phialdelphia\") 0 (- (str.len col2) 5))"
    ],
    "time_diff_ms": 1215.969
  },
  "stackoverflow9.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      1,
      " "
    ],
    "time_diff_ms": 1510.707
  },
  "phone-9-long-repeat.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\" +\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\" ) \"-\" \"\" ) \"-\" \"\" ) \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \".\")"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\" +\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \".\"))"
    ],
    "constants": [
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \" +\" \".\") \"-\" \".\") \" \" \".\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      ".",
      "",
      3,
      4,
      "-",
      8,
      12,
      "(str.replace (str.replace (str.replace (str.replace name ",
      " ",
      "(str.replace (str.replace (str.replace (str.replace name \" +\" \".\") \"-\" \".\") \" \" \".\") \" \" \".\")",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1034.149
  },
  "get-last-word.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      1,
      " ",
      -1
    ],
    "time_diff_ms": 1796.25
  },
  "phone-10_short.sl": {
    "completions": [
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 5 3) \\\") \\\" (str.substr name 9 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "\"(str.++ \" \" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \" (\" \n    (str.substr name 1 3) \") \" \n    (str.substr name 5 3) \"-\" \n    (str.substr name 9 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 5 3) \\\") \\\" (str.substr name 9 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))"
    ],
    "constants": [
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3))"
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      1,
      ") ",
      3,
      4,
      5,
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      7,
      "-",
      9,
      13,
      " (",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3))",
      "(str.++ "
    ],
    "time_diff_ms": 1834.047
  },
  "17212077.sl": {
    "completions": [
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 5))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\"",
      "(str.++ (str.substr _arg_0 0 3) (str.substr _arg_0 6 4))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 5))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\")",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 3) (str.substr _arg_0 6 4)))"
    ],
    "constants": [
      [
        0,
        "/",
        5
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        4
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))"
      ],
      [
        0,
        3,
        4,
        6
      ]
    ],
    "all_constants": [
      0,
      "/",
      1,
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      4,
      5,
      6,
      3
    ],
    "time_diff_ms": 1548.936
  },
  "phone-5.sl": {
    "completions": [
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \")))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f ((name String)) String (str.at name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at (str.replace name \" \" \"\") 0))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \")))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at (str.replace name \" \" \"\") 0))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        "",
        0,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      " "
    ],
    "time_diff_ms": 978.1189999999999
  },
  "39060015.sl": {
    "completions": [
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0)))",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))"
    ],
    "constants": [
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "This is a line. ",
        0,
        " /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "This is a line. ",
        "keep this part"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /delete words in the area /"
      ]
    ],
    "all_constants": [
      "",
      0,
      " /delete words in the area /",
      " /",
      "keep this part",
      "This is a line. ",
      "delete words in the area"
    ],
    "time_diff_ms": 1291.862
  },
  "phone-7-long-repeat.sl": {
    "completions": [
      "\"(str.at name 7)\"",
      "(str.substr name 7 3))",
      "(str.at name 6))",
      "(str.substr name 8 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(str.substr name 8 3))",
      "(str.substr name 8 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 7)\")",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 6))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ],
    "constants": [
      [
        "(str.at name 7)"
      ],
      [
        3,
        7
      ],
      [
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      3,
      6,
      7,
      8,
      "(str.at name 7)"
    ],
    "time_diff_ms": 1948.774
  },
  "38871714.sl": {
    "completions": [
      "\"(str.replace _arg_0 \\\"<\\\" \\\"\\\")\"",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\"<\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))"
    ],
    "constants": [
      [
        "(str.replace _arg_0 \"<\" \"\")"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      "<",
      "(str.replace _arg_0 \"<\" \"\")"
    ],
    "time_diff_ms": 1835.128
  },
  "43120683.sl": {
    "completions": [
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))"
    ],
    "constants": [
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ]
    ],
    "all_constants": [
      "1",
      "apple"
    ],
    "time_diff_ms": 1397.297
  },
  "stackoverflow11.sl": {
    "completions": [
      "(str.substr _arg_0 \n            (str.indexof _arg_0 \" \" 0) \n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 1)) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"A\") 0)\n            (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n              (str.indexof _arg_0 \" \" 0)\n              1)\n            (str.len _arg_0))",
      "(ite (str.contains _arg_0 \" \")(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"_\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"_\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"1\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"2\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"2\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"3\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"3\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"4\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"4\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"5\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"5\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"6\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"6\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"7\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"7\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"8\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"8\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"9\")(str.substr _arg_0 (+ (str.indexof _arg_0 \"9\") 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.len _arg_0))))))))))))))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") (str.len _arg_0))\n            (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) )"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 1)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"_\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"1\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"2\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"2\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"3\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"3\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"4\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"4\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"5\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"5\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"6\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"6\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"7\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"7\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"8\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"8\") 1) (str.len _arg_0)) (ite (str.contains _arg_0 \"9\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"9\") 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.len _arg_0))))))))))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") (str.len _arg_0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        "A",
        "Z"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "8",
        "6",
        "9",
        " ",
        "2",
        "5",
        "7",
        "3",
        "_",
        "4",
        "1"
      ],
      [
        "0"
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "A",
      "8",
      "7",
      "3",
      "4",
      "2",
      "1",
      "Z",
      "0",
      " ",
      "9",
      "6",
      "_",
      "5"
    ],
    "time_diff_ms": 2012.853
  },
  "split-text-string-at-specific-character.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))\"",
      "(define-fun f ((s String) (n Int)) String\n  (str.substr s 0 n)\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \")",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr s 0 n))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))"
    ],
    "constants": [
      [
        0,
        "_"
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 "
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ]
    ],
    "all_constants": [
      0,
      "(str.substr _arg_0 0 (str.indexof _arg_0 ",
      "_"
    ],
    "time_diff_ms": 2389.8019999999997
  },
  "get-domain-name-from-url.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 0 (str.indexof _arg_0 \"/\" 1))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 0 (str.indexof _arg_0 \"/\" 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))"
    ],
    "constants": [
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ]
    ],
    "all_constants": [
      0,
      "/",
      1,
      8,
      "//"
    ],
    "time_diff_ms": 1850.933
  },
  "get-last-name-from-name-with-comma.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))"
    ],
    "constants": [
      [
        2,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      ",",
      2,
      "",
      1
    ],
    "time_diff_ms": 2072.382
  },
  "initials.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \". \" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \". \" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        ".",
        ". "
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      "",
      ". ",
      " "
    ],
    "time_diff_ms": 422.054
  },
  "univ_5-long-repeat.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace col1 \"University of \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \"University of \" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ (str.substr col2 0 3) \", \" (str.substr col2 0 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace col1 \"University of \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \"University of \" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.substr col2 0 3) \", \" (str.substr col2 0 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))"
    ],
    "constants": [
      [
        "USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        ", USA",
        "University of ",
        ", "
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "",
        "NY",
        "NH",
        "University of ",
        "New Haven",
        "New York"
      ],
      [
        0,
        2,
        3,
        ", USA",
        ", "
      ],
      [
        ", USA"
      ],
      [
        "(str.++ (str.replace (str.++ col1 \", \" col2) \", USA\" \"\") \", USA\")"
      ],
      [
        ", USA",
        ", ",
        "NY",
        "A",
        "New York"
      ]
    ],
    "all_constants": [
      0,
      1,
      ",",
      "",
      "New York",
      2,
      3,
      "A",
      "New Haven",
      "NH",
      "(str.++ (str.replace (str.++ col1 \", \" col2) \", USA\" \"\") \", USA\")",
      "USA",
      ", ",
      "NY",
      ", USA",
      "University of "
    ],
    "time_diff_ms": 1539.077
  },
  "stackoverflow10.sl": {
    "completions": [
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" 0) 1)))\n)",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (s String) String\n  (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.len s) (+ (str.indexof s \" \" 0) 1))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.len s) (+ (str.indexof s \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        4
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      4
    ],
    "time_diff_ms": 1055.257
  },
  "phone-9-short.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\""
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ]
    ],
    "all_constants": [
      0,
      ".",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      3,
      4,
      "",
      8,
      "-",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      " ",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1146.795
  },
  "phone-6-short.sl": {
    "completions": [
      "(ite (= (str.at name 0) \"+\") (str.substr name 5 3) (str.substr name 4 3))",
      "\"(str.at (str.substr name 5 11) 0)\"",
      "(str.substr name 5 3))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 2 3))",
      "\"(str.at (str.substr name 5 11) 0)\"",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (= (str.at name 4) \"-\")\n     (str.substr name 5 3)\n     (ite (= (str.at name 3) \"-\")\n          (str.substr name 4 3)\n          (str.substr name 3 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 5 3) (str.substr name 4 3)))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 2 3)))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 0)\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 4) \"-\") (str.substr name 5 3) (ite (= (str.at name 3) \"-\") (str.substr name 4 3) (str.substr name 3 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        5,
        "+"
      ],
      [
        "(str.at (str.substr name 5 11) 0)"
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        2,
        "+"
      ],
      [
        "(str.at (str.substr name 5 11) 0)"
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        0,
        1,
        2,
        3,
        "+"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "-",
        3,
        4,
        5
      ]
    ],
    "all_constants": [
      0,
      "(str.at (str.substr name 5 11) 0)",
      2,
      3,
      4,
      5,
      1,
      "-",
      " ",
      "+"
    ],
    "time_diff_ms": 1641.393
  },
  "43606446.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.len _arg_0))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\"",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(define-fun f (s String) String\n  (str.substr s (+ (str.indexof s \"<\") 1) (- (str.indexof s \",\") (str.indexof s \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"<\") 1) (- (str.indexof s \",\") (str.indexof s \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") 1)))"
    ],
    "constants": [
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<"
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ]
    ],
    "all_constants": [
      ",",
      1,
      ">",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))",
      "<"
    ],
    "time_diff_ms": 1514.633
  },
  "initials-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (- (str.len name) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (- (str.len name) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ".",
      " "
    ],
    "time_diff_ms": 2298.041
  },
  "phone-5-long-repeat.sl": {
    "completions": [
      "\"(str.at name 1)\"",
      "(str.at name 1)",
      "(str.at name 1))",
      "\"(str.at name 1)\"",
      "(str.at name 1 2))",
      "\"(str.at name 1)\"",
      "\"(str.to.int (str.substr name 1 (- (str.indexof name \\\" \\\") 1)))\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.to.int (str.substr name 1 3))\"",
      "(str.to.int (str.substr name 1 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1 2))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 (- (str.indexof name \\\" \\\") 1)))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.to.int (str.substr name 1 3)))"
    ],
    "constants": [
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        2
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.to.int (str.substr name 1 (- (str.indexof name \" \") 1)))"
      ],
      [
        1
      ],
      [
        "(str.to.int (str.substr name 1 3))"
      ],
      [
        1,
        3
      ]
    ],
    "all_constants": [
      1,
      2,
      3,
      "(str.to.int (str.substr name 1 3))",
      "(str.at name 1)",
      "(str.to.int (str.substr name 1 (- (str.indexof name \" \") 1)))"
    ],
    "time_diff_ms": 1947.288
  },
  "phone-7-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      3,
      6,
      7
    ],
    "time_diff_ms": 2328.047
  },
  "univ_6-long.sl": {
    "completions": [
      "(define-fun f (col1 String col2 String) String\n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)\n        (str.replace (str.replace col1 \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len col2) 2)))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "\"(str.substr (str.++ col2 \\\", USA\\\") 2 100)\"",
      "\"(str.replace (str.replace col2 col1 \\\"USA\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") 1 (str.len (str.replace (str.replace col2 col1 \"\") \"USA\" \"\"))))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1) (str.replace (str.replace col1 \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.++ col2 \\\", USA\\\") 2 100)\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"USA\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") 1 (str.len (str.replace (str.replace col2 col1 \"\") \"USA\" \"\"))))"
    ],
    "constants": [
      [
        0,
        1,
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \", USA\")"
      ],
      [
        0,
        ","
      ],
      [
        "(str.substr (str.++ col2 \", USA\") 2 100)"
      ],
      [
        "(str.replace (str.replace col2 col1 \"USA\") \", USA\" \"\")"
      ],
      [
        0,
        ","
      ],
      [
        "",
        1,
        "USA"
      ]
    ],
    "all_constants": [
      0,
      1,
      ",",
      2,
      "New York",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \", USA\")",
      "",
      "(str.substr (str.++ col2 \", USA\") 2 100)",
      "USA",
      ", ",
      "NY",
      ", USA",
      "(str.replace (str.replace col2 col1 \"USA\") \", USA\" \"\")"
    ],
    "time_diff_ms": 1422.171
  },
  "33619752.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      " "
    ],
    "time_diff_ms": 1703.242
  },
  "extract-text-between-parentheses.sl": {
    "completions": [
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))"
    ],
    "constants": [
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        6
      ]
    ],
    "all_constants": [
      0,
      1,
      6,
      ">",
      "<"
    ],
    "time_diff_ms": 2069.583
  },
  "remove-leading-and-trailing-spaces-from-text.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))) )",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))) )",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))"
    ],
    "constants": [
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ]
    ],
    "all_constants": [
      "",
      0,
      " ",
      1
    ],
    "time_diff_ms": 2029.615
  },
  "strip-non-numeric-characters.sl": {
    "completions": [
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\"\"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \" \" \"\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \" \" \"\")))"
    ],
    "constants": [
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      "",
      " ",
      "%"
    ],
    "time_diff_ms": 1187.68
  },
  "get-middle-name-from-full-name.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1221.969
  },
  "initials_small.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"\n  )\n)",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.++ \n      (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.at name 1)\n      0\n      1\n    )\n    \".\"\n  )\n)"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 2343.051
  },
  "stackoverflow5.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      1,
      "="
    ],
    "time_diff_ms": 2826.0389999999998
  },
  "extract-word-that-begins-with-specific-character.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ (str.indexof _arg_0 \" _\" 0) (str.len \" _\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.at _arg_0 (+ 1 (str.indexof _arg_0 \" \")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ (str.indexof _arg_0 \" _\" 0) (str.len \" _\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (+ 1 (str.indexof _arg_0 \" \"))))"
    ],
    "constants": [
      [
        0,
        " ",
        " _"
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " _"
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        1,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        " ",
        "_"
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " _",
      " ",
      "_"
    ],
    "time_diff_ms": 727.703
  },
  "35744094.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 1))",
      "(str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" 9))",
      "(str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 7) 100))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"//\") 2) (str.indexof _arg_0 \"/\" 8)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 7))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" 9)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 7) 100))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"//\") 2) (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 7)))"
    ],
    "constants": [
      [
        1,
        "/",
        "://www.",
        7
      ],
      [
        "/",
        7
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        9,
        "/",
        "//"
      ],
      [
        "/",
        7
      ],
      [
        0,
        "/",
        100,
        7
      ],
      [
        "http://",
        "/",
        "https://"
      ],
      [
        "/",
        8,
        2,
        "//"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "/",
        "://www.",
        7
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      2,
      100,
      "://www.",
      7,
      8,
      9,
      "//",
      "http://",
      "https://"
    ],
    "time_diff_ms": 1835.708
  },
  "get-last-line-in-cell.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0))) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0)) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 2)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0))) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0)) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        1,
        2,
        "/n",
        -1
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        1,
        2,
        "/n"
      ],
      [
        1,
        2,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "/n",
      3,
      " ",
      -1
    ],
    "time_diff_ms": 1182.412
  },
  "31753108.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 12 9))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 12 9))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        9,
        12
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ]
    ],
    "all_constants": [
      0,
      9,
      12,
      13,
      " "
    ],
    "time_diff_ms": 729.3069999999999
  },
  "exceljet4.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))"
    ],
    "constants": [
      [
        3,
        "://"
      ],
      [
        "",
        "^[a-zA-Z]+=//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        0,
        "//"
      ],
      [
        "",
        "https=//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ]
    ],
    "all_constants": [
      "",
      "https=//",
      0,
      3,
      "://",
      "^[a-zA-Z]+=//",
      "//"
    ],
    "time_diff_ms": 1178.8519999999999
  },
  "44789427.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"-\" 0) _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"-\" 0) _arg_1)))"
    ],
    "constants": [
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "-"
    ],
    "time_diff_ms": 1964.967
  },
  "stackoverflow4.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 5 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 2))))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.substr _arg_0 0 3) \" \" (str.substr _arg_0 4 3) \" \" (str.substr _arg_0 8 3))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \",\" \" \") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" \" \"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 5 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 0 3) \" \" (str.substr _arg_0 4 3) \" \" (str.substr _arg_0 8 3)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \",\" \" \") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))"
    ],
    "constants": [
      [
        " ",
        ","
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        1,
        2,
        3,
        5,
        8,
        " ",
        "R/"
      ],
      [
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        3,
        4,
        8,
        " ",
        "R/"
      ],
      [
        "R/",
        " ",
        ",",
        1
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ]
    ],
    "all_constants": [
      "",
      ",",
      1,
      2,
      3,
      5,
      0,
      7,
      8,
      4,
      ">",
      10,
      "R/",
      " ",
      "<"
    ],
    "time_diff_ms": 1450.716
  },
  "stackoverflow6.sl": {
    "completions": [
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "\"(ite (str.contains _arg_0 \\\"=\\\") (str.substr _arg_0 (+ (str.indexof _arg_0 \\\"=\\\" 0) 1) (str.len _arg_0)) _arg_0)\"",
      "\"(str.substr _arg_0 0 (- (str.len _arg_0) 1))\"",
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "\"(str.substr _arg_0 36 (str.indexof _arg_0 \\\"= \\\" 0))\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 29 (- (str.len _arg_0) 29)))",
      "(str.substr _arg_0 28 (str.indexof _arg_0 \"=\" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String \"(ite (str.contains _arg_0 \\\"=\\\") (str.substr _arg_0 (+ (str.indexof _arg_0 \\\"=\\\" 0) 1) (str.len _arg_0)) _arg_0)\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.len _arg_0) 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 36 (str.indexof _arg_0 \\\"= \\\" 0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 29 (- (str.len _arg_0) 29)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 28 (str.indexof _arg_0 \"=\" 0)))"
    ],
    "constants": [
      [
        0,
        "=",
        1
      ],
      [
        "(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)"
      ],
      [
        "(str.substr _arg_0 0 (- (str.len _arg_0) 1))"
      ],
      [
        31
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        "(str.substr _arg_0 36 (str.indexof _arg_0 \"= \" 0))"
      ],
      [
        0,
        "=",
        1
      ],
      [
        29
      ],
      [
        0,
        "=",
        28
      ]
    ],
    "all_constants": [
      0,
      1,
      "(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)",
      "=",
      "(str.substr _arg_0 36 (str.indexof _arg_0 \"= \" 0))",
      "(str.substr _arg_0 0 (- (str.len _arg_0) 1))",
      28,
      29,
      31
    ],
    "time_diff_ms": 1272.865
  },
  "univ_4-long.sl": {
    "completions": [
      "(str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", \") \"University of \" \"\") \"New York\" \"NY\") 0 (- (str.indexof col1 \",\") 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College\" \"\") \"University\" \"\") \"New Haven\" \"New Haven\" \"\") \"Santa Barbara\" \"Santa Barbara\" \"\") \"California,\" \"\") \" of\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"California\" \"CA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University of California, Santa Barbara\" \"\") \"University of Connecticut\" \"\") \"University of Michigan\" \"\") \"University of Pennsylvania\" \"\") \"University of Maryland\" \"\") \"University of California\" \"\") \"University of Illinois\" \"\") \"University of\" \"\") \"University\" \"\") \"UC Berkeley\" \"\") \"UCLA\" \"\") \"UIUC\" \"\") \"MIT\" \"\") \"NYU\" \"\") \"Rice University\" \"\") \"Temple University\" \"\") \"Harvard University\" \"\") \"Cornell University\" \"\") \"Columbia University\" \"\") \"Drexel University\" \"\") \"New Haven University\" \"\") \"New Haven\" \"\") \"New York\" \"NY\") \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Santa Barbara\" \"CA\") \"Philadelphia\" \"PA\") \"Ann Arbor\" \"MI\") \"Berkeley\" \"CA\") \"Storrs\" \"CT\") \"Cambridge\" \"MA\") \"Houston\" \"TX\") \"Ithaca\" \"NY\") \"Phialdelphia\" \"PA\") \"Urbana\" \"IL\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", \") \"University of \" \"\") \"New York\" \"NY\") 0 (- (str.indexof col1 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") 0 100))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College\" \"\") \"University\" \"\") \"New Haven\" \"New Haven\" \"\") \"Santa Barbara\" \"Santa Barbara\" \"\") \"California,\" \"\") \" of\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"California\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University of California, Santa Barbara\" \"\") \"University of Connecticut\" \"\") \"University of Michigan\" \"\") \"University of Pennsylvania\" \"\") \"University of Maryland\" \"\") \"University of California\" \"\") \"University of Illinois\" \"\") \"University of\" \"\") \"University\" \"\") \"UC Berkeley\" \"\") \"UCLA\" \"\") \"UIUC\" \"\") \"MIT\" \"\") \"NYU\" \"\") \"Rice University\" \"\") \"Temple University\" \"\") \"Harvard University\" \"\") \"Cornell University\" \"\") \"Columbia University\" \"\") \"Drexel University\" \"\") \"New Haven University\" \"\") \"New Haven\" \"\"))"
    ],
    "constants": [
      [
        "",
        0,
        1,
        ", ",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ", ",
        "USA",
        ","
      ],
      [
        "",
        "NY",
        "University of ",
        "New Haven",
        "New York"
      ],
      [
        "",
        0,
        100,
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "",
        "University ",
        "University of "
      ],
      [
        "",
        " of",
        "California,",
        "University of",
        "College",
        "New Haven",
        "Santa Barbara",
        "University"
      ],
      [
        "California",
        "NY",
        "CA",
        "New Haven",
        "New York"
      ],
      [
        "NY",
        "New Haven",
        "New York"
      ],
      [
        "",
        "University of Maryland",
        "University of California",
        "UIUC",
        "New Haven",
        "UCLA",
        "Columbia University",
        "UC Berkeley",
        "NYU",
        "University of",
        "University of California, Santa Barbara",
        "Cornell University",
        "Temple University",
        "New Haven University",
        "Rice University",
        "College Park",
        "University",
        "University of Michigan",
        "Harvard University",
        "Drexel University",
        "University of Connecticut",
        "University of Illinois",
        "University of Pennsylvania",
        "MIT"
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      "New Haven University",
      "Harvard University",
      "University of Connecticut",
      "University of Michigan",
      "College",
      "University of ",
      ",",
      "Drexel University",
      "University ",
      "USA",
      ", ",
      "University of California",
      "New York",
      "CA",
      "University",
      "New Haven",
      "California",
      "Columbia University",
      "California,",
      "University of",
      "UIUC",
      "NYU",
      "University of Illinois",
      "MIT",
      "UCLA",
      100,
      "UC Berkeley",
      "College Park",
      "Santa Barbara",
      "Rice University",
      "Temple University",
      "University of Maryland",
      "University of California, Santa Barbara",
      "Cornell University",
      " of",
      "NY",
      "University of Pennsylvania",
      ", USA"
    ],
    "time_diff_ms": 1653.2690000000002
  },
  "phone-5-long.sl": {
    "completions": [
      "(define-fun f (name String) String (str.at name 1))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "(str.at name 1)",
      "(str.substr name 1 3))",
      "(str.at name 1)",
      "(str.at name 1)"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))"
    ],
    "constants": [
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1
      ],
      [
        1,
        3
      ],
      [
        1
      ],
      [
        1
      ]
    ],
    "all_constants": [
      1,
      3,
      "(str.substr name 1 3))",
      "(str.at name 1)"
    ],
    "time_diff_ms": 1121.153
  },
  "phone-5-short.sl": {
    "completions": [
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\")))",
      "(define-fun f (name String) String (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(str.at name 1)"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\"))))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))"
    ],
    "constants": [
      [
        1,
        2
      ],
      [
        1,
        " ",
        "-"
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "-",
      " "
    ],
    "time_diff_ms": 1042.011
  },
  "11604909.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0)\n            (-\n              (str.indexof _arg_0 \".\")\n              (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0)\n            )\n)",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "(define-fun f ((s String)) String\n  (str.substr s\n              (+ (str.indexof s \" \" 0) 1)\n              (str.indexof s \" \" (str.indexof s \" \" 0))))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\"",
      "(define-fun f ((s String)) String\n  (str.++ \" \"\n          (str.substr s (+ 1 (str.indexof s \" \")) (- (str.indexof s \" \") 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (str.indexof s \" \" (str.indexof s \" \" 0))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.++ \" \" (str.substr s (+ 1 (str.indexof s \" \")) (- (str.indexof s \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))"
    ],
    "constants": [
      [
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))"
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 2))"
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      ".",
      1,
      0,
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 2))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))",
      " "
    ],
    "time_diff_ms": 1672.549
  },
  "phone-9-long.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")"
    ],
    "constants": [
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")"
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")"
      ]
    ],
    "all_constants": [
      ".",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")",
      "-",
      "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")",
      " ",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
    ],
    "time_diff_ms": 857.163
  },
  "univ_4_short.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col1 \"University of\" \"\")\n                                                                                                                                              \"University\" \"\")\n                                                                            \"College Park\" \"MD\")\n                                                                          \"University of Maryland\" \"College Park\")\n                                                                        \"University of Michigan\" \"Ann Arbor\")\n                                                                      \"University of Pennsylvania\" \"Philadelphia\")\n                                                                    \"Columbia University\" \"New York\")\n                                                                  \"Cornell University\" \"Ithaca\")\n                                                                \"UCLA\" \"Los Angeles\")\n                                                              \"NYU\" \"New York\")\n                                                            \"NY\" \"New York\")\n                                                          \"MI\" \"Ann Arbor\")\n                                                        \"PA\" \"Philadelphia\")\n                                                      \"USA\" \"\")\n                                                    \"CA\" \"USA\")\n                                                  \"CT\" \"CT\")\n                                                \"MD\" \"MD\")\n                                              \"NY\" \"New York\")\n                                            \"Phialdelphia\" \"Philadelphia\")\n                                          \"Los Angeles\" \"Los Angeles\")\n                                        \"Ithaca\" \"Ithaca\")\n                                      \"Ann Arbor\" \"Ann Arbor\")\n                                    \"New York\" \"New York\")\n                                  \"Philadelphia\" \"Philadelphia\")\n                                \"New York\" \"New York\")\n                              \"New York\" \"New York\")\n                            \"New York\" \"New York\")\n                          \"New York\" \"New York\")\n                        \"New York\" \"New York\")\n                      \"New York\" \"New York\")\n                    \"New York\" \"New York\")\n                  \"New York\" \"New York\")\n                \"New York\" \"New York\")\n              \"New York\" \"New York\")\n            \"New York\" \"New York\")\n          \"New York\" \"New York\")\n        \"New York\" \"New York\")\n      \"New York\" \"New York\")\n    \"New York\" \"New York\")\n  0 100))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca, New York\" \"Ithaca, NY\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca, New York\" \"Ithaca, NY\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.replace\n      (str.replace\n        (str.replace col2 \"New York\" \"NY\")\n        \"University of \" \"\")\n      \"College Park\" \"CP\")\n    0\n    (-\n      (str.indexof col2 \",\" 0)\n      1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" , \" \"\") \" ,\") \"\") \", \" \"\") \" ,\" \"\") \" ,\") \"\" \"USA\") 0 (- (str.indexof col2 \",\") 1))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\")\"",
      "\"(lambda (col1 col2) (str.substr (str.replace (str.replace (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") 0 (- (str.len col2) 1)))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col2 \"USA\" \"\") 1 (- (str.len (str.replace col2 \"USA\" \"\")) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\")\n               \"Phialdelphia, PA\" \"Philadelphia, PA\"\n               \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n               \"Ithaca, New York\" \"Ithaca, NY\"\n               \"College Park, MD\" \"College Park, MD, USA\"\n               \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\"\n               \"New York, New York\" \"New York, NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col1 0 (str.indexof col1 \",\" 0))\n    \", \"\n    (str.substr col2 1 (str.indexof col2 \",\" 0))\n    \", USA\"\n  )\n)",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"New York\\\" \\\"New York\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\")\""
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"MD\") \"University of Maryland\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"University of Pennsylvania\" \"Philadelphia\") \"Columbia University\" \"New York\") \"Cornell University\" \"Ithaca\") \"UCLA\" \"Los Angeles\") \"NYU\" \"New York\") \"NY\" \"New York\") \"MI\" \"Ann Arbor\") \"PA\" \"Philadelphia\") \"USA\" \"\") \"CA\" \"USA\") \"CT\" \"CT\") \"MD\" \"MD\") \"NY\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"Philadelphia\" \"Philadelphia\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") 0 100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca, New York\" \"Ithaca, NY\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca, New York\" \"Ithaca, NY\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"CP\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" , \" \"\") \" ,\") \"\") \", \" \"\") \" ,\" \"\") \" ,\") \"\" \"USA\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(lambda (col1 col2) (str.substr (str.replace (str.replace (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") 0 (- (str.len col2) 1)))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col2 \"USA\" \"\") 1 (- (str.len (str.replace col2 \"USA\" \"\")) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA\" \"Philadelphia, PA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York\" \"Ithaca, NY\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\" \"New York, New York\" \"New York, NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\" 0)) \", \" (str.substr col2 1 (str.indexof col2 \",\" 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"New York\\\" \\\"New York\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\")\")"
    ],
    "constants": [
      [
        "",
        0,
        "University of Maryland",
        "PA",
        "MD",
        "UCLA",
        "Ann Arbor",
        "Columbia University",
        "NYU",
        "USA",
        "University of",
        "CT",
        "New York",
        "Los Angeles",
        "Cornell University",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "College Park",
        "University",
        100,
        "University of Michigan",
        "Ithaca",
        "NY",
        "CA",
        "University of Pennsylvania"
      ],
      [
        "Ithaca, New York",
        "Ithaca, NY",
        "Philadelphia",
        "Phialdelphia",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        0,
        1,
        "CP",
        ",",
        "NY",
        "University of ",
        "College Park",
        "New York"
      ],
      [
        "",
        " , ",
        0,
        1,
        " of ",
        ", ",
        " ,",
        "USA",
        ",",
        "University ",
        "University of "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Philadelphia\" \"PA\") \"Ithaca\" \"NY\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"New York\" \"NY\")"
      ],
      [
        "(lambda (col1 col2) (str.substr (str.replace (str.replace (str.replace (str.++ col1 \",\" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") 0 (- (str.len col2) 1)))"
      ],
      [
        "",
        1,
        "USA",
        ", USA"
      ],
      [
        "New York, NY",
        "Ithaca, New York",
        "Phialdelphia, PA",
        "Ithaca, NY",
        ", USA",
        "New York, New York",
        ", ",
        "Ann Arbor, MI",
        "Ann Arbor, MI, USA",
        "College Park, MD, USA",
        "Los Angeles, CA, USA",
        "College Park, MD",
        "Los Angeles, CA",
        "Philadelphia, PA"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"PA\" \"PA\") \"MI\" \"MI\")"
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      "Los Angeles, CA",
      "CP",
      "Phialdelphia",
      "Ithaca",
      "New York, New York",
      "University of Michigan",
      "University of ",
      "MD",
      ",",
      "CT",
      "Philadelphia",
      "Ithaca, NY",
      "University ",
      "USA",
      "MI",
      ", ",
      "Phialdelphia, PA",
      "New York, NY",
      "College Park, MD, USA",
      "New York",
      "CA",
      "College Park, MD",
      "University",
      "Columbia University",
      "University of",
      "Philadelphia, PA",
      " ,",
      "NYU",
      " of ",
      "(lambda (col1 col2) (str.substr (str.replace (str.replace (str.replace (str.++ col1 \",\" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") 0 (- (str.len col2) 1)))",
      "Ann Arbor, MI",
      "Los Angeles, CA, USA",
      "Los Angeles",
      " , ",
      "PA",
      "UCLA",
      "College Park",
      100,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Philadelphia\" \"PA\") \"Ithaca\" \"NY\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"New York\" \"NY\")",
      "Ann Arbor, MI, USA",
      "Ithaca, New York",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"PA\" \"PA\") \"MI\" \"MI\")",
      "Ann Arbor",
      "University of Maryland",
      "University of Pennsylvania",
      "Cornell University",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1065.325
  },
  "phone-10-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+ \" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n           (str.substr name 0 3)\n           \" (\"\n           (str.substr name 3 3)\n           \") \"\n           (str.substr name 6 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 9 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))"
    ],
    "constants": [
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      1,
      ") ",
      3,
      4,
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      6,
      7,
      "-",
      9,
      " (",
      "+",
      "(str.++ "
    ],
    "time_diff_ms": 528.429
  },
  "phone-9.sl": {
    "completions": [
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \"\") \"([0-9]{3})([0-9]{3})([0-9]{3})\" \"\\\\1.\\\\2.\\\\3\"))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n    (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \"\") \"([0-9]{3})([0-9]{3})([0-9]{3})\" \"\\\\1.\\\\2.\\\\3\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "",
        "([0-9]{3})([0-9]{3})([0-9]{3})",
        "-",
        " ",
        "+",
        "\\1.\\2.\\3"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")"
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      ".",
      "",
      3,
      4,
      "-",
      8,
      " ",
      "\\1.\\2.\\3",
      "([0-9]{3})([0-9]{3})([0-9]{3})",
      "+",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")"
    ],
    "time_diff_ms": 1007.8209999999999
  },
  "clean-and-reformat-telephone-numbers.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "constants": [
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ]
    ],
    "all_constants": [
      "",
      ".",
      "-",
      " ",
      "<"
    ],
    "time_diff_ms": 1410.408
  },
  "stackoverflow7.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))"
    ],
    "constants": [
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      0,
      ""
    ],
    "time_diff_ms": 1683.851
  },
  "univ_4-long-repeat.sl": {
    "completions": [
      "\"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\"))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.replace col1 col2 \\\"USA\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\"))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace col1 col2 \\\"USA\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))"
    ],
    "constants": [
      [
        "(str.++ (str.replace (str.++ col1 \",\" col2) \", USA\" \"\"))"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\")"
      ],
      [
        "(str.++ (str.replace col1 col2 \"USA\") \", USA\")"
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \", USA\") \", USA\")"
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        ", USA",
        "NY",
        "NH",
        "New Haven",
        "New York"
      ]
    ],
    "all_constants": [
      0,
      1,
      ",",
      "(str.++ (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\")",
      "New York",
      "(str.++ (str.replace col1 col2 \"USA\") \", USA\")",
      "New Haven",
      "NH",
      "USA",
      ", ",
      "NY",
      "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \", USA\") \", USA\")",
      ", USA",
      "(str.++ (str.replace (str.++ col1 \",\" col2) \", USA\" \"\"))"
    ],
    "time_diff_ms": 1768.9679999999998
  },
  "strip-numeric-characters-from-cell.sl": {
    "completions": [
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (str.to.int _arg_0) \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.to.int _arg_0) \"\"))"
    ],
    "constants": [
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      0,
      "",
      "0123456789"
    ],
    "time_diff_ms": 2619.585
  },
  "36462127.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      1,
      "/"
    ],
    "time_diff_ms": 1002.298
  },
  "exceljet3.sl": {
    "completions": [
      "(str.substr _arg_0 5 (str.len _arg_0))",
      "(str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3))",
      "(str.replace _arg_0 \".*= \")",
      "(str.at _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.replace _arg_0 \".*= \")",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4))",
      "(str.++ _arg_0 \"\")",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.++ (str.substr _arg_0 5 (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) _arg_0))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (str.len _arg_0))))"
    ],
    "constants": [
      [
        5
      ],
      [
        0,
        1,
        "/",
        2,
        3,
        "fuel economy="
      ],
      [
        ".*= "
      ],
      [
        0,
        "=",
        1
      ],
      [
        ".*= "
      ],
      [
        0,
        4,
        5
      ],
      [
        ""
      ],
      [
        5
      ],
      [
        0,
        "="
      ],
      [
        5
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "/",
      3,
      5,
      "fuel economy=",
      4,
      "",
      ".*= ",
      "="
    ],
    "time_diff_ms": 2469.807
  },
  "stackoverflow3.sl": {
    "completions": [
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr (str.replace _arg_0 \" \" \"\") (- (str.len (str.replace _arg_0 \" \")) 1) 1)))))) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at (str.replace _arg_0 \" \" \"9\") (- (str.len _arg_0) 1))) -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)))))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \"1\" \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)) 1) 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr (str.replace _arg_0 \" \" \"\") (- (str.len (str.replace _arg_0 \" \")) 1) 1)))))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at (str.replace _arg_0 \" \" \"9\") (- (str.len _arg_0) 1))) -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \"1\" \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)) 1) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        "",
        1,
        " "
      ],
      [
        "9",
        1,
        " ",
        -1
      ],
      [
        0
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        1,
        "0123456789"
      ],
      [
        "",
        1,
        " "
      ],
      [
        "1",
        " ",
        1
      ],
      [
        "0",
        1
      ],
      [
        1
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "0123456789",
      "1",
      "0",
      "9",
      " ",
      -1
    ],
    "time_diff_ms": 675.316
  },
  "univ_5-long.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \")",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\" USA\\\")\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\"))",
      "(str.substr (str.substr col2 0 (str.indexof col2 \",\" 0)) 1 (str.len (str.substr col2 0 (str.indexof col2 \",\" 0))))\", USA\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "\"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "(str.substr col2 (str.indexof col2 \", \" 0) (str.len col2))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\" USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (str.indexof col2 \",\" 0)) 1 (str.len (str.substr col2 0 (str.indexof col2 \",\" 0)))))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \", \" 0) (str.len col2)))"
    ],
    "constants": [
      [
        "",
        ", ",
        "NY",
        "University of ",
        ", USA, ",
        "New York"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \", USA\" \" USA\")"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "NY",
        "",
        "University",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))"
      ],
      [
        0,
        ", "
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      ",",
      "New York",
      "University",
      ", USA, ",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \", USA\" \" USA\")",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      ", ",
      "NY",
      "University of "
    ],
    "time_diff_ms": 1672.687
  },
  "exceljet2.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      -1
    ],
    "time_diff_ms": 1237.27
  },
  "univ_6.sl": {
    "completions": [
      "(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.substr col2 3 2) \", \" \n    (ite \n      (str.contains col2 \"New York\") \"NY\" \n      (str.at col2 0)) \n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr (str.substr col2 0 (str.indexof col2 \",\")) 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\")) \", USA\"))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.at col2 0 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (str.indexof col2 \", \" 0 1) 3)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \",\") 2))) \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 2) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr (str.substr col2 0 (str.indexof col2 \",\")) 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.at col2 0 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (str.indexof col2 \", \" 0 1) 3)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \",\") 2))) \", USA\"))"
    ],
    "constants": [
      [
        0,
        2,
        3,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "NY",
        "",
        "New York",
        "University of "
      ],
      [
        1,
        2,
        ", USA",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        ", USA",
        ",",
        "NY",
        "New York"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\" \"\")"
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        3,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      3,
      "New York",
      1,
      ",",
      "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\" \"\")",
      ", ",
      "NY",
      ", USA",
      "University of "
    ],
    "time_diff_ms": 880.037
  },
  "stackoverflow2.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \" korea\" \"\")",
      "(str.substr _arg_0 0 (- (str.len _arg_0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        "",
        " korea"
      ],
      [
        0,
        1
      ],
      [
        0,
        " "
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      "",
      " korea",
      1,
      "india china japan indonesia korea",
      " "
    ],
    "time_diff_ms": 1095.918
  },
  "phone-6-long-repeat.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(str.at name 4)",
      "\"(str.substr name 5 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(str.substr name 4 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.substr name 4 3))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        4
      ],
      [
        4
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 4)"
      ],
      [
        "(str.at name 4)"
      ],
      [
        4
      ],
      [
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5,
      "(str.substr name 5 3))",
      "(str.at name 4)"
    ],
    "time_diff_ms": 894.505
  },
  "25239569.sl": {
    "completions": [
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" _BRD \" \" _Branding \") )",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n  (str.replace s \" _BRD \" \" _Branding \"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))"
    ],
    "constants": [
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ]
    ],
    "all_constants": [
      " _BRD ",
      "BRD",
      " _Branding ",
      "Branding"
    ],
    "time_diff_ms": 151.481
  },
  "univ_5_short.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.substr \n        (str.replace \n            (str.++ col1 \", \" col2 \", USA\") \n            \", New York\" \", NY\") \n        2 \n        (- (str.len col1) 2)\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 1 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ (str.indexof col2 \", \" 0) 2) (- (str.len col2) (+ (str.len col1) 2))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace col2 \"New York\" \"NY\") \n          \"New York\" \"NY\") \n        \"New York\" \"NY\") \n      \"New York\" \"NY\")\n    0\n    (- (str.indexof col2 \",\" 0) 1)\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", New York\" \", NY\") 2 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 2 100))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 1 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \" 0) 2) (- (str.len col2) (+ (str.len col1) 2))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))"
    ],
    "constants": [
      [
        0,
        1,
        ", "
      ],
      [
        "",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        ", NY",
        2,
        ", USA",
        ", ",
        ", New York"
      ],
      [
        2,
        100
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        2,
        ", "
      ],
      [
        "",
        ", "
      ],
      [
        0,
        1,
        ",",
        "NY",
        "New York"
      ],
      [
        2,
        ", "
      ],
      [
        2,
        ", "
      ]
    ],
    "all_constants": [
      0,
      1,
      ",",
      "",
      "New York",
      ", NY",
      2,
      100,
      ", ",
      "NY",
      ", USA",
      ", New York",
      "University of "
    ],
    "time_diff_ms": 1706.958
  },
  "remove-text-by-position.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "/users/"
    ],
    "time_diff_ms": 2160.308
  },
  "univ_6-long-repeat.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "\"(str.++ col2 (str.++ \\\", \\\" col1) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 (str.++ \\\", \\\" col1) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))"
    ],
    "constants": [
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        "(str.++ col2 (str.++ \", \" col1) \", USA\")"
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ]
    ],
    "all_constants": [
      "USA",
      ", ",
      "(str.++ col2 (str.++ \", \" col1) \", USA\")",
      ", USA"
    ],
    "time_diff_ms": 2669.156
  },
  "univ_4.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "\"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\"",
      "\"(str.substr col2 0 (str.indexof col2 \\\",\\\" 0))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\")\n               \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\"\n               \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n               \"Ithaca, New York, USA\" \"Ithaca, NY, USA\"\n               \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\"\n               \"College Park, MD\" \"College Park, MD, USA\"\n               \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\"\n               \"New York, NY, USA\" \"New York, NY, USA\"\n               \"New York, New York, USA\" \"New York, NY, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col1 \"University of \" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 2) \", USA\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace col1 \"University of \" \"\")\n                  \"University \" \"\")\n                \" of \" \"\")\n              \"College \" \"\")\n            \"Penn \" \"\")\n          \"NYU \" \"\")\n        \"Columbia \" \"\")\n      \"UCLA \" \"\")\n    0 \n    (- \n      (str.indexof col2 \",\" 0) \n      2)\n  )\n)"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (str.indexof col2 \\\",\\\" 0))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York, USA\" \"Ithaca, NY, USA\" \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\" \"New York, NY, USA\" \"New York, NY, USA\" \"New York, New York, USA\" \"New York, NY, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col1 \"University of \" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \"College \" \"\") \"Penn \" \"\") \"NYU \" \"\") \"Columbia \" \"\") \"UCLA \" \"\") 0 (- (str.indexof col2 \",\" 0) 2)))"
    ],
    "constants": [
      [
        "NY",
        "",
        "New York",
        "University of "
      ],
      [
        "",
        "MI",
        "NY",
        "Michigan",
        "University of ",
        "New York"
      ],
      [
        "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))"
      ],
      [
        "(str.substr col2 0 (str.indexof col2 \",\" 0))"
      ],
      [
        "New York, New York, USA",
        ", USA",
        ", ",
        "New York, NY, USA",
        "Phialdelphia, PA, USA",
        "Ann Arbor, MI, USA",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Los Angeles, CA, USA",
        "Ithaca, NY, USA",
        "College Park, MD",
        "Los Angeles, CA",
        "Ithaca, New York, USA"
      ],
      [
        "",
        "Cornell",
        "College Park",
        "Penn",
        "University of",
        "Ithaca",
        "UCLA",
        "University",
        "Los Angeles"
      ],
      [
        "NY",
        "New York",
        "MI",
        "Michigan"
      ],
      [
        "",
        0,
        1,
        2,
        ", USA",
        ", ",
        ",",
        "University of "
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "",
        0,
        "Penn ",
        2,
        " of ",
        "UCLA ",
        ",",
        "Columbia ",
        "University ",
        "University of ",
        "NYU ",
        "College "
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      2,
      "(str.substr col2 0 (str.indexof col2 \",\" 0))",
      "New York, New York, USA",
      "Los Angeles, CA",
      "Ithaca",
      "Penn",
      "University of ",
      ",",
      "Ithaca, NY, USA",
      "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))",
      "Columbia ",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "University ",
      "MI",
      ", ",
      "NYU ",
      "College Park, MD, USA",
      "New York",
      "College Park, MD",
      "University",
      "UCLA ",
      "University of",
      "Philadelphia, PA, USA",
      " of ",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      "Los Angeles",
      "College ",
      "College Park",
      "UCLA",
      "Ann Arbor, MI, USA",
      "Ithaca, New York, USA",
      "Cornell",
      "Michigan",
      "Phialdelphia, PA, USA",
      "NY",
      ", USA",
      "Penn "
    ],
    "time_diff_ms": 731.7570000000001
  },
  "phone-10-long-repeat.sl": {
    "completions": [
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 7 3)\n  \"-\"\n  (str.substr name 11 3))",
      "(str.++ \"+\"\n         (str.substr name 0 2)\n         \" (\"\n         (str.substr name 2 3)\n         \") \"\n         (str.substr name 5 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))",
      "(str.++ \"+\" \"(\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))",
      "(str.++ \"+\"\n         (str.substr name 0 2)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 7 3)\n         \"-\"\n         (str.substr name 11 3)\n         \"-\" \n         (str.substr name 15 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 2) \" (\" (str.substr name 2 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" \"(\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 2) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))"
    ],
    "constants": [
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        5,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        "+106 (",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        "+",
        "(",
        ") "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "-",
        "+",
        12,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        7,
        "-",
        "+",
        11,
        15,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      11,
      12,
      15,
      "(",
      "+",
      " (",
      ") ",
      "+106 (",
      "-"
    ],
    "time_diff_ms": 1689.7640000000001
  },
  "univ_5.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \", \" 0)) (str.len col1) (str.len (str.replace (str.at col2 (+ (str.indexof col2 \", \" 0) 2)) \" \" \"\")) 3))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof col2 \", \" 0) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \", \" 0)) (str.len col1) (str.len (str.replace (str.at col2 (+ (str.indexof col2 \", \" 0) 2)) \" \" \"\")) 3)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof col2 \", \" 0) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        "",
        2,
        3,
        ", ",
        " "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        0,
        2,
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        2,
        ", "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      ",",
      3,
      "New York",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      " ",
      ", ",
      "NY",
      ", USA",
      "University of "
    ],
    "time_diff_ms": 1413.942
  },
  "stackoverflow1.sl": {
    "completions": [
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.replace _arg_0 \" Inc.\" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))"
    ],
    "constants": [
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        "",
        " Inc."
      ],
      [
        0,
        " Inc"
      ]
    ],
    "all_constants": [
      0,
      1,
      " Inc.",
      "",
      " Inc"
    ],
    "time_diff_ms": 961.3800000000001
  },
  "exceljet1.sl": {
    "completions": [
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\"))) )",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))"
    ],
    "constants": [
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "."
      ]
    ],
    "all_constants": [
      ".",
      1,
      "_"
    ],
    "time_diff_ms": 1188.5140000000001
  },
  "initials-long-repeat.sl": {
    "completions": [
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.indexof name \" \" 0) 1)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.indexof name \" \" 0) 1)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 1474.045
  },
  "find-nth-occurrence-of-character.sl": {
    "completions": [
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(str.indexof _arg_0 \"_\" _arg_1))",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(str.indexof _arg_0 \"_\" _arg_1))",
      "(str.indexof _arg_0 \", \" (_arg_1 0) (_arg_1 1))",
      "(+ (str.indexof _arg_0 \", \" 0) 1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10)"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (_arg_1 0) (_arg_1 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10))"
    ],
    "constants": [
      [
        1,
        2,
        ", "
      ],
      [
        "_"
      ],
      [
        1,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        ", "
      ],
      [
        "_"
      ],
      [
        0,
        1,
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        10,
        -1,
        ", "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      10,
      ", ",
      "_",
      -1
    ],
    "time_diff_ms": 1417.628
  },
  "extract-word-containing-specific-text.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.len \"_\") (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 1 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \") 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.len \"_\") (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 1 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "_",
      " "
    ],
    "time_diff_ms": 1777.1180000000002
  },
  "extract-nth-word-from-text-string.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.at _arg_0 _arg_1)",
      "(str.++ \"anything\" \" \")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0))",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (-\n  (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof\n  _arg_0 \" \" 0) 1))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \" \"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [],
      [
        " ",
        "anything"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "anything"
    ],
    "time_diff_ms": 1907.275
  }
}