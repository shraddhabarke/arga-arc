{
  "hd-25.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) #x0000000000000040))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(ite (>= (bvult x y) #b0) (bvudiv (bvmul x y) #x0000000000000002) #x0000000000000000)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(ite (>= (bvlshr (bvmul x y) (_ bv64 64)) (_ bv1 64)) (bvlshr (bvmul x y) (_ bv64 64)) (_ bv0 64))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(ite (>= (bvmul x y) #x8000000000000000) (bvlshr (bvmul x y) #x40) #x0)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvurem (bvmul x y) (bvshl (bvmul x y) (_ bv32 64)))",
      "(bvurem (bvmul x y) (bvnot #x0000000000000001))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(ite (>= (bvand x y) #x8000000000000000) (bvlshr (bvmul x y) #x20) #x0)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvurem (bvmul x y) #x00000000000000010000000000000000))",
      "(ite (bvuge x #x00000000000000010000000000000000) (bvurem (bvmul x y) #x00000000000000000000000000000001) #x00000000000000000000000000000000))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvurem (bvmul x y) #x00000000000000010000000000000000))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvurem (bvmul x y) #x00000000000000010000000000000001))",
      "(ite (>= (bvmul x y) #x8000000000000000) (bvlshr (bvmul x y) #x0000000000000040) #x0000000000000000)",
      "(ite (>= (bvand x y) ((_ extract 63 32) (bvmul x y))) (bvlshr (bvmul x y) (_ bv32 64)) 0)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (bvlshr (bvmul x y) (_ bv1 64)))",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(ite (>= (bvmul x y) #x8000000000000000) (bvlshr (bvmul x y) #x0000000000000040) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvurem (bvmul x y) (bvnot #x0000000000000001))",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvurem (bvmul x y) #x0000000000000001))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(bvurem (bvmul x y) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvshl (bvudiv (bvmul x y) #x0000000000000002) #x0000000000000001))",
      "(bvudiv (bvmul x y) (_ bv2 64))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvudiv (bvmul x y) #x0000000000000002))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvudiv (bvmul x y) #x0000000000000002))",
      "(bvurem (bvmul x y) (bvshl (bvlshr (bvmul x y) #x0000000000000040) #x0000000000000040))",
      "(bvurem (bvmul x y) ((_ extract 63 32) (bvmul x y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvudiv (bvmul x y) #x00000000000000010000000000000000))",
      "(ite (bvugt x #x0000000000000000) (bvudiv (bvmul x y) #x00000000000000000000000000000001) #x0000000000000000)",
      "(bvudiv (bvmul x y) #x00000000000000010000000000000000)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvudiv (bvmul x y) #x0000000000000001))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) \\#x0000000000000040))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvult x y) \\#b0) (bvudiv (bvmul x y) \\#x0000000000000002) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvlshr (bvmul x y) (_ bv64 64)) (_ bv1 64)) (bvlshr (bvmul x y) (_ bv64 64)) (_ bv0 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvmul x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x40) \\#x0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvshl (bvmul x y) (_ bv32 64))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvnot \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvand x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x20) \\#x0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x00000000000000010000000000000000) (bvurem (bvmul x y) \\#x00000000000000000000000000000001) \\#x00000000000000000000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvmul x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x0000000000000040) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvand x y) ((_ extract 63 32) (bvmul x y))) (bvlshr (bvmul x y) (_ bv32 64)) 0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvmul x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x0000000000000040) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvnot \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvlshr (bvmul x y) (_ bv64 64))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvshl (bvudiv (bvmul x y) \\#x0000000000000002) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) (_ bv2 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvshl (bvlshr (bvmul x y) \\#x0000000000000040) \\#x0000000000000040)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) ((_ extract 63 32) (bvmul x y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvudiv (bvmul x y) \\#x00000000000000000000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000001))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        32,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        32,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0,
      32,
      63
    ],
    "time_diff_ms": 2167.317
  },
  "hd-24.sl": {
    "completions": [
      "(bvshl x (bvadd #x0000000000000001 (bvclz x)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand (bvnot x) (bvsub x #x0000000000000001)))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (let ((n (bvsub (bvshl x #x0000000000000001) #x0000000000000001))) (bvshl (bvadd n #x0000000000000001) (ite (= (bvand n x) #x0000000000000000) #x0000000000000000 #x0000000000000001))))))",
      "(ite (<= x #x0000000000000001) #x0000000000000001\n     (bvshl #x0000000000000001\n             (bvsub (bvshl #x0000000000000001\n                           (bvlshr x #x0000000000000001))\n                     x)))",
      "(ite (>= x #x00000000000000000000000000000000000000000000000000000000000000010) #x00000000000000000000000000000000000000000000000000000000000000010 (bvshl #x1 (bvclz x)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (<= x #x0000000000000001) #x0000000000000002 (bvshl #x0000000000000001 (bvclz x)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(bvshl x (bvadd (bvnot x) #x0000000000000001))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(ite (bvuge x #x00000000000000000000000000000000000000000000000000000000000000010) #x00000000000000000000000000000000000000000000000000000000000000020 (ite (bvuge x #x00000000000000000000000000000000000000000000000000000000000000008) #x00000000000000000000000000000000000000000000000000000000000000010 #x000000000000000000000000000000000000000000000000000000000000",
      "(ite (<= x #x0000000000000002)\n     #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd (bvclz x)\n                   #x0000000000000001)))",
      "(ite (bvuge x #x0000000000000001)\n     (bvshl #x0000000000000001 (bvclz x))\n     #x0000000000000002)",
      "(ite (bvuge x #x0000000000000002) #x0000000000000002 (ite (bvuge x #x0000000000000001) #x0000000000000001 #x0000000000000002))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(ite (<= x #x0000000000000001) #x0000000000000001 (bvshl #x0000000000000001 (bvclz x)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (>= x #x0000000000000020) #x0000000000000040\n     (ite (>= x #x0000000000000010) #x0000000000000020\n          (ite (>= x #x0000000000000008) #x0000000000000010\n               (ite (>= x #x0000000000000004) #x0000000000000008\n                    (ite (>= x #x0000000000000002) #x0000000000000004\n                         (ite (>= x #x0000000000000001) #x0000000000000002\n                              #x0000000000000001))))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(bvshl (bvnot (bvsub #x0000000000000000 x)) #x0000000000000001)",
      "(bvshl (bvnot (bvsub #x0000000000000000 x)) #x0000000000000001))",
      "(ite (<= x #x0000000000000001) #x0000000000000002 (bvshl #x0000000000000001 (bvclz x)))",
      "(bvshl (bvnot (bvshl (bvnot x) #x0000000000000001)) #x0000000000000001))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(bvshl x (bvnot (bvshl #x1 (bvnot x))))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001))))))",
      "(bvshl x (bvadd (bvnot x) #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvshl (bvnot (bvshl x #x0000000000000001)) #x0000000000000001)\n     #x0000000000000001)",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand (bvnot x) (bvsub x #x0000000000000001)))))",
      "(bvshl x (bvadd #x0000000000000001 (bvclz x)))",
      "(bvshl x (bvnot (bvlshr (bvnot x) #x0000000000000001)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr (bvsub x #x0000000000000001) #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (<= x #x0000000000000001) #x0000000000000002 (bvshl #x0000000000000001 (bvclz x)))",
      "(ite (<= x #x0000000000000001)\n     #x0000000000000001\n     (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001)))\n       (ite (= x n)\n            x\n            (bvshl #x0000000000000001 n))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd #x0000000000000001\n                   (bvlshr x #x0000000000000001))))",
      "(ite (<= x #x0000000000000001) #x0000000000000001 (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001))) (ite (= n x) x (bvshl #x0000000000000001 n))))",
      "(bvshl x (bvadd #x0000000000000001 (bvclz x)))",
      "(ite (bvuge x #x0000000000000001) (bvshl #x0000000000000001 (bvclz x)) #x0000000000000002)",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvashr x #x0000000000000001)))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvclz x)))",
      "(bvshl x (bvnot (bvshl (bvneg x) (bvnot x))) 1)",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand (bvnot x) x))))",
      "(ite (bvugt x #x0000000000000001) (bvshl (bvnot (bvsub #x0000000000000000 x)) #x0000000000000001) #x0000000000000002)",
      "(bvshl x (bvadd #x0000000000000001 (bvsmul (bvlshr x #x0000000000000001) #x0000000000000001)))",
      "(ite (<= x #x0000000000000001)\n     #x0000000000000001\n     (bvshl #x0000000000000001\n             (bvadd (bvclz x)\n                     #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr (bvsub x #x0000000000000001) #x0000000000000001)))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(ite (>= x #x0000000000000001)\n     (let ((n (bvsub (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)) #x0000000000000001)))\n       (ite (= n x) x (bvshl #x0000000000000001 n)))\n     #x0000000000000000))",
      "(bvshl x (bvadd #x0000000000000001 (bvclz x)))",
      "(ite (<= x #x0000000000000001) #x0000000000000002 (bvshl #x0000000000000001 (bvclz x)))",
      "(ite (<= x #x0000000000000001) #x0000000000000001 (let ((n (bvsub x #x0000000000000001))) (bvshl #x0000000000000001 (bvclz n))))",
      "(bvshl x (bvadd (bvnot x) #x0000000000000001))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (<= x #x0000000000000002)\n     #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd (bvlog2 (bvsub x #x0000000000000001)) #x0000000000000001)))",
      "(ite (>= x #x0000000000000002)\n     (bvshl #x0000000000000001\n             (bvadd #b1\n                    (bvlog2\n                     (bvsub x #x0000000000000001))))\n     #x0000000000000002)",
      "(bvshl x (bvadd #x0000000000000001 (bvlshr x #x0000000000000001)))",
      "(bvshl (bvnot (bvshl (bvnot x) #x0000000000000001)) #x0000000000000001))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(bvshl x (bvadd (bvnot x) #x0000000000000001))",
      "(ite (<= x #x0000000000000001) #x0000000000000000 (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001))) (ite (= x n) x (bvshl #x0000000000000001 n))))",
      "(ite (<= x #x0000000000000001) #x0000000000000000\n     (ite (<= x #x0000000000000002) #x0000000000000002\n          (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001))))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand (bvnot x) x))))",
      "(ite (>= x #x0000000000000020) #x0000000000000040\n     (ite (>= x #x0000000000000010) #x0000000000000020\n          (ite (>= x #x0000000000000008) #x0000000000000010\n               (ite (>= x #x0000000000000004) #x0000000000000008\n                    (ite (>= x #x0000000000000002) #x0000000000000004\n                         (ite (>= x #x0000000000000001) #x0000000000000002\n                              #x0000000000000001))))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (let ((n (bvsub (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)) #x0000000000000001))) (ite (= n x) n (bvshl #x0000000000000001 n))))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (>= x #x0000000000000001)\n     (let ((n (bvadd (bvsub (bvshl x #x0000000000000001) #x0000000000000001) #x0000000000000001)))\n          (ite (= n x) x n))\n     #x0000000000000000)",
      "(bvshl (bvnot (bvshl (bvnot x) (_ bv1 64))) (_ bv1 64))",
      "(ite (<= x #x0000000000000001) #x0000000000000002 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(bvshl x (bvadd (bvlshr x (_ bv1 64)) (_ bv1 64)))",
      "(bvshl x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (ite (= x #x0000000000000001) #x0000000000000002\n          (ite (= x #x0000000000000002) #x0000000000000004\n               (ite (= x #x0000000000000004) #x0000000000000008\n                    (ite (= x #x0000000000000008) #x0000000000000010\n                         (ite (= x #x0000000000000010) #x0000000000000020\n                              (ite (= x #xffffffffffffffff) #xffffffffffffffff\n                                   (ite (= x (bvnot x)) x\n                                        (ite (= x (bvxor x x)) x\n                                             (ite (= x (bvand x x)) x\n                                                  (ite (= x (bvor x x)) x\n                                                       (ite (= x (bvneg x)) x\n                                                            (ite (= x (bvadd x x)) x\n                                                                 (ite (= x (bvmul x x)) x\n                                                                      (ite (= x (bvudiv x x)) x\n                                                                           (ite (= x (bvurem x x)) x\n                                                                                (ite (= x (bvlshr x x)) x\n                                                                                     (ite (= x (bvashr x x)) x\n                                                                                          (ite (= x (bvshl x x)) x\n                                                                                               (ite (= x (bvsdiv x x)) x\n                                                                                                    (ite (= x (bvsrem x x)) x\n                                                                                                         (ite (= x (bvsub x x)) x\n                                                                                                              (ite (ite (= x x) x) x)))))))))))))))))))))))))",
      "(ite (>= x #x0000000000000001) (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))) #x0000000000000001)",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)))",
      "(ite (>= x #x0000000000000002) (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)) #x0000000000000002)",
      "((_ bv1 64))",
      "(ite (<= x #x0000000000000002) #x0000000000000002 (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (>= x #x0000000000000020) #x0000000000000020 (bvshl #x0000000000000001 (bvclz (bvsub x #x0000000000000001))))",
      "(ite (bvuge x #x0000000000000001) (bvshl #x0000000000000001 (bvclz x)) #x0000000000000002)"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand (bvnot x) (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (let ((n (bvsub (bvshl x \\#x0000000000000001) \\#x0000000000000001))) (bvshl (bvadd n \\#x0000000000000001) (ite (= (bvand n x) \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvsub (bvshl \\#x0000000000000001 (bvlshr x \\#x0000000000000001)) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x00000000000000000000000000000000000000000000000000000000000000010) \\#x00000000000000000000000000000000000000000000000000000000000000010 (bvshl \\#x1 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x00000000000000000000000000000000000000000000000000000000000000010) \\#x00000000000000000000000000000000000000000000000000000000000000020 (ite (bvuge x \\#x00000000000000000000000000000000000000000000000000000000000000008) \\#x00000000000000000000000000000000000000000000000000000000000000010 \\#x000000000000000000000000000000000000000000000000000000000000)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvshl \\#x0000000000000001 (bvclz x)) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000002) \\#x0000000000000002 (ite (bvuge x \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000040 (ite (>= x \\#x0000000000000010) \\#x0000000000000020 (ite (>= x \\#x0000000000000008) \\#x0000000000000010 (ite (>= x \\#x0000000000000004) \\#x0000000000000008 (ite (>= x \\#x0000000000000002) \\#x0000000000000004 (ite (>= x \\#x0000000000000001) \\#x0000000000000002 \\#x0000000000000001)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvsub \\#x0000000000000000 x)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvsub \\#x0000000000000000 x)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) \\#x0000000000000001)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvshl \\#x1 (bvnot x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvshl (bvnot (bvshl x \\#x0000000000000001)) \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand (bvnot x) (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvlshr (bvnot x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr (bvsub x \\#x0000000000000001) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= x n) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= n x) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvshl \\#x0000000000000001 (bvclz x)) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvashr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvshl (bvneg x) (bvnot x))) 1))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand (bvnot x) x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000001) (bvshl (bvnot (bvsub \\#x0000000000000000 x)) \\#x0000000000000001) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvsmul (bvlshr x \\#x0000000000000001) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr (bvsub x \\#x0000000000000001) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (let ((n (bvsub (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= n x) x (bvshl \\#x0000000000000001 n))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (let ((n (bvsub x \\#x0000000000000001))) (bvshl \\#x0000000000000001 (bvclz n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvlog2 (bvsub x \\#x0000000000000001)) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000002) (bvshl \\#x0000000000000001 (bvadd \\#b1 (bvlog2 (bvsub x \\#x0000000000000001)))) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) \\#x0000000000000001)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000000 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= x n) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000000 (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand (bvnot x) x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000040 (ite (>= x \\#x0000000000000010) \\#x0000000000000020 (ite (>= x \\#x0000000000000008) \\#x0000000000000010 (ite (>= x \\#x0000000000000004) \\#x0000000000000008 (ite (>= x \\#x0000000000000002) \\#x0000000000000004 (ite (>= x \\#x0000000000000001) \\#x0000000000000002 \\#x0000000000000001)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= n x) n (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (let ((n (bvadd (bvsub (bvshl x \\#x0000000000000001) \\#x0000000000000001) \\#x0000000000000001))) (ite (= n x) x n)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) (_ bv1 64))) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvadd (bvlshr x (_ bv1 64)) (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000002 (ite (= x \\#x0000000000000002) \\#x0000000000000004 (ite (= x \\#x0000000000000004) \\#x0000000000000008 (ite (= x \\#x0000000000000008) \\#x0000000000000010 (ite (= x \\#x0000000000000010) \\#x0000000000000020 (ite (= x \\#xffffffffffffffff) \\#xffffffffffffffff (ite (= x (bvnot x)) x (ite (= x (bvxor x x)) x (ite (= x (bvand x x)) x (ite (= x (bvor x x)) x (ite (= x (bvneg x)) x (ite (= x (bvadd x x)) x (ite (= x (bvmul x x)) x (ite (= x (bvudiv x x)) x (ite (= x (bvurem x x)) x (ite (= x (bvlshr x x)) x (ite (= x (bvashr x x)) x (ite (= x (bvshl x x)) x (ite (= x (bvsdiv x x)) x (ite (= x (bvsrem x x)) x (ite (= x (bvsub x x)) x (ite (ite (= x x) x) x))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001))) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000002) (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) ((_ bv1 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000020 (bvshl \\#x0000000000000001 (bvclz (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvshl \\#x0000000000000001 (bvclz x)) \\#x0000000000000002))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        1
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      1
    ],
    "time_diff_ms": 1356.601
  },
  "hd-09.sl": {
    "completions": [
      "(bvabs x)",
      "(bvabs x)",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000))))",
      "(bvand x (bvnot (bvslt x #x0000000000000000))))",
      "(bvabs x)",
      "(bvand x (bvnot (bvneg x)))",
      "(bvabs x)",
      "(bvabs x))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvsub (ite (bvsge x #x0000000000000000) x (bvneg x)) #x0000000000000000)",
      "(bvabs x)",
      "(bvabs x))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvsub (ite (bvsge x #x0000000000000000) x (bvneg x)) #x0000000000000000))",
      "(bvabs x))",
      "(bvabs x)",
      "(bvabs x))",
      "(bvabs x)",
      "(bvadd x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvabs x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (ite (bvsge x #x0000000000000000)\n       x\n       (bvneg x)))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000))))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvsub (ite (bvsge x #x0000000000000000) x (bvneg x)) #x0000000000000000))",
      "(bvsub x (ite (bvlshr x #x000000000000003f) x (bvnot x)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvabs x)",
      "(bvand x (bvnot (bvslt x #x0000000000000000))))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvabs x)",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvabs x)",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvabs x)",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvabs x)",
      "(bvabs x)",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))",
      "(bvabs x)",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(bvabs x)",
      "(bvabs x))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x))",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x)",
      "(bvabs x))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (ite (bvsge x \\#x0000000000000000) x (bvneg x)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (ite (bvsge x \\#x0000000000000000) x (bvneg x)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (ite (bvsge x \\#x0000000000000000) x (bvneg x)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvlshr x \\#x000000000000003f) x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1819.961
  },
  "hd-26.sl": {
    "completions": [
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(ite (= (bvurem x k) #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub (bvshl (bvadd x (bvsub k #x0000000000000001)) #x0000000000000001) (bvsub x #x0000000000000001)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvlshr (bvsub k (bvadd x (bvsub k #x0000000000000001))) #x0000000000000001))",
      "(bvudiv (bvadd x (bvsub k #x0000000000000001)) k))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvadd k (bvneg (bvurem x k))) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvudiv (bvadd x (bvsub k #x0000000000000001)) k)",
      "(ite (= k #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(ite (= (bvurem x k) #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd k (bvsub x (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl (bvadd x (bvsub k #x0000000000000001)) #x0000000000000001) (bvsub k #x0000000000000001)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvadd x k) #x0000000000000001)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl (bvadd x (bvsub k #x0000000000000001)) #x0000000000000001) x))",
      "(ite (= k #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x (bvsub k #x0000000000000001)) k)) x))",
      "(bvadd x (bvsub (bvshl (bvudiv (bvadd x k) k) k) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvlshr (bvsub k (bvrem x k)) k))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvadd x (bvsub (bvshl k (bvlshr (bvsub x #x0000000000000001) k)) #x0000000000000001))",
      "(ite (= k #x0000000000000000)\n     x\n     (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl (bvadd x k) (bvlshr (bvsub x #x0000000000000001) x)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvclz (bvsub x #x0000000000000001)) k)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) x))",
      "(bvadd x (bvsub (bvshl k (bvsub x #x0000000000000001)) x))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x (bvsub k #x0000000000000001)) k)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x))",
      "(bvadd x (bvsub (bvlshr (bvadd x k) k) (bvudiv (bvadd x k) k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvadd (bvshl x k) k) x)) x))",
      "(bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x))",
      "(ite (<= (bvurem x k) #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvadd (bvsub x #x0000000000000001) k) #x0000000000000001)) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x))",
      "(bvadd x (bvsub (bvshl (bvadd x k) #x0000000000000001) #x0000000000000001))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(ite (= k #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvlshr (bvadd x k) k) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(ite (= k #x0000000000000000)\n     x\n     (bvadd x (bvsub k (bvurem x k))))",
      "(bvadd k (bvsub x (bvurem x k)))",
      "(bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvurem x k) \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x (bvsub k \\#x0000000000000001)) \\#x0000000000000001) (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvlshr (bvsub k (bvadd x (bvsub k \\#x0000000000000001))) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvudiv (bvadd x (bvsub k \\#x0000000000000001)) k))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvadd k (bvneg (bvurem x k))) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvudiv (bvadd x (bvsub k \\#x0000000000000001)) k))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvurem x k) \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd k (bvsub x (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x (bvsub k \\#x0000000000000001)) \\#x0000000000000001) (bvsub k \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvadd x k) \\#x0000000000000001)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x (bvsub k \\#x0000000000000001)) \\#x0000000000000001) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x (bvsub k \\#x0000000000000001)) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvudiv (bvadd x k) k) k) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvlshr (bvsub k (bvrem x k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvlshr (bvsub x \\#x0000000000000001) k)) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x k) (bvlshr (bvsub x \\#x0000000000000001) x)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvclz (bvsub x \\#x0000000000000001)) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub x \\#x0000000000000001)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x (bvsub k \\#x0000000000000001)) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvlshr (bvadd x k) k) (bvudiv (bvadd x k) k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvadd (bvshl x k) k) x)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsdiv (bvadd x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (<= (bvurem x k) \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvadd (bvsub x \\#x0000000000000001) k) \\#x0000000000000001)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x k) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvlshr (bvadd x k) k) k)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd k (bvsub x (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x k) (bvnot k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1223.5900000000001
  },
  "hd-27.sl": {
    "completions": [
      "(ite (bvult x y) x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= y #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= x #x0000000000000000) #x0000000000000000\n          (ite (= y #x0000000000000000) #x0000000000000000\n            (ite (= x #x0000000000000064) #x0000000000000064\n              (ite (= y #x0000000000000064) #x0000000000000064\n                #x0000000000000000))))))))",
      "(bvand x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvslt x y) x y))",
      "(ite (bvslt x y) x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvule x y) x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvule x y) x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= y #x0000000000000001) #x0000000000000000\n          (ite (= x #x0000000000000064) #x0000000000000064\n            (ite (= y #x0000000000000064) #x0000000000000064\n              (ite (= y #x000000000000000a) #x0000000000000000\n                (ite (= x #x000000000000000a) #x0000000000000000\n                  (ite (= x #x0000000000002710) #x0000000000000064\n                    (ite (= y #x0000000000000064) #x0000000000000064\n                      (ite (= y #x0000000000000001) #x0000000000000000\n                        (ite (= x #x0000000000000001) #x0000000000000000\n                          (ite (= x y) x))))))))))))))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x #x0000000000000000)))",
      "(ite (bvult y x) y x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000)\n       #x0000000000000000\n       (ite (= y #x0000000000000000)\n            #x0000000000000000\n            (ite (= x y)\n                 x\n                 #x0000000000000000))))",
      "(ite (= x y) x #b0)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x y) x #b0))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(ite (= x #b0) #b0 y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x (ite (= x #x0000000000000001) #x0000000000000000 (ite (= x #x0000000000000064) #x0000000000000064 (ite (= x #x0000000000002710) #x0000000000000064 (ite (= y #x0000000000000064) #x0000000000000064 (ite (= x #x0000000000000001) #x0000000000000000 (ite (= y #x0000000000000001) #x000000000000000",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (= y #x0000000000000000) #x0000000000000000 x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x y) x #b0))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x (ite (= y #x000000000000000A) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000000 (ite (= x #x0000000000000064) #x0000000000000064 #x0000000000000064)))))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(ite (= x #x0000000000000000) #x0000000000000000 y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64)\n  x)",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x (ite (= y #x0000000000000001) #x0000000000000000 (ite (= x #x0000000000000064) #x0000000000000064 (ite (= y #x0000000000000064) #x0000000000000064 (ite (= x #x000000000000000a) #x0000000000000000 (ite (= y #x000000000000000a) #x0000000000000000 (ite (= x #x0000000000000001) #x000000000000000",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(bvand x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x y) x\n    0))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x (ite (= y #x0000000000000001) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000000 (ite (= x #x0000000000000064) #x0000000000000064 (ite (= y #x0000000000000064) #x0000000000000064 (ite (= x #x000000000000000a) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000000 (ite (= y #x0000000000000064) #x0000000000000064 (ite (= y",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= y #x0000000000000001) #x0000000000000000\n          (ite (= x #x0000000000000064) y\n            #x0000000000000000))))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x #x0000000000000000)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64)\n  x)",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x #x0000000000000000)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(bvand x y)",
      "(ite (= x #b0) #b0 y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x #x0000000000000000)))",
      "(bvand x y)",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x y) x #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (bvult x y) x y))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= y \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 \\#x0000000000000000))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvslt x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvslt x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvule x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvule x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x0000000000002710) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= x y) x))))))))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult y x) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x \\#b0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x \\#b0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) \\#b0 y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= x \\#x0000000000002710) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= y \\#x0000000000000001) \\#x000000000000000))))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= y \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x \\#b0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x000000000000000A) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 \\#x0000000000000064)))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= x \\#x000000000000000a) \\#x0000000000000000 (ite (= y \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x000000000000000))))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x 0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= x \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= y)))))))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) y \\#x0000000000000000))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) \\#b0 y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) x y))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0
    ],
    "time_diff_ms": 1305.033
  },
  "hd-08.sl": {
    "completions": [
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub (bvnot x) (bvsub (bvnot x) #x0000000000000001))",
      "(bvand x (bvsub (bvnot x) #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvsub x (bvor x (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvsub x (bvor x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvneg (bvsub x #x0000000000000001)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) (bvsub (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg (bvsub x \\#x0000000000000001))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1804.27
  },
  "hd-23.sl": {
    "completions": [
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvadd (bvor (bvlshr x #x0000000000000001) x)\n                      (bvurem (bvlshr x #x0000000000000002) #x0000000000000003))))\n    (bvurem (bvurem count #x000000000000000F)\n            #x000000000000000F)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvadd (ite (= ((_ extract 0 0) x) #x0000000000000000) #x0000000000000000 #x0000000000000001)\n            (f (bvlshr x #x0000000000000001))))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd (bvand x #x5555555555555555)\n         (bvand (bvlshr (bvand x #x3333333333333333) #x1) #x5555555555555555)\n         (bvadd (bvand (bvlshr (bvand x #x0f0f0f0f0f0f0f0f) #x2) #x3333333333333333)\n                (bvlshr (bvand x #x00ff00ff00ff00ff) #x4))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x #x5555555555555555))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvpopcount x)",
      "(bvpopcount x)",
      "( bvpopcount x )",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(ite (bvslt x #x0000000000000001) #x0000000000000000\n     (bvadd (ite (= ((_ extract 0 0) x) #x0000000000000001) #x0000000000000001 #x0000000000000000)\n            (f (bvlshr x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvredor x)))\n    (bv2nat count)\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(ite (bvult x #x0000000000000001) #x0000000000000000 (ite (bvuge x #x000000000000003f) #x0000000000000020 (ite (bvuge x #x000000000000003e) #x000000000000001f (ite (bvuge x #x000000000000001f) #x000000000000001e (ite (bvuge x #x000000000000000f) #x0000000000000001f (ite (bvuge x #x000000000000000e) #x0000000000000001e (ite (bvuge x #x000000000000000d) #x0000000000000001d (ite (bvuge x #x000000000000000c) #x0000000000000001c (ite (bvuge x #x000000000000",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcnt x))",
      "( bvpopcount x))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd\n    (bvudiv x #x0000000000000002)\n    (ite (= x #x0000000000000000) #x0000000000000000\n      (f (bvudiv x #x0000000000000002))\n    )\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcnt x))",
      "(bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvpopcount x)",
      "( bvpopcount x )",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd (bvor (bvlshr x #x0000000000000001) x) (ite (= x #x0000000000000000) #x0000000000000000 #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "( bvpopcount x) )",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvadd\n        (bvudiv x #x0000000000000002)\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (f (bvudiv x #x0000000000000002)))))",
      "( bvpopcount x )",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (b",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcnt x))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvpopcnt x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcnt x))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvpopcount x)))\n    (ite (= count #x0000000000000000) #x0000000000000000\n      (bvsub count #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "((_ bv1 64))",
      "( bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvshl x #x0000000000000001))))",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvpopcount x)",
      "(bvpopcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(bvcount x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvlshr x #x0000000000000001))))",
      "( bvpopcount x )",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvshl x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd\n    (bvand x #x5555555555555555)\n    (bvand (bvlshr x #x1) #x5555555555555555)\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvadd (bvor (bvlshr x \\#x0000000000000001) x) (bvurem (bvlshr x \\#x0000000000000002) \\#x0000000000000003)))) (bvurem (bvurem count \\#x000000000000000F) \\#x000000000000000F)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvadd (ite (= ((_ extract 0 0) x) \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001) (f (bvlshr x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvand x \\#x5555555555555555) (bvand (bvlshr (bvand x \\#x3333333333333333) \\#x1) \\#x5555555555555555) (bvadd (bvand (bvlshr (bvand x \\#x0f0f0f0f0f0f0f0f) \\#x2) \\#x3333333333333333) (bvlshr (bvand x \\#x00ff00ff00ff00ff) \\#x4))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x \\#x5555555555555555)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) \\#x0000000000000000 (bvadd (ite (= ((_ extract 0 0) x) \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000000) (f (bvlshr x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvredor x))) (bv2nat count)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvult x \\#x0000000000000001) \\#x0000000000000000 (ite (bvuge x \\#x000000000000003f) \\#x0000000000000020 (ite (bvuge x \\#x000000000000003e) \\#x000000000000001f (ite (bvuge x \\#x000000000000001f) \\#x000000000000001e (ite (bvuge x \\#x000000000000000f) \\#x0000000000000001f (ite (bvuge x \\#x000000000000000e) \\#x0000000000000001e (ite (bvuge x \\#x000000000000000d) \\#x0000000000000001d (ite (bvuge x \\#x000000000000000c) \\#x0000000000000001c (ite (bvuge x \\#x000000000000)))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvudiv x \\#x0000000000000002) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (f (bvudiv x \\#x0000000000000002)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvor (bvlshr x \\#x0000000000000001) x) (ite (= x \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvudiv x \\#x0000000000000002) (ite (= x \\#x0000000000000001) \\#x0000000000000001 (f (bvudiv x \\#x0000000000000002)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (b))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvpopcount x))) (ite (= count \\#x0000000000000000) \\#x0000000000000000 (bvsub count \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) ((_ bv1 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvshl x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvshl x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvand x \\#x5555555555555555) (bvand (bvlshr x \\#x1) \\#x5555555555555555)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0
    ],
    "time_diff_ms": 2233.61
  },
  "hd-22.sl": {
    "completions": [
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x (bvxor (bvxor x x) x))",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x (bvxor (bvxor x x) x))",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvxor x\n       (bvxor (bvxor x x)\n              (bvxor (bvxor x x)\n                     (bvxor (bvxor x x)\n                            (bvxor (bvxor x x)\n                                   (bvxor (bvxor x x)\n                                          (bvxor (bvxor x x)\n                                                 (bvxor x x)))))))))",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvxor x (bvlshr x #x0000000000000001))",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x (bvxor (bvxor x x) x))",
      "(bvand x #x1111111111111111)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x\n       (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor x #x0000000000000000) #x0000000000000001) #x0000000000000002) #x000000000000001c) #x1111111111111111) x) #x0000000000000000) #x0000000000000001) #x0000000000000002) #x000000000000001c))",
      "(bvxor x #x0000000000000000)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvxor x #x0000000000000000)"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvxor (bvxor x x) x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvxor (bvxor x x) x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvxor (bvxor x x) (bvxor (bvxor x x) (bvxor (bvxor x x) (bvxor (bvxor x x) (bvxor (bvxor x x) (bvxor (bvxor x x) (bvxor x x)))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvlshr x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvxor (bvxor x x) x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x1111111111111111))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor (bvxor x \\#x0000000000000000) \\#x0000000000000001) \\#x0000000000000002) \\#x000000000000001c) \\#x1111111111111111) x) \\#x0000000000000000) \\#x0000000000000001) \\#x0000000000000002) \\#x000000000000001c)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvxor x \\#x0000000000000000))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1825.117
  },
  "hd-18.sl": {
    "completions": [
      "(and (bvult x #x0000000000000002) (not (= x #x0000000000000000)))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "((= x #x0000000000000001))",
      "(= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(= x (bvshl #x0000000000000001 x))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (bvult x #x0000000000000002) false (ite (= x #x0000000000000001) true (ite (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000) true false)))",
      "(and (bvult x #x0000000000000002) (not (= x #x0000000000000000)))",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(ite (= x #x0000000000000001) true false)",
      "((= x #x0000000000000001))",
      "(= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (bvult x #x0000000000000002) (not (= x #x0000000000000000)))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000))))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000001) false (= x (bvlshr x #x0000000000000001)))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000))))",
      "(ite (= x #x0000000000000001) true false)",
      "((= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (not (= x #x0000000000000000)) (= x (bvand x (bvsub x #x0000000000000001))))",
      "(ite (bvult x #x0000000000000002) true false)",
      "(ite (bvuge x #x0000000000000001) false (= x (bvlshr x #x0000000000000001)))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (bvuge x #x0000000000000001) (bvuge #x0000000000000001 x))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000))))",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "((= x #x0000000000000001))",
      "(= x #x0000000000000001))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(= x #x0000000000000001))",
      "(ite (bvult x #x0000000000000002) false (= x #x0000000000000001))",
      "((= x #x0000000000000001))",
      "(and (bvuge x #x0000000000000001) (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)))",
      "((= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(ite (bvugt x #x0000000000000000) (and (= x (bvshl #x0000000000000001 x)) (not (= x #x0000000000000000))) false)",
      "(ite (bvuge x #x0000000000000001) (= x (bvshl #x0000000000000001 x)) false)",
      "(ite (bvult x #x0000000000000002) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (bvuge x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (bvuge x #x0000000000000001) (bvult x #x0000000000000002))",
      "(ite (= x #x0000000000000001) true false)",
      "(= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (bvult x #x0000000000000002) false (= x #x0000000000000001))",
      "(ite (and (= x #x0000000000000001) (not (= x #x0000000000000000))) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x00000000000000000000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (bvult x #x0000000000000002) (not (= x #x0000000000000000)))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "((= x #x0000000000000001))",
      "(and (bvuge x #x0000000000000001) (bvuge (bvand x (bvsub x #x0000000000000001)) x))",
      "(and (bvuge x #x0000000000000001) (bvuge #x0000000000000001 x))",
      "(ite (= x #x0000000000000001) true false)",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000))))",
      "((= x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000001) false (= x (bvshl #x0000000000000001 x)))",
      "(ite (bvult x #x0000000000000002) false (= x #x0000000000000001))",
      "(= x #x0000000000000001))",
      "(ite (and (= x (bvshl #x0000000000000001 x)) (not (= x #x0000000000000000))) true false)",
      "((ite (= x #x0000000000000001) true (and (= x (bvand x (bvsub x #x0000000000000001))) (not (= x #x0000000000000000)))))",
      "(= x #x0000000000000001))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "((= x #x0000000000000001))",
      "(= x #x0000000000000001))",
      "(ite (bvult x #x0000000000000002) false (= x #x0000000000000001))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) Bool (and (bvult x \\#x0000000000000002) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x (bvshl \\#x0000000000000001 x)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (ite (= x \\#x0000000000000001) true (ite (= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000) true false))))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvult x \\#x0000000000000002) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvult x \\#x0000000000000002) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvuge x \\#x0000000000000001) false (= x (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (not (= x \\#x0000000000000000)) (= x (bvand x (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvuge x \\#x0000000000000001) false (= x (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvuge x \\#x0000000000000001) (bvuge \\#x0000000000000001 x)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvuge x \\#x0000000000000001) (= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool ((= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000)))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvugt x \\#x0000000000000000) (and (= x (bvshl \\#x0000000000000001 x)) (not (= x \\#x0000000000000000))) false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvuge x \\#x0000000000000001) (= x (bvshl \\#x0000000000000001 x)) false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (bvuge x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvuge x \\#x0000000000000001) (bvult x \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x00000000000000000000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvult x \\#x0000000000000002) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvuge x \\#x0000000000000001) (bvuge (bvand x (bvsub x \\#x0000000000000001)) x)))",
      "(define-fun f (x (BitVec 64)) Bool (and (bvuge x \\#x0000000000000001) (bvuge \\#x0000000000000001 x)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvuge x \\#x0000000000000001) false (= x (bvshl \\#x0000000000000001 x))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (and (= x (bvshl \\#x0000000000000001 x)) (not (= x \\#x0000000000000000))) true false))",
      "(define-fun f (x (BitVec 64)) Bool ((ite (= x \\#x0000000000000001) true (and (= x (bvand x (bvsub x \\#x0000000000000001))) (not (= x \\#x0000000000000000))))))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 2139.2709999999997
  },
  "hd-20.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvadd x (bvnot (bvsub #x0000000000000000 (bvor x (bvsub #x0000000000000001 x))))))",
      "(ite (= ((_+ x #x0000000000000001) ((_bvand x (_bvsub x #x0000000000000001)))) #x0000000000000000) ((_bvadd x #x0000000000000001)) ((_bvadd ((_bvand x (_bvsub x #x0000000000000001))) ((_bvlshr ((_bvand x (_bvsub x #x0000000000000001))) #x0000000000000001))))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd x ((_ bv1 64) x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x #x0000000000000001)\n     #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvsdiv x #x0000000000000001) (bvadd x #x0000000000000001) (bvshl x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     x)",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvule x #x0000000000000001) #x0000000000000002 (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000002) (bvadd x #x0000000000000001) (bvadd x #x0000000000000002))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000001) (bvadd x #x0000000000000001) #x0000000000000002)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvadd x (_ bv1 64)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd ((_ bv1 64) x) ((_ bv1 64) x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000000) (bvadd x #x0000000000000001) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     #x0000000000000000)",
      "(ite (not (= ((_ bv1 64) x) x)) (bvadd x ((_ bv1 64) x)) (bvshl ((_ bv1 64) x) ((_ bv1 64) x)))",
      "(ite (bvor (bvand x (bvnot (bvsub x #x0000000000000001))) (bvsub x #x0000000000000001)) (bvadd x #x0000000000000001) (bvadd x #x0000000000000002))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvadd x\n         (bvshl\n          (_ bv1 64)\n          (bvsub\n           (_ bv1 64)\n           (bvor\n            x\n            (bvadd x\n                   (bvneg x)))))))",
      "(ite (not (= x #x0000000000000000)) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvand (bvnot x) (bvadd x #x0000000000000001)))\n     x)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (= ((_ + x (bvnot x)) (_ bv1 64)) x) ((_ bv2 64) ) (bvadd x ((_ bv1 64) )))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (= ((_ + x (bvnot x)) (_ bv1 64)) (_ bv1 64)) (_ bv2 64) (bvadd x (_ bv1 64)))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub (bvnot x) (bvand x (bvsub x #x0000000000000001)))))\n     #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x #x0000000000000001)\n     #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd x #x0000000000000001))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvnot (bvsub \\#x0000000000000000 (bvor x (bvsub \\#x0000000000000001 x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_+ x \\#x0000000000000001) ((_bvand x (_bvsub x \\#x0000000000000001)))) \\#x0000000000000000) ((_bvadd x \\#x0000000000000001)) ((_bvadd ((_bvand x (_bvsub x \\#x0000000000000001))) ((_bvlshr ((_bvand x (_bvsub x \\#x0000000000000001))) \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd x ((_ bv1 64) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsdiv x \\#x0000000000000001) (bvadd x \\#x0000000000000001) (bvshl x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvule x \\#x0000000000000001) \\#x0000000000000002 (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000002) (bvadd x \\#x0000000000000001) (bvadd x \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvadd x \\#x0000000000000001) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (_ bv1 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd ((_ bv1 64) x) ((_ bv1 64) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000000) (bvadd x \\#x0000000000000001) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= ((_ bv1 64) x) x)) (bvadd x ((_ bv1 64) x)) (bvshl ((_ bv1 64) x) ((_ bv1 64) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvor (bvand x (bvnot (bvsub x \\#x0000000000000001))) (bvsub x \\#x0000000000000001)) (bvadd x \\#x0000000000000001) (bvadd x \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvshl (_ bv1 64) (bvsub (_ bv1 64) (bvor x (bvadd x (bvneg x)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= x \\#x0000000000000000)) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvand (bvnot x) (bvadd x \\#x0000000000000001))) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ + x (bvnot x)) (_ bv1 64)) x) ((_ bv2 64)) (bvadd x ((_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ + x (bvnot x)) (_ bv1 64)) (_ bv1 64)) (_ bv2 64) (bvadd x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub (bvnot x) (bvand x (bvsub x \\#x0000000000000001))))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1498.191
  },
  "hd-21.sl": {
    "completions": [
      "(bvand x (bvor a (bvor b c)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot (bvsub (bvsub (bvsub a b) c) x)))",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand a (bvnot (bvand (bvnot b) (bvnot c))))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand x c)",
      "(bvand a (bvnot (bvor (bvor b c) (bvor a b)))))",
      "(bvand x (bvnot a))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvadd a (bvadd b c)))",
      "(bvand a (bvnot (bvor (bvor a b) c))))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand x (bvnot (bvnot (bvadd a b c))))",
      "(bvand a (bvnot (bvand b c))))",
      "(bvand a (bvnot (bvxor (bvor b c) x)))",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvor (bvor a b) c))))",
      "(bvand x (bvnot x))",
      "(bvand x c)",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvxor (bvxor b c) a))))",
      "(bvand a (bvnot (bvand (bvnot b) (bvnot c))))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand x x))",
      "(bvadd a (ite (= x a) b (ite (= x b) c a)))",
      "(bvand a (bvnot (bvand b (bvnot c))))",
      "(bvand a (bvnot (bvor (bvor (bvnot a) (bvnot b)) (bvnot c))))",
      "(bvand a (bvnot (bvxor b c))))",
      "(bvand x (bvlshr (bvadd (bvlshr x a) b) c))",
      "(bvand x (bvadd a (bvadd b c))))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand x (bvnot x))",
      "(bvnot x)",
      "(bvand x (bvadd a (bvadd b c)))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand a (bvnot x))",
      "(bvand a (bvnot (bvor (bvnot b) c))))",
      "(bvand a (bvnot (bvand (bvnot b) (bvnot c))))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvxor a b))",
      "(bvand a (bvnot a))",
      "(bvand a (bvnot (bvxor a (bvxor b c))))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot (bvadd a (bvadd b c))))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand x (bvsub c (bvsrem (bvudiv x a) b)))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvor (bvor b c) (bvor a c))))",
      "(bvand x (bvadd a (bvadd b c)))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvxor b c))))",
      "(bvand x (bvsub c (bvurem (bvadd a b) x))))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot (bvand (bvand a b) c))))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand x (bvnot (bvxor (bvxor a b) c)))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand a (bvand b c))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvxor (bvor b c) x))))",
      "(bvand x\n       (bvxor a\n              (bvxor b c)))",
      "(bvand a (bvnot (bvand (bvnot b) (bvnot c))))",
      "(bvand x (bvnot (bvnot a)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot a))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvand (bvnot b) (bvnot c))))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvsrem x (+ a b c))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand a (bvnot (bvor (bvor b c) x)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand a (bvnot a))",
      "(bvand x (bvnot x))",
      "(bvadd a (ite (= x a) b c))",
      "(bvand a (bvnot (bvxor (bvor b c) x)))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvor (bvor b c) (bvor a c))))",
      "(bvand a b)",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot (bvxor (bvxor a b) c))))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub (bvsub (bvsub a b) c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand (bvnot b) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x c))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) (bvor a b)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvadd a (bvadd b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor a b) c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvnot (bvadd a b c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor a b) c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x c))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor (bvxor b c) a))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand (bvnot b) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x x))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvadd a (ite (= x a) b (ite (= x b) c a))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor (bvnot a) (bvnot b)) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvlshr (bvadd (bvlshr x a) b) c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvadd a (bvadd b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvadd a (bvadd b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvnot b) c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand (bvnot b) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvxor a b)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor a (bvxor b c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvadd a (bvadd b c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvsub c (bvsrem (bvudiv x a) b))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) (bvor a c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvadd a (bvadd b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvsub c (bvurem (bvadd a b) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvand (bvand a b) c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvxor (bvxor a b) c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvand b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvxor a (bvxor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand (bvnot b) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvnot a))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand (bvnot b) (bvnot c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvsrem x (+ a b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvadd a (ite (= x a) b c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor (bvor b c) x))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvor (bvor b c) (bvor a c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a b))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvxor (bvxor a b) c))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1380.297
  },
  "hd-19.sl": {
    "completions": [
      "(ite (bvult (bvand x m) (bvshl m k)) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k))",
      "(ite (= (bvand x m) m) (bvlshr x k) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (not (= (bvand x m) m)) (bvor (bvand x (bvnot m)) (bvlshr x k)) x)",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k))",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x (bvnot m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvult k m)\n     (bvlshr (bvand x (bvnot (bvsub (bvshl #x0000000000000001 k) #x0000000000000001))) k)\n     (bvlshr (bvand x (bvnot (bvsub (bvshl #x0000000000000001 m) #x0000000000000001))) m))",
      "(ite (bvslt k #x0000000000000001) x (bvlshr (bvlshr x k) k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(bvand x m)",
      "(ite (bvult (bvand x m) (bvshl (bvnot #x0000000000000001) k)) (bvxor x (bvshl m k)) x)",
      "(ite (not (= (bvand x m) m)) (bvlshr (bvlshr x k) k) x)",
      "(bvand x m)",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (not (= (bvlshr x k) (bvshl (bvlshr x k) k))) (bvor (bvand x (bvnot m)) (bvand (bvlshr x k) m)) x)",
      "(ite (not (= (bvand x m) m)) (bvor (bvlshr x k) (bvand x (bvnot m))) x)",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvuge (bvand x m) (bvshl m k)) (bvor (bvand x (bvnot m)) (bvshl m k)) x)",
      "(ite (bvult (bvand x m) (bvshl m k)) (bvor (bvlshr x k) (bvand m x)) x)",
      "(ite (bvuge (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvadd (bvlshr x k) (bvand m (bvsub (bvshl #x0000000000000001 k) #x0000000000000001))))",
      "(ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x m)))",
      "(define-fun f ((x (_ BitVec 64)) (m (_ BitVec 64)) (k (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (bvult (bvand x m) (bvshl m k)) (bvor (bvand x (bvnot m)) (bvshl m k)) (bvor (bvand x (bvnot (bvshl #x0000000000000001 k))) (bvshl m k)))",
      "(ite (bvuge (bvand x m) m) (bvor (bvlshr x k) (bvand x (bvnot m))) x)",
      "(ite (bvult (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvand (bvlshr x k) m))",
      "(ite (bvult k m) x (bvlshr x k))",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) x)",
      "(ite (bvult (bvlshr x k) m) (bvlshr x k) (bvlshr (bvlshr x k) m))",
      "(ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(bvand x m)",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) (ite (= k m) x (bvshl (bvand x (bvnot (bvshl #x0000000000000001 k))) k)))",
      "(ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvand x (bvnot m)))",
      "(ite (bvult k m) (bvlshr x k) (bvashr x k))",
      "(bvand x (bvnot m))",
      "(ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvlshr (bvlshr x k) (bvadd k m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) x)",
      "(ite (bvult k (bvsub m #x0000000000000040)) (bvlshr (bvlshr x k) k) (bvlshr (bvshl (bvshl x k) k) k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvult (bvlshr x k) m) (bvor (bvlshr x k) (bvlshr (bvand x (bvnot m)) k)) (bvor (bvand x (bvnot m)) (bvand (bvlshr x k) m)))",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) (bvshl (bvshl x k) k))",
      "(ite (= (bvand x m) m) x (bvadd x (bvlshr (bvand x (bvnot m)) k)))",
      "(ite (bvuge k #x0000000000000001)\n     (bvlshr (bvlshr x k) k)\n     x)",
      "(bvand x m)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (= (bvand x m) m) x (bvlshr (bvlshr x k) k))",
      "(ite (bvslt k #x0000000000000000) x (bvlshr (bvand x (bvnot m)) k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(bvand x (bvnot m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (bvult (bvand x m) k) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k))",
      "(ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x)",
      "(ite (= (bvand x m) m) x (bvor (bvand x (bvnot m)) (bvlshr x k)))",
      "(ite (bvult k m) (bvand x (bvsub m (bvshl #x0000000000000001 k))) (bvor x (bvand m (bvlshr x k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvult (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvlshr (bvlshr x k) k))",
      "(ite (bvult k m) (bvlshr (bvand x (bvnot (bvlshr (bvnot m) k))) k) (bvand (bvlshr x k) m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (= (bvand x m) m) x (bvxor x (bvlshr (bvand x m) k)))",
      "(ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x)",
      "(ite (bvult k m) (bvlshr x k) (bvlshr (bvlshr x k) m))",
      "(ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x (bvnot m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (bvuge k #x0000000000000001) (bvlshr (bvlshr x k) k) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvult k m) (bvlshr x k) (bvlshr (bvand x (bvnot m)) k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(ite (bvslt k #x0000000000000000) (bvlshr (bvand x (bvnot m)) (bvneg k)) (bvadd (bvlshr (bvand x (bvnot m)) k) (bvand x m)))",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) (bvadd x (bvlshr (bvsub (bvlshr x m) x) m)))",
      "(ite (bvuge k #x0000000000000001) (bvlshr (bvlshr x m) k) x)",
      "(ite (= (bvand x m) m) (bvlshr x k) x)",
      "(ite (bvuge k #x0000000000000001) (bvor (bvlshr x k) (bvand (bvlshr (bvlshr x k) m) m)) x)",
      "(ite (not (= (bvlshr x m) (bvlshr x (bvsub m k)))) (bvxor x (bvadd (bvlshr x m) (bvlshr x (bvsub m k)))) x)",
      "(ite (bvslt k #x0000000000000001) (bvlshr (bvlshr x k) k) (bvlshr (bvand x (bvnot m)) k))",
      "(bvand x (bvnot m))",
      "(ite (bvuge k #x0000000000000001) (bvlshr (bvlshr x k) k) x)",
      "(ite (bvuge m k) (bvlshr x k) (bvshl x (bvsub k m)))",
      "(ite (= k #x0000000000000000) x (ite (= k #x0000000000000001) (bvlshr x m) (bvlshr (bvand x (bvnot m)) (bvsub k #x0000000000000001))))",
      "(ite (bvuge k #x0000000000000001) x (bvlshr (bvlshr x k) m))",
      "(bvand x (bvnot m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) (bvand x m))",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(bvand x (bvnot m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(bvand x (bvnot m))",
      "(ite (= (bvand x m) m) x (bvadd x (bvlshr m k)))",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64)\n  x)",
      "(ite (= (bvand x m) m) x (bvlshr (bvand x (bvnot m)) k))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvshl m k)) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) (bvlshr x k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvand x m) m)) (bvor (bvand x (bvnot m)) (bvlshr x k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x (bvnot m)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvand x (bvnot (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001))) k) (bvlshr (bvand x (bvnot (bvsub (bvshl \\#x0000000000000001 m) \\#x0000000000000001))) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvslt k \\#x0000000000000001) x (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvshl (bvnot \\#x0000000000000001) k)) (bvxor x (bvshl m k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvand x m) m)) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvlshr x k) (bvshl (bvlshr x k) k))) (bvor (bvand x (bvnot m)) (bvand (bvlshr x k) m)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvand x m) m)) (bvor (bvlshr x k) (bvand x (bvnot m))) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge (bvand x m) (bvshl m k)) (bvor (bvand x (bvnot m)) (bvshl m k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvshl m k)) (bvor (bvlshr x k) (bvand m x)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvadd (bvlshr x k) (bvand m (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvshl m k)) (bvor (bvand x (bvnot m)) (bvshl m k)) (bvor (bvand x (bvnot (bvshl \\#x0000000000000001 k))) (bvshl m k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge (bvand x m) m) (bvor (bvlshr x k) (bvand x (bvnot m))) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvand (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) x (bvlshr x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvlshr x k) (bvlshr (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvand x (bvnot m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) (ite (= k m) x (bvshl (bvand x (bvnot (bvshl \\#x0000000000000001 k))) k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvand x (bvnot m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvashr x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvlshr (bvand x (bvnot m)) k) (bvlshr (bvlshr x k) (bvadd k m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k (bvsub m \\#x0000000000000040)) (bvlshr (bvlshr x k) k) (bvlshr (bvshl (bvshl x k) k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvor (bvlshr x k) (bvlshr (bvand x (bvnot m)) k)) (bvor (bvand x (bvnot m)) (bvand (bvlshr x k) m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) (bvshl (bvshl x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvadd x (bvlshr (bvand x (bvnot m)) k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x m))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvslt k \\#x0000000000000000) x (bvlshr (bvand x (bvnot m)) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) k) (bvlshr (bvlshr x k) k) (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvor (bvand x (bvnot m)) (bvlshr x k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvand x (bvsub m (bvshl \\#x0000000000000001 k))) (bvor x (bvand m (bvlshr x k)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvand x m) (bvlshr x k)) (bvlshr (bvand x (bvnot m)) k) (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvand x (bvnot (bvlshr (bvnot m) k))) k) (bvand (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvxor x (bvlshr (bvand x m) k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvlshr (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvor (bvlshr x k) (bvand x (bvnot m)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvlshr (bvand x (bvnot m)) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvslt k \\#x0000000000000000) (bvlshr (bvand x (bvnot m)) (bvneg k)) (bvadd (bvlshr (bvand x (bvnot m)) k) (bvand x m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) (bvadd x (bvlshr (bvsub (bvlshr x m) x) m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) (bvlshr (bvlshr x m) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) (bvlshr x k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) (bvor (bvlshr x k) (bvand (bvlshr (bvlshr x k) m) m)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvlshr x m) (bvlshr x (bvsub m k)))) (bvxor x (bvadd (bvlshr x m) (bvlshr x (bvsub m k)))) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvslt k \\#x0000000000000001) (bvlshr (bvlshr x k) k) (bvlshr (bvand x (bvnot m)) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge m k) (bvlshr x k) (bvshl x (bvsub k m))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (ite (= k \\#x0000000000000001) (bvlshr x m) (bvlshr (bvand x (bvnot m)) (bvsub k \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvuge k \\#x0000000000000001) x (bvlshr (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) (bvand x m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (bvand x (bvnot m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvadd x (bvlshr m k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvlshr (bvand x (bvnot m)) k)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 426.457
  },
  "hd-07.sl": {
    "completions": [
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvlshr x (bvand x (bvneg x)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot x))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvlshr x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 951.284
  },
  "hd-10.sl": {
    "completions": [
      "(= (nlz x) (nlz y))",
      "(= (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y)))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))",
      "(= (nlz x) (nlz y))",
      "(= (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvlshr x (nlz x)) (bvlshr y (nlz y)))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvnlz x) (bvnlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvlshr x (bvnot x)) (bvlshr y (bvnot y)))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (bvclz x) (bvclz y))",
      "(= (nlz x) (nlz y))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvnlz x) (bvnlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvnot x)) (bvlshr y (bvnot y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1941.7859999999998
  },
  "hd-11.sl": {
    "completions": [
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(ite (bvult (bvlshr x 63) (bvlshr y 63)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvclz x) (bvclz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool\n  (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult (bvlshr x #x0000000000000001) (bvlshr y #x0000000000000001)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult ((_ int2bv 64) (nlz x)) ((_ int2bv 64) (nlz y))) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult (bvlshr x 1) (bvlshr y 1)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvslt (bvlshr x 63) (bvlshr y 63)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))) true false)",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvslt (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult x y) true false)",
      "(ite (bvult (bvlshr x 63) (bvlshr y 63)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (bvshl x (nlz x)) (bvshl y (nlz y))) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))) true)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (bvlshr x 63) (bvlshr y 63)) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult ((_ bvclz x) (_ bvclz y))))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult ((_ bvnot x)) ((_ bvnot y))))",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(ite (bvult (bvlshr x 63) (bvlshr y 63)) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(> (nlz x) (nlz y))",
      "(ite (bvult (bvnot (bvlshr x #x0000000000000001)) (bvnot (bvlshr y #x0000000000000001))) true false)",
      "(= (bvult ((_ bvsub 64) ((_ bvadd x y) 1) y) x) true)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x \\#x0000000000000001) (bvlshr y \\#x0000000000000001)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult ((_ int2bv 64) (nlz x)) ((_ int2bv 64) (nlz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 1) (bvlshr y 1)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvslt (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvslt (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvshl x (nlz x)) (bvshl y (nlz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))) true))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult ((_ bvclz x) (_ bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult ((_ bvnot x)) ((_ bvnot y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (> (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot (bvlshr x \\#x0000000000000001)) (bvnot (bvlshr y \\#x0000000000000001))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvult ((_ bvsub 64) ((_ bvadd x y) 1) y) x) true))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))"
    ],
    "constants": [
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        1
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        1
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      1,
      63
    ],
    "time_diff_ms": 2043.312
  },
  "hd-06.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvnot x)))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000001 x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(bvadd x #x0000000000000001))",
      "(bvior x (bvnot x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvnot x)))",
      "(bvadd x #x0000000000000001))",
      "(bvior x (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001))))))",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot x)))",
      "(ite (bvugt x #x0000000000000000) (bvadd x (bvand x (bvneg x))) #x0000000000000001))",
      "(ite (= ((_ extract 0 0) x) #x0000000000000000) (bvadd x #x0000000000000001) (ite (= ((_ extract 1 1) x) #x0000000000000000) (bvadd x #x0000000000000002) (bvadd x #x0000000000000004)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvior x (bvnot x)))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvadd x\n           (bvand x\n                  (bvnot x)\n           )\n    )\n)",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) (f (bvor x (bvsub x #x0000000000000001))))",
      "(bvadd x #x0000000000000001))",
      "(ite (bvslt x #x0000000000000001) #x0000000000000001 (bvadd x (bvand x (bvnot x))))",
      "(bvior x (bvnot x))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000001 (bvand x (bvsub x #x0000000000000001))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000001 (bvand x (bvsub x #x0000000000000001))))))",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(bvior x (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot x)))",
      "(bvior x (bvnot x))",
      "(ite (= ((_ extract 0 0) x) #x0) (bvadd x #x1) (ite (= ((_ extract 0 0) x) #x1) (bvadd x #x2) (ite (= ((_ extract 1 1) x) #x0) (bvadd x #x1) (ite (= ((_ extract 2 2) x) #x0) (bvadd x #x4) (ite (= ((_ extract 3 3) x) #x0) (bvadd x #x8) (ite (= ((_ extract 4 4) x) #x0) (bvadd x #x10) (ite (= ((_ extract 5 5) x) #x0) (bvadd x #x20) (ite (= ((_ extract 6 6) x) #x0) (bvadd x #x40) (ite (= ((_ extract 7 ",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvior x (bvadd x #x0000000000000001)))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvior x (bvadd x #x0000000000000001))",
      "(bvior x (bvnot x))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(ite (= ((_ extract 0 0) x) #x0000000000000000) (bvadd x #x0000000000000001) (ite (= ((_ extract 1 1) x) #x0000000000000000) (bvadd x #x0000000000000002) (ite (= ((_ extract 2 2) x) #x0000000000000000) (bvadd x #x0000000000000004) (ite (= ((_ extract 3 3) x) #x0000000000000000) (bvadd x #x0000000000000008) (ite (= ((_ extract 4 4) x) #x0000000000000000) (bvadd x #x0000000000000010) (ite (= ((_ extract 5 5) x) #x0000000000000000) (bvadd x #x0000000000000020) (ite (= ((_ extract 6 6) x) #x0000000000000000) (bvadd x #x0000000000000040) (bvadd x #x0000000000000080)))))))))",
      "(ite (= ((_ extract 0 0 x) #x0) #b1) (bvadd x #x1) (bvadd x #x1))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001)",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvslt x #x0000000000000001) #x0000000000000001 (bvadd x #x0000000000000001))",
      "(ite (bvule x #x0000000000000001) #x0000000000000001 (bvadd x #x0000000000000001))",
      "(ite (bvslt x #x0000000000000001) #x0000000000000001 (bvadd x (bvand x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000001 x))))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(ite (<= x #x0000000000000001) #x0000000000000003 (bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x #x0000000000000001)\n     #x0000000000000001)",
      "(bvadd x #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(ite (= ((_ extract 0 0) x) #x0) (bvadd x #x1) (bvadd x #x1))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvnot x)))",
      "(bvadd x #x0000000000000001)",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000001 (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (bvule x #x0000000000000001) #x0000000000000001 (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x (_ bv1 64))))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(bvadd x #x00000000000000000000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x #x0000000000000001))",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) (bvadd x #x0000000000000000))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000001 x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvand x (bvneg x))) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0000000000000000) (bvadd x \\#x0000000000000001) (ite (= ((_ extract 1 1) x) \\#x0000000000000000) (bvadd x \\#x0000000000000002) (bvadd x \\#x0000000000000004))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) (f (bvor x (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) \\#x0000000000000001 (bvadd x (bvand x (bvnot x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000001 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000001 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0) (bvadd x \\#x1) (ite (= ((_ extract 0 0) x) \\#x1) (bvadd x \\#x2) (ite (= ((_ extract 1 1) x) \\#x0) (bvadd x \\#x1) (ite (= ((_ extract 2 2) x) \\#x0) (bvadd x \\#x4) (ite (= ((_ extract 3 3) x) \\#x0) (bvadd x \\#x8) (ite (= ((_ extract 4 4) x) \\#x0) (bvadd x \\#x10) (ite (= ((_ extract 5 5) x) \\#x0) (bvadd x \\#x20) (ite (= ((_ extract 6 6) x) \\#x0) (bvadd x \\#x40) (ite (= ((_ extract 7)))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0000000000000000) (bvadd x \\#x0000000000000001) (ite (= ((_ extract 1 1) x) \\#x0000000000000000) (bvadd x \\#x0000000000000002) (ite (= ((_ extract 2 2) x) \\#x0000000000000000) (bvadd x \\#x0000000000000004) (ite (= ((_ extract 3 3) x) \\#x0000000000000000) (bvadd x \\#x0000000000000008) (ite (= ((_ extract 4 4) x) \\#x0000000000000000) (bvadd x \\#x0000000000000010) (ite (= ((_ extract 5 5) x) \\#x0000000000000000) (bvadd x \\#x0000000000000020) (ite (= ((_ extract 6 6) x) \\#x0000000000000000) (bvadd x \\#x0000000000000040) (bvadd x \\#x0000000000000080)))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0 x) \\#x0) \\#b1) (bvadd x \\#x1) (bvadd x \\#x1)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) \\#x0000000000000001 (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvule x \\#x0000000000000001) \\#x0000000000000001 (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) \\#x0000000000000001 (bvadd x (bvand x (bvnot x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000001 x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000003 (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0) (bvadd x \\#x1) (bvadd x \\#x1)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000001 (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvule x \\#x0000000000000001) \\#x0000000000000001 (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x00000000000000000000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) (bvadd x \\#x0000000000000000)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        1
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        2,
        3,
        1,
        4,
        5,
        6,
        7
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64,
        0,
        2,
        3,
        1,
        4,
        5,
        6
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ]
    ],
    "all_constants": [
      64,
      0,
      2,
      3,
      1,
      4,
      5,
      6,
      7
    ],
    "time_diff_ms": 1560.828
  },
  "hd-04.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= ((_ extract 0 0) x) #b1) ((_ bv1 64) 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvor (bvnot x) (bvsub x (bvand x (bvneg x))))))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(ite (<= x #x0000000000000001) x (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (<= x #x0000000000000001) x (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (bvuge x #x0000000000000001) (bvand x (bvneg x)) x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x\n          (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvor (bvand x (bvneg x)) (bvnot (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr x (bvand x (bvneg x))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvneg x)))",
      "(ite (>= x #x0000000000000001) (bvand x (bvneg x)) x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvneg (bvsub x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= ((_ extract 0 0) x) #b1) x (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b1) ((_ bv1 64) 64) (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvor (bvnot x) (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvand x (bvneg x)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvor (bvand x (bvneg x)) (bvnot (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvlshr x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (bvand x (bvneg x)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b1) x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0
    ],
    "time_diff_ms": 1464.7420000000002
  },
  "hd-13.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(bvand x #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n    (ite (= x #x0000000000000001) #x0000000000000001\n      (ite (= x #x0000000000000000) #x0000000000000000\n        (ite (= x #xffffffffffffffff) #x0000000000000001\n          #x0000000000000000)))))",
      "(bvnot (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x000000000000001f) #x000000000",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvnot x))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000001)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000001)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvor (bvand (bvlshr x #x0000000000000001f) #x0000000000000001)\n        (bvneg (bvlshr x #x0000000000000001f))))",
      "(bvnot x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvnot x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(bvsub (ite (= x #x000000000000001f) #x0000000000000001 x) #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(bvnot x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000010000) #x0000000000000001 (ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x00000000ffffffff) #x0000000000000001 #x0000000000000000)))))",
      "(bvnot (bvand x #x000000000000001f))",
      "(bvand x #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(bvnot x)",
      "(bvnot x)",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(bvnot x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvnot x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n  (ite (= x #x0000000000000001) #x0000000000000001\n  (ite (= x #x0000000000000000) #x0000000000000000\n  (ite (= x #xffffffffffffffff) #x0000000000000001\n  (ite (= x #x0000000000010000) #x0000000000000001\n  (ite (= x #x5555555555555555) #x0000000000000000\n  (ite (= x #x00000000ffffffff) #x0000000000000001\n  (ite (= x #x0000000000000002) #x0000000000000001\n  (ite (= x #x0000000000000020) #x0000000000000001\n  (ite (= x #x0000000000000001) #x0000000000000001\n  (ite true #x0000000000000000))))))))))))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 x))))))))))",
      "(ite (= x #x000000000000001f) #x0000000000000001 #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= ((_ extract 63 63) x) #b0) #x0000000000000001 #x0000000000000000))",
      "(ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x000000000000001f) #x0000000000000001",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvnot x))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(bvand x #x0000000000000001)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (b",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(bvand x #x0000000000000001))",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(bvnot x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 #x000",
      "(bvneg x)",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000)\n       #x0000000000000000\n       #x0000000000000001))",
      "(bvnot (bvand x #x000000000000001f))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x000000000000001f) #x0000000000000001 0))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x00000000ffffffff) #x0000000000000001\n  (ite (= x #x0000000000000001) #x0000000000000001\n  (ite (= x #x0000000000000020) #x0000000000000001\n  (ite (= x #x5555555555555555) #x0000000000000000\n  (ite (= x #x7fffffffffffffff) #x0000000000000000\n  (ite (= x #x0000000000100000) #x0000000000000001\n  (ite (= x #x0000000000000000) #x0000000000000000\n  (ite (= x #xffffffffffffffff) #x0000000000000000\n  (ite (= x #x000",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= (bvlshr x #x000000000000003f) #x0000000000000001) #x0000000000000001 #x0000000000000000))",
      "(bvnot x)",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n    (ite (= x #x0000000000000001) #x0000000000000001\n      (ite (= x #x0000000000000000) #x0000000000000000\n        (ite (= x #xffffffffffffffff) #x0000000000000001\n          #x0000000000000000)))))",
      "(bvsdiv x (bvadd x x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x #x0000000000000001))",
      "(bvnot (bvand x #x000000000000001f))",
      "(bvand x #x0000000000000001)",
      "(ite (= (bvlshr x #x0000000000000020) #x0000000000000001) #x0000000000000001 #x0000000000000000)",
      "(bvnot (bvand x #x000000000000001f))",
      "(bvnot (bvxor x #x000000000000001f))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= ((_ extract 63 63) x) (_ bv1 1)) (_ bv1 64) (_ bv0 64)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(bvnot x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (=",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(bvnot (bvand x #x000000000000001f))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvnot x))",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #xffffffffffffffff) #x0000000000000001 #x0000000000000000))",
      "(ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 x))))))",
      "(bvand x #x0000000000000001)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x7fffffffffffffff) #x0000000000000000 (ite (= x #x0000000000100000) #x0000000000000001 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #xffffffffffffffff) #x0000000000000000 (ite (= x #x0000000000000001) #x0000000000000001 (ite (="
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x000000000000001f) \\#x000000000))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor (bvand (bvlshr x \\#x0000000000000001f) \\#x0000000000000001) (bvneg (bvlshr x \\#x0000000000000001f))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (ite (= x \\#x000000000000001f) \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000010000) \\#x0000000000000001 (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvand x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000010000) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite true \\#x0000000000000000))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 x))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 63 63) x) \\#b0) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x000000000000001f) \\#x0000000000000001)))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (bvor (b))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 \\#x000))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvneg x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvand x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 0))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x000)))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= (bvlshr x \\#x000000000000003f) \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsdiv x (bvadd x x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvand x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= (bvlshr x \\#x0000000000000020) \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvand x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvxor x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 63 63) x) (_ bv1 1)) (_ bv1 64) (_ bv0 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvand x \\#x000000000000001f)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 x)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x7fffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000100000) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (=))))))))))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        1,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0,
      1,
      63
    ],
    "time_diff_ms": 1255.246
  },
  "hd-12.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (< (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult x y))",
      "(= (bvclz x) (bvclz y)))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))) true false)",
      "(ite (< (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult x y) true false)",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (< (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (bvclz x) (bvclz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (< (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (bvnot (nlz x))) (bvlshr y (bvnot (nlz y)))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 2150.208
  },
  "hd-05.sl": {
    "completions": [
      "(bvior x (bvsub x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000001) (bvnot (bvsub x #x0000000000000001)) x)",
      "(bvadd x (bvsub (bvnot x) (bvsub x #x0000000000000001)))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(ite (bvslt x #x0000000000000001) x (bvnot (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(ite (bvule x #x0000000000000001) x (bvor x (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvnot (bvsub x (bvsub (bvnot x) #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvadd x (bvsub (bvnot x) (bvsub (bvnot x) (bvsub x (bvsub x (bvand x (bvsub x #x0000000000000001)))))))",
      "(bvnot (bvsub (bvshl x #x0000000000000001) x))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvadd x (bvsub (bvnot x) (bvsub x #x0000000000000001)))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvnot x))",
      "(bvsub x (bvsub #x0000000000000000 (bvnot x)))",
      "(bvsub x (bvsub (bvnot x) (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvsub (bvnot x) (bvsub (bvnot x) x)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvnot (bvsub (bvnot x) (bvsub (bvnot x) #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvadd (bvnot x) #x0000000000000001))))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bv| x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x (_ bv1 64))))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvadd x (bvsub (bvnot x) (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvadd (bvnot x) #x0000000000000001))))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvor x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvsub #x0000000000000001 (bvor x (bvsub x (bvand x (bvneg x))))))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvnot (bvsub x #x0000000000000001)))",
      "(bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvsub (bvnot x) (bvnot (bvsub x #b1))))))",
      "(bvsub x (bvnot x))",
      "(bv| x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvsub x #x0000000000000001)))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))",
      "(bvsub x (bvsub (bvnot x) (bvsub (bvnot x) x)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #xFFFFFFFFFFFFFFFF (bvor x (bvsub x #x0000000000000001))))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvnot (bvsub x \\#x0000000000000001)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvnot x) (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvule x \\#x0000000000000001) x (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvsub x (bvsub (bvnot x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvnot x) (bvsub (bvnot x) (bvsub x (bvsub x (bvand x (bvsub x \\#x0000000000000001))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvsub (bvshl x \\#x0000000000000001) x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvnot x) (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000000 (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x (bvsub x))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub (bvnot x) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvsub (bvnot x) (bvsub (bvnot x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvadd (bvnot x) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvnot x) (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvadd (bvnot x) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvor x (bvsub x (bvand x (bvneg x)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub (bvnot x) (bvsub (bvnot x) (bvnot (bvsub x \\#b1)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub (bvnot x) (bvsub (bvnot x) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#xFFFFFFFFFFFFFFFF (bvor x (bvsub x \\#x0000000000000001)))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1235.083
  },
  "hd-16.sl": {
    "completions": [
      "(ite (= x #x0000000000000000) y x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #b0) y x))",
      "(ite (= x #b0) y x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvor x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvior x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(ite (= x #b0) y x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (bvslt x y) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(ite (= x #x0000000000000000) y x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvult x y) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(ite (= y #b0) x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvor x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64) x)",
      "(bvand x y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (not (= x #x0000000000000000)) x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvior x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvslt x y) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvult x y) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= y \\#b0) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (not (= x \\#x0000000000000000)) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1133.201
  },
  "hd-01.sl": {
    "completions": [
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvand x (bvsub x #x0000000000000001)) #x0000000000000000)",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(ite (bvuge x #x0000000000000001) (bvsub x #x0000000000000001) #x0000000000000000)",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvsub x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 739.034
  },
  "hd-17.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(ite (bvugt x #x0000000000000000) (bvand x (bvsub x #x0000000000000001)) x)",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvand x (bvsub x (bvor x (bvadd x (_ bv1 64))))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(ite (bvuge x #x0000000000000001) (bvand x (bvsub x #x0000000000000001)) x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))",
      "(ite (= x (bvand x (bvsub x (bvnot x)))) (bvsub x (bvnot x)) x)",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvor x (bvsub x #x0000000000000001)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(ite (bvuge x #x0000000000000001f) (bvsub x #x0000000000000001f) x)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvand x (bvsub x (bvnot x))))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvand x (bvsub x \\#x0000000000000001)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvor x (bvadd x (_ bv1 64))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvand x (bvsub x \\#x0000000000000001)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x (bvand x (bvsub x (bvnot x)))) (bvsub x (bvnot x)) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvor x (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001f) (bvsub x \\#x0000000000000001f) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1558.345
  },
  "hd-15.sl": {
    "completions": [
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvlshr (bvadd x y) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (<= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub #x0000000000000000 (bvlshr (bvsub x y) #x0000000000000001)))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (+ x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvlshr (bvadd x y) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsdiv (bvadd x y) #x0000000000000002))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvlshr (bvadd x y) #x0000000000000001)\n     (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvudiv (bvadd x y) #x0000000000000002)\n     (bvsub (bvsdiv (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvlshr (bvadd x y) #x0000000000000001)\n     (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(ite (>= x y) (bvudiv (bvadd x y) #x0000000000000002) (bvudiv (bvadd y x) #x0000000000000002))",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub #x0000000000000000 (bvlshr (bvsub x y) #x0000000000000001)))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvlshr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (<= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub \\#x0000000000000000 (bvlshr (bvsub x y) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (+ x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvlshr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsdiv (bvadd x y) \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvudiv (bvadd x y) \\#x0000000000000002) (bvsub (bvsdiv (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= x y) (bvudiv (bvadd x y) \\#x0000000000000002) (bvudiv (bvadd y x) \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub \\#x0000000000000000 (bvlshr (bvsub x y) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1658.269
  },
  "hd-02.sl": {
    "completions": [
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvnot x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvnot x)",
      "(bvsub (bvnot x) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (= x #x0000000000000001) #x0000000000000001 #x0000000000000000)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x (bvnot #x0000000000000000)) #x0000000000000001)",
      "(bvnot (bvor x (bvneg x)))",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x (bvnot #x0000000000000000)) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot x)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x (bvnot #x0000000000000001)) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub x #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvsub (bvadd x (bvnot #x0000000000000000)) #x0000000000000001)",
      "(bvnot x)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvshl #x0000000000000001 x) #x0000000000000001)",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot x)",
      "(bvsub (bvnot x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x (bvnot #x0000000000000001)) #x0000000000000001)"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x (bvnot \\#x0000000000000000)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvor x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x (bvnot \\#x0000000000000000)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x (bvnot \\#x0000000000000001)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x (bvnot \\#x0000000000000000)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvshl \\#x0000000000000001 x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x (bvnot \\#x0000000000000001)) \\#x0000000000000001))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 1488.0390000000002
  },
  "hd-03.sl": {
    "completions": [
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (and x (bvnot x)) #x0000000000000001 (bvand x (bvneg x))))",
      "(ite (not (= ((_ extract 0 0) x) #b0)) ((_ extract 0 0) x) #x0000000000000000)",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvsmod x (bvadd x #x0000000000000001))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (not (= ((_ extract 0 0) x) #x0000000000000000)) ((_ zero_extend 63) (bvand x (bvneg x))) #x0000000000000000)",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (and x (bvnot x)) \\#x0000000000000001 (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= ((_ extract 0 0) x) \\#b0)) ((_ extract 0 0) x) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsmod x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= ((_ extract 0 0) x) \\#x0000000000000000)) ((_ zero_extend 63) (bvand x (bvneg x))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0,
      63
    ],
    "time_diff_ms": 1870.037
  },
  "hd-14.sl": {
    "completions": [
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(ite (>= (bvadd x y) #x00000000000000000000000000000001)\n     (bvlshr (bvadd x y) #x00000000000000001)\n     #x0000000000000000)",
      "(bvsdiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvlshr (bvadd x y) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(ite (<= x y) y (bvadd (bvudiv (bvadd x y) #x0000000000000002) #x0000000000000000))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvashr (bvadd x y) #x0000000000000001))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(ite (>= (bvadd x y) ((_ bv2 64))) ((_ bv1 64) ((_ bvashr (bvadd x y) ((_ bv1 64))) ((_ bv1 64))) ((_ bv0 64)))",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvsdiv (bvadd x y) #x0000000000000002)",
      "(ite (>= y x) (bvurem (bvadd x y) #x0000000000000002) (bvsdiv (bvadd x y) #x0000000000000002))",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvsdiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002))"
    ],
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x00000000000000000000000000000001) (bvlshr (bvadd x y) \\#x00000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvlshr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (<= x y) y (bvadd (bvudiv (bvadd x y) \\#x0000000000000002) \\#x0000000000000000)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvashr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) ((_ bv2 64))) ((_ bv1 64) ((_ bvashr (bvadd x y) ((_ bv1 64))) ((_ bv1 64))) ((_ bv0 64)))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= y x) (bvurem (bvadd x y) \\#x0000000000000002) (bvsdiv (bvadd x y) \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvsdiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ],
    "time_diff_ms": 751.3509999999999
  }
}