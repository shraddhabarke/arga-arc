{
  "get-first-name-from-name-with-comma.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) \n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) \n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) \n     (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n    (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n       (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\")\n       (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\")))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n       (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) \n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\")\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1))\n    (str.substr s 0 (str.indexof s \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n       (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s)))\n    (str.trim (str.substr s 0 (str.indexof s \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\") (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\"))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" \"\") (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s (+ (str.indexof s \",\" 0) 1) (- (str.len s) (str.indexof s \",\" 0) 1)) (str.substr s 0 (str.indexof s \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.trim (str.substr s (+ (str.indexof s \",\" 0) 1) (str.len s))) (str.trim (str.substr s 0 (str.indexof s \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ",",
        " "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ",",
        " "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      ",",
      " "
    ],
    "time_diff_ms": 61.312
  },
  "strip-html-from-text-or-numbers.sl": {
    "completions": [
      "```scheme\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" (str.replace (str.replace _arg_0 \"</b>\" \"\") \"<b>\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ \"<b>\" (str.at _arg_0 3)) \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" (str.replace (str.replace _arg_0 \"</b>\" \"\") \"<b>\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"<b>\" (str.at _arg_0 3)) \"\")))"
    ],
    "constants": [
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "</b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "</b>",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        3,
        "<b>"
      ]
    ],
    "all_constants": [
      "",
      "<b>",
      3,
      "</b>"
    ],
    "time_diff_ms": 1196.986
  },
  "count-total-words-in-a-cell.sl": {
    "completions": [
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len trimmed) 0)\n        0\n        (+ 1 (str.len (str.replace _arg_0 \" \" \"\"))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len _arg_0) 0)\n        0\n        (+ 1 (str.len (str.replace _arg_0 \" \" \"\"))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) 1))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) - (str.len _arg_0) + 1\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len _arg_0) + 1\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) (str.len (str.replace _arg_0 \" \" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```\n",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) \n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) \n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```scheme\n  (str.len (str.replace _arg_0 \" \" \"A\")) - (str.len (str.replace _arg_0 \" \" \"\")) + 1\n)\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len trimmed) 0) 0\n      (+ 1 (str.len (str.replace _arg_0 \" \" \"\"))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```scheme\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\"))\n```",
      "```scheme\n  (str.len (str.replace _arg_0 \" \" \"a\")) \n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```scheme\n  (str.len (str.replace _arg_0 \" \" \"\")) \n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \" 1\")) (- (str.len _arg_0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len trimmed) 0)\n        0\n        (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")) \n```\n",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"1\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((s (str.replace _arg_0 \" \" \"\")))\n    (- (str.len _arg_0) (str.len s) -1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (+ 1 (str.len (str.replace _arg_0 trimmed \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len _arg_0) + 1)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len (str.replace _arg_0 \" \" \"\")) + 1)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (ite (= (str.len trimmed) 0)\n         0\n         (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \" \" 0)))))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```\n",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```scheme\n  (str.len (str.replace _arg_0 \" \" \"\")) \n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\") - (str.len (str.replace _arg_0 \" \" \"\")) + 1)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (+ 1 (str.len (str.replace _arg_0 trimmed \"\")))))\n```",
      "```\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \" 1\"))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (+ 1 (- (str.len _arg_0) (str.len trimmed)))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len trimmed) 0) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\")))))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len _arg_0) 0) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\")))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) 1)))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")) - (str.len _arg_0) + 1))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len _arg_0) + 1))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) 1)))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")) (- (str.len _arg_0) (str.len (str.replace _arg_0 \" \" \"\")))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"A\")) - (str.len (str.replace _arg_0 \" \" \"\")) + 1))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len trimmed) 0) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\")))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \" 1\")) (- (str.len _arg_0) 1)))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len trimmed) 0) 0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"1\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((s (str.replace _arg_0 \" \" \"\"))) (- (str.len _arg_0) (str.len s) -1))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (+ 1 (str.len (str.replace _arg_0 trimmed \"\"))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len _arg_0) + 1))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\")) - (str.len (str.replace _arg_0 \" \" \"\")) + 1))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (ite (= (str.len trimmed) 0) 0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \" \" 0))))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\") - (str.len (str.replace _arg_0 \" \" \"\")) + 1)))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (+ 1 (str.len (str.replace _arg_0 trimmed \"\"))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \" 1\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (+ 1 (- (str.len _arg_0) (str.len trimmed))))))"
    ],
    "constants": [
      [
        " ",
        "a"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "a"
      ],
      [
        " ",
        "a"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        1,
        "a",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "A",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "a",
        " "
      ],
      [
        "a",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " 1",
        1,
        " "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "1",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        -1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        1,
        "a",
        " "
      ],
      [
        "",
        1,
        "a",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        1,
        "_",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        1,
        "a",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " 1",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        1,
        " "
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      " 1",
      "1",
      "A",
      " ",
      "a",
      -1,
      "_"
    ],
    "time_diff_ms": 1144.779
  },
  "stackoverflow8.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 2147483647))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 999)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 256)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1000)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 2147483647)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 2147483647)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 999)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 256)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1000)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 1)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 2147483647)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        100,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        2147483647
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        100,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/",
        999
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        100,
        "/"
      ],
      [
        0,
        256,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        100,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1000,
        "/"
      ],
      [
        0,
        100,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        2147483647
      ],
      [
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      256,
      100,
      999,
      1000,
      "/",
      2147483647
    ],
    "time_diff_ms": 1167.344
  },
  "phone-6-long.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ],
    "time_diff_ms": 1342.598
  },
  "phone-10.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))\n```",
      "```scheme\n(str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.++ (str.substr name 0 4) \"(\")\n          (str.++ (str.substr name 4 3) \") \"\n                  (str.++ (str.substr name 8 3) \"-\"\n                          (str.substr name 12 3)))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) \") \" (str.++ (str.substr name 8 3) \"-\" (str.substr name 12 3))))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      8,
      10,
      11,
      12,
      "-",
      "(",
      ") ",
      15,
      ")"
    ],
    "time_diff_ms": 1108.542
  },
  "phone-6.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ],
    "time_diff_ms": 556.115
  },
  "phone-7-short.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```s-expression\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "all_constants": [
      3,
      5,
      6
    ],
    "time_diff_ms": 925.694
  },
  "phone-7.sl": {
    "completions": [
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 10 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 7 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 10 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        10,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9,
      10
    ],
    "time_diff_ms": 1180.393
  },
  "univ_6_short.sl": {
    "completions": [
      "```lisp\n(ite (str.contains col2 \"New York\")\n     (str.replace col2 \"New York\" \"NY\")\n     col2)\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      "NY",
      "New York",
      ", USA"
    ],
    "time_diff_ms": 1471.261
  },
  "stackoverflow9.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((firstSpace (str.indexof _arg_0 \" \" 0))\n        (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ secondSpace 1) (- (str.len _arg_0) (+ secondSpace 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space-pos (str.indexof _arg_0 \" \" 0))\n        (second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((firstSpace (str.indexof _arg_0 \" \" 0))\n        (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ secondSpace 1) (- (str.len _arg_0) (+ secondSpace 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```lisp\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space-index (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space-index 1) (- (str.len _arg_0) (+ second-space-index 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= second-space -1)\n         \"\"\n         (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((firstSpace (str.indexof _arg_0 \" \" 0))\n        (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ secondSpace 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((firstSpace (str.indexof _arg_0 \" \" 0)) (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ secondSpace 1) (- (str.len _arg_0) (+ secondSpace 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space-pos (str.indexof _arg_0 \" \" 0)) (second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((firstSpace (str.indexof _arg_0 \" \" 0)) (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ secondSpace 1) (- (str.len _arg_0) (+ secondSpace 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f (_arg_0 String) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space-index (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space-index 1) (- (str.len _arg_0) (+ second-space-index 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space-pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space-pos 1) (- (str.len _arg_0) (+ second-space-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((firstSpace (str.indexof _arg_0 \" \" 0)) (secondSpace (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ secondSpace 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 second-space) (- (str.len _arg_0) (+ 1 second-space))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        " ",
        1,
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      -1
    ],
    "time_diff_ms": 866.866
  },
  "phone-9-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      null,
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null
    ],
    "constants": [
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      null,
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        3,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      null,
      [
        "",
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      null,
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      null,
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        1,
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null,
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        1,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ ",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      null
    ],
    "all_constants": [
      "",
      1,
      0,
      3,
      4,
      8,
      12,
      "-",
      "+",
      " ",
      ".",
      "+ "
    ],
    "time_diff_ms": 902.347
  },
  "get-last-word.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- (str.len words) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (str.substr (str.replace rev \"\\n\" \" \") (- (str.len rev) (str.indexof (str.reverse rev) \"\\n\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n              (+ (str.lastIndexOf _arg_0 \" \") 1)\n              (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (let ((lastSpace (str.indexof rev \"\\n\" 0)))\n      (if (= lastSpace -1)\n        _arg_0\n        (str.substr _arg_0 (+ lastSpace 1) (- (str.len _arg_0) (+ lastSpace 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (str.at (str.substr rev (str.indexof rev \"\\n\" (- (str.len rev) 1)) (str.len rev)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\0\")))\n    (str.substr rev (str.indexof rev \"\\0\" 0) (str.len rev))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" (str.++ \" \"))))\n    (str.at (str.substr rev 0 (str.indexof rev \" \" 0)) (- (str.len rev) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.++ (str.substr _arg_0 0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0))) \" \")))\n    (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\")))\n    (str.substr _arg_0 (str.indexof _arg_0 (str.at rev 0) 0) (str.len _arg_0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0)) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev 0 (str.indexof rev \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" (str.++ \" \"))))\n    (str.substr rev (str.indexof rev \" \" -1) (str.len rev))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\0\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\\0\") \"\\0\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (str.substr rev (str.indexof rev \"\\n\" 0) (str.len rev))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\u0000\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\0\")))\n    (str.substr rev (str.indexof rev \"\\0\" (- (str.len rev) 1)) (str.len rev))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.substr (str.replace _arg_0 \" \" \"\\n\") 1 100)))\n    (str.replace (str.at rev 0) \"\\n\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"|\"))\n        (idx (str.indexof (str.replace _arg_0 \" \" \"|\") \"|\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))))\n    (str.substr rev (str.indexof rev \" \" 0) (str.len rev))))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\0\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- (str.len words) 1))))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\u0000\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"@\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\b\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"#\")))\n    (str.substr rev (str.indexof rev \"#\" 0) (str.len rev))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"#\")))\n    (str.substr rev (str.indexof rev \"#\" (- (str.len rev) 1)) (str.len rev))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" (str.reverse \" \"))))\n    (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" (str.++ \" \"))))\n    (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\")))\n    (str.substr _arg_0\n      (+ 1 (str.lastIndexOf _arg_0 \" \"))\n      (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \")))\n    )\n  )\n)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"  \") (str.indexof (str.replace _arg_0 \" \" \"  \") \" \" (- (str.len _arg_0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-space (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-space 1) (- (str.len _arg_0) last-space 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\0\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0)) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"a\") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \" \") (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.replace _arg_0 \" \" \"\\n\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\\n\") \"\\n\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.at (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0)) 0)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \" -1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- (str.len words) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (str.substr (str.replace rev \"\\n\" \" \") (- (str.len rev) (str.indexof (str.reverse rev) \"\\n\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (let ((lastSpace (str.indexof rev \"\\n\" 0))) (if (= lastSpace -1) _arg_0 (str.substr _arg_0 (+ lastSpace 1) (- (str.len _arg_0) (+ lastSpace 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (str.at (str.substr rev (str.indexof rev \"\\n\" (- (str.len rev) 1)) (str.len rev)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\\\0\"))) (str.substr rev (str.indexof rev \"\\\\0\" 0) (str.len rev)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" (str.++ \" \")))) (str.at (str.substr rev 0 (str.indexof rev \" \" 0)) (- (str.len rev) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.++ (str.substr _arg_0 0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0))) \" \"))) (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\"))) (str.substr _arg_0 (str.indexof _arg_0 (str.at rev 0) 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0)) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev 0 (str.indexof rev \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" (str.++ \" \")))) (str.substr rev (str.indexof rev \" \" -1) (str.len rev)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\\\0\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (str.substr rev (str.indexof rev \"\\n\" 0) (str.len rev)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\\\u0000\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\\\0\"))) (str.substr rev (str.indexof rev \"\\\\0\" (- (str.len rev) 1)) (str.len rev)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.substr (str.replace _arg_0 \" \" \"\\n\") 1 100))) (str.replace (str.at rev 0) \"\\n\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"|\")) (idx (str.indexof (str.replace _arg_0 \" \" \"|\") \"|\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))) (str.substr rev (str.indexof rev \" \" 0) (str.len rev)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\\\0\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- (str.len words) 1)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\\\u0000\") (- (str.len _arg_0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"@\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\b\") (- (str.len _arg_0) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"#\"))) (str.substr rev (str.indexof rev \"#\" 0) (str.len rev)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"#\"))) (str.substr rev (str.indexof rev \"#\" (- (str.len rev) 1)) (str.len rev)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" (str.reverse \" \")))) (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" (str.++ \" \")))) (str.substr rev (- (str.len rev) (str.indexof rev \" \" 0)) (str.indexof rev \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\"))) (str.substr _arg_0 (+ 1 (str.lastIndexOf _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastIndexOf _arg_0 \" \")))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"  \") (str.indexof (str.replace _arg_0 \" \" \"  \") \" \" (- (str.len _arg_0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-space (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-space 1) (- (str.len _arg_0) last-space 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\\\0\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0)) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"a\") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \" \") (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\\n\") (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\\n\") \"\\n\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.at (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0)) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \" -1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))"
    ],
    "constants": [
      [
        0,
        " ",
        "  "
      ],
      [
        1,
        " "
      ],
      [
        "\n",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "\n",
        -1
      ],
      [
        "\n",
        1,
        " "
      ],
      [
        "\\0",
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "  "
      ],
      [
        0,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "  ",
        " "
      ],
      [
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        "\\0",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "\n",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\\u0000",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "  ",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "  ",
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        "",
        100,
        " ",
        "\n"
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "|",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\\u0000",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "  ",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "@",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        "  ",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\b",
        " "
      ],
      [
        0,
        "#",
        " "
      ],
      [
        1,
        "#",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "  ",
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "a",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "\n",
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "  ",
      100,
      "#",
      "\b",
      "\\u0000",
      "|",
      "@",
      "\\0",
      " ",
      "\n",
      "a",
      -1
    ],
    "time_diff_ms": 713.9309999999999
  },
  "phone-10_short.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 (+ 4 (str.indexof name \"-\" 0))) \"(\" (str.substr name (+ 4 (str.indexof name \"-\" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \"-\" 0)) (- (str.len name) (+ 8 (str.indexof name \"-\" 0)))))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4)\n          \"(\"\n          (str.substr name 4 3)\n          \") \"\n          (str.substr name 7 3)\n          \"-\"\n          (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 (str.indexof name \" \" 0))\n          \" (\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n          \") \"\n          (str.substr name (+ (str.indexof name \"-\" 0) 1) 3)\n          \"-\"\n          (str.substr name (+ (str.indexof name \"-\" 0) 5) 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 (+ 3 (str.indexof name \" \" 0))) \"(\" (str.substr name (+ 4 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \" \" 0)) 3) \"-\" (str.substr name (+ 12 (str.indexof name \" \" 0)) 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 5))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (+ 4 (str.indexof name \"-\" 0))) \"(\" (str.substr name (+ 4 (str.indexof name \"-\" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \"-\" 0)) (- (str.len name) (+ 8 (str.indexof name \"-\" 0)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \"-\" 0) 1) 3) \"-\" (str.substr name (+ (str.indexof name \"-\" 0) 5) 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 (+ 3 (str.indexof name \" \" 0))) \"(\" (str.substr name (+ 4 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 8 (str.indexof name \" \" 0)) 3) \"-\" (str.substr name (+ 12 (str.indexof name \" \" 0)) 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        15,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        5,
        7,
        11,
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        " (",
        3,
        4,
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        " (",
        3,
        5,
        "-",
        " ",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        " ",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      4,
      5,
      7,
      8,
      10,
      11,
      12,
      "-",
      "(",
      15,
      ") ",
      " (",
      ")",
      " "
    ],
    "time_diff_ms": 704.437
  },
  "17212077.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s\n(ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)) \"\")\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n  (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)) \n     _arg_0)\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```s-expression\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))"
    ],
    "constants": [
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        "",
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      4,
      5,
      6,
      "/"
    ],
    "time_diff_ms": 425.574
  },
  "phone-5.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plus-pos (str.indexof name \"+\" 0))\n        (space-pos (str.indexof name \" \" 0)))\n    (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1))))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```scheme\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plus-pos (str.indexof name \"+\" 0)) (space-pos (str.indexof name \" \" 0))) (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "+"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      "+",
      " "
    ],
    "time_diff_ms": 575.458
  },
  "39060015.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.indexof _arg_0 \"/\" 1) 2)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0))\n        (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n    (if (and (>= start 0) (> end start))\n      (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))\n      _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.at _arg_0 2) \" \") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1)) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1))) \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 1 (- (str.indexof _arg_0 \" /\" 1) 1)) \" /\") \"\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1))) \"\"))\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) 1)) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0)) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"/\" 0)) \n        (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))\n    (if (and (>= start 0) (> end start))\n        (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))\n        _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at _arg_0 0) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"/\" \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0) (str.at _arg_0 0) \"/\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) \"delete words in the area /\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0))\n        (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n    (if (and (>= start 0) (> end start))\n        (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (str.len _arg_0)))\n        _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at _arg_0 0) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) \"/\")) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 1))))\n      (if (and (>= start 0) (>= end 0))\n          (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))\n          _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"/\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))\n    _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\"))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.indexof _arg_0 \"/\" 1) 2)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0)) (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))) (if (and (>= start 0) (> end start)) (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))) _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.at _arg_0 2) \" \") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 1 (- (str.indexof _arg_0 \" /\" 1) 1)) \" /\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"/\" 0)) (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))) (if (and (>= start 0) (> end start)) (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"/\" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0) (str.at _arg_0 0) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 1) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) \"delete words in the area /\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0)) (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))) (if (and (>= start 0) (> end start)) (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (str.len _arg_0))) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)) \"/\")) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"/\" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0)) \"/\" 1) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 1)))) (if (and (>= start 0) (>= end 0)) (str.++ (str.substr _arg_0 0 start) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))"
    ],
    "constants": [
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        2,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        2,
        "/",
        " "
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        " /",
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/",
        " "
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        " /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        "/",
        " "
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/",
        " "
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "delete words in the area /",
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "",
        "/",
        " /"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/",
        " "
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "",
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      "/",
      "delete words in the area /",
      " /",
      " "
    ],
    "time_diff_ms": 1146.641
  },
  "phone-7-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9
    ],
    "time_diff_ms": 1154.8000000000002
  },
  "38871714.sl": {
    "completions": [
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" (str.replace _arg_0 \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" (str.replace _arg_0 \">\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<",
        ">"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      ">",
      "<"
    ],
    "time_diff_ms": 805.456
  },
  "43120683.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") \n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") \n    (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") \n      (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\")\n(str.replace _arg_0 \"4\" \"oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n(ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n(ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n\"four oranges\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\")\n(str.replace _arg_0 \"4\" \"oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\")\n  (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\")\n  (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\")\n  (ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\")\n  \"\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"apple\") \"2\" \"bananas\") \"3\" \"strawberries\") \"4\" \"oranges\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\"\n                               (ite (str.contains _arg_0 \"two\") \" bananas\"\n                                    (ite (str.contains _arg_0 \"three\") \" strawberries\"\n                                         (ite (str.contains _arg_0 \"four\") \" oranges\" \"\"))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n(ite (str.contains _arg_0 \"two\") \"two bananas\" \n(ite (str.contains _arg_0 \"three\") \"three strawberries\" \n\"four oranges\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n(ite (str.contains _arg_0 \"two\") \"two bananas\" \n(ite (str.contains _arg_0 \"three\") \"three strawberries\" \n(ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  \"four oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n(ite (str.contains _arg_0 \"two\") \"two bananas\" \n(ite (str.contains _arg_0 \"three\") \"three strawberries\" \n\"four oranges\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))\n```",
      "```s\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" \" oranges\"))))\n```",
      "```lisp\n  (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n(ite (str.contains _arg_0 \"two\") \"two bananas\" \n(ite (str.contains _arg_0 \"three\") \"three strawberries\" \n(ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  \"four oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\"\n                               (ite (str.contains _arg_0 \"two\") \" bananas\"\n                                    (ite (str.contains _arg_0 \"three\") \" strawberries\"\n                                         \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\")))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n(ite (str.contains _arg_0 \"two\") \"two bananas\" \n(ite (str.contains _arg_0 \"three\") \"three strawberries\" \n(ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n    (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n      (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  \"four oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"one\") \"one apple\"\n  (ite (str.contains _arg_0 \"two\") \"two bananas\"\n  (ite (str.contains _arg_0 \"three\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"four\") \"four oranges\"\n  \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```s\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```s\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") \n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") \n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") \n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" \n                               (ite (str.contains _arg_0 \"2\") \" bananas\" \n                                    (ite (str.contains _arg_0 \"3\") \" strawberries\" \n                                         \" oranges\")))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace _arg_0 \"1\" \" apple\")\n        \"2\" \" bananas\")\n      \"3\" \" strawberries\")\n    \"4\" \" oranges\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"one\") \"one apple\" \n  (ite (str.contains _arg_0 \"two\") \"two bananas\" \n    (ite (str.contains _arg_0 \"three\") \"three strawberries\" \n      (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\") (str.replace _arg_0 \"4\" \"oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\") (str.replace _arg_0 \"4\" \"oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\") (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\") (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\") (ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\") \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"apple\") \"2\" \"bananas\") \"3\" \"strawberries\") \"4\" \"oranges\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" (ite (str.contains _arg_0 \"four\") \" oranges\" \"\")))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"one\") \" apple\" (ite (str.contains _arg_0 \"two\") \" bananas\" (ite (str.contains _arg_0 \"three\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" (ite (str.contains _arg_0 \"1\") \" apple\" (ite (str.contains _arg_0 \"2\") \" bananas\" (ite (str.contains _arg_0 \"3\") \" strawberries\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \" apple\") \"2\" \" bananas\") \"3\" \" strawberries\") \"4\" \" oranges\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"one\") \"one apple\" (ite (str.contains _arg_0 \"two\") \"two bananas\" (ite (str.contains _arg_0 \"three\") \"three strawberries\" (ite (str.contains _arg_0 \"four\") \"four oranges\" \"\"))))))"
    ],
    "constants": [
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "apple",
        "3",
        "4",
        "strawberries",
        "bananas",
        "1",
        "2",
        "oranges"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "one apple",
        "two bananas",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "apple",
        "3",
        "4",
        "strawberries",
        "bananas",
        "1",
        "2",
        "oranges"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        ", 4",
        "",
        ", 2",
        " apple",
        ", 3",
        " bananas",
        ", 1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "apple",
        "3",
        "oranges",
        "4",
        "bananas",
        "2",
        "strawberries",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one",
        "four",
        "two",
        " apple",
        ",",
        " bananas",
        "three",
        " oranges",
        " strawberries"
      ],
      [
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        " apple",
        ",",
        "2",
        " bananas",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        " apple",
        ",",
        "2",
        " bananas",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        " apple",
        ",",
        "2",
        " bananas",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "one",
        "two",
        " apple",
        ",",
        " bananas",
        "three",
        " oranges",
        " strawberries"
      ],
      [
        "one",
        "two",
        " apple",
        ",",
        " bananas",
        "three",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "one",
        "two",
        " apple",
        ",",
        " bananas",
        "three",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "four oranges",
        "3",
        "4",
        "three strawberries",
        "2",
        "1"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        " apple",
        ",",
        "2",
        " bananas",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        " apple",
        ",",
        "2",
        " bananas",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "3",
        "4",
        " apple",
        " bananas",
        "2",
        "1",
        " oranges",
        " strawberries"
      ],
      [
        "",
        "one apple",
        "two bananas",
        "one",
        "four oranges",
        "four",
        "two",
        "three strawberries",
        "three"
      ]
    ],
    "all_constants": [
      "",
      "two",
      "bananas",
      "strawberries",
      "oranges",
      "4",
      "three strawberries",
      "1",
      "one",
      ",",
      "apple",
      ", 1",
      "2",
      ", 2",
      "one apple",
      " apple",
      "four",
      "two bananas",
      " oranges",
      " bananas",
      ", 3",
      "three",
      "3",
      "four oranges",
      ", 4",
      " strawberries"
    ],
    "time_diff_ms": 467.841
  },
  "stackoverflow11.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space-pos (str.indexof _arg_0 \" \" 0)))\n    (if (= space-pos -1)\n        _arg_0\n        (str.substr _arg_0 space-pos (- (str.len _arg_0) space-pos)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" PAX\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 idx (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 idx (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 idx (- (str.len _arg_0) idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)) \"\"))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (if (= idx -1) \"\" (str.substr _arg_0 idx (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (if (= idx -1) \"\" (str.substr _arg_0 idx (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((s (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))\n    (ite (str.contains s \"PAX\") s \"\")))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 idx (- (str.len _arg_0) idx))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (+ (str.indexof _arg_0 \" PAX\" 0) 4))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX \" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((idx (str.indexof _arg_0 \"PAX\" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 idx (- (str.len _arg_0) idx)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0))) \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (str.++ (str.at parts 0) \" \" (str.at parts 1) \" \" (str.at parts 2))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \" PAX \") (str.substr _arg_0 (str.indexof _arg_0 \" PAX \") (str.len _arg_0)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" PAX\" 0)\n    (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((pos (str.indexof _arg_0 \"PAX\" 0)))\n    (ite (= pos -1) \"\" (str.substr _arg_0 pos (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space-pos (str.indexof _arg_0 \" \" 0))) (if (= space-pos -1) _arg_0 (str.substr _arg_0 space-pos (- (str.len _arg_0) space-pos))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" PAX\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 idx (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 idx (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 idx (- (str.len _arg_0) idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 idx (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 idx (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((s (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))) (ite (str.contains s \"PAX\") s \"\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 idx (- (str.len _arg_0) idx)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (+ (str.indexof _arg_0 \" PAX\" 0) 4))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX \" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \"PAX\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 idx (- (str.len _arg_0) idx))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (let ((parts (str.split _arg_0 \" \"))) (str.++ (str.at parts 0) \" \" (str.at parts 1) \" \" (str.at parts 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" PAX \") (str.substr _arg_0 (str.indexof _arg_0 \" PAX \") (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"PAX\") \"PAX\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" PAX\" 0) 9)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (let ((pos (str.indexof _arg_0 \"PAX\" 0))) (ite (= pos -1) \"\" (str.substr _arg_0 pos (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))"
    ],
    "constants": [
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        -1,
        " "
      ],
      [
        " PAX",
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        " PAX",
        0,
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX",
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "PAX"
      ],
      [
        0,
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX",
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX",
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        " PAX",
        0
      ],
      [
        "",
        "PAX"
      ],
      [
        0,
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        " PAX",
        0,
        4
      ],
      [
        " PAX",
        0
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        " PAX",
        0
      ],
      [
        0,
        " PAX "
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX",
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX"
      ],
      [
        0,
        1,
        2,
        " "
      ],
      [
        0,
        "PAX"
      ],
      [
        "",
        " PAX "
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        "",
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ],
      [
        " PAX",
        0
      ],
      [
        " PAX",
        0,
        9
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "",
        "PAX",
        -1
      ],
      [
        0,
        "PAX"
      ],
      [
        0,
        "PAX"
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "_",
      4,
      2,
      9,
      " PAX",
      "PAX",
      " ",
      -1,
      " PAX "
    ],
    "time_diff_ms": 997.101
  },
  "split-text-string-at-specific-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (if (= i 1)\n      (str.substr s 0 (str.indexof s \"_\" 0))\n      (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (i Int)) String\n  (ite (= i 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (i Int)) String\n  (if (= i 1)\n      (str.substr s 0 (str.indexof s \"_\" 0))\n      (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n       (str.substr s 0 (str.indexof s \"_\" 0))\n       (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```s-expression\n(ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (if (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (ite (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (i Int)) String (if (= i 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ 1 (str.indexof s \"_\" 0)) (- (str.len s) (+ 1 (str.indexof s \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (str.len s)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (str.indexof s \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ],
    "time_diff_ms": 1372.784
  },
  "get-domain-name-from-url.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1)\n         _arg_0\n         (str.substr _arg_0 0 (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((prefix (ite (str.prefixof \"https://\" _arg_0) \"https://\" \"http://\")))\n    (let ((start (str.indexof _arg_0 \"/\" (str.len prefix))))\n      (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (if (= start -1)\n      _arg_0\n      (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\")\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n  _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (if (= start -1)\n        _arg_0\n        (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\") \n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \n    \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((prefix (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))))\n    (ite (str.contains prefix \"/\") prefix (str.++ prefix \"/\"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0))))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n     _arg_0)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 slash-pos))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))\n    (str.substr _arg_0 0 (ite (= end -1) (str.len _arg_0) (+ end 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```s\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```s\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (if (= start -1)\n        _arg_0\n        (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= pos -1) _arg_0 (str.substr _arg_0 0 pos))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((url (ite (str.prefixof \"https\" _arg_0) \"https://\" \"http://\")))\n    (str.++ url (str.substr _arg_0 (str.len url) (str.indexof _arg_0 \"/\" (+ (str.len url) 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0))))\n    (str.substr _arg_0 0 end)))\n```",
      "```s\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))\n    (str.substr _arg_0 0 slash-pos)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (if (= start -1)\n        _arg_0\n        (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= slash-pos -1)\n         _arg_0\n         (str.substr _arg_0 0 (ite (= (str.at _arg_0 (- slash-pos 1)) \"/\")\n                                   slash-pos\n                                   (+ slash-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (if (= start -1)\n        _arg_0\n        (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n    (str.substr _arg_0 0 (+ slash-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8))\n        (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1)\n         _arg_0\n         (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n  _arg_0)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1)\n         _arg_0\n         (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1)\n         _arg_0\n         (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start))))\n```",
      "```lisp\n(if (str.contains _arg_0 \"/\") \n    (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) \"/\") \n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" 8)))\n    (ite (= slash-pos -1)\n         _arg_0\n         (str.substr _arg_0 0 slash-pos))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((prefix (ite (str.prefixof \"https://\" _arg_0) \"https://\" \"http://\"))) (let ((start (str.indexof _arg_0 \"/\" (str.len prefix)))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (if (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (if (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((prefix (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))) (ite (str.contains prefix \"/\") prefix (str.++ prefix \"/\")))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0)))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 slash-pos)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) (str.substr _arg_0 0 (ite (= end -1) (str.len _arg_0) (+ end 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (if (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/\" 8))) (ite (= pos -1) _arg_0 (str.substr _arg_0 0 pos)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 8) 1)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (ite (str.prefixof \"https\" _arg_0) \"https://\" \"http://\"))) (str.++ url (str.substr _arg_0 (str.len url) (str.indexof _arg_0 \"/\" (+ (str.len url) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0)))) (str.substr _arg_0 0 end))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))) (str.substr _arg_0 0 slash-pos))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (if (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 (ite (= (str.at _arg_0 (- slash-pos 1)) \"/\") slash-pos (+ slash-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (if (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))) (str.substr _arg_0 0 (+ slash-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8)) (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8)))) (str.substr _arg_0 0 end))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 9)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) start)))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" 8))) (ite (= slash-pos -1) _arg_0 (str.substr _arg_0 0 slash-pos)))))",
      "((define-fun f ((_arg_0 String)) String (let ((slash-pos (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 0 (ite (= slash-pos -1) (str.len _arg_0) slash-pos)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))"
    ],
    "constants": [
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "http://",
        0,
        1,
        "/",
        "https://",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        9,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        -1,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        "http://",
        1,
        "/",
        "https",
        "https://"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        2,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        1,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        9,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "//",
      8,
      9,
      "/",
      "http://",
      "https",
      "https://",
      -1
    ],
    "time_diff_ms": 644.994
  },
  "get-last-name-from-name-with-comma.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))\n          \",\"\n          (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((comma-pos (str.indexof _arg_0 \",\" 0)))\n    (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    \",\"\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n          \",\"\n          (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n          \",\"\n          (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n          \",\"\n          (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((comma-pos (str.indexof _arg_0 \",\" 0))) (str.++ (str.substr _arg_0 (+ comma-pos 1) (- (str.len _arg_0) comma-pos 1)) \",\" (str.substr _arg_0 0 comma-pos)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      ","
    ],
    "time_diff_ms": 1304.751
  },
  "initials.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(ite (= (str.indexof name \" \" 0) -1)\n    name\n    (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(ite (str.contains name \" \")\n  (str.++ (str.at name 0) \".\" (str.at name (+ (str.indexof name \" \" 0) 1)) \".\")\n  \"\")\n```",
      "```scheme\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (let ((first-initial (str.at name 0))\n        (space-index (str.indexof name \" \" 0))\n        (last-initial (str.at name (+ space-index 1))))\n    (str.++ first-initial \".\" last-initial \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(ite (str.contains name \" \")\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n  name)\n```",
      "```lisp\n(ite (str.contains name \" \")\n     (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n     \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name \n      (+ 1 (str.indexof name \" \" 0)) \n    ) \n    \".\"\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.++ (str.at name (str.indexof name \" \" 0 1)) \".\")))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```"
    ],
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (ite (= (str.indexof name \" \" 0) -1) name (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ (str.indexof name \" \" 0) 1)) \".\") \"\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (let ((first-initial (str.at name 0)) (space-index (str.indexof name \" \" 0)) (last-initial (str.at name (+ space-index 1)))) (str.++ first-initial \".\" last-initial \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") name)))",
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.++ (str.at name (str.indexof name \" \" 0 1)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      ".",
      -1
    ],
    "time_diff_ms": 1450.766
  },
  "univ_5-long-repeat.sl": {
    "completions": [
      "```scheme\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```(str.replace col2 \",\" \", USA\")```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \",\" \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [],
      [
        ", USA"
      ],
      [],
      [
        ", USA"
      ],
      [
        ", USA",
        ","
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [],
      [],
      [],
      [],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      ",",
      ", USA"
    ],
    "time_diff_ms": 863.382
  },
  "stackoverflow10.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n  (str.substr _arg_0 0 4)\n)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 10 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 0 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) 4))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```s\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 10 4))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ end 1) 4))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \" \" 0) \n    5))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ end 1) 4))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 0 4)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((second (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((third (str.indexof _arg_0 \" \" (+ second 1))))\n        (str.substr _arg_0 (+ second 1) (- third second 1))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ next 1) 4))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String (str.substr _arg_0 10 4))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ end 1) 4))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 10 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 4))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) 4)))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 10 4)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ end 1) 4)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ end 1) 4)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((second (str.indexof _arg_0 \" \" (+ start 1)))) (let ((third (str.indexof _arg_0 \" \" (+ second 1)))) (str.substr _arg_0 (+ second 1) (- third second 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ next 1) 4)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 10 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ end 1) 4)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 10 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) 4))))"
    ],
    "constants": [
      [
        0,
        " ",
        5
      ],
      [
        0,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        10,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        10,
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        10,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        4
      ],
      [
        0,
        5,
        " "
      ],
      [
        10,
        4
      ],
      [
        0,
        4
      ],
      [
        0,
        1,
        4,
        " "
      ],
      [
        0,
        1,
        4,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      4,
      5,
      10,
      " "
    ],
    "time_diff_ms": 1077.681
  },
  "phone-9-short.sl": {
    "completions": [
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\" 0) \"-\" \".\" 0) \" \" \"\" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\" 0) \"-\" \".\" 0) \" \" \"\" 0)))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))"
    ],
    "constants": [
      [
        ".",
        "-"
      ],
      [
        ".",
        " ",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "",
        "+ ",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "+ ",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        0,
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      0,
      "-",
      "+",
      " ",
      ".",
      "+ "
    ],
    "time_diff_ms": 1242.022
  },
  "phone-6-short.sl": {
    "completions": [
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ],
    "time_diff_ms": 1019.634
  },
  "43606446.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \">\" 0) 1)\n    (- (str.len _arg_0)\n       (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH>\" 0))\n    (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"CASH>\" 0)) (+ 1 (str.indexof _arg_0 \"CASH>\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start 1))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \",\") \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1))) \n     \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \",\" 0) 1)\n    (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \">\" 0) 1)\n    (- (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \">\" 0))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"CASH,\" 0) 6)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \">\" 0) 1)\n    (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \",\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \",\" 0))\n    (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \">\" 0) 1)\n    (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \",\" 0) 1))\n        (end (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) 3))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \",\" 0)))\n    (let ((end (str.indexof _arg_0 \">\" start)))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.indexof _arg_0 \">\" (+ 1 (str.indexof _arg_0 \">\" 0))) (+ 1 (str.indexof _arg_0 \">\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3))\n```",
      "```s-expression\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```s-expression\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \",\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \",\" 0) 1)\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- (str.len _arg_0) start end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \"CASH,\" 0) 5)\n    (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \">\" 0) 1)\n    (- (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \",\" 0)))\n    (let ((end (str.indexof _arg_0 \">\" 0)))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \">\") \n     (str.substr _arg_0 \n                 (+ (str.indexof _arg_0 \">\" 0) 1) \n                 (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))) \n     \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"CASH,\" 0))\n    (- (str.indexof _arg_0 \">\" 0)\n       (+ 1 (str.indexof _arg_0 \"CASH,\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))\n        (end (str.indexof _arg_0 \"<\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \"<\" 0) 1))\n        (end (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \"CASH,\" 0) 5)\n    (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"CASH,\" 0) 5)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \">\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH>\" 0)) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"CASH>\" 0)) (+ 1 (str.indexof _arg_0 \"CASH>\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))) (str.substr _arg_0 start (- (str.len _arg_0) start 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \",\") (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"CASH,\" 0) 6))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \",\" 0) 1)) (end (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \",\" 0))) (let ((end (str.indexof _arg_0 \">\" start))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.indexof _arg_0 \">\" (+ 1 (str.indexof _arg_0 \">\" 0))) (+ 1 (str.indexof _arg_0 \">\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start end)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1))) (str.substr _arg_0 start (- (str.len _arg_0) start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- (str.len _arg_0) start end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \",\" 0))) (let ((end (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \">\") (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"CASH,\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"CASH,\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \">\" 0) 1)) (end (str.indexof _arg_0 \"<\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \"<\" 0) 1)) (end (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"CASH,\" 0) 5))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.indexof _arg_0 \">\" (+ (str.indexof _arg_0 \">\" 0) 1)) (+ (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \">\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        3,
        ","
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        2
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        "CASH>",
        ">"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        "",
        ",",
        ">"
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        6,
        "CASH,",
        ">"
      ],
      [
        0,
        3,
        5,
        "CASH,"
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        3,
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        3,
        5,
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        2,
        ">"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        3,
        "CASH,"
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        2,
        ">"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        2,
        ">"
      ],
      [
        0,
        3,
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        ",",
        ">",
        1
      ],
      [
        0,
        3,
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        2,
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        2,
        "",
        ">"
      ],
      [
        0,
        ",",
        3,
        1
      ],
      [
        0,
        3,
        5,
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "CASH,"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        2,
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ],
      [
        0,
        1,
        3,
        ">"
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      "",
      5,
      6,
      "CASH,",
      ">",
      ",",
      "CASH>",
      "<"
    ],
    "time_diff_ms": 1001.7660000000001
  },
  "initials-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name (+ 1 (str.indexof name \" \" 0))) \n    \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name (+ 1 (str.indexof name \" \" 0))) \n    \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((first (str.at name 0))\n        (dot \".\")\n        (space \" \")\n        (second (str.at name (+ 1 (str.indexof name space 0)))))\n    (str.++ first dot second dot)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ \n    (str.++ \n      (str.at name 0) \n      \".\") \n    (str.at name \n      (str.indexof name \" \" 0))))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (let ((first (str.at name 0)) (dot \".\") (space \" \") (second (str.at name (+ 1 (str.indexof name space 0))))) (str.++ first dot second dot))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.at name 0) \".\") (str.at name (str.indexof name \" \" 0)))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 327.986
  },
  "phone-5-long-repeat.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1294.871
  },
  "phone-7-long.sl": {
    "completions": [
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 7 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```s-expression\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 6 3))\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 8 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 7 3))\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f ((name String)) String (str.substr name 8 3)))",
      "((define-fun f ((name String)) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8,
      9
    ],
    "time_diff_ms": 933.5350000000001
  },
  "univ_6-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      "NY",
      "New York",
      ", USA"
    ],
    "time_diff_ms": 1157.764
  },
  "33619752.sl": {
    "completions": [
      "```scheme\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0))\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0))\n        _arg_0))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.replace _arg_0 \" Enterprises\" \"\")\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.replace _arg_0 \" Corporation\" \"\")\n        _arg_0))\n```",
      "```lisp\n(ite (or (str.contains _arg_0 \"Inc\") (str.contains _arg_0 \"Company\") (str.contains _arg_0 \"Corporation\") (str.contains _arg_0 \"Enterprises\"))\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n_arg_0))\n```",
      "```scheme\n(ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0))\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0))\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0))\n        _arg_0))\n```",
      "```scheme\n(ite (or (str.contains _arg_0 \"Enterprises\") (str.contains _arg_0 \"Corporation\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.suffixof \"Enterprises\" _arg_0)\n     (str.replace _arg_0 \" Enterprises\" \"\")\n     (ite (str.suffixof \"Corporation\" _arg_0)\n          (str.replace _arg_0 \" Corporation\" \"\")\n          _arg_0))\n```",
      "```lisp\n(ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (- (str.len _arg_0) (ite (str.suffixof \"Inc\" _arg_0) 3 (ite (str.suffixof \"Company\" _arg_0) 7 (ite (str.suffixof \"Corporation\" _arg_0) 11 10))))) _arg_0)\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0) \n    (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n    (ite (str.suffixof \"Corporation\" _arg_0) \n      (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n      (ite (str.suffixof \"Enterprises\" _arg_0) \n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n       (ite (str.suffixof \"Company\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n            (ite (str.suffixof \"Corporation\" _arg_0)\n                 (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                 (ite (str.suffixof \"Enterprises\" _arg_0)\n                      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                      _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\")))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\")))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\")))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  (ite (str.suffixof \" Inc\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n         (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n           (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n       (ite (str.suffixof \"Inc\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n            (ite (str.suffixof \"Enterprises\" _arg_0)\n                 (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n                 _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n       (ite (str.suffixof \" Inc\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n            (ite (str.suffixof \" Enterprises\" _arg_0)\n                 (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                 _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (ite (str.suffixof \" Inc\" _arg_0) \n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0) \n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0) \n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) \n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) \n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Inc\" 0) 1))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Corporation\" 0) 1))\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Enterprises\" 0) 1))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.replace _arg_0 \" Corporation\" \"\")\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.replace _arg_0 \" Inc\" \"\")\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.replace _arg_0 \" Enterprises\" \"\")\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) \n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) \n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) \n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) \n_arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Corporation\")\n     (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0))\n     (ite (str.contains _arg_0 \"Inc\")\n          (str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\" 0))\n          (ite (str.contains _arg_0 \"Enterprises\")\n               (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0))\n               _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\")))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\")))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\")))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\")\n(ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\")\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\")\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") \n(ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") \n(ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") \n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n      _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) \n(ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 7)) \n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) \n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) \n_arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\")))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\")))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\")))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  (ite (str.suffixof \" Enterprises\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n       _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") \n(ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") \n(ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Corporation\")\n     (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Corporation\" 0) 1))\n     (ite (str.contains _arg_0 \"Inc\")\n          (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Inc\" 0) 1))\n          (ite (str.contains _arg_0 \"Enterprises\")\n               (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Enterprises\" 0) 1))\n               _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Corporation\")\n     (str.replace _arg_0 \" Corporation\" \"\")\n     (ite (str.contains _arg_0 \"Inc\")\n          (str.replace _arg_0 \" Inc\" \"\")\n          (ite (str.contains _arg_0 \"Enterprises\")\n               (str.replace _arg_0 \" Enterprises\" \"\")\n               _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Company\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n        (ite (str.suffixof \"Corporation\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            (ite (str.suffixof \"Enterprises\" _arg_0)\n                (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8))\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n  (ite (str.suffixof \"Inc\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n  (ite (str.suffixof \"Enterprises\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n       _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n      (ite (str.suffixof \"Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0) \n       (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n       (ite (str.suffixof \" Corporation\" _arg_0) \n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            (ite (str.suffixof \" Enterprises\" _arg_0) \n                 (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n                 _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n  (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n  _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) \n(ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) \n(ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) \n(ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) \n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n(ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n(ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n_arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Corporation\")\n    (str.replace _arg_0 \" Corporation\" \"\")\n    (ite (str.contains _arg_0 \"Inc\")\n        (str.replace _arg_0 \" Inc\" \"\")\n        (ite (str.contains _arg_0 \"Enterprises\")\n            (str.replace _arg_0 \" Enterprises\" \"\")\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \" Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0)\n      (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n      (ite (str.suffixof \" Enterprises\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") \n(ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") \n(ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Company\") (str.replace _arg_0 \"Company\" \"\") \n(ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \"Corporation\" \"\") \n(ite (str.contains _arg_0 \"Inc\") (str.replace _arg_0 \"Inc\" \"\") \n(ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \"Enterprises\" \"\") \n_arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Corporation\")\n     (str.replace _arg_0 \" Corporation\" \"\")\n     (ite (str.contains _arg_0 \"Inc\")\n          (str.replace _arg_0 \" Inc\" \"\")\n          (ite (str.contains _arg_0 \"Enterprises\")\n               (str.replace _arg_0 \" Enterprises\" \"\")\n               _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.suffixof \"Corporation\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n  (ite (str.suffixof \"Inc\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n  (ite (str.suffixof \"Enterprises\" _arg_0)\n       (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n       _arg_0))))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \"Corporation\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n    (ite (str.suffixof \"Inc\" _arg_0)\n        (str.substr _arg_0 0 (- (str.len _arg_0) 3))\n        (ite (str.suffixof \"Enterprises\" _arg_0)\n            (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n            _arg_0)))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.contains _arg_0 \"Inc\") (str.contains _arg_0 \"Company\") (str.contains _arg_0 \"Corporation\") (str.contains _arg_0 \"Enterprises\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.contains _arg_0 \"Enterprises\") (str.contains _arg_0 \"Corporation\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (- (str.len _arg_0) (ite (str.suffixof \"Inc\" _arg_0) 3 (ite (str.suffixof \"Company\" _arg_0) 7 (ite (str.suffixof \"Corporation\" _arg_0) 11 10))))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\"))) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\"))) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\"))) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Inc\" 0) 1)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Corporation\" 0) 1)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Enterprises\" 0) 1)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") (ite (str.suffixof \"Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0)) (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\" 0)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\"))) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\"))) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\"))) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") (ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") (ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 7)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Corporation\"))) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Inc\"))) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) (str.len \" Enterprises\"))) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \" Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") (ite (str.suffixof \" Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Corporation\" 0) 1)) (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Inc\" 0) 1)) (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (- (str.indexof _arg_0 \"Enterprises\" 0) 1)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \" Corporation\" \"\") (ite (str.contains _arg_0 \"Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Company\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 8)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \" Corporation\" \"\") (ite (str.contains _arg_0 \"Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.replace _arg_0 \" Inc\" \"\") (ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") (ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Company\") (str.replace _arg_0 \"Company\" \"\") (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \"Corporation\" \"\") (ite (str.contains _arg_0 \"Inc\") (str.replace _arg_0 \"Inc\" \"\") (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \"Enterprises\" \"\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \" Corporation\" \"\") (ite (str.contains _arg_0 \"Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 3)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0)))))"
    ],
    "constants": [
      [
        0,
        "Corporation",
        "Enterprises"
      ],
      [
        "",
        " Corporation",
        "Enterprises",
        " Enterprises",
        "Corporation"
      ],
      [
        0,
        " ",
        "Enterprises",
        "Inc",
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        " ",
        "Enterprises"
      ],
      [
        0,
        " ",
        "Enterprises",
        "Inc",
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        "Enterprises"
      ],
      [
        0,
        "Corporation",
        " ",
        "Enterprises"
      ],
      [
        "",
        " Corporation",
        "Enterprises",
        " Enterprises",
        "Corporation"
      ],
      [
        0,
        3,
        "Enterprises",
        "Inc",
        7,
        10,
        11,
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        11,
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        "Corporation",
        "Inc",
        "Enterprises"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        8,
        12,
        " Company",
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        "Inc",
        "Enterprises",
        "Corporation"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        "",
        " Corporation",
        " Inc",
        " Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        3,
        7,
        "Corporation",
        11,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        " Corporation",
        " Inc",
        " Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        1,
        "Corporation",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        11,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        11,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        11,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        8,
        11,
        12,
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        0,
        4,
        12,
        " Corporation",
        " Enterprises",
        " Inc"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        "",
        "Corporation",
        "Company",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        "",
        "Corporation",
        " Corporation",
        " Enterprises",
        " Inc",
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        12,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        4,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ],
      [
        0,
        3,
        "Corporation",
        11,
        "Inc",
        "Enterprises"
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      3,
      4,
      7,
      8,
      10,
      11,
      " Enterprises",
      12,
      "Corporation",
      "Company",
      " Inc",
      " Company",
      " Corporation",
      " ",
      "Enterprises",
      "Inc"
    ],
    "time_diff_ms": 1141.067
  },
  "extract-text-between-parentheses.sl": {
    "completions": [
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \" \" \"\")))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace _arg_0 \"Jones <\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"\" \"\")))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace _arg_0 \"Jones <\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)) \"\" \"\"))))"
    ],
    "constants": [
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        " ",
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        "",
        "Jones <"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        " ",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        "Jones <"
      ],
      [
        "",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        " ",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        "Jones <"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        "Jones <"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        "",
        "<",
        " ",
        ">"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        ">"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        "Jones <"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        "",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        0,
        1,
        ">",
        "<"
      ],
      [
        "",
        "Jones <"
      ],
      [
        0,
        1,
        "",
        "<",
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "Jones <",
      ">",
      " ",
      "<"
    ],
    "time_diff_ms": 1383.949
  },
  "remove-leading-and-trailing-spaces-from-text.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace _arg_0 \"  \" \" \") \n        \"  \" \" \") \n      \"  \" \" \") \n    \"  \" \" \") \n  \"  \" \" \"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")\n```",
      "```s-expression\n(ite (str.prefixof \" \" _arg_0) \n     (ite (str.suffixof \" \" _arg_0) \n          (str.substr _arg_0 1 (- (str.len _arg_0) 2)) \n          (str.substr _arg_0 1 (- (str.len _arg_0) 1))) \n     (ite (str.suffixof \" \" _arg_0) \n          (str.substr _arg_0 0 (- (str.len _arg_0) 1)) \n          _arg_0))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \") (str.replace _arg_0 \" \" \"\") _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \" \") \" \" \" \") \" \" \" \")))\n    (str.substr trimmed 1 (- (str.len trimmed) 2))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \")\n     (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))\n    (str.replace (str.replace trimmed \" \" \" \") \" \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \")\n     (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```s-expression\n(ite (str.prefixof \" \" _arg_0)\n     (ite (str.suffixof \" \" _arg_0)\n          (str.substr _arg_0 1 (- (str.len _arg_0) 2))\n          (str.substr _arg_0 1 (- (str.len _arg_0) 1)))\n     (ite (str.suffixof \" \" _arg_0)\n          (str.substr _arg_0 0 (- (str.len _arg_0) 1))\n          _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"^ +\" \"\") \" +$\" \"\")))\n    (str.replace trimmed \" +\" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((s (str.replace _arg_0 \"  \" \" \")))\n    (ite (str.prefixof \" \" s)\n      (f (str.substr s 1 (- (str.len s) 1)))\n      (ite (str.suffixof \" \" s)\n        (f (str.substr s 0 (- (str.len s) 1)))\n        s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\") \" \" \"\")))\n    (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr trimmed 1 (- (str.len trimmed) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (ite (str.prefixof \" \" trimmed)\n         (str.substr trimmed 1 (- (str.len trimmed) 1))\n         trimmed)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") _arg_0 \"\")))\n    (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((stripped (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))\n    stripped))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \" +\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace _arg_0 \" \" \"\") \n    \"\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.substr trimmed (ite (str.prefixof \" \" trimmed) 1 0) \n                (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^ +\" \"\") \" +$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))\n    (str.replace (str.replace (str.replace (str.replace trimmed \" \" \" \") \" \" \" \") \" \" \" \"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))\n    (str.replace (str.replace trimmed \" \" \"\") \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace _arg_0 \" \" \"\")\n    (str.replace _arg_0 \" \" \"\")\n    \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))\n    (str.replace (str.replace (str.replace (str.replace (str.replace trimmed \" \" \"\") \" \" \"\") \" \" \"\") \" \" \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \"^ \" \"\") \" $\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))\n    (str.substr trimmed 0 (str.len trimmed))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))\n    (ite (str.prefixof \" \" _arg_0)\n         (str.substr trimmed 1 (str.len trimmed))\n         trimmed)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((stripped (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (str.substr stripped\n      (ite (str.prefixof \" \" stripped) 1 0)\n      (ite (str.suffixof \" \" stripped)\n        (- (str.len stripped) 1)\n        (str.len stripped)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((stripped (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.++ (ite (str.prefixof \" \" stripped) \"\" (str.at stripped 0)) (str.substr stripped 1 (- (str.len stripped) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (str.replace (str.replace trimmed \"^ \" \"\") \" $\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.replace (str.replace trimmed (str.++ \" \" (str.substr trimmed 0 1)) (str.substr trimmed 0 1)) (str.++ (str.substr trimmed (- (str.len trimmed) 1) 1) \" \") (str.substr trimmed (- (str.len trimmed) 1) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.substr trimmed (ite (str.prefixof \" \" trimmed) 1 0) \n                (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))\n    (str.substr trimmed 0 (str.len trimmed))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \")))\n    trimmed))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))\n    (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0))\n            (str.substr trimmed 1 (- (str.len trimmed) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (ite (str.prefixof \" \" trimmed)\n         (ite (str.suffixof \" \" trimmed)\n              (str.substr trimmed 1 (- (str.len trimmed) 2))\n              (str.substr trimmed 1 (- (str.len trimmed) 1)))\n         (ite (str.suffixof \" \" trimmed)\n              (str.substr trimmed 0 (- (str.len trimmed) 1))\n              trimmed))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (ite (str.prefixof \" \" trimmed)\n         (str.substr trimmed 1 (- (str.len trimmed) 1))\n         trimmed)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((s (str.replace _arg_0 \"  \" \" \")))\n    (ite (str.prefixof \" \" s)\n         (f (str.substr s 1 (- (str.len s) 1)))\n         (ite (str.suffixof \" \" s)\n              (f (str.substr s 0 (- (str.len s) 1)))\n              s))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))\n    (str.replace (str.replace trimmed \" \" \"\") \" \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (str.replace (str.replace (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\")))\n    (str.substr trimmed 0 (str.len trimmed))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((s (str.replace _arg_0 \" \" \"\")))\n    (str.replace (str.replace s (str.++ \" \" \" \") \" \") \" \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.substr _arg_0 (str.indexof _arg_0 (str.at _arg_0 0) 0)\n                             (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) (str.at (str.reverse _arg_0) 0) 0)))))\n    (str.replace trimmed \"  \" \" \")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))\n    (ite (str.prefixof \" \" trimmed)\n         (ite (str.suffixof \" \" trimmed)\n              (str.substr trimmed 1 (- (str.len trimmed) 2))\n              (str.substr trimmed 1 (- (str.len trimmed) 1)))\n         (ite (str.suffixof \" \" trimmed)\n              (str.substr trimmed 0 (- (str.len trimmed) 1))\n              trimmed))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.substr trimmed\n                (ite (str.prefixof \" \" trimmed) 1 0)\n                (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s{2,}\" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))\n    (str.++ (ite (str.prefixof \" \" trimmed) \"\" (str.at trimmed 0)) (str.substr trimmed 1 (- (str.len trimmed) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))",
      "((define-fun f (_arg_0 String) String (ite (str.prefixof \" \" _arg_0) (ite (str.suffixof \" \" _arg_0) (str.substr _arg_0 1 (- (str.len _arg_0) 2)) (str.substr _arg_0 1 (- (str.len _arg_0) 1))) (ite (str.suffixof \" \" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 1)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.replace _arg_0 \" \" \"\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \" \") \" \" \" \") \" \" \" \"))) (str.substr trimmed 1 (- (str.len trimmed) 2)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))) (str.replace (str.replace trimmed \" \" \" \") \" \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (ite (str.prefixof \" \" _arg_0) (ite (str.suffixof \" \" _arg_0) (str.substr _arg_0 1 (- (str.len _arg_0) 2)) (str.substr _arg_0 1 (- (str.len _arg_0) 1))) (ite (str.suffixof \" \" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 1)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"^ +\" \"\") \" +$\" \"\"))) (str.replace trimmed \" +\" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((s (str.replace _arg_0 \"  \" \" \"))) (ite (str.prefixof \" \" s) (f (str.substr s 1 (- (str.len s) 1))) (ite (str.suffixof \" \" s) (f (str.substr s 0 (- (str.len s) 1))) s)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\") \" \" \"\"))) (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr trimmed 1 (- (str.len trimmed) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (ite (str.prefixof \" \" trimmed) (str.substr trimmed 1 (- (str.len trimmed) 1)) trimmed))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") _arg_0 \"\"))) (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((stripped (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\"))) stripped)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \" +\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \"\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.substr trimmed (ite (str.prefixof \" \" trimmed) 1 0) (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^ +\" \"\") \" +$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))) (str.replace (str.replace (str.replace (str.replace trimmed \" \" \" \") \" \" \" \") \" \" \" \")))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))) (str.replace (str.replace trimmed \" \" \"\") \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") (str.replace _arg_0 \" \" \"\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\"))) (str.replace (str.replace (str.replace (str.replace (str.replace trimmed \" \" \"\") \" \" \"\") \" \" \"\") \" \" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"^ \" \"\") \" $\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\"))) (str.substr trimmed 0 (str.len trimmed)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\"))) (ite (str.prefixof \" \" _arg_0) (str.substr trimmed 1 (str.len trimmed)) trimmed))))",
      "((define-fun f ((_arg_0 String)) String (let ((stripped (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (str.substr stripped (ite (str.prefixof \" \" stripped) 1 0) (ite (str.suffixof \" \" stripped) (- (str.len stripped) 1) (str.len stripped))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((stripped (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.++ (ite (str.prefixof \" \" stripped) \"\" (str.at stripped 0)) (str.substr stripped 1 (- (str.len stripped) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (str.replace (str.replace trimmed \"^ \" \"\") \" $\" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.replace (str.replace trimmed (str.++ \" \" (str.substr trimmed 0 1)) (str.substr trimmed 0 1)) (str.++ (str.substr trimmed (- (str.len trimmed) 1) 1) \" \") (str.substr trimmed (- (str.len trimmed) 1) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.substr trimmed (ite (str.prefixof \" \" trimmed) 1 0) (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed))))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\"))) (str.substr trimmed 0 (str.len trimmed)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s+\" \" \"))) trimmed)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\"))) (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr trimmed 1 (- (str.len trimmed) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (ite (str.prefixof \" \" trimmed) (ite (str.suffixof \" \" trimmed) (str.substr trimmed 1 (- (str.len trimmed) 2)) (str.substr trimmed 1 (- (str.len trimmed) 1))) (ite (str.suffixof \" \" trimmed) (str.substr trimmed 0 (- (str.len trimmed) 1)) trimmed)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (ite (str.prefixof \" \" trimmed) (str.substr trimmed 1 (- (str.len trimmed) 1)) trimmed))))",
      "((define-fun f ((_arg_0 String)) String (let ((s (str.replace _arg_0 \"  \" \" \"))) (ite (str.prefixof \" \" s) (f (str.substr s 1 (- (str.len s) 1))) (ite (str.suffixof \" \" s) (f (str.substr s 0 (- (str.len s) 1))) s)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))) (str.replace (str.replace trimmed \" \" \"\") \" \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (str.replace (str.replace (str.replace (str.replace trimmed \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace _arg_0 \" \" \"\") \" \" \"\") \" \" \"\"))) (str.substr trimmed 0 (str.len trimmed)))))",
      "((define-fun f ((_arg_0 String)) String (let ((s (str.replace _arg_0 \" \" \"\"))) (str.replace (str.replace s (str.++ \" \" \" \") \" \") \" \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+\" \"\") \"\\\\s+$\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.substr _arg_0 (str.indexof _arg_0 (str.at _arg_0 0) 0) (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) (str.at (str.reverse _arg_0) 0) 0))))) (str.replace trimmed \"  \" \" \"))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \"))) (ite (str.prefixof \" \" trimmed) (ite (str.suffixof \" \" trimmed) (str.substr trimmed 1 (- (str.len trimmed) 2)) (str.substr trimmed 1 (- (str.len trimmed) 1))) (ite (str.suffixof \" \" trimmed) (str.substr trimmed 0 (- (str.len trimmed) 1)) trimmed)))))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.substr trimmed (ite (str.prefixof \" \" trimmed) 1 0) (ite (str.suffixof \" \" trimmed) (- (str.len trimmed) 1) (str.len trimmed))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"^\\\\s+|\\\\s+$\" \"\") \"\\\\s{2,}\" \" \")))",
      "((define-fun f ((_arg_0 String)) String (let ((trimmed (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \"))) (str.++ (ite (str.prefixof \" \" trimmed) \"\" (str.at trimmed 0)) (str.substr trimmed 1 (- (str.len trimmed) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \")))"
    ],
    "constants": [
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        0,
        1,
        2,
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " ",
        "\\s+",
        "^\\s+|\\s+$"
      ],
      [
        1,
        2,
        " "
      ],
      [
        "  ",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "  ",
        " "
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        2,
        " "
      ],
      [
        "",
        " +$",
        "^ +",
        " +",
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [
        " ",
        "  "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " ",
        "\\s+",
        "^\\s+|\\s+$"
      ],
      [
        " ",
        "  "
      ],
      [
        1,
        " ",
        "  "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [],
      [],
      [
        "",
        "  ",
        " "
      ],
      [
        "",
        " +",
        " ",
        "^\\s+|\\s+$"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        "^ +",
        " +$"
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        "",
        " $",
        "^ "
      ],
      [
        "",
        0,
        " "
      ],
      [
        "",
        " ",
        "\\s+",
        "^\\s+|\\s+$"
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        0,
        1,
        "  ",
        " "
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        "",
        " ",
        "\\s+",
        "^\\s+|\\s+$"
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " $",
        "  ",
        "^ ",
        " "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        0,
        " "
      ],
      [
        " ",
        "  "
      ],
      [],
      [
        "",
        " ",
        "\\s+",
        "^\\s+|\\s+$"
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        2,
        "  ",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        1,
        " ",
        "  "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [],
      [
        "",
        "^\\s+",
        "\\s+$"
      ],
      [
        0,
        " ",
        "  "
      ],
      [
        0,
        1,
        2,
        "  ",
        " "
      ],
      [
        0,
        1,
        " ",
        "  "
      ],
      [
        "",
        "\\s{2,}",
        " ",
        "^\\s+|\\s+$"
      ],
      [
        "",
        0,
        1,
        "  ",
        " "
      ],
      [
        "",
        " ",
        "  "
      ],
      [],
      [
        "",
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        " ",
        "  "
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      "  ",
      2,
      " $",
      " +",
      "^ ",
      "^ +",
      "\\s{2,}",
      " ",
      "^\\s+",
      "^\\s+|\\s+$",
      " +$",
      "\\s+",
      "\\s+$"
    ],
    "time_diff_ms": 697.017
  },
  "strip-non-numeric-characters.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \" \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"1\") \"1\" \"0\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"[^0-9]\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```s\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 \"a\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \" \" \"\")) (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \"a\" \"\")) (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \"b\" \"\")) (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \"c\" \"\")) (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \"d\" \"\")) (str.replace _arg_0 (str.replace _arg_0 _arg_0 (str.replace _arg_0 \"e\" \"\")) (str",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.replace_all _arg_0 (str.replace_all _arg_0 \" \" \"\") \"%\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((cleaned (str.replace _arg_0 \"%\" \"\")))\n    (str.++ (str.replace cleaned \" \" \"\") \"\")))\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) (str.at _arg_0 0) \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 _arg_0 \"%\") \" \") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```scheme\n(str.replace_re_all _arg_0 \"[^0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 \"a\" \"\") (str.replace _arg_0 \"b\" \"\") (str.replace _arg_0 \"c\" \"\") (str.replace _arg_0 \"d\" \"\") (str.replace _arg_0 \"e\" \"\") (str.replace _arg_0 \"f\" \"\") (str.replace _arg_0 \"g\" \"\") (str.replace _arg_0 \"h\" \"\") (str.replace _arg_0 \"i\" \"\") (str.replace _arg_0 \"j\" \"\") (str.replace _arg_0 \"k\" \"\") (str.replace _arg_0 \"l\" \"\") (str.replace _arg_0 \"m\" \"\") (str.replace _arg_0 \"n\" \"\") (str.replace _arg_0 \"o\" \"\") (str.replace _arg_0 \"p\" \"\") (str.replace _arg_0 \"q\" \"\") (str.replace _arg_",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\")\n```",
      "```lisp\n(str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.substr _arg_0 0 0) \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\") (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\"))))\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"a\" \"\") \"e\" \"\") \"i\" \"\")\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 (str.replace _arg_0 \"%003399\" \"003399\") \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[^0-9]\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.++ (str.replace _arg_0 \"a\" \"\") (str.replace _arg_0 \"b\" \"\") (str.replace _arg_0 \"c\" \"\") (str.replace _arg_0 \"d\" \"\") (str.replace _arg_0 \"e\" \"\") (str.replace _arg_0 \"f\" \"\") (str.replace _arg_0 \"g\" \"\") (str.replace _arg_0 \"h\" \"\") (str.replace _arg_0 \"i\" \"\") (str.replace _arg_0 \"j\" \"\") (str.replace _arg_0 \"k\" \"\") (str.replace _arg_0 \"l\" \"\") (str.replace _arg_0 \"m\" \"\") (str.replace _arg_0 \"n\" \"\") (str.replace _arg_0 \"o\" \"\") (str.replace _arg_0 \"p\" \"\") (str.replace _arg_0 \"q\" \"\") (str.replace _arg_",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 \" \" \"\"))\n```",
      "```s-expression\n(str.replace_all _arg_0 (str.replace_all _arg_0 \"%\" \"\") (str.replace_all _arg_0 (str.substr _arg_0 0 0) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((digits \"0123456789\"))\n    (str.replace _arg_0 (str.replace _arg_0 digits \"\") \"\")))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\"))\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%003399\" \"003399\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n  (str.replace _arg_0 \"%\" \"\")\n)\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"a\" \"\") \"e\" \"\") \"r\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"[^0-9]\" \"\"))\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\")) (str.replace _arg_0 \"c\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.substr \"0123456789\" 0 (str.len _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"a\" \"\") \"e\" \"\") \"i\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```s-expression\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```scheme\n  (str.++ (ite (str.contains _arg_0 \"0\") \"0\" \"\")\n          (ite (str.contains _arg_0 \"1\") \"1\" \"\")\n          (ite (str.contains _arg_0 \"2\") \"2\" \"\")\n          (ite (str.contains _arg_0 \"3\") \"3\" \"\")\n          (ite (str.contains _arg_0 \"4\") \"4\" \"\")\n          (ite (str.contains _arg_0 \"5\") \"5\" \"\")\n          (ite (str.contains _arg_0 \"6\") \"6\" \"\")\n          (ite (str.contains _arg_0 \"7\") \"7\" \"\")\n          (ite (str.contains _arg_0 \"8\") \"8\" \"\")\n          (ite (str.contains _arg_0 \"9\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```s-expression\n(str.++ (str.replace _arg_0 \"%\" \"\") \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \" \"\" \"\"))))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 (str.replace_all _arg_0 \"0\" \"1\") \"1\" \"0\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"[^0-9]\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 \" \" \"\") \"%\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((cleaned (str.replace _arg_0 \"%\" \"\"))) (str.++ (str.replace cleaned \" \" \"\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) (str.at _arg_0 0) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 _arg_0 \"%\") \" \") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re_all _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.substr _arg_0 0 0) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"a\" \"\") \"e\" \"\") \"i\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 (str.replace _arg_0 \"%003399\" \"003399\") \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[^0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace_all _arg_0 (str.replace_all _arg_0 \"%\" \"\") (str.replace_all _arg_0 (str.substr _arg_0 0 0) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((digits \"0123456789\")) (str.replace _arg_0 (str.replace _arg_0 digits \"\") \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%003399\" \"003399\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"a\" \"\") \"e\" \"\") \"r\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"[^0-9]\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\")) (str.replace _arg_0 \"c\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.substr \"0123456789\" 0 (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \"%\" \"\") \"a\" \"\") \"e\" \"\") \"i\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (ite (str.contains _arg_0 \"0\") \"0\" \"\") (ite (str.contains _arg_0 \"1\") \"1\" \"\") (ite (str.contains _arg_0 \"2\") \"2\" \"\") (ite (str.contains _arg_0 \"3\") \"3\" \"\") (ite (str.contains _arg_0 \"4\") \"4\" \"\") (ite (str.contains _arg_0 \"5\") \"5\" \"\") (ite (str.contains _arg_0 \"6\") \"6\" \"\") (ite (str.contains _arg_0 \"7\") \"7\" \"\") (ite (str.contains _arg_0 \"8\") \"8\" \"\") (ite (str.contains _arg_0 \"9\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"%\" \"\") \"\")))"
    ],
    "constants": [
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ "
      ],
      null,
      [
        "",
        "d",
        "h",
        "g",
        "e",
        "f",
        "a",
        "b",
        "c"
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        ""
      ],
      [
        "%",
        ""
      ],
      [
        "%",
        ""
      ],
      [
        "",
        "1",
        "0"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0"
      ],
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h"
      ],
      [
        "",
        "%",
        "[^0-9]",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      null,
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      null,
      [
        "",
        "e",
        "c",
        "d",
        "b",
        "a"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "%"
      ],
      null,
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a"
      ],
      null,
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        0
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      null,
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "e",
        " ",
        "%",
        "a",
        "i"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%003399",
        "003399"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "[^0-9]"
      ],
      [
        "",
        "%"
      ],
      null,
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        0
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "0",
        "5"
      ],
      [
        "",
        "0123456789"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "j",
        "e",
        "f",
        "c",
        "d",
        "g",
        "b",
        "a",
        "h",
        "i"
      ],
      [
        "",
        "%003399",
        "003399"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "e",
        "r",
        " ",
        "%",
        "a"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "%",
        "[^0-9]",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "c",
        " ",
        "%",
        "b",
        "a"
      ],
      [
        "",
        "%",
        "0123456789",
        0
      ],
      [
        "",
        "e",
        " ",
        "%",
        "a",
        "i"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "3",
        "4",
        "2",
        "1",
        "6",
        "5"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "e",
        "c",
        "d",
        "b",
        "a"
      ],
      [
        "",
        "%",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ]
    ],
    "all_constants": [
      "",
      0,
      "%003399",
      "5",
      "9",
      "c",
      "8",
      "g",
      "j",
      "a",
      "[^0-9]",
      "4",
      "6",
      "1",
      "003399",
      "f",
      " ",
      "h",
      "7",
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ",
      "0",
      "i",
      "e",
      "2",
      "b",
      "%",
      "r",
      "0123456789",
      "d",
      "3"
    ],
    "time_diff_ms": 985.859
  },
  "get-middle-name-from-full-name.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \" \" 0))\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))\n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \" \" 0))\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))\n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= space1 -1) \"\"\n         (ite (= space2 -1) \"\"\n              (str.substr _arg_0 (+ 1 space1) (- space2 space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (str.at parts 1)) 1) \"\" (str.at parts 1))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (str.at parts 1)) 0)\n        \"\"\n        (str.at parts 1))))\n```",
      "```lisp\n  (str.substr _arg_0 \n    (+ 1 (str.indexof _arg_0 \" \" 0)) \n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) \n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2) \"\"\n      (str.at parts 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 0 0)\n            (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= first-space -1) (= last-space -1))\n        \"\"\n        (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (ite (or (= start -1) (= end -1)) \"\"\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1) \"\" \n      (if (= (str.len parts) 2) \"\" \n        (str.at _arg_0 (str.indexof _arg_0 \" \" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n        (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((last-space (str.lastIndexOf _arg_0 \" \")))\n      (if (or (= first-space -1) (= first-space last-space))\n          \"\"\n          (str.substr _arg_0 (+ first-space 1) (- last-space (+ first-space 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((names (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2)\n        \"\"\n        (str.substr _arg_0\n          (+ (str.indexof _arg_0 \" \" 0) 1)\n          (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n             (+ (str.indexof _arg_0 \" \" 0) 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (nth parts 1)) 0)\n      \"\"\n      (str.++ (nth parts 1) (if (<= (str.len (nth parts 2)) 0) \"\" (str.++ \" \" (nth parts 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2) \"\"\n      (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1)\n              (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2)\n        \"\"\n        (str.++ (nth parts 1) \" \" (nth parts 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 0) \"\"\n      (if (= (str.len parts) 2) \"\"\n        (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= space1 -1) \"\"\n      (ite (= space2 -1) \"\"\n        (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= first-space -1)\n         \"\"\n         (ite (= last-space -1)\n              \"\"\n              (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (let ((len (str.len _arg_0)))\n      (if (<= len 2) \"\"\n        (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((sp (str.indexof _arg_0 \" \" 0)))\n    (if (= sp -1)\n        \"\"\n        (let ((rest (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1)))))\n          (let ((sp2 (str.indexof rest \" \" 0)))\n            (if (= sp2 -1)\n                \"\"\n                (str.substr rest 0 sp2)))))))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ start 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (or (= start -1) (= end -1)) \"\"\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (nth parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (nth parts 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (< (str.len parts) 3)\n      \"\"\n      (str.++ (str.at parts 1) \" \" (str.at parts 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 (str.at parts 2) 0) (str.len (str.at parts 2))) (- (str.len _arg_0) (str.indexof _arg_0 (str.at parts 3) 0)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 start 1)\n        (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (+ (str.indexof _arg_0 \" \" 0) 1)))\n    (let ((end (str.indexof _arg_0 \" \" start)))\n      (ite (= end -1) \"\" (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 start (str.len _arg_0))\n            (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (ite (= start -1) \"\"\n        (ite (= end -1) \"\"\n          (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= first-space -1) (= last-space -1))\n        \"\"\n        (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0) 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= start -1) \"\"\n      (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((sp (str.indexof _arg_0 \" \" 0)))\n    (if (= sp -1)\n        \"\"\n        (let ((rest (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1))))\n              (sp2 (str.indexof (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1))) \" \" 0)))\n          (if (= sp2 -1)\n              \"\"\n              (str.substr rest 0 sp2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1))))\n    (if (= start -1) \"\"\n        (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n            (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.trim (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.len _arg_0) 3))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (last-space (str.lastIndexof _arg_0 \" \")))\n    (if (or (= first-space -1) (= first-space last-space))\n        \"\"\n        (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= space1 -1)\n        \"\"\n        (ite (= space2 -1)\n            \"\"\n            (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= start -1) \"\"\n      (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.++ (str.at parts 1) (if (> (str.len parts) 3) \" \" \"\") (str.at parts 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (if (= space1 -1)\n        \"\"\n        (if (= space2 -1)\n            \"\"\n            (str.substr _arg_0 (+ space1 1) (- space2 space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.++ (str.at parts 1) (if (>= (str.len parts) 3) (str.++ \" \" (str.at parts 2)) \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len parts) 2)\n        \"\"\n        (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.join \" \" (str.substr parts 1 (- (str.len parts) 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n            (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1)\n         \"\"\n         (ite (= end -1)\n              (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n              (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= start -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= first-space -1)\n         \"\"\n         (ite (= last-space -1)\n              \"\"\n              (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))))\n```",
      "```lisp\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2)\n        \"\"\n        (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) \n                    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) \n                       (str.indexof _arg_0 \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) (str.substr _arg_0 (+ start 1) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (if (= second-space -1)\n          \"\"\n          (let ((third-space (str.indexof _arg_0 \" \" (+ second-space 1))))\n            (if (= third-space -1)\n                (str.substr _arg_0 (+ first-space 1) (- (str.len _arg_0) (+ first-space 1)))\n                (str.substr _arg_0 (+ first-space 1) (- third-space (+ first-space 1)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (or (= start -1) (= end -1))\n         \"\"\n         (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= space1 -1) \"\" (ite (= space2 -1) \"\" (str.substr _arg_0 (+ 1 space1) (- space2 space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (str.at parts 1)) 1) \"\" (str.at parts 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (str.at parts 1)) 0) \"\" (str.at parts 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.at parts 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 0 0) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= first-space -1) (= last-space -1)) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (if (= (str.len parts) 2) \"\" (str.at _arg_0 (str.indexof _arg_0 \" \" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((last-space (str.lastIndexOf _arg_0 \" \"))) (if (or (= first-space -1) (= first-space last-space)) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space (+ first-space 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((names (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (nth parts 1)) 0) \"\" (str.++ (nth parts 1) (if (<= (str.len (nth parts 2)) 0) \"\" (str.++ \" \" (nth parts 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f (_arg_0 String) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.++ (nth parts 1) \" \" (nth parts 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 0) \"\" (if (= (str.len parts) 2) \"\" (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= space1 -1) \"\" (ite (= space2 -1) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= first-space -1) \"\" (ite (= last-space -1) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (let ((len (str.len _arg_0))) (if (<= len 2) \"\" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((sp (str.indexof _arg_0 \" \" 0))) (if (= sp -1) \"\" (let ((rest (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1))))) (let ((sp2 (str.indexof rest \" \" 0))) (if (= sp2 -1) \"\" (str.substr rest 0 sp2))))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ start 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (nth parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (nth parts 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (< (str.len parts) 3) \"\" (str.++ (str.at parts 1) \" \" (str.at parts 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= start -1) \"\" (if (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (str.at parts 1) (if (<= (str.len parts) 3) \"\" (str.++ \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 (str.at parts 2) 0) (str.len (str.at parts 2))) (- (str.len _arg_0) (str.indexof _arg_0 (str.at parts 3) 0))))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 start 1) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (+ (str.indexof _arg_0 \" \" 0) 1))) (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) \"\" (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= first-space -1) (= last-space -1)) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((sp (str.indexof _arg_0 \" \" 0))) (if (= sp -1) \"\" (let ((rest (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1)))) (sp2 (str.indexof (str.substr _arg_0 (+ sp 1) (- (str.len _arg_0) (+ sp 1))) \" \" 0))) (if (= sp2 -1) \"\" (str.substr rest 0 sp2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 + 1)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.trim (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.len _arg_0) 3)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.lastIndexof _arg_0 \" \"))) (if (or (= first-space -1) (= first-space last-space)) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= space1 -1) \"\" (ite (= space2 -1) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.++ (str.at parts 1) (if (> (str.len parts) 3) \" \" \"\") (str.at parts 2))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (if (= space1 -1) \"\" (if (= space2 -1) \"\" (str.substr _arg_0 (+ space1 1) (- space2 space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.++ (str.at parts 1) (if (>= (str.len parts) 3) (str.++ \" \" (str.at parts 2)) \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len parts) 2) \"\" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.join \" \" (str.substr parts 1 (- (str.len parts) 2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= start -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (last-space (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= first-space -1) \"\" (ite (= last-space -1) \"\" (str.substr _arg_0 (+ first-space 1) (- last-space first-space 1)))))))",
      "((define-fun f (_arg_0 String) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) (str.substr _arg_0 (+ start 1) (str.len _arg_0)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (if (= second-space -1) \"\" (let ((third-space (str.indexof _arg_0 \" \" (+ second-space 1)))) (if (= third-space -1) (str.substr _arg_0 (+ first-space 1) (- (str.len _arg_0) (+ first-space 1))) (str.substr _arg_0 (+ first-space 1) (- third-space (+ first-space 1))))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        ""
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        1,
        " ",
        2
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        0,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        0,
        2,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        2,
        "",
        " "
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        0,
        " "
      ],
      [
        0,
        "",
        2,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        0,
        2,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        "",
        1,
        2,
        3,
        0,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        0,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        3,
        " "
      ],
      [
        "",
        0,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        1,
        2,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        "",
        0,
        2,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      3,
      " ",
      -1
    ],
    "time_diff_ms": 856.232
  },
  "initials_small.sl": {
    "completions": [
      "```s-expression\n(ite (str.contains name \" \")\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n  \"\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(ite true (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")\n```",
      "```s-expression\n(ite (str.contains name \" \")\n     (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n     name)\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name\n                  (+ 1 (str.indexof name \" \" 0))\n             ) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.++ (str.at name 0) \".\")\n    (str.++ (str.at name (str.indexof name \" \" 0 1)) \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (ite true (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")))",
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") name)))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.at name 0) \".\") (str.++ (str.at name (str.indexof name \" \" 0 1)) \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      "."
    ],
    "time_diff_ms": 1050.516
  },
  "stackoverflow5.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```s\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"=\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 0 idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"=\")\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n       _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((sep (str.indexof _arg_0 \"=\" 0)))\n    (if (= sep -1)\n        _arg_0\n        (str.substr _arg_0 0 sep))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"=\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 0 idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"=\" 0)))\n    (if (and (>= idx 0) (str.contains _arg_0 \"=\"))\n        (str.substr _arg_0 0 idx)\n        _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"=\" 0)))\n    (if (= idx -1)\n      _arg_0\n      (str.substr _arg_0 0 idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"=\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (str.substr _arg_0 0 idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"=\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((sep (str.indexof _arg_0 \"=\" 0))) (if (= sep -1) _arg_0 (str.substr _arg_0 0 sep)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"=\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"=\" 0))) (if (and (>= idx 0) (str.contains _arg_0 \"=\")) (str.substr _arg_0 0 idx) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"=\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"=\" 0))) (if (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        -1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      "=",
      -1
    ],
    "time_diff_ms": 712.483
  },
  "extract-word-that-begins-with-specific-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" idx)))\n          (if (= end -1)\n              (str.substr _arg_0 idx (str.len _arg_0))\n              (str.substr _arg_0 idx (- end idx)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= pos -1) \"\" \n         (let ((end (str.indexof (str.substr _arg_0 pos (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0))\n                (str.substr _arg_0 pos end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n    (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \n      (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n              (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \n                   (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) \n                   (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (< end 0) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((pos (str.indexof s \"_\" 0)))\n    (if (< pos 0)\n        \"\"\n        (let ((end (str.indexof s \" \" pos)))\n          (if (< end 0)\n              (str.substr s pos (str.len s))\n              (str.substr s pos (- end pos)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n              (str.indexof _arg_0 \"_\" 0) \n              (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \n                   (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \n                   (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= pos -1) \"\" \n      (let ((end (str.indexof _arg_0 \" \" pos)))\n        (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0))\n          (str.substr _arg_0 pos (- end pos)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \"_\" 0)\n    (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \")\n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)\n      (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (< start 0)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" start)))\n           (ite (< end 0)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0)))\n```",
      "```lisp\n(if (str.contains _arg_0 \"_\") \n    (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n                (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1)) \n    \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \"_\" 0)\n    (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1)\n      (str.len _arg_0)\n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n    (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1)\n      (str.len _arg_0)\n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \"_\" 0) \n    (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1)\n      (str.len _arg_0)\n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (>= start 0)\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (>= end 0)\n              (str.substr _arg_0 start (- end start))\n              (str.substr _arg_0 start (str.len _arg_0))))\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (< end 0) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((start (str.indexof s \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof s \" \" start)))\n          (if (= end -1)\n              (str.substr s start (str.len s))\n              (str.substr s start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (ite (= idx -1) \"\" \n      (let ((end (str.indexof _arg_0 \" \" idx)))\n        (ite (= end -1) (str.substr _arg_0 idx (str.len _arg_0))\n          (str.substr _arg_0 idx (- end idx)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" start)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" start)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" start)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \"_\" 0)\n    (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \")\n      (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)\n      (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (< start 0)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (< end 0)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"_\")\n     (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n     \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 1)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" start)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= pos -1)\n         \"\"\n         (let ((end (str.indexof _arg_0 \" \" pos)))\n           (ite (= end -1)\n                (str.substr _arg_0 pos (str.len _arg_0))\n                (str.substr _arg_0 pos (- end pos)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((end (str.indexof _arg_0 \" \" idx))) (if (= end -1) (str.substr _arg_0 idx (str.len _arg_0)) (str.substr _arg_0 idx (- end idx))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= pos -1) \"\" (let ((end (str.indexof (str.substr _arg_0 pos (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0)) (str.substr _arg_0 pos end)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((s String)) String (let ((pos (str.indexof s \"_\" 0))) (if (< pos 0) \"\" (let ((end (str.indexof s \" \" pos))) (if (< end 0) (str.substr s pos (str.len s)) (str.substr s pos (- end pos))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= pos -1) \"\" (let ((end (str.indexof _arg_0 \" \" pos))) (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0)) (str.substr _arg_0 pos (- end pos))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (if (str.contains _arg_0 \"_\") (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (>= start 0) (let ((end (str.indexof _arg_0 \" \" start))) (if (>= end 0) (str.substr _arg_0 start (- end start)) (str.substr _arg_0 start (str.len _arg_0)))) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((s String)) String (let ((start (str.indexof s \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof s \" \" start))) (if (= end -1) (str.substr s start (str.len s)) (str.substr s start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (ite (= idx -1) \"\" (let ((end (str.indexof _arg_0 \" \" idx))) (ite (= end -1) (str.substr _arg_0 idx (str.len _arg_0)) (str.substr _arg_0 idx (- end idx))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (< start 0) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (< end 0) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_\") (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \") \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 1))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= pos -1) \"\" (let ((end (str.indexof _arg_0 \" \" pos))) (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0)) (str.substr _arg_0 pos (- end pos))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))"
    ],
    "constants": [
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        1,
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        1,
        "",
        "_",
        " "
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      " ",
      -1,
      "_"
    ],
    "time_diff_ms": 770.8670000000001
  },
  "35744094.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (str.len _arg_0))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"http=//www.apple.com/uk/mac\" \"mac\") \"https=//www.microsoft.com/en-gb/windows\" \"windows\") \"https=//www.microsoft.com/\" \"microsoft\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(str.at (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0)) 0)\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n\"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \n      \"\")))\n```",
      "```(str.replace (str.replace (str.replace _arg_0 \"https=//www.microsoft.com/\" \"microsoft\") \"https=//www.apple.com/uk/mac\" \"mac\") \"https=//www.microsoft.com/en-gb/windows\" \"windows\")```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n     (ite (str.contains _arg_0 \"windows\") \"windows\" \n          (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n\"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"windows\") \"windows\" \n  (ite (str.contains _arg_0 \"mac\") \"mac\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \n      (ite (str.contains _arg_0 \"apple\") \"apple\" \"\"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \n      \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"apple\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n\"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"apple\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \n      \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"apple\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) (+ (str.indexof _arg_0 \"//\" 0) 2)))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```s\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\") \"www.\" \"\")\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\") \"/\" \" \")\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\") \"mac\"\n  (ite (str.contains _arg_0 \"windows\") \"windows\"\n  (ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n  \"\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\"\n\"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"mac\")\n    \"mac\"\n    (ite (str.contains _arg_0 \"windows\")\n      \"windows\"\n      \"microsoft\")))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \n      \"\")))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (ite (str.contains _arg_0 \"mac\")\n    \"mac\"\n    (ite (str.contains _arg_0 \"windows\")\n      \"windows\"\n      (ite (str.contains _arg_0 \"microsoft\")\n        \"microsoft\"\n        \"\"))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"http=//www.apple.com/uk/mac\" \"mac\") \"https=//www.microsoft.com/en-gb/windows\" \"windows\") \"https=//www.microsoft.com/\" \"microsoft\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.at (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (str.len _arg_0)) 0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"https=//www.microsoft.com/\" \"microsoft\") \"https=//www.apple.com/uk/mac\" \"mac\") \"https=//www.microsoft.com/en-gb/windows\" \"windows\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" (ite (str.contains _arg_0 \"apple\") \"apple\" \"\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"apple\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"apple\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"apple\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) (+ (str.indexof _arg_0 \"//\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\") \"www.\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\") \"/\" \" \")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))"
    ],
    "constants": [
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        0,
        2,
        "//"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "https=//www.microsoft.com/",
        "http=//www.apple.com/uk/mac",
        "microsoft",
        "windows",
        "mac",
        "https=//www.microsoft.com/en-gb/windows"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        8,
        1,
        "/",
        0
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "https=//www.microsoft.com/",
        "https=//www.apple.com/uk/mac",
        "microsoft",
        "windows",
        "mac",
        "https=//www.microsoft.com/en-gb/windows"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "apple",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "apple",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "apple",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "https://",
        "http://"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "apple",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        0,
        2,
        "/",
        "//"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "www.",
        "https://",
        "http://"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "http://",
        "/",
        " ",
        "https://"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ],
      [
        "",
        "microsoft",
        "windows",
        "mac"
      ]
    ],
    "all_constants": [
      "",
      0,
      2,
      1,
      "//",
      8,
      "windows",
      "/",
      "https=//www.microsoft.com/",
      "https=//www.apple.com/uk/mac",
      " ",
      "apple",
      "mac",
      "http=//www.apple.com/uk/mac",
      "microsoft",
      "https=//www.microsoft.com/en-gb/windows",
      "www.",
      "http://",
      "https://"
    ],
    "time_diff_ms": 980.59
  },
  "get-last-line-in-cell.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"/n\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" 0) 1)))\n    _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n      _arg_0\n      (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-nl (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-nl -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") last-line _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (if (= last-index -1)\n        _arg_0\n        (str.substr _arg_0 (+ last-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (str.len _arg_0)) (str.len _arg_0))))\n    (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-n (str.indexof _arg_0 \"/n\" 0)))\n    (if (= last-n -1)\n        _arg_0\n        (str.substr _arg_0 (+ last-n 1) (- (str.len _arg_0) (+ last-n 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (- (str.len _arg_0) (+ last-line-index 1))))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.lastindexof _arg_0 \"/n\") 1)\n    (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \"/n\") 1) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") last-line _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))\n    (ite (str.prefixof \"/n\" last-line) (str.substr last-line 2 (- (str.len last-line) 2)) last-line)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (= (str.at last-line 0) \"/n\") (str.substr last-line 1 (str.len last-line)) last-line)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= pos -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (if (= idx -1)\n        _arg_0\n        (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((last-line (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") last-line _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.prefixof \"/n\" last-line) (str.substr last-line 1 (str.len last-line)) last-line)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline-pos (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-newline-pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline-pos 1) (- (str.len _arg_0) (+ last-newline-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"/n\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2)))\n    _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-idx 1) (- (str.len _arg_0) (+ last-line-idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastIndex (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= lastIndex -1)\n      _arg_0\n      (str.substr _arg_0 (+ lastIndex 1) (- (str.len _arg_0) (+ lastIndex 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-pos (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-line-pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-pos 1) (- (str.len _arg_0) (+ last-line-pos 1))))))\n```",
      "```scheme\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```s\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2))))\n    (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastIndex (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= lastIndex -1)\n         _arg_0\n         (str.substr _arg_0 (+ lastIndex 1) (- (str.len _arg_0) (+ lastIndex 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.prefixof \"/n\" last-line) (str.substr last-line 1 (str.len last-line)) last-line)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\"))))))\n    (ite (str.contains _arg_0 \"/n\") last-line _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\")\n         (str.substr last-line 1 (- (str.len last-line) 1))\n         _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (= (str.at last-line 0) \"/n\") (str.substr last-line 1 (str.len last-line)) last-line)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastLineStart (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= lastLineStart -1)\n         _arg_0\n         (str.substr _arg_0 (+ lastLineStart 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3))))))\n```",
      "```scheme\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastIdx (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= lastIdx -1)\n         _arg_0\n         (str.substr _arg_0 (+ lastIdx 1) (- (str.len _arg_0) (+ lastIdx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.lastIndexOf _arg_0 \"/n\" 0)\n    (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((lastIdx (str.indexof _arg_0 \"/n\" (+ idx 1))))\n           (ite (= lastIdx -1)\n                (str.substr _arg_0 (+ idx 1) (str.len _arg_0))\n                (f (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\")\n         (str.substr last-line 1 (str.len last-line))\n         _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.lastindexof _arg_0 \"/n\")))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0)))))\n```",
      "```scheme\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= pos -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-start (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-start -1)\n      _arg_0\n      (str.substr _arg_0 (+ last-line-start 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof (str.replace _arg_0 \"/n\" \" \") \" \" 0)))\n    (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"/n\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0))\n    _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-start (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-start -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-start 1) (str.len _arg_0)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-start (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-line-start -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-start 1) (- (str.len _arg_0) last-line-start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\" 0)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-start (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-line-start -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-start 1) (- (str.len _arg_0) (+ last-line-start 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((last-line (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))\n           (ite (str.contains last-line \"/n\")\n                (f last-line)\n                last-line)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-pos 1) (- (str.len _arg_0) (+ last-line-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (- (str.len _arg_0) (+ last-line-index 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((last-idx (str.indexof _arg_0 \"/n\" (+ idx 1))))\n           (ite (= last-idx -1)\n                (str.substr _arg_0 (+ idx 1) (str.len _arg_0))\n                (str.substr _arg_0 (+ last-idx 1) (str.len _arg_0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 3) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((last-line (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))\n           (ite (= (str.indexof last-line \"/n\" 0) -1)\n                last-line\n                (f (str.substr last-line (str.indexof last-line \"/n\" 0) (str.len last-line))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-nl (str.indexof _arg_0 \"/n\" 0)))\n    (if (= last-nl -1)\n        _arg_0\n        (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))))\n    (ite (= last-newline -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") (str.substr last-line 1 (str.len last-line)) _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))\n    (ite (str.contains last-line \"/n\")\n         (str.substr last-line (+ (str.indexof last-line \"/n\" 0) 1) (str.len last-line))\n         last-line)))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-nl (str.indexof _arg_0 \"/n\" 0))) (ite (= last-nl -1) _arg_0 (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") last-line _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/n\" 0))) (ite (= pos -1) _arg_0 (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (if (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (str.len _arg_0)) (str.len _arg_0)))) (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-n (str.indexof _arg_0 \"/n\" 0))) (if (= last-n -1) _arg_0 (str.substr _arg_0 (+ last-n 1) (- (str.len _arg_0) (+ last-n 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (- (str.len _arg_0) (+ last-line-index 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \"/n\") 1) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") last-line _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))) (ite (str.prefixof \"/n\" last-line) (str.substr last-line 2 (- (str.len last-line) 2)) last-line))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (= (str.at last-line 0) \"/n\") (str.substr last-line 1 (str.len last-line)) last-line))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/n\" 0))) (ite (= pos -1) _arg_0 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (if (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (let ((last-line (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") last-line _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.prefixof \"/n\" last-line) (str.substr last-line 1 (str.len last-line)) last-line))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline-pos (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-newline-pos -1) _arg_0 (str.substr _arg_0 (+ last-newline-pos 1) (- (str.len _arg_0) (+ last-newline-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-idx (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-idx -1) _arg_0 (str.substr _arg_0 (+ last-line-idx 1) (- (str.len _arg_0) (+ last-line-idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastIndex (str.indexof _arg_0 \"/n\" 0))) (ite (= lastIndex -1) _arg_0 (str.substr _arg_0 (+ lastIndex 1) (- (str.len _arg_0) (+ lastIndex 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-pos (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-line-pos -1) _arg_0 (str.substr _arg_0 (+ last-line-pos 1) (- (str.len _arg_0) (+ last-line-pos 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \"/n\") 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2)))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastIndex (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= lastIndex -1) _arg_0 (str.substr _arg_0 (+ lastIndex 1) (- (str.len _arg_0) (+ lastIndex 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.prefixof \"/n\" last-line) (str.substr last-line 1 (str.len last-line)) last-line))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-pos (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-pos -1) _arg_0 (str.substr _arg_0 (+ last-line-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\")))))) (ite (str.contains _arg_0 \"/n\") last-line _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") (str.substr last-line 1 (- (str.len last-line) 1)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (= (str.at last-line 0) \"/n\") (str.substr last-line 1 (str.len last-line)) last-line))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastLineStart (str.indexof _arg_0 \"/n\" 0))) (ite (= lastLineStart -1) _arg_0 (str.substr _arg_0 (+ lastLineStart 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.indexof _arg_0 \"/n\" 0))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastIdx (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= lastIdx -1) _arg_0 (str.substr _arg_0 (+ lastIdx 1) (- (str.len _arg_0) (+ lastIdx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.lastIndexOf _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (let ((lastIdx (str.indexof _arg_0 \"/n\" (+ idx 1)))) (ite (= lastIdx -1) (str.substr _arg_0 (+ idx 1) (str.len _arg_0)) (f (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") (str.substr last-line 1 (str.len last-line)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.lastindexof _arg_0 \"/n\"))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/n\" 0))) (ite (= pos -1) _arg_0 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.indexof _arg_0 \"/n\" 0))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-start (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-start -1) _arg_0 (str.substr _arg_0 (+ last-line-start 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof (str.replace _arg_0 \"/n\" \" \") \" \" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-start (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-start -1) _arg_0 (str.substr _arg_0 (+ last-line-start 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-start (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-line-start -1) _arg_0 (str.substr _arg_0 (+ last-line-start 1) (- (str.len _arg_0) last-line-start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (- (str.len _arg_0) (+ idx 3)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \"/n\" 0)) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \"/n\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-start (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-line-start -1) _arg_0 (str.substr _arg_0 (+ last-line-start 1) (- (str.len _arg_0) (+ last-line-start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (let ((last-line (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))) (ite (str.contains last-line \"/n\") (f last-line) last-line))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-pos (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-pos -1) _arg_0 (str.substr _arg_0 (+ last-line-pos 1) (- (str.len _arg_0) (+ last-line-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (- (str.len _arg_0) (+ last-line-index 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (f (str.substr _arg_0 (+ idx 2) (- (str.len _arg_0) (+ idx 2))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (let ((last-idx (str.indexof _arg_0 \"/n\" (+ idx 1)))) (ite (= last-idx -1) (str.substr _arg_0 (+ idx 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-idx 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 3) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (let ((last-line (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))) (ite (= (str.indexof last-line \"/n\" 0) -1) last-line (f (str.substr last-line (str.indexof last-line \"/n\" 0) (str.len last-line)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (- (str.len _arg_0) (+ last-index 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-nl (str.indexof _arg_0 \"/n\" 0))) (if (= last-nl -1) _arg_0 (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-newline (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)))) (ite (= last-newline -1) _arg_0 (str.substr _arg_0 (+ last-newline 1) (- (str.len _arg_0) (+ last-newline 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") (str.substr last-line 1 (str.len last-line)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0)))) (ite (str.contains last-line \"/n\") (str.substr last-line (+ (str.indexof last-line \"/n\" 0) 1) (str.len last-line)) last-line))))"
    ],
    "constants": [
      [
        0,
        1,
        "/n"
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        1,
        "/n"
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        "",
        1,
        "/n"
      ],
      [
        "/n",
        0,
        "",
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        1
      ],
      [
        "/n"
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        "",
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        2
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        "",
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        2
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1,
        2,
        -1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        0,
        1,
        " ",
        "/n",
        -1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        1,
        0
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        2,
        -1
      ],
      [
        "/n",
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        3,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        0,
        -1,
        1
      ],
      [
        "/n",
        1,
        -1
      ],
      [
        "/n",
        0,
        1
      ],
      [
        "/n",
        0,
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      3,
      "/n",
      " ",
      -1
    ],
    "time_diff_ms": 934.548
  },
  "31753108.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14)))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```scheme\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (str.at (str.replace _arg_0 \" \" \"\") 0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" (str.at (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 100) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end (+ 1 start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" (str.at _arg_0 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.at _arg_0 (str.indexof _arg_0 \" \" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \" \" 0) \n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 1) (str.len _arg_0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \" \" 0))\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))\n       (+ 1 (str.indexof _arg_0 \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end (+ 1 start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.indexof _arg_0 \" \" (+ start 1)) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ start 1)))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n              (str.indexof _arg_0 \" \" 0)\n              (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n                 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.indexof _arg_0 \" \" (+ start 1)) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \" \" 0) 1)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (+ (str.indexof _arg_0 \" \" 0) 1))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\") 0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" (str.at (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 100) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" (str.at _arg_0 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.at _arg_0 (str.indexof _arg_0 \" \" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 1) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end (+ 1 start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (- (str.indexof _arg_0 \" \" (+ start 1)) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ start 1))))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (- (str.indexof _arg_0 \" \" (+ start 1)) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))"
    ],
    "constants": [
      [
        " ",
        14
      ],
      [
        9,
        14
      ],
      [
        " ",
        14
      ],
      [
        " ",
        14
      ],
      [
        9,
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        100,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        14,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        9,
        14
      ],
      [
        9,
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      100,
      9,
      14,
      " "
    ],
    "time_diff_ms": 832.61
  },
  "exceljet4.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))\n    (let ((url (str.replace (str.replace url \"ftp://\" \"\") \"sftp://\" \"\")))\n      (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0))\n        (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0\n      (+ start 2)\n      (ite (= end -1) (str.len _arg_0) (- end (+ start 2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (noSlash (str.replace url \"/\" \"\")))\n    noSlash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 \"/\" \"=\")))\n    (let ((start (str.indexof url \"=\" 0)))\n      (let ((end (str.indexof url \"=\" (+ start 2))))\n        (str.substr url (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\"))\n        (url (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n    url))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((no_protocol (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (len (str.len _arg_0)))\n    (ite (= (str.at _arg_0 (- len 1)) \"/\")\n         (str.substr url 0 (- len 1))\n         url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (cleaned-url (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n    cleaned-url))\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\") \"/\" \"\")\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"//\" 0) 2))))\n          (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))\n     _arg_0)\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (ite (str.suffixof \"/\" _arg_0) \n          (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 3))) \n          (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n           (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n           (str.substr _arg_0 (+ start 2) (- end start 2))))))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0))\n        (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (ite (= end -1)\n         (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n         (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\")\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((after-protocol (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))\n      (ite (str.suffixof \"/\" after-protocol)\n        (str.substr after-protocol 0 (- (str.len after-protocol) 1))\n        after-protocol)))\n  _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0))\n        (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0 2))))\n    (if (= start -1)\n        _arg_0\n        (if (= end -1)\n            (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n            (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n          (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))\n     _arg_0)\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\"))\n        (cleaned (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n    cleaned))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= start -1)\n          _arg_0\n          (if (= end -1)\n              (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n              (str.substr _arg_0 (+ start 2) (- end start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (trimmed (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n    trimmed))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\"))\n        (url (str.replace url \"ftp://\" \"\"))\n        (url (str.replace url \"sftp://\" \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= start -1)\n          _arg_0\n          (if (= end -1)\n              (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n              (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\") _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\")\n     (let ((without_protocol (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n          (ite (str.suffixof \"/\" without_protocol)\n               (str.substr without_protocol 0 (- (str.len without_protocol) 1))\n               without_protocol))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (ite (str.suffixof \"/\" _arg_0) \n          (str.substr _arg_0 (+ 2 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 3 (str.indexof _arg_0 \"//\" 0)))) \n          (str.substr _arg_0 (+ 2 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 2 (str.indexof _arg_0 \"//\" 0))))) \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\")\n     (let ((start (str.indexof _arg_0 \"//\" 0)))\n       (let ((part (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))\n         (ite (str.suffixof \"/\" part) (str.substr part 0 (- (str.len part) 1)) part)))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (= (str.at _arg_0 (- (str.len _arg_0) 1)) \"/\")\n                               (str.substr _arg_0 0 (- (str.len _arg_0) 1))\n                               _arg_0)))\n    (ite (str.suffixof \"/\" no_protocol) no_trailing_slash no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (let ((stripped (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n          (ite (str.suffixof \"/\" stripped) \n               (str.substr stripped 0 (- (str.len stripped) 1)) \n               stripped))\n     _arg_0)\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")\n```",
      "```s-expression\n(ite (str.prefixof \"https=//\" _arg_0)\n    (ite (str.suffixof \"/\" _arg_0)\n        (str.substr _arg_0 8 (- (str.len _arg_0) 9))\n        (str.substr _arg_0 8 (- (str.len _arg_0) 8)))\n    (ite (str.contains _arg_0 \"://\")\n        (ite (str.suffixof \"/\" _arg_0)\n            (str.substr _arg_0 (+ 3 (str.indexof _arg_0 \"://\" 0)) (- (str.len _arg_0) (+ 4 (str.indexof _arg_0 \"://\" 0))))\n            (str.substr _arg_0 (+ 3 (str.indexof _arg_0 \"://\" 0)) (- (str.len _arg_0) (+ 3 (str.indexof _arg_0 \"://\"",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n          (ite (str.suffixof \"/\" url) \n               (str.substr url 0 (- (str.len url) 1)) \n               url)) \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (ite (= start -1)\n         _arg_0\n         (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n           (ite (= end -1)\n                (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n                (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\")\n    (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n        (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"//\")\n    (let ((start (str.indexof _arg_0 \"//\" 0)))\n      (let ((temp (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))\n        (ite (str.suffixof \"/\" temp) (str.substr temp 0 (- (str.len temp) 1)) temp)))\n    _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((without_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (without_trailing_slash (ite (str.suffixof \"/\" without_protocol) (str.substr without_protocol 0 (- (str.len without_protocol) 1)) without_protocol)))\n    without_trailing_slash))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1) \n        (str.substr _arg_0 (+ start 2) (str.len _arg_0)) \n        (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))))\n  _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (len (str.len _arg_0)))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol)))\n    no_trailing_slash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (cleaned (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n    cleaned))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"://\" 0)) \"://\") \"\") \"/\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((no_proto (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (no_slash (ite (str.suffixof \"/\" no_proto) (str.substr no_proto 0 (- (str.len no_proto) 1)) no_proto)))\n    no_slash))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"//\") \n     (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n       (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))\n     _arg_0)\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\"))) (let ((url (str.replace (str.replace url \"ftp://\" \"\") \"sftp://\" \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0)) (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 (+ start 2) (ite (= end -1) (str.len _arg_0) (- end (+ start 2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (noSlash (str.replace url \"/\" \"\"))) noSlash)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 \"/\" \"=\"))) (let ((start (str.indexof url \"=\" 0))) (let ((end (str.indexof url \"=\" (+ start 2)))) (str.substr url (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\")) (url (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))) url)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (let ((no_protocol (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (len (str.len _arg_0))) (ite (= (str.at _arg_0 (- len 1)) \"/\") (str.substr url 0 (- len 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (cleaned-url (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))) cleaned-url)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"//\" 0) 2)))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (ite (str.suffixof \"/\" _arg_0) (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 3))) (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end start 2)))))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0)) (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((after-protocol (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))) (ite (str.suffixof \"/\" after-protocol) (str.substr after-protocol 0 (- (str.len after-protocol) 1)) after-protocol))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0)) (end (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" 0 2)))) (if (= start -1) _arg_0 (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"\")) (cleaned (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))) cleaned)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= start -1) _arg_0 (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (trimmed (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))) trimmed)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")) (url (str.replace url \"ftp://\" \"\")) (url (str.replace url \"sftp://\" \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= start -1) _arg_0 (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((without_protocol (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" without_protocol) (str.substr without_protocol 0 (- (str.len without_protocol) 1)) without_protocol)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (ite (str.suffixof \"/\" _arg_0) (str.substr _arg_0 (+ 2 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 3 (str.indexof _arg_0 \"//\" 0)))) (str.substr _arg_0 (+ 2 (str.indexof _arg_0 \"//\" 0)) (- (str.len _arg_0) (+ 2 (str.indexof _arg_0 \"//\" 0))))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((part (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))) (ite (str.suffixof \"/\" part) (str.substr part 0 (- (str.len part) 1)) part))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (= (str.at _arg_0 (- (str.len _arg_0) 1)) \"/\") (str.substr _arg_0 0 (- (str.len _arg_0) 1)) _arg_0))) (ite (str.suffixof \"/\" no_protocol) no_trailing_slash no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"//\" 0)) \"//\") \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((stripped (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" stripped) (str.substr stripped 0 (- (str.len stripped) 1)) stripped)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\") \"/\" \"\")))",
      null,
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (ite (= start -1) _arg_0 (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"//\") (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((temp (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2))))) (ite (str.suffixof \"/\" temp) (str.substr temp 0 (- (str.len temp) 1)) temp))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((without_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (without_trailing_slash (ite (str.suffixof \"/\" without_protocol) (str.substr without_protocol 0 (- (str.len without_protocol) 1)) without_protocol))) without_trailing_slash)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- (str.len _arg_0) (+ start 2)))))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (len (str.len _arg_0))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"/\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_trailing_slash (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))) no_trailing_slash)))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (cleaned (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))) cleaned)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"://\" 0)) \"://\") \"\") \"/\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f (_arg_0 String) String (let ((no_proto (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (no_slash (ite (str.suffixof \"/\" no_proto) (str.substr no_proto 0 (- (str.len no_proto) 1)) no_proto))) no_slash)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"//\") (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)) _arg_0)))"
    ],
    "constants": [
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        "",
        0,
        1,
        "http://",
        "ftp://",
        "sftp://",
        "/",
        "https://"
      ],
      [
        0,
        1,
        2,
        "//",
        "/"
      ],
      [
        0,
        "",
        1,
        3,
        "/",
        "="
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        "",
        2,
        "//",
        "/"
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "//",
        "/"
      ],
      [
        0,
        "=",
        2,
        "/"
      ],
      [
        0,
        "",
        1,
        3,
        "=",
        "/"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "http://"
      ],
      [
        "",
        "https://",
        "http://"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "http://"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        2,
        3,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        1,
        "=",
        "/"
      ],
      [
        "",
        "http://",
        0,
        1,
        "/",
        "sftp://",
        "ftp://",
        "https://"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        3,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        0,
        "",
        2,
        "/",
        "//"
      ],
      null,
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        "",
        "https://",
        "/"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        "",
        "https=//",
        "/"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        "",
        "https://",
        "ftp://"
      ],
      [
        0,
        2,
        "/",
        "//",
        -1
      ],
      [
        0,
        "",
        "/",
        "://"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        "",
        2,
        1,
        "/",
        "//"
      ],
      [
        0,
        1,
        2,
        "/",
        "//"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      3,
      1,
      "//",
      "ftp://",
      "sftp://",
      "/",
      "http://",
      "=",
      "https://",
      "://",
      -1,
      "https=//"
    ],
    "time_diff_ms": 1674.246
  },
  "44789427.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))\n  )\n)\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n)\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n)\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (str.substr _arg_0 0 (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n)\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0\n    (ite (= _arg_1 1) 0\n      (+ 1 (str.indexof _arg_0 \"-\" 0)))\n    (ite (= _arg_1 1)\n      (str.indexof _arg_0 \"-\" 0)\n      (- (str.len _arg_0)\n         (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1) \n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (str.substr _arg_0\n    (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \"-\" 0)))\n    (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \"-\" 0))) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \"-\" 0))) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "-"
    ],
    "time_diff_ms": 812.493
  },
  "stackoverflow4.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \">\" \"\") \"<\" \" \")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \">\" \"\") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))"
    ],
    "constants": [
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        "<",
        " "
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        ",",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        " ",
        "<"
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        " ",
        "<"
      ],
      [
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        ",",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ],
      [
        ",",
        ">",
        " ",
        "<"
      ],
      [
        "",
        ">",
        " ",
        "<"
      ],
      [
        "",
        "<",
        ",",
        " ",
        ">"
      ]
    ],
    "all_constants": [
      "",
      ",",
      ">",
      " ",
      "<"
    ],
    "time_diff_ms": 1549.821
  },
  "stackoverflow6.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```s\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((msg_start (+ (str.indexof _arg_0 \"= \" 0) 2)))\n    (str.substr _arg_0 msg_start (- (str.len _arg_0) msg_start))))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"=\" (+ (str.indexof _arg_0 \"=\" 0) 1)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"= \" 0))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"=\" 0))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"=\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ (str.indexof _arg_0 \"= \" 0) 2)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2))\n       (+ (str.indexof _arg_0 \"= \" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"= \") (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2))) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0)))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((msg_start (+ (str.indexof _arg_0 \"= \" 0) 2))) (str.substr _arg_0 msg_start (- (str.len _arg_0) msg_start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"=\" (+ (str.indexof _arg_0 \"=\" 0) 1)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"= \" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"=\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"= \" 0) 2)) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"= \") (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        " ",
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        2,
        "="
      ],
      [
        0,
        2,
        "= ",
        " "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= ",
        " "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        "",
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      "=",
      " ",
      "= "
    ],
    "time_diff_ms": 551.448
  },
  "univ_4-long.sl": {
    "completions": [
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n  (str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String \n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      "USA",
      ", USA"
    ],
    "time_diff_ms": 1521.23
  },
  "phone-5-long.sl": {
    "completions": [
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 1) 1))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```scheme\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 1) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      " "
    ],
    "time_diff_ms": 1415.891
  },
  "phone-5-short.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (- (str.indexof name \" \" 0) 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(ite (str.prefixof \"+\" name)\n    (str.substr name 1 (str.indexof name \" \" 0))\n    \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (let ((idx (str.indexof name \" \" 0)))\n    (str.substr name 1 (- idx 1))))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plusPos (str.indexof name \"+\" 0))\n        (spacePos (str.indexof name \" \" 0)))\n    (str.substr name (+ plusPos 1) (- spacePos plusPos 1))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plus-pos (str.indexof name \"+\" 0))\n        (space-pos (str.indexof name \" \" 0)))\n    (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plus-pos (str.indexof name \"+\" 0)))\n    (str.substr name (+ plus-pos 1) (- (str.indexof name \" \" plus-pos) plus-pos 1))))\n```",
      "```s-expression\n(define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((start (str.indexof name \" \" 0)))\n    (str.substr name 1 (- start 1))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((start (str.indexof name \" \" 0))\n        (end (str.indexof name \" \" (+ (str.indexof name \" \" 0) 1))))\n    (str.substr name (+ start 1) (- end start 1))))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((pos (str.indexof name \" \" 0)))\n    (str.substr name 1 (- pos 1))))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plus-pos (str.indexof name \"+\" 0)))\n    (str.substr name (+ plus-pos 1) (- (str.indexof name \" \" plus-pos) plus-pos 1))))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (ite (str.prefixof \"+\" name) (str.substr name 1 (str.indexof name \" \" 0)) \"\")))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((idx (str.indexof name \" \" 0))) (str.substr name 1 (- idx 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plusPos (str.indexof name \"+\" 0)) (spacePos (str.indexof name \" \" 0))) (str.substr name (+ plusPos 1) (- spacePos plusPos 1)))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plus-pos (str.indexof name \"+\" 0)) (space-pos (str.indexof name \" \" 0))) (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1)))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plus-pos (str.indexof name \"+\" 0))) (str.substr name (+ plus-pos 1) (- (str.indexof name \" \" plus-pos) plus-pos 1)))))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((start (str.indexof name \" \" 0))) (str.substr name 1 (- start 1)))))",
      "((define-fun f ((name String)) String (let ((start (str.indexof name \" \" 0)) (end (str.indexof name \" \" (+ (str.indexof name \" \" 0) 1)))) (str.substr name (+ start 1) (- end start 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((pos (str.indexof name \" \" 0))) (str.substr name 1 (- pos 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plus-pos (str.indexof name \"+\" 0))) (str.substr name (+ plus-pos 1) (- (str.indexof name \" \" plus-pos) plus-pos 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        1,
        0,
        "+",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "+",
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "+",
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "+",
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "+",
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "+",
      " "
    ],
    "time_diff_ms": 907.793
  },
  "11604909.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((verStart (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((verEnd (str.indexof _arg_0 \" \" (+ verStart 1))))\n        (str.substr _arg_0 (+ verStart 1) (- verEnd verStart 1))))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \".\" (+ start 1)))))\n    (str.substr _arg_0 (+ start 1) (- end start))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"2\" 0)))\n    (str.substr _arg_0 start (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n    (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))\n       (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (if (= start -1)\n          \"\"\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \".\" 0)\n    (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n    (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \".\" 0)\n    (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0)) \" \") \n         (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0)) \" \" 0) \n         (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((sub1 (str.substr _arg_0 (+ start 1) (str.len _arg_0))))\n          (let ((second (str.indexof sub1 \" \" 0)))\n            (if (= second -1)\n                \"\"\n                (let ((sub2 (str.substr sub1 (+ second 1) (str.len sub1))))\n                  (let ((dot (str.indexof sub2 \".\" 0)))\n                    (if (= dot -1)\n                        \"\"\n                        (let ((end (str.indexof sub2 \" \" dot)))\n                          (if (= end -1)\n                              (str.substr sub2 0 (str.len sub2))\n                              (str.substr sub2 0 end))))))))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"5.1\") \"5.1\" \n  (ite (str.contains _arg_0 \"3.5\") \"3.5\" \n    (ite (str.contains _arg_0 \"6.1\") \"6.1\" \n      (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) \n        (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0))\n          (str.substr _arg_0 (- start 1) (- end start -1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((sub (str.substr _arg_0 (+ start 1) (- end start 1))))\n        (ite (str.contains sub \".\") sub\n          (str.substr _arg_0 (+ start 1) (str.len _arg_0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) (str.indexof _arg_0 \" \" (+ start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- end start -1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (if (= start -1) _arg_0\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 2 (str.indexof _arg_0 \".\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (>= start 0)\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (>= end 0)\n          (str.substr _arg_0 (- start 1) (- end start -1))\n          (str.substr _arg_0 (- start 1) (str.len _arg_0))))\n      \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- end start -1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))) \"\") \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        _arg_0\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") (str.replace _arg_0 \".\" \"\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n       (str.indexof _arg_0 \" \" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))))\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (>= start 0)\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (>= end 0)\n              (str.substr _arg_0 (- start 1) (- end start -1))\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))))\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) \n              (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) \n                 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((version (str.substr _arg_0 (+ start 1) (- end start 1))))\n        (if (str.contains version \".\")\n            version\n            (str.substr _arg_0 (+ end 1) (- (str.indexof _arg_0 \" \" (+ end 1)) end 1)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((version (str.indexof _arg_0 \".\" 0)))\n    (ite (= version -1) \"\" \n         (let ((start (str.substr _arg_0 (- version 1) 1)))\n           (str.substr _arg_0 (- version 1) \n                       (str.indexof _arg_0 \" \" version))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \".\" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))) \" \" 0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((version (str.substr _arg_0 (+ start 1) (str.indexof (str.substr _arg_0 (+ start 1) (str.len _arg_0)) \" \" 0))))\n      (ite (= version \"\") (str.substr _arg_0 start (str.len _arg_0)) version))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (if (= start -1)\n          \"\"\n          (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"1.0\") \"1.0\" \n  (ite (str.contains _arg_0 \"6.1\") \"6.1\" \n    (ite (str.contains _arg_0 \"2.6\") \"2.6\" \n      (ite (str.contains _arg_0 \"5.1\") \"5.1\" \n        (ite (str.contains _arg_0 \"3.5\") \"3.5\" \"\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))\n    (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- end start)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \") \n    (let ((start (str.indexof _arg_0 \" \" 0)))\n        (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n            (str.substr _arg_0 (+ start 1) (- next start 1))))\n    _arg_0)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"2\" 0) 3))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \".\")\n     (str.substr _arg_0 (str.indexof _arg_0 \".\" (- (str.indexof _arg_0 \".\" 0) 1)) \n                 (+ 3 (str.indexof _arg_0 \".\" 0)))\n     \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \".\")\n    (str.substr _arg_0 (str.indexof _arg_0 \".\" (- 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \".\")) \" \" 0))) 3)\n    \"\")\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"3.5\") \"3.5\" \n  (ite (str.contains _arg_0 \"1.0\") \"1.0\"\n    (ite (str.contains _arg_0 \"6.1\") \"6.1\"\n      (ite (str.contains _arg_0 \"2.6\") \"2.6\"\n        (ite (str.contains _arg_0 \"5.1\") \"5.1\" \"\")))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 (- start 1) (- (str.len _arg_0) (- start 1)))\n            (str.substr _arg_0 (- start 1) (- end (- start 1)))))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \".\")\n    (str.substr _arg_0 (str.indexof _arg_0 \".\" (- (str.indexof _arg_0 \".\" 0) 2)) 3)\n    \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (>= start 0)\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (>= end 0)\n              (str.substr _arg_0 (- start 1) (- end start -1))\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))))\n        \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" 0) 2)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) (str.len _arg_0))))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \" \") \n    (let ((start (str.indexof _arg_0 \" \" 0)))\n        (let ((next (str.indexof _arg_0 \" \" (+ start 1))))\n            (str.substr _arg_0 (+ start 1) (- next start 1))))\n    _arg_0)\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((dot (str.indexof _arg_0 \".\" start)))\n      (str.substr _arg_0 (- dot 1) (+ 4 (- dot start))))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n    (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \".\" 0))))))) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.indexof (str.substr _arg_0\n      (+ (str.indexof _arg_0 \" \" 0) 1)\n      (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n      \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((space (str.indexof _arg_0 \" \" start)))\n          (if (= space -1)\n              (str.substr _arg_0 (- start 1) (str.len _arg_0))\n              (str.substr _arg_0 (- start 1) (- space start -1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (if (and (>= start 0) (>= end 0))\n          (str.substr _arg_0 start (- end start))\n          \"\"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (if (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        _arg_0\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \".\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (+ start 1) (str.indexof (str.substr _arg_0 (+ start 1) (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" 0) 2)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((rest (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))))\n          (let ((num-start (str.indexof rest \" \" 0)))\n            (if (= num-start -1)\n                rest\n                (let ((num (str.substr rest 0 num-start)))\n                  (if (str.contains num \".\")\n                      num\n                      (f rest)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 (str.++ (str.at _arg_0 (+ 0 (str.indexof _arg_0 \".\" 0))) \".\") 0) 3))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) \n  (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) \n  (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((verStart (str.indexof _arg_0 \" \" (+ start 1)))) (let ((verEnd (str.indexof _arg_0 \" \" (+ verStart 1)))) (str.substr _arg_0 (+ verStart 1) (- verEnd verStart 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \".\" (+ start 1))))) (str.substr _arg_0 (+ start 1) (- end start)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"2\" 0))) (str.substr _arg_0 start (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) 3))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((sub1 (str.substr _arg_0 (+ start 1) (str.len _arg_0)))) (let ((second (str.indexof sub1 \" \" 0))) (if (= second -1) \"\" (let ((sub2 (str.substr sub1 (+ second 1) (str.len sub1)))) (let ((dot (str.indexof sub2 \".\" 0))) (if (= dot -1) \"\" (let ((end (str.indexof sub2 \" \" dot))) (if (= end -1) (str.substr sub2 0 (str.len sub2)) (str.substr sub2 0 end)))))))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"6.1\") \"6.1\" (str.substr _arg_0 (str.indexof _arg_0 \".\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start -1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (let ((sub (str.substr _arg_0 (+ start 1) (- end start 1)))) (ite (str.contains sub \".\") sub (str.substr _arg_0 (+ start 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (str.indexof _arg_0 \" \" (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start -1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= start -1) _arg_0 (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 2 (str.indexof _arg_0 \".\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (>= start 0) (let ((end (str.indexof _arg_0 \" \" start))) (if (>= end 0) (str.substr _arg_0 (- start 1) (- end start -1)) (str.substr _arg_0 (- start 1) (str.len _arg_0)))) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start -1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))) \"\") \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) _arg_0 (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") (str.replace _arg_0 \".\" \"\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (>= start 0) (let ((end (str.indexof _arg_0 \" \" start))) (if (>= end 0) (str.substr _arg_0 (- start 1) (- end start -1)) (str.substr _arg_0 (- start 1) (str.len _arg_0)))) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (let ((version (str.substr _arg_0 (+ start 1) (- end start 1)))) (if (str.contains version \".\") version (str.substr _arg_0 (+ end 1) (- (str.indexof _arg_0 \" \" (+ end 1)) end 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((version (str.indexof _arg_0 \".\" 0))) (ite (= version -1) \"\" (let ((start (str.substr _arg_0 (- version 1) 1))) (str.substr _arg_0 (- version 1) (str.indexof _arg_0 \" \" version)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \".\" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((version (str.substr _arg_0 (+ start 1) (str.indexof (str.substr _arg_0 (+ start 1) (str.len _arg_0)) \" \" 0)))) (ite (= version \"\") (str.substr _arg_0 start (str.len _arg_0)) version)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= start -1) \"\" (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1.0\") \"1.0\" (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" (ite (str.contains _arg_0 \"3.5\") \"3.5\" \"\")))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- end start))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- next start 1)))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"2\" 0) 3)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \".\" (- (str.indexof _arg_0 \".\" 0) 1)) (+ 3 (str.indexof _arg_0 \".\" 0))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \".\" (- 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \".\")) \" \" 0))) 3) \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"3.5\") \"3.5\" (ite (str.contains _arg_0 \"1.0\") \"1.0\" (ite (str.contains _arg_0 \"6.1\") \"6.1\" (ite (str.contains _arg_0 \"2.6\") \"2.6\" (ite (str.contains _arg_0 \"5.1\") \"5.1\" \"\")))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 (- start 1) (- (str.len _arg_0) (- start 1))) (str.substr _arg_0 (- start 1) (- end (- start 1))))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \".\") (str.substr _arg_0 (str.indexof _arg_0 \".\" (- (str.indexof _arg_0 \".\" 0) 2)) 3) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (>= start 0) (let ((end (str.indexof _arg_0 \" \" start))) (if (>= end 0) (str.substr _arg_0 (- start 1) (- end start -1)) (str.substr _arg_0 (- start 1) (str.len _arg_0)))) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" 0) 2))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" 0)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (let ((start (str.indexof _arg_0 \" \" 0))) (let ((next (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- next start 1)))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((dot (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 (- dot 1) (+ 4 (- dot start)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \".\" 0))))))) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (if (= start -1) \"\" (let ((space (str.indexof _arg_0 \" \" start))) (if (= space -1) (str.substr _arg_0 (- start 1) (str.len _arg_0)) (str.substr _arg_0 (- start 1) (- space start -1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (and (>= start 0) (>= end 0)) (str.substr _arg_0 start (- end start)) \"\")))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) _arg_0 (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \".\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (+ start 1) (str.indexof (str.substr _arg_0 (+ start 1) (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \".\" 0) 2))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (if (= start -1) \"\" (let ((rest (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)))) (let ((num-start (str.indexof rest \" \" 0))) (if (= num-start -1) rest (let ((num (str.substr rest 0 num-start))) (if (str.contains num \".\") num (f rest))))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 (str.++ (str.at _arg_0 (+ 0 (str.indexof _arg_0 \".\" 0))) \".\") 0) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))) (str.substr _arg_0 start (+ 1 (- end start))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        " ",
        "2"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        3,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "5.1",
        "6.1",
        " ",
        "3.5"
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        2,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        ".",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        "",
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        "",
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        4,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "2",
        3
      ],
      [
        0,
        1,
        "",
        3,
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        3,
        ".",
        " "
      ],
      [
        "",
        "5.1",
        "6.1",
        "1.0",
        "3.5",
        "2.6"
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        "",
        2,
        3,
        "."
      ],
      [
        0,
        1,
        "",
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        2,
        ".",
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        5,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        4,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        2,
        ".",
        " "
      ],
      [
        0,
        "",
        1,
        ".",
        " ",
        -1
      ],
      [
        0,
        3,
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      3,
      4,
      2,
      5,
      "2",
      "6.1",
      "2.6",
      "1.0",
      "5.1",
      " ",
      ".",
      -1,
      "3.5"
    ],
    "time_diff_ms": 567.854
  },
  "phone-9-long.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))\n)\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace\n    (str.replace\n      (str.replace\n        (str.substr name 1 (- (str.len name) 1))\n        \" \" \".\")\n      \"-\" \".\")\n    \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```s-expression\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```s-expression\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.substr name 1 (str.len name)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))))",
      null,
      null,
      null,
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (str.len name)) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      null,
      [
        ".",
        1,
        " ",
        "-"
      ],
      null,
      null,
      null,
      null,
      [
        ".",
        1,
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        "+ ",
        " "
      ],
      null,
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        "+ ",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ]
    ],
    "all_constants": [
      "",
      1,
      "-",
      "+",
      " ",
      ".",
      "+ "
    ],
    "time_diff_ms": 1272.184
  },
  "univ_4_short.sl": {
    "completions": [
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \", USA\" col2) \"\" \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \", New York, New York\" \", New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \"USA\" col2) \"\" \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.contains col2 \"USA\") \"\" \", USA\")))\n```",
      "```lisp\n(str.replace col2 \", New York\" \", NY, USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\"))\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\")\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\"))\n```",
      "```scheme\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0))\n          \", \"\n          (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2)\n          \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\"))\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 7) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" \n          (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.replace col2 \"New York\" \"NY\") \n    \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 4) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" \n          (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.at col2 (+ (str.indexof col2 \",\" 0) 2)) \"USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.replace col2 \"New York\" \"NY\") \n    \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \", USA\" col2) \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", New York, New York\" \", New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \"USA\" col2) \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.contains col2 \"USA\") \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", New York\" \", NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\") (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 7) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 4) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.at col2 (+ (str.indexof col2 \",\" 0) 2)) \"USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (- (str.len col2) 3) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))"
    ],
    "constants": [
      [
        "New York, New York",
        "",
        ", USA",
        "New York, NY"
      ],
      [
        ", New York, New York",
        ", New York, NY"
      ],
      [
        "",
        "New York, New York",
        "USA",
        "New York, NY",
        ", USA"
      ],
      [
        "",
        "New York, New York",
        "USA",
        "New York, NY",
        ", USA"
      ],
      [
        ", New York",
        ", NY, USA"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        0,
        ", USA",
        ","
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "USA",
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        ",",
        ", NY, USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        7,
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        4,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        3,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "",
        "NY",
        ", USA",
        "USA",
        "New York"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        3,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        "USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "",
        "NY",
        ", USA",
        "USA",
        "New York"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        2,
        3,
        ", USA",
        ",",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA"
      ]
    ],
    "all_constants": [
      "",
      0,
      ", New York, NY",
      1,
      2,
      4,
      3,
      7,
      ", USA",
      "New York, New York",
      ", ",
      ", New York",
      "USA",
      ",",
      "NY",
      ", NY, USA",
      ", New York, New York",
      "New York, NY",
      "New York"
    ],
    "time_diff_ms": 1035.25
  },
  "phone-10-long.sl": {
    "completions": [
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```lisp\n(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \")\" (str.substr name 8 (- (str.len name) 8)))\n```",
      "```scheme\n(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4)\n          \"(\"\n          (str.substr name 4 3)\n          \") \"\n          (str.substr name 7 3)\n          \"-\"\n          (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```scheme\n(str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) (- (str.len name) (+ (str.indexof name \" \" 0) 5))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9)))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))```",
      "```(str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 5 (str.indexof name \" \" 0)) (- (str.len name) (+ 5 (str.indexof name \" \" 0)))))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 7))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 (str.indexof name \" \" 0))\n          \" (\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n          \") \"\n          (str.substr name (+ (str.indexof name \" \" 0) 5) 7)))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 4) (- (str.len name) (+ (str.indexof name \" \" 0) 4))))```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 5 (str.indexof name \" \" 0)) (- (str.len name) (+ 5 (str.indexof name \" \" 0)))))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 4) \"-\" (str.substr name 11 3))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7)))\n```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))```",
      "```(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))```"
    ],
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \")\" (str.substr name 8 (- (str.len name) 8)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) (- (str.len name) (+ (str.indexof name \" \" 0) 5))))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 5 (str.indexof name \" \" 0)) (- (str.len name) (+ 5 (str.indexof name \" \" 0)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (+ (str.indexof name \" \" 0) 1)) \"(\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 4) (- (str.len name) (+ (str.indexof name \" \" 0) 4))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 3) \") \" (str.substr name (+ 5 (str.indexof name \" \" 0)) (- (str.len name) (+ 5 (str.indexof name \" \" 0)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 4))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        5,
        "(",
        8,
        ")"
      ],
      [
        0,
        3,
        5,
        "(",
        8,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        1,
        " ",
        3,
        5,
        ") ",
        " ("
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        9,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        9,
        ")"
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        8,
        11,
        "-",
        14,
        ") ",
        "("
      ],
      [
        0,
        1,
        " (",
        3,
        5,
        " ",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        7,
        8,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        8,
        11,
        "-",
        14,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        8,
        11,
        "-",
        14,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        " (",
        3,
        5,
        7,
        " ",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        11,
        "-",
        15,
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        3,
        4,
        " ",
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        8,
        11,
        "-",
        14,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        8,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        1,
        " (",
        3,
        5,
        " ",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        11,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        5,
        8,
        11,
        "-",
        14,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      4,
      5,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      ") ",
      "(",
      15,
      " (",
      " ",
      "-",
      ")"
    ],
    "time_diff_ms": 1169.681
  },
  "phone-9.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace \n    (str.replace \n      (str.substr name 1 (- (str.len name) 1)) \n      \"-\" \".\") \n    \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" \n    (str.replace \n      (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \n      \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \n      \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (str.indexof name \" \" 0))\n          \".\"\n          (str.replace (str.substr name (+ 2 (str.indexof name \" \" 0)) (str.len name))\n                       \"-\"\n                       \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \n      \"-\" \n      \".\"\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 2) \".\"\n          (str.replace (str.substr name 4 (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \n      \"-\" \n      \".\"\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name))\n                       \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0))) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n    \".\"\n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1)))\n      \"-\"\n      \".\"\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \n      \"-\" \n      \".\"\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n          \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name))\n                       \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 2) \".\"\n          (str.replace (str.substr name 4 (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0))) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"+\" \"\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace\n    (str.replace name \" \" \".\")\n    \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n    \".\"\n    (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name))\n                 \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```s-expression\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")\n                       \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n          \".\"\n          (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")\n                       \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n    \".\"\n    (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n          \".\"\n          (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\")\n                       \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n          \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n    (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1))\n          \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 2) \".\"\n          (str.substr name 4 3) \".\"\n          (str.substr name 8 3) \".\"\n          (str.substr name 12 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \n    \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \n      \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" \n    (str.replace \n      (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \n      \"-\" \".\"\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\"\n          (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\")))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \" \" \"\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (str.indexof name \" \" 0)) \".\" (str.replace (str.substr name (+ 2 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 2) \".\" (str.replace (str.substr name 4 (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 2) \".\" (str.replace (str.substr name 4 (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0))) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \" \" \"\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\") \" \" \"\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\") \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 2) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ 1 (str.indexof name \" \" 0)) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \"-\" \".\"))))"
    ],
    "constants": [
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        "",
        1,
        " ",
        "-",
        "."
      ],
      [
        ".",
        "",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        "+ ",
        " ",
        "-",
        "."
      ],
      [
        ".",
        "",
        " ",
        "-"
      ],
      [
        "",
        "+ ",
        " ",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        2,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        4,
        "-",
        "."
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        4,
        "-",
        "."
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "+",
        "",
        "-",
        "."
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "+",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ],
      [
        0,
        1,
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      2,
      4,
      3,
      8,
      12,
      "-",
      "+",
      " ",
      ".",
      "+ "
    ],
    "time_diff_ms": 1064.619
  },
  "clean-and-reformat-telephone-numbers.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \",\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \",\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \">\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \",\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"(\" \"\") \")\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ",",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ",",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        ",",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        "<>",
        " "
      ],
      [
        "",
        ")",
        "-",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " ",
        ">"
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        ">"
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "-",
        ".",
        ",",
        " "
      ],
      [
        "",
        "<",
        "-",
        " ",
        ">"
      ],
      [
        "",
        ")",
        "-",
        ".",
        "("
      ],
      [
        "",
        ")",
        "-",
        ".",
        " ",
        "("
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ],
      [
        "",
        "<",
        "-",
        ".",
        " "
      ]
    ],
    "all_constants": [
      "",
      "<>",
      "-",
      "(",
      ">",
      ")",
      " ",
      ",",
      ".",
      "<"
    ],
    "time_diff_ms": 884.89
  },
  "stackoverflow7.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.replace _arg_0 _arg_1 \"\"))\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      "",
      0
    ],
    "time_diff_ms": 1189.819
  },
  "univ_4-long-repeat.sl": {
    "completions": [
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ (str.replace col2 \"USA\" \"\") \", USA\")```",
      "```s-expression\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```s-expression\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \"USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \"USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```s-expression\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\")\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \"USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n       col2\n       (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \", USA\" col2)\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\")))\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"USA\" \"\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \"USA\" col2) col2 (str.++ col2 \", USA\"))))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        "",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ]
    ],
    "all_constants": [
      "",
      "USA",
      ", USA"
    ],
    "time_diff_ms": 120.974
  },
  "strip-numeric-characters-from-cell.sl": {
    "completions": [
      "```lisp\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\"))\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 \"0\" \"\")\n(str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\")\n(str.replace (str.replace _arg_0 \"3\" \"\") \"4\" \"\")\n(str.replace (str.replace _arg_0 \"5\" \"\") \"6\" \"\")\n(str.replace (str.replace _arg_0 \"7\" \"\") \"8\" \"\")\n(str.replace (str.replace _arg_0 \"9\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```s-expression\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 (int.to.str 0) 0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"0\" \"\")\n```",
      "```scheme\n(str.replace_re_all _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\"))\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```scheme\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"0\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0123456789\" 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"0\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0\" 0)) \"\"))\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace_re _arg_0 #\"\\d\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) (ite (or (and (>= (str.to.int (str.at _arg_0 0)) 0) (<= (str.to.int (str.at _arg_0 0)) 9)) (= (str.at _arg_0 0) \" \")) \"\" (str.at _arg_0 0)))\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n(str.replace_re_all _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 #\"\\d\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"0\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 (int.to.str 0) 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0\" 0)) \"\")\n```",
      "```scheme\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (int.to.str 0) \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") (str.replace (str.replace _arg_0 \"3\" \"\") \"4\" \"\") (str.replace (str.replace _arg_0 \"5\" \"\") \"6\" \"\") (str.replace (str.replace _arg_0 \"7\" \"\") \"8\" \"\") (str.replace (str.replace _arg_0 \"9\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 (int.to.str 0) 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re_all _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0123456789\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \\# \"\\\\d\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) (ite (or (and (>= (str.to.int (str.at _arg_0 0)) 0) (<= (str.to.int (str.at _arg_0 0)) 9)) (= (str.at _arg_0 0) \" \")) \"\" (str.at _arg_0 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re_all _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \\# \"\\\\d\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 (int.to.str 0) 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 (str.indexof _arg_0 \"0\" 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) (ite (str.contains \"0123456789\" (str.at _arg_0 0)) \"\" (str.at _arg_0 0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        0,
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        "",
        "0"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "8",
        "7",
        "3",
        "4",
        "9",
        "2",
        "1",
        "0",
        "6",
        "5"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        0,
        ""
      ],
      [
        ""
      ],
      [
        "",
        "0"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        "",
        "0"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "\\d",
        ""
      ],
      [
        0,
        9,
        "",
        " "
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        0,
        ""
      ],
      [
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        "\\d",
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "0"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0"
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ]
    ],
    "all_constants": [
      "",
      0,
      "0123456789",
      "4",
      "0",
      "[0-9]",
      "6",
      "1",
      "2",
      9,
      "5",
      "9",
      "7",
      "8",
      " ",
      "3",
      "\\d"
    ],
    "time_diff_ms": 704.41
  },
  "36462127.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 11 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 6)\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n  (str.substr _arg_0 12 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 13 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n)\n```",
      "```scheme\n  (str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))\n```",
      "```lisp\n(str.substr _arg_0 11 (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 10 (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 6) 6))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) \n    (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \"/\" \"\") \"/\" 0)) (str.indexof (str.replace _arg_0 \"/\" \"\") \"/\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) \"/\" 0) 1)) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 2) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 6) 6)\n```",
      "```lisp\n(str.substr _arg_0 11 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 6) 6))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))\n)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 6) 6))\n```",
      "```lisp\n(str.substr _arg_0 11 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \"/\")) (str.indexof (str.reverse _arg_0) \"/\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (str.substr s (- (str.len s) 6) 6))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n)",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 15 (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.len _arg_0) 6) 6))\n```",
      "```lisp\n(str.substr _arg_0 11 (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))\n```",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \"/\" \"\") \"/\" 0)) (str.indexof (str.replace _arg_0 \"/\" \"\") \"/\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)) \"/\" 0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0)) \"/\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \"/\")) (str.indexof (str.reverse _arg_0) \"/\"))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)) (str.len _arg_0))))",
      "((define-fun f ((s String)) String (str.substr s (- (str.len s) 6) 6)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "(\\`\\`\\`lisp (define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 15 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 6) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))"
    ],
    "constants": [
      [
        11,
        6
      ],
      [
        0,
        1,
        "/",
        6
      ],
      [
        12
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        13,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/",
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        11
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        10
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "",
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12
      ],
      [
        0,
        2,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        11
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        11
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        15
      ],
      [
        0,
        1,
        "/"
      ],
      [
        6
      ],
      [
        11
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      6,
      "/",
      11,
      12,
      13,
      10,
      15
    ],
    "time_diff_ms": 813.336
  },
  "exceljet3.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```synth\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 \"= \" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) \n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"=\")\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n       _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) \n    _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.at _arg_0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.at _arg_0 0) \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n  (str.replace _arg_0 (str.++ (str.at _arg_0 0) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"=\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\"))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n    _arg_0)\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"=\") \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) \n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"= \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.at _arg_0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at _arg_0 0) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.at _arg_0 0) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        "",
        "= "
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        " "
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        ""
      ],
      [
        0,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        ""
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        2,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "="
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      "=",
      " ",
      "= "
    ],
    "time_diff_ms": 1107.49
  },
  "stackoverflow3.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1) \"\"\n      (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1) \"\"\n      (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitIndex -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= pos -1)\n        \"\"\n        (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1) \"\"\n      (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitIndex -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= pos -1)\n        \"\"\n        (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"9\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n      \"\"\n      (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n      \"\"\n      (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit 1) (- (str.len _arg_0) (+ last-digit 1))))))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((idx (str.indexof s \" \" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr s (+ idx 1) (- (str.len s) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"1\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos)))))\n```",
      "```scheme\n(define-fun f ((s String)) String\n  (let ((pos (str.indexof (str.reverse s) \" \" 0)))\n    (if (= pos -1) \"\" (str.reverse (str.substr (str.reverse s) 0 pos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"9\" 0))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (+ 1 (str.indexof _arg_0 \"9\" 0))))\n    (ite (= pos 0) \"\" (str.substr _arg_0 pos (- (str.len _arg_0) pos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof (str.replace _arg_0 \" \" \"9\") \"9\" 0)))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ 1 lastDigitPos) (- (str.len _arg_0) (+ 1 lastDigitPos))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (let ((pos (if (> lastDigitPos -1) lastDigitPos\n                   (str.indexof _arg_0 \"8\" 0))))\n      (let ((pos (if (> pos -1) pos\n                     (str.indexof _arg_0 \"7\" 0))))\n        (let ((pos (if (> pos -1) pos\n                       (str.indexof _arg_0 \"6\" 0))))\n          (let ((pos (if (> pos -1) pos\n                         (str.indexof _arg_0 \"5\" 0))))\n            (let ((pos (if (> pos -1) pos\n                           (str.indexof _arg_0 \"4\" 0))))\n              (let ((pos (if (> pos -1) pos",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0))))\n    (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \"9\" 0))\n    (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (< lastDigitPos 0)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"9\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (if (= idx -1)\n      \"\"\n      (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (+ 1 (str.indexof (str.replace _arg_0 \"9\" \"9\") \"9\" -1))))\n    (ite (< pos (str.len _arg_0)) (str.substr _arg_0 pos (str.len _arg_0)) \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigit (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigit -1)\n      \"\"\n      (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))\n    (if (= pos -1)\n        \"\"\n        (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n      \"\"\n      (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))\n    (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIdx (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitIdx -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitIdx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0))))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitIndex -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1))))))\n```",
      "```scheme\n(define-fun f ((s String)) String\n  (let ((last-digit-pos (str.indexof s \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr s (+ last-digit-pos 1) (- (str.len s) (+ last-digit-pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (>= last-digit-pos 0)\n        (str.substr _arg_0 (+ 1 last-digit-pos) (str.len _arg_0))\n        \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ 1 lastDigitPos) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0))))\n    (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (>= lastDigitPos 0)\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))\n        \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.reverse (str.substr (str.reverse _arg_0) 0 last-digit-pos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1))))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigit (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigit -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (>= lastDigitPos 0)\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))\n        \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitIndex -1) \"\" (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"9\" 0))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitIndex -1) \"\" (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"9\" 0))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"9\" 0) 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \" \" 0))) (if (= lastDigitPos -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit (str.indexof _arg_0 \"9\" 0))) (if (= last-digit -1) \"\" (str.substr _arg_0 (+ last-digit 1) (- (str.len _arg_0) (+ last-digit 1)))))))",
      "((define-fun f ((s String)) String (let ((idx (str.indexof s \" \" 0))) (if (= idx -1) \"\" (str.substr s (+ idx 1) (- (str.len s) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"1\" 0))) (if (= lastDigitPos -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 lastDigitPos))))))",
      "((define-fun f ((s String)) String (let ((pos (str.indexof (str.reverse s) \" \" 0))) (if (= pos -1) \"\" (str.reverse (str.substr (str.reverse s) 0 pos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (+ 1 (str.indexof _arg_0 \"9\" 0)))) (ite (= pos 0) \"\" (str.substr _arg_0 pos (- (str.len _arg_0) pos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof (str.replace _arg_0 \" \" \"9\") \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ 1 lastDigitPos) (- (str.len _arg_0) (+ 1 lastDigitPos)))))))",
      null,
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0)))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (< lastDigitPos 0) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"9\" 0) 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (+ 1 (str.indexof (str.replace _arg_0 \"9\" \"9\") \"9\" -1)))) (ite (< pos (str.len _arg_0)) (str.substr _arg_0 pos (str.len _arg_0)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigit (str.indexof _arg_0 \"9\" 0))) (if (= lastDigit -1) \"\" (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof (str.reverse _arg_0) \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (- (str.len _arg_0) lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))) (ite (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIdx (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitIdx -1) \"\" (str.substr _arg_0 (+ lastDigitIdx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"9\" 0)))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitIndex -1) \"\" (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1)))))))",
      "((define-fun f ((s String)) String (let ((last-digit-pos (str.indexof s \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr s (+ last-digit-pos 1) (- (str.len s) (+ last-digit-pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (>= last-digit-pos 0) (str.substr _arg_0 (+ 1 last-digit-pos) (str.len _arg_0)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ 1 lastDigitPos) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" (str.len _arg_0)))) (ite (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (>= lastDigitPos 0) (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof (str.reverse _arg_0) \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.reverse (str.substr (str.reverse _arg_0) 0 last-digit-pos))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" (- (str.len _arg_0) 1)))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigit (str.indexof _arg_0 \"9\" 0))) (if (= lastDigit -1) \"\" (str.substr _arg_0 (+ lastDigit 1) (- (str.len _arg_0) (+ lastDigit 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (>= lastDigitPos 0) (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"9\" 0))) (if (= pos -1) \"\" (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"9\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"9\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))"
    ],
    "constants": [
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        "1",
        -1
      ],
      [
        0,
        "",
        -1,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        1,
        "",
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      null,
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9"
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        0,
        1,
        "",
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        -1,
        "9"
      ],
      [
        "",
        1,
        -1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "",
        "9"
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "1",
      "9",
      " ",
      -1
    ],
    "time_diff_ms": 1677.763
  },
  "univ_5-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \", USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(ite (str.contains col2 \"New York, New York, USA\")\n     \"New York, NY, USA\"\n     (ite (str.contains col2 \"Berkeley, CA\")\n          \"Berkeley, CA, USA\"\n          (ite (str.contains col2 \"New Haven, CT, USA\")\n               \"New Haven, CT, USA\"\n               (ite (str.contains col2 \"New Haven, CT\")\n                    \"New Haven, CT, USA\"\n                    col2))))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\")\n     (str.replace col2 \"New York\" \"New York, NY, USA\")\n     (ite (str.contains col2 \"CA\")\n          (str.++ col2 \", USA\")\n          col2))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"New York\")\n       (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")\n       (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\") col2 \n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"New York\")\n       (str.replace col2 \"New York\" \"NY\")\n       (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \", USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.prefixof \"New York\" col2)\n    (str.replace col2 \"New York\" \"NY\")\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.suffixof \", USA\" col2) col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col2 \"USA\")\n    col2\n    (str.++ col2 \", USA\")))\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(define-fun f ((col1 String) (col2 String)) String\n  (str.++ col2 \", USA\"))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York, New York, USA\") \"New York, NY, USA\" (ite (str.contains col2 \"Berkeley, CA\") \"Berkeley, CA, USA\" (ite (str.contains col2 \"New Haven, CT, USA\") \"New Haven, CT, USA\" (ite (str.contains col2 \"New Haven, CT\") \"New Haven, CT, USA\" col2))))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (ite (str.contains col2 \"CA\") (str.++ col2 \", USA\") col2))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \", USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.prefixof \"New York\" col2) (str.replace col2 \"New York\" \"NY\") (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"New York, NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        0,
        ", USA",
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ","
      ],
      [
        0,
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", USA",
        ","
      ],
      [
        0,
        ", USA",
        ","
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New Haven, CT",
        "Berkeley, CA, USA",
        "Berkeley, CA",
        "New York, New York, USA",
        "New York, NY, USA",
        "New Haven, CT, USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA",
        "CA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA",
        "New York, New York, USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      0,
      2,
      "Berkeley, CA, USA",
      "CA",
      ", ",
      "New York, New York, USA",
      "New York, NY, USA",
      "New Haven, CT, USA",
      "USA",
      "NY",
      ",",
      ", USA",
      "New York",
      "Berkeley, CA",
      "New Haven, CT"
    ],
    "time_diff_ms": 1206.845
  },
  "exceljet2.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0))\n        (end (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1))))\n    (if (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (ite (= dot-pos -1)\n         _arg_0\n         (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n           (ite (= last-dot-pos -1)\n                (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n                (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1)))\n              (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\")))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (let ((last-dot (str.indexof _arg_0 \".\" (+ start 1))))\n      (if (= last-dot -1)\n          (str.substr _arg_0 (+ start 1) (str.len _arg_0))\n          (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        \"\"\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```scheme\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" 0)))\n    (if (= last-dot -1)\n        _arg_0\n        (let ((second-last-dot (str.indexof _arg_0 \".\" (+ last-dot 1))))\n          (if (= second-last-dot -1)\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ second-last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        \"\"\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))\n              (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) last-dot-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1)))\n              (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) (+ last-dot-pos 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))))\n    (str.substr _arg_0 (+ 1 dot-pos) (str.len _arg_0))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n)\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        \"\"\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        \"\"\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((last-dot (str.indexof s \".\" (- (str.len s) 1))))\n    (str.substr s (+ last-dot 1) (- (str.len s) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" 0)))\n    (if (= last-dot -1)\n        _arg_0\n        (let ((second-last-dot (str.indexof _arg_0 \".\" (+ last-dot 1))))\n          (if (= second-last-dot -1)\n              (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ second-last-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" 0)))\n    (if (= last-dot -1)\n      \"\"\n      (let ((next-dot (str.indexof _arg_0 \".\" (+ last-dot 1))))\n        (if (= next-dot -1)\n          (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))\n          (str.substr _arg_0 (+ next-dot 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) (+ dotPos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (f (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1)))\n              (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) (+ last-dot-pos 1))))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))\n    (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ lastDotPos 1) (- (str.len _arg_0) (+ lastDotPos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0)) (end (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1)))) (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (ite (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (ite (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (let ((last-dot (str.indexof _arg_0 \".\" (+ start 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ start 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) \"\" (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" 0))) (if (= last-dot -1) _arg_0 (let ((second-last-dot (str.indexof _arg_0 \".\" (+ last-dot 1)))) (if (= second-last-dot -1) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)) (str.substr _arg_0 (+ second-last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) \"\" (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)) (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) last-dot-pos 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1))) (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) (+ last-dot-pos 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))) (str.substr _arg_0 (+ 1 dot-pos) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) last-dot 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) \"\" (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) \"\" (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((s String)) String (let ((last-dot (str.indexof s \".\" (- (str.len s) 1)))) (str.substr s (+ last-dot 1) (- (str.len s) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" 0))) (if (= last-dot -1) _arg_0 (let ((second-last-dot (str.indexof _arg_0 \".\" (+ last-dot 1)))) (if (= second-last-dot -1) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)) (str.substr _arg_0 (+ second-last-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" 0))) (if (= last-dot -1) \"\" (let ((next-dot (str.indexof _arg_0 \".\" (+ last-dot 1)))) (if (= next-dot -1) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)) (str.substr _arg_0 (+ next-dot 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) (+ dotPos 1))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (f (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.lastindexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) (+ dot-pos 1))) (str.substr _arg_0 (+ last-dot-pos 1) (- (str.len _arg_0) (+ last-dot-pos 1)))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ lastDotPos 1) (- (str.len _arg_0) (+ lastDotPos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))"
    ],
    "constants": [
      [
        ".",
        0,
        -1,
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        0,
        1,
        -1
      ],
      [
        ".",
        0,
        -1,
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1,
        0
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1,
        0
      ],
      [
        ".",
        1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        "",
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        "",
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        "",
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        "",
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        "",
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        0,
        1,
        ".",
        -1
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        ".",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      ".",
      -1
    ],
    "time_diff_ms": 999.715
  },
  "univ_6.sl": {
    "completions": [
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \", USA\" \"\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"USA\" \"\") \"USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace (str.replace col2 \"New York, New York\" \"New York, NY\") \"USA\" \"\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))) \", USA\")\n```",
      "```s\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \", USA\" \"\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"USA\" \"\") \"USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York, New York\" \"New York, NY\") \"USA\" \"\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") \", USA\")))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "USA",
        ""
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY, USA",
        ", USA",
        "New York, New York, USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "",
        "New York, New York",
        ", USA",
        "USA",
        "New York, NY"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA"
      ]
    ],
    "all_constants": [
      "",
      0,
      "New York, NY",
      "New York, New York, USA",
      "New York, NY, USA",
      "USA",
      "NY",
      ",",
      ", USA",
      "New York, New York",
      "New York"
    ],
    "time_diff_ms": 1399.923
  },
  "stackoverflow2.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"in \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (str.contains _arg_0 \"in\")\n         (str.substr _arg_0 0 space)\n         \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"in\")\n       (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n       \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \" in \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((substr (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))\n    (ite (str.contains substr \"in\") substr\n      (str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"in\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 0 (+ idx 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((contains-in (str.contains _arg_0 \"in\")))\n    (ite contains-in\n         (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n         (str.substr _arg_0 0 (str.len _arg_0)))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"in\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((substr \"in\"))\n    (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 substr 0) (str.len substr)) \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space \" \"))\n    (str.replace _arg_0 \" japan\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"in\" 0)))\n    (if (= idx -1)\n        \"\"\n        (str.substr _arg_0 0 (+ idx 2)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((target \"in\"))\n    (str.replace _arg_0 (str.++ target \" \") \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \" in \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"in\") \n       (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n       \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \" in \"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"in\")\n       (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n       \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.++ \n      (ite (str.contains (str.at words 0) \"in\") (str.at words 0) \"\") \n      (ite (str.contains (str.at words 1) \"in\") (str.++ \" \" (str.at words 1)) \"\") \n      (ite (str.contains (str.at words 2) \"in\") (str.++ \" \" (str.at words 2)) \"\"))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1)\n         (ite (str.contains _arg_0 \"in\") _arg_0 \"\")\n         (let ((first (str.substr _arg_0 0 idx))\n               (rest (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))\n           (str.++ (ite (str.contains first \"in\") first \"\") \" \" (f rest))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((substr \"in\"))\n    (str.replace _arg_0 (str.replace _arg_0 substr \"###\") (str.substr _arg_0 0 (str.indexof _arg_0 \"###\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (or (= space -1) (str.contains _arg_0 \"in\"))\n         _arg_0\n         (str.substr _arg_0 0 space))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((spacePos (str.indexof _arg_0 \" \" 0)))\n    (ite (= spacePos -1)\n         (ite (str.contains _arg_0 \"in\") _arg_0 \"\")\n         (let ((firstWord (str.substr _arg_0 0 spacePos)))\n           (ite (str.contains firstWord \"in\")\n                (str.++ firstWord \" \" (f (str.substr _arg_0 (+ spacePos 1) (- (str.len _arg_0) (+ spacePos 1)))))\n                (f (str.substr _arg_0 (+ spacePos 1) (- (str.len _arg_0) (+ spacePos 1)))))))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"in\") \n       (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n       \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \" in \"))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"in \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (str.contains _arg_0 \"in\") (str.substr _arg_0 0 space) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"in\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \" in \")))",
      "((define-fun f ((_arg_0 String)) String (let ((substr (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))) (ite (str.contains substr \"in\") substr (str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"in\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 0 (+ idx 2))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((contains-in (str.contains _arg_0 \"in\"))) (ite contains-in (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) (str.substr _arg_0 0 (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"in\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((substr \"in\")) (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 substr 0) (str.len substr)) \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space \" \")) (str.replace _arg_0 \" japan\" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"in\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 0 (+ idx 2))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((target \"in\")) (str.replace _arg_0 (str.++ target \" \") \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \" in \")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"in\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \" in \")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"in\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (str.++ (ite (str.contains (str.at words 0) \"in\") (str.at words 0) \"\") (ite (str.contains (str.at words 1) \"in\") (str.++ \" \" (str.at words 1)) \"\") (ite (str.contains (str.at words 2) \"in\") (str.++ \" \" (str.at words 2)) \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) (ite (str.contains _arg_0 \"in\") _arg_0 \"\") (let ((first (str.substr _arg_0 0 idx)) (rest (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))) (str.++ (ite (str.contains first \"in\") first \"\") \" \" (f rest)))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((substr \"in\")) (str.replace _arg_0 (str.replace _arg_0 substr \"###\") (str.substr _arg_0 0 (str.indexof _arg_0 \"###\" 0))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (or (= space -1) (str.contains _arg_0 \"in\")) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((spacePos (str.indexof _arg_0 \" \" 0))) (ite (= spacePos -1) (ite (str.contains _arg_0 \"in\") _arg_0 \"\") (let ((firstWord (str.substr _arg_0 0 spacePos))) (ite (str.contains firstWord \"in\") (str.++ firstWord \" \" (f (str.substr _arg_0 (+ spacePos 1) (- (str.len _arg_0) (+ spacePos 1))))) (f (str.substr _arg_0 (+ spacePos 1) (- (str.len _arg_0) (+ spacePos 1))))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"in\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \" in \")))"
    ],
    "constants": [
      [
        "",
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "in ",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "in",
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "in",
        "",
        " "
      ],
      [
        " in ",
        " "
      ],
      [
        0,
        "in",
        1,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        "",
        2,
        "in",
        -1
      ],
      [
        "",
        " japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "in",
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "in",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        "in",
        ""
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        " japan",
        " "
      ],
      [
        "",
        " japan"
      ],
      [
        0,
        "",
        2,
        "in",
        -1
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        "in",
        " "
      ],
      [
        "",
        " japan"
      ],
      [
        " in ",
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        " "
      ],
      [
        0,
        "in",
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        " in ",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        "in",
        "",
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        "",
        2,
        " ",
        "in"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        "",
        1,
        " ",
        "in",
        -1
      ],
      [
        "",
        " japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "###",
        "in",
        0
      ],
      [
        "",
        "japan"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "in",
        -1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "",
        1,
        " ",
        "in",
        -1
      ],
      [
        0,
        " "
      ],
      [
        0,
        "in",
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        " in ",
        " "
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      2,
      "in",
      " japan",
      " in ",
      "japan",
      "###",
      "in ",
      " ",
      -1
    ],
    "time_diff_ms": 775.961
  },
  "phone-6-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```(str.substr name 4 3)```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ],
    "time_diff_ms": 1069.536
  },
  "25239569.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```s-expression\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n    \"DRS\" \"Direct Response\") \n  \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_LDS\" \"_Leads\")\n    \"_DRS\" \"_Direct Response\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"LDS\" \"Leads\")\n    \"DRS\" \"Direct Response\"))\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n    \"DRS\" \"Direct Response\") \n  \"LDS\" \"Leads\"))\n```",
      "```lisp\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"_BRD\") (str.replace _arg_0 \"_BRD\" \"_Branding\") (ite (str.contains _arg_0 \"_DRS\") (str.replace _arg_0 \"_DRS\" \"_Direct Response\") (str.replace _arg_0 \"_LDS\" \"_Leads\")))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))"
    ],
    "constants": [
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "Branding",
        "Leads",
        "BRD",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Branding",
        "Direct Response",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Branding",
        "Direct Response",
        "Leads",
        "LDS"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "BRD",
        "DRS",
        "LDS",
        "Branding",
        "Direct Response",
        "Leads"
      ],
      [
        "_Direct Response",
        "_DRS",
        "_LDS",
        "_Branding",
        "_BRD",
        "_Leads"
      ]
    ],
    "all_constants": [
      "_DRS",
      "Leads",
      "Branding",
      "_LDS",
      "BRD",
      "_Branding",
      "_Leads",
      "DRS",
      "LDS",
      "_BRD",
      "Direct Response",
      "_Direct Response"
    ],
    "time_diff_ms": 783.382
  },
  "univ_5_short.sl": {
    "completions": [
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York\" \"NY\"))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```scheme\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \" New York\" \" NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \" New York\" \" NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))"
    ],
    "constants": [
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        0,
        ", NY, USA",
        ","
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        " NY",
        " New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ","
      ]
    ],
    "all_constants": [
      0,
      "New York, NY",
      "New York, New York",
      "NY",
      ",",
      " NY",
      ", USA",
      ", NY, USA",
      "New York",
      " New York"
    ],
    "time_diff_ms": 694.7929999999999
  },
  "remove-text-by-position.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 13 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```s-expression\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) 1)) 0)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))"
    ],
    "constants": [
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        3,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        3,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        3,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        13
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      "/",
      12,
      13
    ],
    "time_diff_ms": 1136.038
  },
  "univ_6-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.indexof col2 \",\" (+ 2 (str.indexof col2 \",\" 0))) (+ 2 (str.indexof col2 \",\" 0)))) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (str.indexof col2 \",\" 0) 3) \" USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(ite (str.contains col2 \"New York\")\n     (str.replace col2 \"New York\" \"NY, USA\")\n     (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(ite (str.suffixof \", USA\" col2)\n     col2\n     (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(ite (str.suffixof \", USA\" col2)\n     (str.replace col2 \"New York\" \"NY\")\n     (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.indexof col2 \",\" (+ 2 (str.indexof col2 \",\" 0))) (+ 2 (str.indexof col2 \",\" 0)))) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (str.indexof col2 \",\" 0) 3) \" USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY, USA\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) (str.replace col2 \"New York\" \"NY\") (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))"
    ],
    "constants": [
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        0,
        ", ",
        3,
        " USA",
        ","
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY, USA",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA"
      ]
    ],
    "all_constants": [
      0,
      2,
      3,
      ", ",
      "NY",
      "NY, USA",
      ",",
      ", USA",
      "New York",
      " USA"
    ],
    "time_diff_ms": 1335.537
  },
  "univ_4.sl": {
    "completions": [
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))\n```",
      "```s-expression\n(str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0)))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0)))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0)))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)\n```",
      "```lisp\n(ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(ite (str.contains col2 \", USA\")\n    (str.substr col2 0 (- (str.len col2) 5))\n    col2)\n```",
      "```lisp\n(ite (str.contains col2 \", USA\") (str.replace col2 \", USA\" \"\") col2)\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \", \" 0) (- (str.len col2) (str.indexof col2 \", \" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(ite (str.contains col2 \", USA\") (str.replace col2 \", USA\" \"\") col2)\n```",
      "```lisp\n(ite (str.contains col2 \"New York\")\n    (str.replace col2 \"New York, NY, USA\" \"New York, NY, USA\")\n    (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 col1 \"\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (let ((idx (str.indexof col2 \",\" 0)))\n    (str.substr col2 0 idx)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(ite (str.contains col2 \", USA\")\n    (str.substr col2 0 (- (str.len col2) 5))\n    col2)\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0) 2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0) 2)))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (str.indexof col2 \",\" 0)))\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0))))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0))))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 1 (str.indexof col2 \",\" 0))))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.replace col2 \", USA\" \"\") col2)))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \", \" 0) (- (str.len col2) (str.indexof col2 \", \" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.replace col2 \", USA\" \"\") col2)))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York, NY, USA\" \"New York, NY, USA\") (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 col1 \"\")))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (let ((idx (str.indexof col2 \",\" 0))) (str.substr col2 0 idx))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \", USA\") (str.substr col2 0 (- (str.len col2) 5)) col2)))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0) 2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0) 2))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \",\" 0) (- (str.len col2) (str.indexof col2 \",\" 0)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ", USA",
        5
      ],
      [
        0,
        ", USA",
        5
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ", USA",
        5
      ],
      [
        "",
        ", USA"
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ", "
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        "",
        ", USA"
      ],
      [
        0,
        "New York, NY, USA",
        "New York",
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        ""
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ", USA",
        5
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ",",
        2
      ],
      [
        0,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      5,
      ", ",
      "New York, NY, USA",
      ",",
      ", USA",
      "New York"
    ],
    "time_diff_ms": 1201.2060000000001
  },
  "phone-10-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 11)) \"-\" (str.substr name (- (str.len name) 4) 4))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 11)) \"-\" (str.substr name (- (str.len name) 4) 4))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) (str.++ \")\" (str.substr name 7 (str.len name)))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 7))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        16,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        16,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        8,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        ")",
        3,
        4,
        7,
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        10,
        "-",
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ],
      [
        0,
        3,
        4,
        7,
        ") ",
        "("
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      8,
      10,
      11,
      12,
      13,
      "-",
      "(",
      16,
      ") ",
      ")"
    ],
    "time_diff_ms": 1229.9859999999999
  },
  "univ_5.sl": {
    "completions": [
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\ncol2\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```lisp\n(str.replace col2 \"USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(col2)\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY, USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"New York, NY, USA\")\n```",
      "```scheme\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```scheme\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \" New York\" \" New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"USA\" \"\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \", USA\" \"\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York, New York\" \"New York, NY, USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```"
    ],
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (col2)))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York, USA\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \" New York\" \" New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))"
    ],
    "constants": [
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "USA",
        ""
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        2,
        ", "
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York, USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York, USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York, USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York, USA"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "New York, NY, USA",
        "New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        " New York",
        " New York, NY, USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        "",
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "USA",
        ""
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York"
      ],
      [
        "New York, NY",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        "New York, NY, USA",
        "New York, New York"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        0,
        ",",
        ", USA"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      "New York, NY",
      "New York, New York, USA",
      "New York, NY, USA",
      ", ",
      "USA",
      " New York, NY, USA",
      ",",
      ", USA",
      "New York, New York",
      "New York",
      " New York"
    ],
    "time_diff_ms": 1429.4830000000002
  },
  "stackoverflow1.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(if (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((s (str.replace _arg_0 \"Inc\" \"\"))\n        (s (str.replace s \"LLC\" \"\")))\n    (str.trim s)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((result (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))\n    (str.replace result \", LLC\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \" Inc\")\n    (str.replace _arg_0 \" Inc\" \"\")\n    (ite (str.contains _arg_0 \" Inc.\")\n      (str.replace _arg_0 \" Inc.\" \"\")\n      (str.replace _arg_0 \" Inc, LLC\" \"\"))))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```s-expression\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Inc.\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 5)) (ite (str.suffixof \" Inc, LLC\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 9)) _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```s-expression\n(ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Inc.\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 5)) (ite (str.suffixof \" Inc, LLC\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 9)) _arg_0)))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc.\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc.\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (if (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((s (str.replace _arg_0 \"Inc\" \"\")) (s (str.replace s \"LLC\" \"\"))) (str.trim s))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.trim (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((result (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))) (str.replace result \", LLC\" \"\"))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" Inc.\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \" Inc\") (str.replace _arg_0 \" Inc\" \"\") (ite (str.contains _arg_0 \" Inc.\") (str.replace _arg_0 \" Inc.\" \"\") (str.replace _arg_0 \" Inc, LLC\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Inc.\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 5)) (ite (str.suffixof \" Inc, LLC\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 9)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) (ite (str.suffixof \" Inc.\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 5)) (ite (str.suffixof \" Inc, LLC\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 9)) _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc\" \"\") \"LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"Inc.\" \"\") \"Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))"
    ],
    "constants": [
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        0,
        4,
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc, LLC",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        0,
        4,
        5,
        9,
        " Inc",
        " Inc.",
        " Inc, LLC"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        0,
        4,
        5,
        9,
        " Inc",
        " Inc.",
        " Inc, LLC"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        "LLC",
        "Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc."
      ],
      [
        "",
        " Inc."
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        "Inc",
        "Inc."
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ]
    ],
    "all_constants": [
      "",
      0,
      ", LLC",
      4,
      " Inc",
      5,
      "Inc.",
      9,
      " Inc, LLC",
      "Inc",
      "LLC",
      " Inc.",
      " LLC"
    ],
    "time_diff_ms": 336.267
  },
  "exceljet1.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (let ((at-pos (str.indexof _arg_1 \"_\" 0)))\n    (str.substr _arg_1 (+ at-pos 1) (- (str.len _arg_1) (+ at-pos 1)))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (str.len _arg_1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 String) String\n  (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0)))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (let ((start (str.indexof _arg_1 \"_\" 0)))\n    (str.substr _arg_1 (+ start 1) (- (str.len _arg_1) (+ start 1)))))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0)))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```"
    ],
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (let ((at-pos (str.indexof _arg_1 \"_\" 0))) (str.substr _arg_1 (+ at-pos 1) (- (str.len _arg_1) (+ at-pos 1))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (str.len _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (let ((start (str.indexof _arg_1 \"_\" 0))) (str.substr _arg_1 (+ start 1) (- (str.len _arg_1) (+ start 1))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\") 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ],
    "time_diff_ms": 895.9680000000001
  },
  "initials-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (let ((firstInitial (str.at name 0))\n        (lastInitial (str.at name (+ 1 (str.indexof name \" \" 0)))))\n    (str.++ firstInitial \".\" lastInitial \".\")))\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```s-expression\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name \n      (+ 1 (str.indexof name \" \" 0))) \n    \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name (+ 1 (str.indexof name \" \" 0)))\n    \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name (+ 1 (str.indexof name \" \" 0))) \n    \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n)\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((first (str.at name 0))\n        (last (str.at name (+ 1 (str.indexof name \" \" 0)))))\n    (str.++ first \".\" last \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((first (str.at name 0))\n        (last (str.at name (+ 1 (str.indexof name \" \" 0)))))\n    (str.++ first \".\" last \".\")))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((first-initial (str.at name 0))\n        (last-initial (str.at name (+ 1 (str.indexof name \" \" 0)))))\n    (str.++ first-initial \".\" last-initial \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```"
    ],
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (let ((firstInitial (str.at name 0)) (lastInitial (str.at name (+ 1 (str.indexof name \" \" 0))))) (str.++ firstInitial \".\" lastInitial \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f ((name String)) String (let ((first (str.at name 0)) (last (str.at name (+ 1 (str.indexof name \" \" 0))))) (str.++ first \".\" last \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (let ((first (str.at name 0)) (last (str.at name (+ 1 (str.indexof name \" \" 0))))) (str.++ first \".\" last \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f ((name String)) String (let ((first-initial (str.at name 0)) (last-initial (str.at name (+ 1 (str.indexof name \" \" 0))))) (str.++ first-initial \".\" last-initial \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) 0) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 780.2070000000001
  },
  "find-nth-occurrence-of-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((n (str.indexof _arg_0 \",\" 0)))\n    (if (<= _arg_1 1)\n      n\n      (f (str.substr _arg_0 (+ n 1) (- (str.len _arg_0) (+ n 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) \n    (+ 1 (str.indexof _arg_0 \",\" 0)) \n    (+ 1 (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0))))\n  (+ 1 (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (if (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) (str.indexof _arg_0 \",\" 0) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0))))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n          (+ pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (ite (<= n 0) -1\n    (let ((pos (str.indexof s \",\" 0)))\n      (ite (= pos -1) -1\n        (let loop ((i 1) (p pos))\n          (ite (= i n) p\n            (let ((next (str.indexof s \",\" (+ p 1))))\n              (ite (= next -1) -1\n                (loop (+ i 1) next)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (ite (= _arg_1 1) 0 \n      (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (ite (= _arg_1 1) 0 \n      (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) 1)) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (f _arg_0 (- _arg_1 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (ite (= _arg_1 1) 0 \n        (str.indexof _arg_0 \",\" \n          (ite (= _arg_1 2) 0 \n            (str.indexof _arg_0 \",\" \n              (ite (= _arg_1 3) 0 -1) 1)) 1)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n)\n                    (let ((pos (str.indexof s \",\" 0)))\n                      (if (<= n 1)\n                          pos\n                          (str.indexof s \",\" (+ pos 1)))))))\n    (find-nth _arg_0 _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) \n      (+ 1 (ite (= _arg_1 1) 0 1))) \n    (+ 1 (ite (= _arg_1 2) 0 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n)\n                    (let ((pos (str.indexof s \",\" 0)))\n                      (if (= n 1)\n                          pos\n                          (find-nth (str.substr s (+ pos 1) (- (str.len s) (+ pos 1))) (- n 1)))))))\n    (+ (find-nth _arg_0 _arg_1) 1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (if (= _arg_1 1) 0 \n      (+ 1 (str.indexof _arg_0 \",\" (f _arg_0 (- _arg_1 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next -1)\n              -1\n              (+ pos 1 next))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" (+ 1 \n      (str.indexof _arg_0 \",\" (+ 1 \n        (str.indexof _arg_0 \",\" (+ 1 \n          (str.indexof _arg_0 \",\" 0)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n        (ite (= _arg_1 2) next-pos\n          (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((index (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         index\n         (let ((next (f (str.substr _arg_0 (+ index 1) (- (str.len _arg_0) (+ index 1))) (- _arg_1 1))))\n           (ite (= next -1) -1 (+ index 1 next))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f _arg_0 (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (if (= _arg_1 1) 0 \n      (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))\n        (ite (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((find-nth (lambda (s ch n)\n    (let ((len (str.len s)))\n      (let loop ((i 0) (count 0))\n        (if (>= i len)\n            -1\n            (if (and (= (str.at s i) ch) (= count (- n 1)))\n                i\n                (loop (+ i 1) (if (= (str.at s i) ch) (+ count 1) count)))))))))\n    (find-nth s \",\" n)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n           (+ pos 1 next-pos)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((findNth (lambda ((s String) (c String) (n Int) (i Int)) Int\n                  (if (= n 0) i\n                      (let ((idx (str.indexof s c i)))\n                        (if (= idx -1) -1\n                            (findNth s c (- n 1) (+ idx 1))))))))\n    (findNth _arg_0 \",\" _arg_1 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n i)\n                    (if (<= n 0)\n                        -1\n                        (let ((pos (str.indexof s \",\" i)))\n                          (if (or (= pos -1) (= n 1))\n                              pos\n                              (find-nth s (- n 1) (+ pos 1))))))))\n    (find-nth _arg_0 _arg_1 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((char \",\"))\n    (let ((pos (str.indexof _arg_0 char 0)))\n      (ite (= _arg_1 1) pos\n        (let ((next-pos (str.indexof _arg_0 char (+ pos 1))))\n          (ite (= _arg_1 2) next-pos\n            (str.indexof _arg_0 char (+ next-pos 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n           (ite (= _arg_1 2)\n                next-pos\n                (+ next-pos 15))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((target \",\"))\n    (let ((pos (str.indexof _arg_0 target 0)))\n      (let ((count 0))\n        (let rec ((pos pos) (count count))\n          (if (= count _arg_1)\n              pos\n              (rec (str.indexof _arg_0 target (+ pos 1)) (+ count 1))))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) \n    (+ 1 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) 1 (ite (= _arg_1 3) 2 0)))))\n  (+ 1 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) 1 (ite (= _arg_1 3) 2 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) (+ 1 (ite (= _arg_1 1) 0 \n        (str.indexof _arg_0 \",\" \n          (str.indexof _arg_0 \",\" \n            (str.indexof _arg_0 \",\" 0) (+ 1 \n              (ite (= _arg_1 2) 0 \n                (str.indexof _arg_0 \",\" \n                  (str.indexof _arg_0 \",\" \n                    (str.indexof _arg_0 \",\" 0) (+ 1 \n                      (ite (= _arg_1 3) 0 0)))))))))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda ((s String) (ch String) (n Int))\n                    (let ((pos (str.indexof s ch 0)))\n                      (if (<= n 0) -1\n                        (if (= n 1) pos\n                          (let ((next-pos (find-nth (str.substr s (+ pos 1) (str.len s)) ch (- n 1))))\n                            (if (= next-pos -1) -1 (+ pos 1 next-pos)))))))))\n    (find-nth _arg_0 \",\" _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((helper (lambda ((s String) (c Int) (pos Int)) Int\n                  (ite (= c 0) pos\n                       (let ((next-pos (str.indexof s \",\" (+ pos 1))))\n                         (ite (= next-pos -1) -1\n                              (helper s (- c 1) next-pos)))))))\n    (helper _arg_0 _arg_1 -1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \",\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \",\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (ite (= _arg_1 1) 0 \n        (+ 1 (str.indexof _arg_0 \",\" \n          (ite (= _arg_1 2) (+ 1 (str.indexof _arg_0 \",\" 0)) \n            (+ 1 (str.indexof _arg_0 \",\" \n              (+ 1 (str.indexof _arg_0 \",\" 0)))))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s ch n)\n    (let loop ((i 0) (count 0))\n      (if (>= count n) i\n        (let ((idx (str.indexof s ch i)))\n          (if (= idx -1) -1 (loop (+ idx 1) (+ count 1))))))))\n    (find-nth _arg_0 \",\" _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda ((s String) (ch String) (n Int))\n                   (let ((helper (lambda ((s String) (ch String) (n Int) (i Int))\n                                   (if (= n 0) i\n                                     (let ((pos (str.indexof s ch i)))\n                                       (if (= pos -1) -1\n                                         (helper s ch (- n 1) (+ pos 1))))))))\n                     (helper s ch n 0)))))\n    (find-nth _arg_0 \",\" _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth\n         (lambda (s n)\n           (if (<= n 0) -1\n               (let loop ((s s) (n n) (idx 0))\n                 (let ((pos (str.indexof s \",\" idx)))\n                   (if (or (= pos -1) (= n 1)) pos\n                       (loop s (- n 1) (+ pos 1)))))))))\n    (+ 1 (find-nth _arg_0 _arg_1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n)\n    (let loop ((s s) (n n) (i 0))\n      (if (or (= n 0) (= (str.len s) 0))\n          -1\n          (let ((idx (str.indexof s \",\" 0)))\n            (if (= idx -1)\n                -1\n                (if (= n 1)\n                    (+ i idx)\n                    (loop (str.substr s (+ idx 1) (- (str.len s) (+ idx 1))) (- n 1) (+ i (+ idx 1))))))))))\n    (find-nth _arg_0 _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((idx (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        idx\n        (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((nth (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        nth\n        (f (str.substr _arg_0 (+ nth 1) (- (str.len _arg_0) (+ nth 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda ((s String) (ch String) (n Int) (start Int)) Int\n                    (ite (= n 0)\n                         start\n                         (let ((idx (str.indexof s ch start)))\n                           (ite (= idx -1)\n                                -1\n                                (find-nth s ch (- n 1) (+ idx 1))))))))\n    (find-nth _arg_0 \",\" _arg_1 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (+ pos 1 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) (+ 1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n          (if (= _arg_1 2)\n              next-pos\n              (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))\n          (if (= next-pos -1)\n              -1\n              (+ pos 1 next-pos))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((pos (str.indexof s \",\" 0)))\n    (if (= n 1)\n        pos\n        (f (str.substr s (+ pos 1) (- (str.len s) pos 1)) (- n 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((len (str.len _arg_0)))\n    (let ((find-nth (lambda ((s String) (n Int) (i Int)) Int\n                      (if (<= n 0)\n                          -1\n                          (let ((idx (str.indexof s \",\" i)))\n                            (if (= idx -1)\n                                -1\n                                (if (= n 1)\n                                    idx\n                                    (find-nth s (- n 1) (+ idx 1)))))))))\n      (find-nth _arg_0 _arg_1 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 3) 0 1))))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (ite (= _arg_1 1) 0 \n        (+ 1 (str.indexof _arg_0 \",\" \n          (ite (= _arg_1 2) \n            (+ 1 (str.indexof _arg_0 \",\" 0)) \n            (+ 1 (str.indexof _arg_0 \",\" \n              (+ 1 (str.indexof _arg_0 \",\" 0)))))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (ite (= _arg_1 1)\n         pos\n         (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1))))\n           (ite (= _arg_1 2)\n                next-pos\n                (str.indexof _arg_0 \",\" (+ next-pos 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((helper (lambda ((s String) (ch String) (n Int) (pos Int)) Int\n                  (ite (<= n 0) pos\n                       (let ((idx (str.indexof s ch pos)))\n                         (ite (= idx -1) -1\n                              (helper s ch (- n 1) (+ idx 1))))))))\n    (helper _arg_0 \",\" _arg_1 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((n (str.indexof _arg_0 \",\" 0))) (if (<= _arg_1 1) n (f (str.substr _arg_0 (+ n 1) (- (str.len _arg_0) (+ n 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (if (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) (str.indexof _arg_0 \",\" 0) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (+ pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((s String) (n Int)) Int (ite (<= n 0) -1 (let ((pos (str.indexof s \",\" 0))) (ite (= pos -1) -1 (let loop ((i 1) (p pos)) (ite (= i n) p (let ((next (str.indexof s \",\" (+ p 1)))) (ite (= next -1) -1 (loop (+ i 1) next))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (str.len _arg_0)) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) 1)) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (f _arg_0 (- _arg_1 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) 0 (str.indexof _arg_0 \",\" (ite (= _arg_1 3) 0 -1) 1)) 1)) 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n) (let ((pos (str.indexof s \",\" 0))) (if (<= n 1) pos (str.indexof s \",\" (+ pos 1))))))) (find-nth _arg_0 _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0) (+ 1 (ite (= _arg_1 1) 0 1))) (+ 1 (ite (= _arg_1 2) 0 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n) (let ((pos (str.indexof s \",\" 0))) (if (= n 1) pos (find-nth (str.substr s (+ pos 1) (- (str.len s) (+ pos 1))) (- n 1))))))) (+ (find-nth _arg_0 _arg_1) 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (if (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (f _arg_0 (- _arg_1 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((index (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) index (let ((next (f (str.substr _arg_0 (+ index 1) (- (str.len _arg_0) (+ index 1))) (- _arg_1 1)))) (ite (= next -1) -1 (+ index 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f _arg_0 (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (if (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))) (ite (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((s String) (n Int)) Int (let ((find-nth (lambda (s ch n) (let ((len (str.len s))) (let loop ((i 0) (count 0)) (if (>= i len) -1 (if (and (= (str.at s i) ch) (= count (- n 1))) i (loop (+ i 1) (if (= (str.at s i) ch) (+ count 1) count))))))))) (find-nth s \",\" n))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (+ pos 1 next-pos))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((findNth (lambda ((s String) (c String) (n Int) (i Int)) Int (if (= n 0) i (let ((idx (str.indexof s c i))) (if (= idx -1) -1 (findNth s c (- n 1) (+ idx 1)))))))) (findNth _arg_0 \",\" _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n i) (if (<= n 0) -1 (let ((pos (str.indexof s \",\" i))) (if (or (= pos -1) (= n 1)) pos (find-nth s (- n 1) (+ pos 1)))))))) (find-nth _arg_0 _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((char \",\")) (let ((pos (str.indexof _arg_0 char 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 char (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 char (+ next-pos 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (+ next-pos 15)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((target \",\")) (let ((pos (str.indexof _arg_0 target 0))) (let ((count 0)) (let rec ((pos pos) (count count)) (if (= count _arg_1) pos (rec (str.indexof _arg_0 target (+ pos 1)) (+ count 1)))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0) (+ 1 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) 1 (ite (= _arg_1 3) 2 0))))) (+ 1 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) 1 (ite (= _arg_1 3) 2 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      null,
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda ((s String) (ch String) (n Int)) (let ((pos (str.indexof s ch 0))) (if (<= n 0) -1 (if (= n 1) pos (let ((next-pos (find-nth (str.substr s (+ pos 1) (str.len s)) ch (- n 1)))) (if (= next-pos -1) -1 (+ pos 1 next-pos))))))))) (find-nth _arg_0 \",\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((helper (lambda ((s String) (c Int) (pos Int)) Int (ite (= c 0) pos (let ((next-pos (str.indexof s \",\" (+ pos 1)))) (ite (= next-pos -1) -1 (helper s (- c 1) next-pos))))))) (helper _arg_0 _arg_1 -1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \",\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) (+ 1 (str.indexof _arg_0 \",\" 0)) (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s ch n) (let loop ((i 0) (count 0)) (if (>= count n) i (let ((idx (str.indexof s ch i))) (if (= idx -1) -1 (loop (+ idx 1) (+ count 1)))))))) (find-nth _arg_0 \",\" _arg_1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda ((s String) (ch String) (n Int)) (let ((helper (lambda ((s String) (ch String) (n Int) (i Int)) (if (= n 0) i (let ((pos (str.indexof s ch i))) (if (= pos -1) -1 (helper s ch (- n 1) (+ pos 1)))))))) (helper s ch n 0))))) (find-nth _arg_0 \",\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n) (if (<= n 0) -1 (let loop ((s s) (n n) (idx 0)) (let ((pos (str.indexof s \",\" idx))) (if (or (= pos -1) (= n 1)) pos (loop s (- n 1) (+ pos 1))))))))) (+ 1 (find-nth _arg_0 _arg_1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n) (let loop ((s s) (n n) (i 0)) (if (or (= n 0) (= (str.len s) 0)) -1 (let ((idx (str.indexof s \",\" 0))) (if (= idx -1) -1 (if (= n 1) (+ i idx) (loop (str.substr s (+ idx 1) (- (str.len s) (+ idx 1))) (- n 1) (+ i (+ idx 1)))))))))) (find-nth _arg_0 _arg_1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((idx (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) idx (f (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((nth (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) nth (f (str.substr _arg_0 (+ nth 1) (- (str.len _arg_0) (+ nth 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda ((s String) (ch String) (n Int) (start Int)) Int (ite (= n 0) start (let ((idx (str.indexof s ch start))) (ite (= idx -1) -1 (find-nth s ch (- n 1) (+ idx 1)))))))) (find-nth _arg_0 \",\" _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (+ pos 1 (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0) (+ 1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (if (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (let ((next-pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))) (if (= next-pos -1) -1 (+ pos 1 next-pos)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f ((s String) (n Int)) Int (let ((pos (str.indexof s \",\" 0))) (if (= n 1) pos (f (str.substr s (+ pos 1) (- (str.len s) pos 1)) (- n 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((len (str.len _arg_0))) (let ((find-nth (lambda ((s String) (n Int) (i Int)) Int (if (<= n 0) -1 (let ((idx (str.indexof s \",\" i))) (if (= idx -1) -1 (if (= n 1) idx (find-nth s (- n 1) (+ idx 1))))))))) (find-nth _arg_0 _arg_1 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 3) 0 1)))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (str.indexof _arg_0 \",\" (ite (= _arg_1 2) (+ 1 (str.indexof _arg_0 \",\" 0)) (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (ite (= _arg_1 1) pos (let ((next-pos (str.indexof _arg_0 \",\" (+ pos 1)))) (ite (= _arg_1 2) next-pos (str.indexof _arg_0 \",\" (+ next-pos 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((helper (lambda ((s String) (ch String) (n Int) (pos Int)) Int (ite (<= n 0) pos (let ((idx (str.indexof s ch pos))) (ite (= idx -1) -1 (helper s ch (- n 1) (+ idx 1)))))))) (helper _arg_0 \",\" _arg_1 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        2,
        3,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        2,
        15,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        2,
        3,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      null,
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        1,
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        -1,
        1
      ],
      [
        0,
        1,
        2,
        3,
        ","
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        ",",
        2,
        1
      ],
      [
        0,
        1,
        ",",
        -1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ],
      [
        0,
        ",",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      15,
      ",",
      -1
    ],
    "time_diff_ms": 1048.907
  },
  "extract-word-containing-specific-text.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((start (str.indexof _arg_0 \"_\" 0)) \n        (end (str.indexof _arg_0 \".\" start))) \n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((at (str.indexof _arg_0 \".com\" 0)))\n    (if (= at -1)\n      \"\"\n      (let ((start (str.lastindexof (str.substr _arg_0 0 at) \" \")))\n        (str.substr _arg_0 (+ start 1) (- (+ at 4) start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (ite (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (ite (= end -1) (str.substr _arg_0 (str.lastindexof _arg_0 \" \" start) (str.len _arg_0))\n          (str.substr _arg_0 (str.lastindexof _arg_0 \" \" start) (- end (str.lastindexof _arg_0 \" \" start))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \".com\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.rindexof _arg_0 \" \" idx)))\n          (if (= start -1)\n              (str.substr _arg_0 0 (+ idx 4))\n              (str.substr _arg_0 (+ start 1) (+ (- idx start) 4)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.substr _arg_0 idx (str.len _arg_0))))\n          (let ((end (str.indexof start \" \" 0)))\n            (if (= end -1)\n                start\n                (str.substr start 0 end)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((index (str.indexof _arg_0 \".com\" 0)))\n    (if (= index -1)\n        \"\"\n        (let ((start (str.lastindexof _arg_0 \" \" index)))\n          (if (= start -1)\n              (str.substr _arg_0 0 (+ index 4))\n              (str.substr _arg_0 (+ start 1) (- (+ index 4) (+ start 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.substr _arg_0 idx (- (str.len _arg_0) idx))))\n          (str.substr start 0 (str.indexof start \" \" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))\n    (if (= start -1) \"\"\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n            (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \".\" start)))\n      (str.substr _arg_0 start (+ (- end start) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".com\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 4))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \".com\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.rindexof _arg_0 \" \" idx)))\n          (if (= start -1)\n              (str.substr _arg_0 0 (+ idx 4))\n              (str.substr _arg_0 (+ start 1) (+ (- idx start) 4)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1) \"\" \n        (let ((start (str.substr _arg_0 0 idx))\n              (rest (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))\n          (str.++ start \"_\" (str.substr rest 0 (str.indexof rest \".\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" start)))\n    (if (= start -1)\n      \"\"\n      (if (= end -1)\n        (str.substr _arg_0 start (str.len _arg_0))\n        (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))\n    (if (= start -1) \"\"\n      (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start))\n        (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1) \"\" \n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" start)))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 start (- (str.len _arg_0) start))\n            (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.substr _arg_0 idx (str.len _arg_0))))\n          (str.substr start 0 (str.indexof start \" \" 0))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n    (str.indexof _arg_0 \"@.\" 0)\n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@.\" 0) (str.len _arg_0)) \" \" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \" \" start)))\n      (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.indexof _arg_0 \" \" idx)))\n          (if (= start -1)\n              (str.substr _arg_0 idx (str.len _arg_0))\n              (str.substr _arg_0 idx (- start idx)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (< idx 0)\n        \"\"\n        (let ((start (str.substr _arg_0 (str.rindexof _arg_0 \" \" idx) (- idx (str.rindexof _arg_0 \" \" idx))))\n              (end (str.substr _arg_0 idx (- (str.indexof _arg_0 \" \" idx) idx))))\n          (str.++ start \"_\" end)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \"_\" 0) -1)) \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \".\" start)))\n      (str.substr _arg_0 start (+ (- end start) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" (str.indexof _arg_0 \"_\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (str.substr _arg_0 start (str.indexof _arg_0 \" \" start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (ite (= idx -1) \"\" \n      (let ((start (str.indexof _arg_0 \" \" (- idx 1))))\n        (let ((end (str.indexof _arg_0 \" \" (+ idx 1))))\n          (ite (= end -1) \n            (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1))\n            (str.substr _arg_0 (+ start 1) (- end start 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))\n    (if (= start -1) \"\"\n      (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n        (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))))\n          (str.substr start (str.indexof start \"_\" 0) (str.indexof start \".\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.substr _arg_0 idx (str.len _arg_0))))\n          (let ((end (str.indexof start \" \" 0)))\n            (if (= end -1)\n                start\n                (str.substr start 0 end)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" start)))\n    (if (= end -1)\n        (str.substr _arg_0 start (str.len _arg_0))\n        (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" start)))\n    (if (and (>= start 0) (>= end 0))\n        (str.substr _arg_0 start (- end start))\n        (str.substr _arg_0 start (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \".\" start)))\n      (str.substr _arg_0 start (+ (- end start) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"@\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.rindexof _arg_0 \" \" idx))\n              (end (str.indexof _arg_0 \" \" idx)))\n          (if (= start -1) (str.substr _arg_0 0 end)\n              (if (= end -1) (str.substr _arg_0 (+ start 1) (str.len _arg_0))\n                  (str.substr _arg_0 (+ start 1) (- end start 1))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((at (str.indexof _arg_0 \"_\" 0)))\n    (if (= at -1)\n        \"\"\n        (let ((start (str.indexof _arg_0 \" \" at)))\n          (if (= start -1)\n              (str.substr _arg_0 at (str.len _arg_0))\n              (str.substr _arg_0 at (- start at)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((i (str.indexof _arg_0 \"_\" 0)))\n    (ite (>= i 0)\n         (let ((start (str.indexof _arg_0 \" \" 0))\n               (end (str.indexof _arg_0 \" \" (+ i 1))))\n           (str.substr _arg_0 (ite (>= start 0) (+ start 1) 0) (ite (>= end 0) (- end start 1) (str.len _arg_0))))\n         \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- end (str.indexof _arg_0 \" \" 0))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0))\n        (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0))))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 start (str.len _arg_0))\n            (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (- (str.len _arg_0) start))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"@\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((start (str.rindexof _arg_0 \" \" idx))\n              (end (str.indexof _arg_0 \" \" (+ idx 1))))\n          (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \" \" start)))\n      (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot (str.indexof _arg_0 \".\" 0)))\n    (let ((start (str.indexof _arg_0 \" \" (- dot 1))))\n      (str.substr _arg_0 (+ start 1) (- dot start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 1)\n          (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \"_\" 0) 1))\n          \".com\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (str.substr _arg_0 start (str.indexof _arg_0 \".\" start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" \"\"))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"_\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (str.substr _arg_0 (str.indexof _arg_0 \".\" start) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \" \" start)))\n    (if (= start -1)\n        \"\"\n        (if (= end -1)\n            (str.substr _arg_0 start (- (str.len _arg_0) start))\n            (str.substr _arg_0 start (- end start))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((index (str.indexof _arg_0 \"@\" 0)))\n    (if (= index -1)\n        \"\"\n        (let ((start (str.rindexof _arg_0 \" \" index))\n              (end (str.indexof _arg_0 \" \" index)))\n          (if (= start -1) (str.substr _arg_0 0 end)\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))))\n```",
      "```lisp\n  (str.at (str.replace _arg_0 \" \" \" \") (str.indexof _arg_0 \"_\" 0))\n)\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1) \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1) (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (let ((end (str.indexof _arg_0 \".\" start)))\n      (str.substr _arg_0 start (+ (- end start) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- start 1))))\n              (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- end (str.indexof _arg_0 \" \" (- start 1)))))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"_\")\n    (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))\n    \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"_\") \".\" \"_\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \"_\" 0) \n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.replace _arg_0 \" \" \"_\")\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((at (str.indexof _arg_0 \".com\" 0))) (if (= at -1) \"\" (let ((start (str.lastindexof (str.substr _arg_0 0 at) \" \"))) (str.substr _arg_0 (+ start 1) (- (+ at 4) start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 (str.lastindexof _arg_0 \" \" start) (str.len _arg_0)) (str.substr _arg_0 (str.lastindexof _arg_0 \" \" start) (- end (str.lastindexof _arg_0 \" \" start)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \".com\" 0))) (if (= idx -1) \"\" (let ((start (str.rindexof _arg_0 \" \" idx))) (if (= start -1) (str.substr _arg_0 0 (+ idx 4)) (str.substr _arg_0 (+ start 1) (+ (- idx start) 4))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 idx (str.len _arg_0)))) (let ((end (str.indexof start \" \" 0))) (if (= end -1) start (str.substr start 0 end))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((index (str.indexof _arg_0 \".com\" 0))) (if (= index -1) \"\" (let ((start (str.lastindexof _arg_0 \" \" index))) (if (= start -1) (str.substr _arg_0 0 (+ index 4)) (str.substr _arg_0 (+ start 1) (- (+ index 4) (+ start 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 idx (- (str.len _arg_0) idx)))) (str.substr start 0 (str.indexof start \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".com\" 0))) (str.substr _arg_0 start (+ (- end start) 4)))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \".com\" 0))) (if (= idx -1) \"\" (let ((start (str.rindexof _arg_0 \" \" idx))) (if (= start -1) (str.substr _arg_0 0 (+ idx 4)) (str.substr _arg_0 (+ start 1) (+ (- idx start) 4))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 0 idx)) (rest (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))) (str.++ start \"_\" (str.substr rest 0 (str.indexof rest \".\" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" start))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" start))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 idx (str.len _arg_0)))) (str.substr start 0 (str.indexof start \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"@.\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@.\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.indexof _arg_0 \" \" idx))) (if (= start -1) (str.substr _arg_0 idx (str.len _arg_0)) (str.substr _arg_0 idx (- start idx))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (< idx 0) \"\" (let ((start (str.substr _arg_0 (str.rindexof _arg_0 \" \" idx) (- idx (str.rindexof _arg_0 \" \" idx)))) (end (str.substr _arg_0 idx (- (str.indexof _arg_0 \" \" idx) idx)))) (str.++ start \"_\" end))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \"_\" 0) -1)) \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \".\" (str.indexof _arg_0 \"_\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (str.substr _arg_0 start (str.indexof _arg_0 \" \" start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (ite (= idx -1) \"\" (let ((start (str.indexof _arg_0 \" \" (- idx 1)))) (let ((end (str.indexof _arg_0 \" \" (+ idx 1)))) (ite (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) start 1)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))) (str.substr start (str.indexof start \"_\" 0) (str.indexof start \".\" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((start (str.substr _arg_0 idx (str.len _arg_0)))) (let ((end (str.indexof start \" \" 0))) (if (= end -1) start (str.substr start 0 end))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" start))) (if (and (>= start 0) (>= end 0)) (str.substr _arg_0 start (- end start)) (str.substr _arg_0 start (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"@\" 0))) (if (= idx -1) \"\" (let ((start (str.rindexof _arg_0 \" \" idx)) (end (str.indexof _arg_0 \" \" idx))) (if (= start -1) (str.substr _arg_0 0 end) (if (= end -1) (str.substr _arg_0 (+ start 1) (str.len _arg_0)) (str.substr _arg_0 (+ start 1) (- end start 1)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((at (str.indexof _arg_0 \"_\" 0))) (if (= at -1) \"\" (let ((start (str.indexof _arg_0 \" \" at))) (if (= start -1) (str.substr _arg_0 at (str.len _arg_0)) (str.substr _arg_0 at (- start at))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((i (str.indexof _arg_0 \"_\" 0))) (ite (>= i 0) (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ i 1)))) (str.substr _arg_0 (ite (>= start 0) (+ start 1) 0) (ite (>= end 0) (- end start 1) (str.len _arg_0)))) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- end (str.indexof _arg_0 \" \" 0)))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0)) (end (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"@\" 0))) (if (= idx -1) \"\" (let ((start (str.rindexof _arg_0 \" \" idx)) (end (str.indexof _arg_0 \" \" (+ idx 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot (str.indexof _arg_0 \".\" 0))) (let ((start (str.indexof _arg_0 \" \" (- dot 1)))) (str.substr _arg_0 (+ start 1) (- dot start))))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.indexof _arg_0 \".\" 0) (str.indexof _arg_0 \"_\" 0) 1)) \".com\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (str.substr _arg_0 start (str.indexof _arg_0 \".\" start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"_\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (str.substr _arg_0 (str.indexof _arg_0 \".\" start) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \".\" start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \" \" start))) (if (= start -1) \"\" (if (= end -1) (str.substr _arg_0 start (- (str.len _arg_0) start)) (str.substr _arg_0 start (- end start)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((index (str.indexof _arg_0 \"@\" 0))) (if (= index -1) \"\" (let ((start (str.rindexof _arg_0 \" \" index)) (end (str.indexof _arg_0 \" \" index))) (if (= start -1) (str.substr _arg_0 0 end) (str.substr _arg_0 (+ start 1) (- end start 1))))))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \" \") (str.indexof _arg_0 \"_\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (let ((end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- start 1)))) (str.substr _arg_0 (str.indexof _arg_0 \" \" (- start 1)) (- end (str.indexof _arg_0 \" \" (- start 1))))))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"_\") (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"_\") \".\" \"_\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"_\")))"
    ],
    "constants": [
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "",
        " ",
        "@",
        -1
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        1,
        4,
        ".com",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        4,
        ".com",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        4,
        ".com",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        ".com",
        4,
        "_"
      ],
      [
        0,
        "",
        1,
        4,
        ".com",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "_",
        ".",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "@.",
        " "
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        ".",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        1,
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        ".",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "@"
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        1,
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        1,
        "",
        "_",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        -1,
        "_",
        " "
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        1,
        ".",
        " "
      ],
      [
        0,
        1,
        "_",
        ".",
        ".com"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        ".",
        "_"
      ],
      [
        0,
        "",
        "@",
        " "
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        "_",
        " "
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        ".",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        1,
        "@",
        " ",
        -1
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "_",
        " ",
        -1
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "",
        1,
        "@",
        " ",
        -1
      ],
      [
        0,
        "",
        "_"
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        ".",
        "_",
        " "
      ],
      [
        0,
        1,
        ".",
        "_"
      ],
      [
        0,
        "_",
        " "
      ],
      [
        0,
        "",
        "@",
        " ",
        -1
      ],
      [
        "_",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      4,
      "@.",
      ".com",
      "@",
      " ",
      ".",
      -1,
      "_"
    ],
    "time_diff_ms": 1015.144
  },
  "extract-nth-word-from-text-string.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"  \")) \" \") \" \") _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\"\n         (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\"\n         (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (nth 1 (str.split _arg_0 \" \") _arg_1)\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at (str.++ (str.++ \" \" (nth words n)) \" \") 1)))\n```",
      "```lisp\n(str.at (str.replace (str.replace (str.replace _arg_0 \" \" \"  \") \" \" \" \") \" \" \" \") _arg_1)\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (<= _arg_1 (str.len words)) \n         (str.at words (- _arg_1 1)) \n         \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ \"\" (str.at words (- _arg_1 1))) \" \") \"\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ words \" \") \" \") (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String \n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(str.at (str.replace (str.replace (str.++ _arg_0 \" \") \" \" \"\\0\") \"\\0\" \" \") (- _arg_1 1))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.at words _arg_1) \" \") \"\") 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (- _arg_1 1))))\n```",
      "```lisp\n  (let ((words (str.split _arg_0 \" \")))\n    (if (or (< _arg_1 1) (> _arg_1 (str.len words)))\n        \"\"\n        (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.++ _arg_0 \" \")\n    (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (* 2 (- _arg_1 1)))))\n    (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (* 2 _arg_1))))) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"\")) \" \") \" \") _arg_1)))\n```",
      "```lisp\n  (str.at (str.replace (str.replace _arg_0 \" \" \"\") _arg_0 (str.++ _arg_0 \" \")) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0) (+ _arg_1 -1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words)))\n         \"\"\n         (str.at words (- _arg_1 1)))))\n```",
      "```scheme\n  (str.at (str.replace (str.replace _arg_0 \" \" \"  \") \"  \" \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (* 2 (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (nth words (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words)))\n         \"\"\n         (str.at words (+ _arg_1 -1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.++ _arg_0 \" \")\n    (str.indexof \n      (str.++ \" \" _arg_0 \" \") \n      \" \" \n      (str.indexof \n        (str.++ \" \" _arg_0 \" \") \n        \" \" \n        (+ _arg_1 -1))) \n    (- \n      (str.indexof \n        (str.++ \" \" _arg_0 \" \") \n        \" \" \n        _arg_1) \n      (str.indexof \n        (str.++ \" \" _arg_0 \" \") \n        \" \" \n        (+ _arg_1 -1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n  (str.at (str.replace _arg_0 \" \" \"\") (- _arg_1 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ \" \" (str.++ (str.at words _arg_1) \" \")) 1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr (str.++ \" \" _arg_0 \" \")\n              (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0 _arg_1) 0)\n              (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0 _arg_1) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0 _arg_1 1)) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\"\n      (str.at words (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ \" \" (str.++ (str.++ (nth words (- _arg_1 1)) \" \") \" \")) \" \") 1)))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.at words _arg_1) \" \") 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (+ (* 2 _arg_1) -2))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ (str.++ \"\" (str.at words 0)) \" \") (str.at words (- _arg_1 1))) \" \"))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ \" \" words) \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (nth_word _arg_0 _arg_1))\n\n(define-fun nth_word ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (<= _arg_1 (str.len words)) \n         (str.at words (- _arg_1 1))\n         \"\")))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (nth words (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n  (str.at (str.replace _arg_0 \" \" \"\") (- _arg_1 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.replace (str.replace (str.++ (str.++ (str.at words _arg_1) \" \") \"\") \" \" \"\") \" \" \"\") 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.at (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0))))))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (if (or (< _arg_1 1) (> _arg_1 (str.len words)))\n        \"\"\n        (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr (str.++ _arg_0 \" \") \n              (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) \n              (str.indexof (str.++ \" \" (str.substr (str.++ _arg_0 \" \") \n                                                   (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) \n                                                   (str.len _arg_0)) \n                                     \" \") \" \" 1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\"\n      (str.at words (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (- _arg_1 1))))\n```",
      "```lisp\n  (str.substr (str.replace (str.replace _arg_0 \" \" \"\\0\") (str.replace (str.replace _arg_0 \" \" \"\\0\") \"\\0\" \" \") \"\\0\") (+ (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\0\") \"\\0\" \" \") \"\\0\" (- _arg_1 1)) 1) (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\0\") \"\\0\" \" \") \"\\0\" _arg_1))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (ite (or (< n 1) (> n (str.len words))) \"\" (str.at words (- n 1)))))\n```",
      "```scheme\n  (str.at (str.replace (str.replace _arg_0 \" \" \"|\") \",\" \"\") _arg_1)\n```",
      "```lisp\n  (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 (str.at words (- _arg_1 1)) 0) (str.len (str.at words (- _arg_1 1))))) \" \") 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ words \" \") (str.++ (str.++ (str.substr words 1 (- (str.len words) 1)) \" \") \" \")) _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.substr words 0 _arg_1) \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.at\n    (str.++ (str.++ \" \" _arg_0) \" \")\n    (str.indexof \n      (str.++ (str.++ \" \" _arg_0) \" \") \n      \" \" \n      (ite (<= _arg_1 0) 0 (str.indexof (str.++ (str.++ \" \" _arg_0) \" \") \" \" _arg_1)))))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (nth_word s n))\n\n(define-fun nth_word ((s String) (n Int)) String\n  (if (= n 1)\n    (str.substr s 0 (str.indexof s \" \" 0))\n    (nth_word (str.substr s (+ (str.indexof s \" \" 0) 1) (str.len s)) (- n 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr \n    (str.replace _arg_0 \" \" \"\\0\")\n    (str.indexof (str.replace _arg_0 \" \" \"\\0\") \"\\0\" (- 0 1))\n    (str.indexof (str.replace _arg_0 \" \" \"\\0\") \"\\0\" _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n  (str.at (str.replace (str.replace _arg_0 \" \" \",\") \",\" \" \") (+ (str.indexof (str.replace (str.replace _arg_0 \" \" \",\") \",\" \" \") \" \" (- _arg_1 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.join \" \" words) \" \") (str.indexof (str.++ (str.join \" \" words) \" \") \" \" (- _arg_1 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words (str.++ \" \")) _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (str.at words (- n 1))))\n```",
      "```scheme\n  (str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0)) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0)))) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (nth-word _arg_0 _arg_1))\n\n(define-fun nth-word ((s String) (n Int)) String\n  (str.substr\n    (str.++ \" \" s \" \")\n    (str.indexof (str.++ \" \" s \" \") \" \" (str.indexof (str.++ \" \" s \" \") \" \" 0 n))\n    (str.indexof (str.++ \" \" s \" \") \" \" (+ 1 (str.indexof (str.++ \" \" s \" \") \" \" 0 n)))))\n```",
      "```scheme\n  (str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ _arg_1 1)) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.substr words 0 _arg_1) \" \") \" \") 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ \" \" (str.++ (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (str.++ \" \" (str.++ (",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (let ((words (str.split s \" \")))\n    (ite (or (< n 1) (> n (str.len words))) \"\"\n         (str.at words (- n 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ \"\" (str.at words (- _arg_1 1))) \" \") \"\") 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words)))\n         \"\"\n         (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ \" \" (str.++ (str.++ \" \" words))) \" \") (+ (* 2 _arg_1) 1))))\n```",
      "```lisp\n  (str.at (str.replace _arg_0 \" \" \"\\0\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\0\") \"\\0\" \" \") \"\\0\" (- _arg_1 1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ \" \" (str.++ (str.++ (str.++ words \" \") \" \")) (int.to.str _arg_1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```"
    ],
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"  \")) \" \") \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 1 (str.split _arg_0 \" \") _arg_1)))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at (str.++ (str.++ \" \" (nth words n)) \" \") 1))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace (str.replace _arg_0 \" \" \"  \") \" \" \" \") \" \" \" \") _arg_1)))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (<= _arg_1 (str.len words)) (str.at words (- _arg_1 1)) \"\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ \"\" (str.at words (- _arg_1 1))) \" \") \"\")))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ words \" \") \" \") (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace (str.++ _arg_0 \" \") \" \" \"\\\\0\") \"\\\\0\" \" \") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.at words _arg_1) \" \") \"\") 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (if (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      null,
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"\")) \" \") \" \") _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace _arg_0 \" \" \"\") _arg_0 (str.++ _arg_0 \" \")) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0) (+ _arg_1 -1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace _arg_0 \" \" \"  \") \"  \" \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (* 2 (- _arg_1 1)))))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (nth words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (+ _arg_1 -1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr (str.++ _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ _arg_1 -1))) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ _arg_1 -1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \" \" \"\") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ \" \" (str.++ (str.at words _arg_1) \" \")) 1))))",
      null,
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ \" \" (str.++ (str.++ (nth words (- _arg_1 1)) \" \") \" \")) \" \") 1))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.at words _arg_1) \" \") 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (+ (* 2 _arg_1) -2)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ (str.++ \"\" (str.at words 0)) \" \") (str.at words (- _arg_1 1))) \" \")))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ \" \" words) \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (nth_word _arg_0 _arg_1)) (define-fun nth_word ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (ite (<= _arg_1 (str.len words)) (str.at words (- _arg_1 1)) \"\"))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (nth words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \" \" \"\") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.replace (str.replace (str.++ (str.++ (str.at words _arg_1) \" \") \"\") \" \" \"\") \" \" \"\") 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.at (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0)))))))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (if (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr (str.++ _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (str.indexof (str.++ \" \" (str.substr (str.++ _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (str.len _arg_0)) \" \") \" \" 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace (str.replace _arg_0 \" \" \"\\\\0\") (str.replace (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" \" \") \"\\\\0\") (+ (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" \" \") \"\\\\0\" (- _arg_1 1)) 1) (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" \" \") \"\\\\0\" _arg_1))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (ite (or (< n 1) (> n (str.len words))) \"\" (str.at words (- n 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace _arg_0 \" \" \"|\") \",\" \"\") _arg_1)))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (nth 0 (str.split _arg_0 \" \") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ \" \" (str.substr _arg_0 (str.indexof _arg_0 (str.at words (- _arg_1 1)) 0) (str.len (str.at words (- _arg_1 1))))) \" \") 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ words \" \") (str.++ (str.++ (str.substr words 1 (- (str.len words) 1)) \" \") \" \")) _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.substr words 0 _arg_1) \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.at (str.++ (str.++ \" \" _arg_0) \" \") (str.indexof (str.++ (str.++ \" \" _arg_0) \" \") \" \" (ite (<= _arg_1 0) 0 (str.indexof (str.++ (str.++ \" \" _arg_0) \" \") \" \" _arg_1))))))",
      "((define-fun f ((s String) (n Int)) String (nth_word s n)) (define-fun nth_word ((s String) (n Int)) String (if (= n 1) (str.substr s 0 (str.indexof s \" \" 0)) (nth_word (str.substr s (+ (str.indexof s \" \" 0) 1) (str.len s)) (- n 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr (str.replace _arg_0 \" \" \"\\\\0\") (str.indexof (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" (- 0 1)) (str.indexof (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace (str.replace _arg_0 \" \" \",\") \",\" \" \") (+ (str.indexof (str.replace (str.replace _arg_0 \" \" \",\") \",\" \" \") \" \" (- _arg_1 1)) 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.join \" \" words) \" \") (str.indexof (str.++ (str.join \" \" words) \" \") \" \" (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words (str.++ \" \")) _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (str.at words (- n 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0)) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ 1 (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0)))) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (str.indexof (str.++ \" \" _arg_0 \" \") \" \" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (nth-word _arg_0 _arg_1)) (define-fun nth-word ((s String) (n Int)) String (str.substr (str.++ \" \" s \" \") (str.indexof (str.++ \" \" s \" \") \" \" (str.indexof (str.++ \" \" s \" \") \" \" 0 n)) (str.indexof (str.++ \" \" s \" \") \" \" (+ 1 (str.indexof (str.++ \" \" s \" \") \" \" 0 n))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.++ \" \" _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) (- (str.indexof (str.++ \" \" _arg_0 \" \") \" \" (+ _arg_1 1)) (str.indexof (str.++ \" \" _arg_0 \" \") \" \" _arg_1) 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.substr words 0 _arg_1) \" \") \" \") 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      null,
      "((define-fun f ((s String) (n Int)) String (let ((words (str.split s \" \"))) (ite (or (< n 1) (> n (str.len words))) \"\" (str.at words (- n 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ \"\" (str.at words (- _arg_1 1))) \" \") \"\") 0))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ \" \" (str.++ (str.++ \" \" words))) \" \") (+ (* 2 _arg_1) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \" \" \"\\\\0\") (str.indexof (str.replace (str.replace _arg_0 \" \" \"\\\\0\") \"\\\\0\" \" \") \"\\\\0\" (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ \" \" (str.++ (str.++ (str.++ words \" \") \" \")) (int.to.str _arg_1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "  ",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      null,
      [
        "",
        " "
      ],
      [
        "",
        0,
        -1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        2,
        "  ",
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        -1,
        " "
      ],
      [
        -1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      null,
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        2,
        -2,
        " "
      ],
      [
        "",
        0,
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        "|",
        ",",
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        "\\0",
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        ",",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " "
      ],
      null,
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        2,
        " "
      ],
      [
        1,
        "\\0",
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "  ",
      2,
      "|",
      ",",
      " ",
      "\\0",
      -1,
      -2
    ],
    "time_diff_ms": 1121.519
  }
}