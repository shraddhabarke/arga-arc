{
  "hd-25.sl": {
    "completions": [
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(ite (>= (bvult x y) #b0) (bvudiv (bvmul x y) #x0000000000000002) #x0000000000000000)",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(bvudiv (bvmul x y) #x0000000000000002)",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(bvurem (bvmul x y) (bvlshr (bvmul x y) (_ bv64 64)))",
      "(bvurem (bvmul x y) (bvshl (bvmul x y) (_ bv32 64)))",
      "(ite (bvugt x #x0000000000000000) (bvudiv (bvmul x y) #x00000000000000000000000000000001) #x0000000000000000)",
      "(bvurem (bvmul x y) (bvshl (bvlshr (bvmul x y) #x0000000000000040) #x0000000000000040))",
      "(ite (>= (bvmul x y) #x8000000000000000) (bvlshr (bvmul x y) #x0000000000000040) #x0000000000000000)",
      "(ite (bvuge x #x00000000000000010000000000000000) (bvurem (bvmul x y) #x00000000000000000000000000000001) #x00000000000000000000000000000000))",
      "(bvurem (bvmul x y) (bvnot #x0000000000000001))",
      "(ite (>= (bvmul x y) #x8000000000000000) (bvlshr (bvmul x y) #x40) #x0)",
      "(bvlshr (bvmul x y) (_ bv32 64))",
      "(bvurem (bvmul x y) ((_ extract 63 32) (bvmul x y)))",
      "(bvurem (bvmul x y) (bvnot #x0000000000000001))",
      "(ite (>= (bvlshr (bvmul x y) (_ bv64 64)) (_ bv1 64)) (bvlshr (bvmul x y) (_ bv64 64)) (_ bv0 64))",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)",
      "(bvurem (bvmul x y) #x00000000000000010000000000000000)"
    ],
    "time_diff_ms": 701.408,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvult x y) \\#b0) (bvudiv (bvmul x y) \\#x0000000000000002) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvmul x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvlshr (bvmul x y) (_ bv64 64))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvshl (bvmul x y) (_ bv32 64))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvudiv (bvmul x y) \\#x00000000000000000000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvshl (bvlshr (bvmul x y) \\#x0000000000000040) \\#x0000000000000040)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvmul x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x0000000000000040) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x00000000000000010000000000000000) (bvurem (bvmul x y) \\#x00000000000000000000000000000001) \\#x00000000000000000000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvnot \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvmul x y) \\#x8000000000000000) (bvlshr (bvmul x y) \\#x40) \\#x0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvmul x y) (_ bv32 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) ((_ extract 63 32) (bvmul x y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) (bvnot \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvlshr (bvmul x y) (_ bv64 64)) (_ bv1 64)) (bvlshr (bvmul x y) (_ bv64 64)) (_ bv0 64)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvurem (bvmul x y) \\#x00000000000000010000000000000000))"
    ],
    "constants": [
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#b0"
      ],
      [
        64,
        "#x00000000000000010000000000000000"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x00000000000000000000000000000001"
      ],
      [
        64,
        "#x0000000000000040"
      ],
      [
        64,
        "#x8000000000000000",
        "#x0000000000000000",
        "#x0000000000000040"
      ],
      [
        64,
        "#x00000000000000010000000000000000",
        "#x00000000000000000000000000000001",
        "#x00000000000000000000000000000000"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x8000000000000000",
        "#x40",
        "#x0"
      ],
      [
        64
      ],
      [
        64,
        32,
        63
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x00000000000000010000000000000000"
      ],
      [
        64,
        "#x00000000000000010000000000000000"
      ],
      [
        64,
        "#x00000000000000010000000000000000"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000040",
      "#x0000000000000000",
      "#x00000000000000010000000000000000",
      "#x8000000000000000",
      "#x0",
      "#x00000000000000000000000000000001",
      "#x00000000000000000000000000000000",
      32,
      "#b0",
      "#x0000000000000002",
      "#x40",
      63,
      "#x0000000000000001"
    ]
  },
  "hd-24.sl": {
    "completions": [
      "(ite (>= x #x0000000000000001)\n     (let ((n (bvsub (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)) #x0000000000000001)))\n       (ite (= n x) x (bvshl #x0000000000000001 n)))\n     #x0000000000000000))",
      "(ite (<= x #x0000000000000001) #x0000000000000001\n     (bvshl #x0000000000000001\n             (bvsub (bvshl #x0000000000000001\n                           (bvlshr x #x0000000000000001))\n                     x)))",
      "(ite (<= x #x0000000000000001) #x0000000000000000 (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001))) (ite (= x n) x (bvshl #x0000000000000001 n))))",
      "(ite (<= x #x0000000000000001)\n     #x0000000000000001\n     (bvshl #x0000000000000001\n             (bvadd (bvclz x) #x0000000000000001)))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (ite (= x #x0000000000000001) #x0000000000000002\n          (ite (= x #x0000000000000002) #x0000000000000004\n               (ite (= x #x0000000000000004) #x0000000000000008\n                    (ite (= x #x0000000000000008) #x0000000000000010\n                         (ite (= x #x0000000000000010) #x0000000000000020\n                              (ite (= x #xffffffffffffffff) #xffffffffffffffff\n                                   (ite (= x (bvnot x)) x\n                                        (ite (= x (bvxor x x)) x\n                                             (ite (= x (bvand x x)) x\n                                                  (ite (= x (bvor x x)) x\n                                                       (ite (= x (bvneg x)) x\n                                                            (ite (= x (bvadd x x)) x\n                                                                 (ite (= x (bvmul x x)) x\n                                                                      (ite (= x (bvudiv x x)) x\n                                                                           (ite (= x (bvurem x x)) x\n                                                                                (ite (= x (bvlshr x x)) x\n                                                                                     (ite (= x (bvashr x x)) x\n                                                                                          (ite (= x (bvshl x x)) x\n                                                                                               (ite (= x (bvsdiv x x)) x\n                                                                                                    (ite (= x (bvsrem x x)) x\n                                                                                                         (ite (= x (bvsub x x)) x\n                                                                                                              (ite (ite (= x x) x) x)))))))))))))))))))))))))",
      "(ite (>= x #x0000000000000020) #x0000000000000040\n     (ite (>= x #x0000000000000010) #x0000000000000020\n          (ite (>= x #x0000000000000008) #x0000000000000010\n               (ite (>= x #x0000000000000004) #x0000000000000008\n                    (ite (>= x #x0000000000000002) #x0000000000000004\n                         (ite (>= x #x0000000000000001) #x0000000000000002\n                              #x0000000000000001))))))",
      "(bvshl (bvnot (bvsub #x0000000000000000 x)) #x0000000000000001)",
      "(ite (>= x #x0000000000000020) #x0000000000000040\n     (ite (>= x #x0000000000000010) #x0000000000000020\n          (ite (>= x #x0000000000000008) #x0000000000000010\n               (ite (>= x #x0000000000000004) #x0000000000000008\n                    (ite (>= x #x0000000000000002) #x0000000000000004\n                         (ite (>= x #x0000000000000001) #x0000000000000002\n                              #x0000000000000001))))))",
      "(bvshl (bvnot (bvshl (bvnot x) #x0000000000000001)) #x0000000000000001))",
      "(ite (<= x #x0000000000000002)\n     #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd (bvlog2 (bvsub x #x0000000000000001)) #x0000000000000001)))",
      "(ite (<= x #x0000000000000001) #x0000000000000000\n     (ite (<= x #x0000000000000002) #x0000000000000002\n          (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001))))",
      "(ite (<= x #x0000000000000001)\n     #x0000000000000001\n     (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001)))\n       (ite (= x n)\n            x\n            (bvshl #x0000000000000001 n))))",
      "(bvshl (bvnot (bvshl (bvnot x) (_ bv1 64))) (_ bv1 64))",
      "(ite (<= x #x0000000000000001) #x0000000000000001 (let ((n (bvsub (bvshl #x0000000000000001 (bvsub (bvclz x) #x0000000000000001)) #x0000000000000001))) (ite (= n x) x (bvshl #x0000000000000001 n))))",
      "(bvshl (bvnot (bvshl (bvnot x) #x0000000000000001)) #x0000000000000001))",
      "(ite (<= x #x0000000000000002) #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd #x0000000000000001\n                   (bvlshr x #x0000000000000001))))",
      "(ite (>= x #x0000000000000001)\n     (let ((n (bvadd (bvsub (bvshl x #x0000000000000001) #x0000000000000001) #x0000000000000001)))\n          (ite (= n x) x n))\n     #x0000000000000000)",
      "(ite (<= x #x0000000000000001)\n     #x0000000000000001\n     (bvshl #x0000000000000001\n             (bvadd (bvclz x)\n                     #x0000000000000001)))",
      "(ite (<= x #x0000000000000002)\n     #x0000000000000002\n     (bvshl #x0000000000000001\n            (bvadd (bvclz x)\n                   #x0000000000000001)))",
      "(ite (>= x #x0000000000000000) (bvshl #x0000000000000001 (bvadd (bvclz x) #x0000000000000001)) #x0000000000000000))"
    ],
    "time_diff_ms": 798.591,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (let ((n (bvsub (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= n x) x (bvshl \\#x0000000000000001 n))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvsub (bvshl \\#x0000000000000001 (bvlshr x \\#x0000000000000001)) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000000 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= x n) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000002 (ite (= x \\#x0000000000000002) \\#x0000000000000004 (ite (= x \\#x0000000000000004) \\#x0000000000000008 (ite (= x \\#x0000000000000008) \\#x0000000000000010 (ite (= x \\#x0000000000000010) \\#x0000000000000020 (ite (= x \\#xffffffffffffffff) \\#xffffffffffffffff (ite (= x (bvnot x)) x (ite (= x (bvxor x x)) x (ite (= x (bvand x x)) x (ite (= x (bvor x x)) x (ite (= x (bvneg x)) x (ite (= x (bvadd x x)) x (ite (= x (bvmul x x)) x (ite (= x (bvudiv x x)) x (ite (= x (bvurem x x)) x (ite (= x (bvlshr x x)) x (ite (= x (bvashr x x)) x (ite (= x (bvshl x x)) x (ite (= x (bvsdiv x x)) x (ite (= x (bvsrem x x)) x (ite (= x (bvsub x x)) x (ite (ite (= x x) x) x))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000040 (ite (>= x \\#x0000000000000010) \\#x0000000000000020 (ite (>= x \\#x0000000000000008) \\#x0000000000000010 (ite (>= x \\#x0000000000000004) \\#x0000000000000008 (ite (>= x \\#x0000000000000002) \\#x0000000000000004 (ite (>= x \\#x0000000000000001) \\#x0000000000000002 \\#x0000000000000001)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvsub \\#x0000000000000000 x)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000020) \\#x0000000000000040 (ite (>= x \\#x0000000000000010) \\#x0000000000000020 (ite (>= x \\#x0000000000000008) \\#x0000000000000010 (ite (>= x \\#x0000000000000004) \\#x0000000000000008 (ite (>= x \\#x0000000000000002) \\#x0000000000000004 (ite (>= x \\#x0000000000000001) \\#x0000000000000002 \\#x0000000000000001)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) \\#x0000000000000001)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvlog2 (bvsub x \\#x0000000000000001)) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000000 (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= x n) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) (_ bv1 64))) (_ bv1 64)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (let ((n (bvsub (bvshl \\#x0000000000000001 (bvsub (bvclz x) \\#x0000000000000001)) \\#x0000000000000001))) (ite (= n x) x (bvshl \\#x0000000000000001 n)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvshl (bvnot (bvshl (bvnot x) \\#x0000000000000001)) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd \\#x0000000000000001 (bvlshr x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000001) (let ((n (bvadd (bvsub (bvshl x \\#x0000000000000001) \\#x0000000000000001) \\#x0000000000000001))) (ite (= n x) x n)) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000001) \\#x0000000000000001 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (<= x \\#x0000000000000002) \\#x0000000000000002 (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (>= x \\#x0000000000000000) (bvshl \\#x0000000000000001 (bvadd (bvclz x) \\#x0000000000000001)) \\#x0000000000000000))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000010",
        "#x0000000000000004",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x0000000000000008",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000040",
        "#x0000000000000010",
        "#x0000000000000004",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x0000000000000008",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000040",
        "#x0000000000000010",
        "#x0000000000000004",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x0000000000000008",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000040",
      "#x0000000000000000",
      "#x0000000000000010",
      "#x0000000000000004",
      "#x0000000000000020",
      "#x0000000000000002",
      "#x0000000000000008",
      "#xffffffffffffffff",
      "#x0000000000000001"
    ]
  },
  "hd-09.sl": {
    "completions": [
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvadd x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (ite (bvsge x #x0000000000000000)\n       x\n       (bvneg x)))",
      "(bvsub x (ite (bvsge x #x0000000000000000) x (bvneg x)))",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvabs x))",
      "(bvabs x))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvand x (bvnot (bvslt x #x0000000000000000)))",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(bvsub x (ite (bvlshr x #x000000000000003f) x (bvnot x)))",
      "(ite (bvslt x #x0000000000000000) (bvneg x) x))",
      "(ite (bvsge x #x0000000000000000) x (bvneg x))"
    ],
    "time_diff_ms": 741.864,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvsge x \\#x0000000000000000) x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvabs x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvslt x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (ite (bvlshr x \\#x000000000000003f) x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) (bvneg x) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsge x \\#x0000000000000000) x (bvneg x)))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x000000000000003f"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ]
    ],
    "all_constants": [
      64,
      "#x000000000000003f",
      "#x0000000000000000"
    ]
  },
  "hd-26.sl": {
    "completions": [
      "(bvadd k (bvsub x (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) x))",
      "(ite (= k #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(bvudiv (bvadd x (bvsub k #x0000000000000001)) k)",
      "(bvadd x (bvsub (bvshl (bvadd x (bvsub k #x0000000000000001)) #x0000000000000001) (bvsub k #x0000000000000001)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvudiv (bvadd x (bvsub k #x0000000000000001)) k))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(bvadd x (bvsub k (bvurem x k)))",
      "(ite (= k #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(ite (= k #x0000000000000000)\n     x\n     (bvadd x (bvsub k (bvurem x k))))",
      "(ite (<= (bvurem x k) #x0000000000000000) x (bvadd x (bvsub k (bvurem x k))))",
      "(ite (= k #x0000000000000000)\n     x\n     (bvadd x (bvsub k (bvurem x k))))"
    ],
    "time_diff_ms": 365.66,
    "solutions": [
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd k (bvsub x (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl k (bvsub (bvurem x k) k)) x)))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvudiv (bvadd x (bvsub k \\#x0000000000000001)) k))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub (bvshl (bvadd x (bvsub k \\#x0000000000000001)) \\#x0000000000000001) (bvsub k \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvudiv (bvadd x (bvsub k \\#x0000000000000001)) k))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (bvadd x (bvsub k (bvurem x k))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (<= (bvurem x k) \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))",
      "(define-fun f (x (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (bvadd x (bvsub k (bvurem x k)))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-27.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= y #x0000000000000001) #x0000000000000000\n          (ite (= x #x0000000000000064) y\n            #x0000000000000000))))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= y #x0000000000000001) #x0000000000000000\n          (ite (= x #x0000000000000064) #x0000000000000064\n            (ite (= y #x0000000000000064) #x0000000000000064\n              (ite (= y #x000000000000000a) #x0000000000000000\n                (ite (= x #x000000000000000a) #x0000000000000000\n                  (ite (= x #x0000000000002710) #x0000000000000064\n                    (ite (= y #x0000000000000064) #x0000000000000064\n                      (ite (= y #x0000000000000001) #x0000000000000000\n                        (ite (= x #x0000000000000001) #x0000000000000000\n                          (ite (= x y) x))))))))))))))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x y) x\n    0))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x y) x #b0))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64)\n  x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000)\n       #x0000000000000000\n       (ite (= y #x0000000000000000)\n            #x0000000000000000\n            (ite (= x y)\n                 x\n                 #x0000000000000000))))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (ite (= x #x0000000000000000) #x0000000000000000 x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) #x0000000000000000\n    (ite (= y #x0000000000000000) #x0000000000000000\n      (ite (= x y) x\n        (ite (= x #x0000000000000000) #x0000000000000000\n          (ite (= y #x0000000000000000) #x0000000000000000\n            (ite (= x #x0000000000000064) #x0000000000000064\n              (ite (= y #x0000000000000064) #x0000000000000064\n                #x0000000000000000))))))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64)\n  x)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (= x #x0000000000000000) #x0000000000000000 (ite (= y #x0000000000000000) #x0000000000000000 (ite (= x y) x #x0000000000000000)))"
    ],
    "time_diff_ms": 371.63,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) y \\#x0000000000000000))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x000000000000000a) \\#x0000000000000000 (ite (= x \\#x0000000000002710) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000001) \\#x0000000000000000 (ite (= x \\#x0000000000000001) \\#x0000000000000000 (ite (= x y) x))))))))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x 0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x \\#b0))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000064) \\#x0000000000000064 (ite (= y \\#x0000000000000064) \\#x0000000000000064 \\#x0000000000000000))))))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= y \\#x0000000000000000) \\#x0000000000000000 (ite (= x y) x \\#x0000000000000000))))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000000",
        "#x0000000000000064",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000002710",
        "#x0000000000000000",
        "#x0000000000000064",
        "#x000000000000000a",
        "#x0000000000000001"
      ],
      [
        64,
        0
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#b0"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000064"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000002710",
      "#x0000000000000000",
      0,
      "#b0",
      "#x0000000000000064",
      "#x000000000000000a",
      "#x0000000000000001"
    ]
  },
  "hd-08.sl": {
    "completions": [
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub x (bvor x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvor x (bvneg x)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvsub (bvnot x) (bvsub (bvnot x) #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvsub x (bvand x (bvsub x #x0000000000000001)))",
      "(bvsub x (bvor x (bvsub x #x0000000000000001)))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvnot (bvsub x #x0000000000000001)))"
    ],
    "time_diff_ms": 952.007,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvor x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) (bvsub (bvnot x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvsub x \\#x0000000000000001))))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000001"
    ]
  },
  "hd-23.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvlshr x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvshl x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd\n    (bvand x #x5555555555555555)\n    (bvand (bvlshr x #x1) #x5555555555555555)\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot\n          (bvshl\n           (bvnot\n            (bvsrem\n             (bvshl x\n                     (bvnot\n                      (bvnot\n                       (bvand x\n                              (bvsrem x x)))))\n             (bvshl\n              (bvnot\n               (bvnot\n                (bvsrem\n                 (bvshl x\n                         (bvnot\n                          (bvnot\n                           (bvand x\n                                  (bvsrem x x)))))\n                 (bvshl\n                  (bvnot\n                   (bvsrem\n                    (bvshl x\n                            (bvnot\n                             (bvnot\n                              (bvand x\n                                     (bvsrem x x)))))\n                    (bvshl\n                     (bvnot\n                      (bvsrem\n                       (bvshl x\n                               (bvnot\n                                (bvnot\n                                 (bvand x\n                                        (bvsrem x x)))))\n                       (bvshl\n                        (bvnot\n                         (bvsrem\n                          (bvshl x\n                                  (bvnot\n                                   (bvnot\n                                    (bvand x\n                                           (bvsrem x x)))))\n                          (bvshl\n                           (bvnot\n                            (bvsrem\n                             (bvshl x\n                                     (bvnot\n                                      (bvnot\n                                       (bvand x\n                                              (bvsrem x x)))))\n                             (bvshl\n                              (bvnot\n                               (bvsrem\n                                (bvshl x\n                                        (bvnot\n                                         (bvnot\n                                          (bvand x\n                                                 (bvsrem x x)))))\n                                (bvshl\n                                 (bvnot\n                                  (bvsrem\n                                   (bvshl x\n                                           (bvnot\n                                            (bvnot\n                                             (bvand x\n                                                    (bvsrem x x)))))\n                                   (bvshl\n                                    (bvnot\n                                     (bvsrem\n                                      (bvshl x\n                                              (bvnot\n                                               (bvnot\n                                                (bvand x\n                                                       (bvsrem x x)))))\n                                      (bvshl\n                                       (bvnot\n                                        (bvsrem\n                                         (bvshl x\n                                                 (bvnot\n                                                  (bvnot\n                                                   (bvand x\n                                                          (bvsrem x x)))))\n                                         (bvshl\n                                          (bvnot\n                                           (bvsrem\n                                            (bvshl x\n                                                    (bvnot\n                                                     (bvnot\n                                                      (bvand x\n                                                             (bvsrem x x)))))\n                                            (bvshl\n                                             (bvnot\n                                              (bvsrem\n                                               (bvshl x\n                                                       (bvnot\n                                                        (bvnot\n                                                         (bvand x\n                                                                (bvsrem x x)))))\n                                               (bvshl\n                                                (bvnot\n                                                 (bvsrem\n                                                  (bvshl x\n                                                          (bvnot\n                                                           (bvnot\n                                                            (bvand x\n                                                                   (bvsrem x x)))))\n                                                  (bvshl\n                                                   (bvnot\n                                                    (bvsrem\n                                                     (bvshl x\n                                                             (bvnot\n                                                              (bvnot\n                                                               (bvand x\n                                                                      (bvsrem x x)))))\n                                                     (bvshl\n                                                      (bvnot\n                                                       (bvsrem\n                                                        (bvshl x\n                                                                (bvnot\n                                                                 (bvnot\n                                                                  (bvand x\n                                                                         (bvsrem x x)))))\n                                                        (bvshl\n                                                         (bvnot\n                                                          (bvsrem\n                                                           (bvshl x\n                                                                   (bvnot\n                                                                    (bvnot\n                                                                     (bvand x\n                                                                            (bvsrem x x)))))\n                                                           (bvshl\n                                                            (bvnot\n                                                             (bvsrem\n                                                              (bvshl x\n                                                                      (bvnot\n                                                                       (bvnot\n                                                                        (bvand x\n                                                                               (bvsrem x x)))))\n                                                              (bvshl\n                                                               (bvnot\n                                                                (bvsrem\n                                                                 (bvshl x\n                                                                         (bvnot\n                                                                          (bvnot\n                                                                           (bvand x\n                                                                                  (bvsrem x x)))))\n                                                                 (bvshl\n                                                                  (bvnot\n                                                                   (bvsrem\n                                                                    (bvshl x\n                                                                            (bvnot\n                                                                             (bvnot\n                                                                              (bvand x\n                                                                                     (bvsrem x x)))))\n                                                                    (bvshl\n                                                                     (bvnot\n                                                                      (bvsrem\n                                                                       (bvshl x\n                                                                               (bvnot\n                                                                                (bvnot\n                                                                                 (bvand x\n                                                                                        (bvsrem x x)))))\n                                                                       (bvshl\n                                                                        (bvnot\n                                                                         (bvsrem\n                                                                          (bvshl x\n                                                                                  (bvnot\n                                                                                   (bvnot\n                                                                                    (bvand x\n                                                                                           (bvsrem x x)))))\n                                                                          (bvshl\n                                                                           (bvnot\n                                                                            (bvsrem\n                                                                             (bvshl x\n                                                                                     (bvnot\n                                                                                      (bvnot\n                                                                                       (bvand x\n                                                                                              (bvsrem x x)))))\n                                                                             (bvshl\n                                                                              (bvnot\n                                                                               (bvsrem\n                                                                                (bvshl x\n                                                                                        (bvnot\n                                                                                         (bvnot\n                                                                                          (bvand x\n                                                                                                 (bvsrem x x)))))\n                                                                                (bvshl\n                                                                                 (bvnot\n                                                                                  (bvsrem\n                                                                                   (bvshl x\n                                                                                           (bvnot\n                                                                                            (bvnot\n                                                                                             (bvand x\n                                                                                                    (bvsrem x x)))))\n                                                                                   (bvshl\n                                                                                    (bvnot\n                                                                                     (bvsrem\n                                                                                      (bvshl x\n                                                                                              (bvnot\n                                                                                               (bvnot\n                                                                                                (bvand x\n                                                                                                       (bvsrem x x)))))\n                                                                                      (bvshl\n                                                                                       (bvnot\n                                                                                        (bvsrem\n                                                                                         (bvshl x\n                                                                                                 (bvnot\n                                                                                                  (bvnot\n                                                                                                   (bvand x\n                                                                                                          (bvsrem x x)))))\n                                                                                         (bvshl\n                                                                                          (bvnot\n                                                                                           (bvsrem\n                                                                                            (bvshl x\n                                                                                                    (bvnot\n                                                                                                     (bvnot\n                                                                                                      (bvand x\n                                                                                                             (bvsrem x x)))))\n                                                                                            (bvshl\n                                                                                             (bvnot\n                                                                                              (bvsrem\n                                                                                               (bvshl x\n                                                                                                       (bvnot\n                                                                                                        (bvnot\n                                                                                                         (bvand x\n                                                                                                                (bvsrem x x)))))\n                                                                                               (bvshl\n                                                                                                (bvnot\n                                                                                                 (bvsrem\n                                                                                                  (bvshl x\n                                                                                                          (bvnot\n                                                                                                           (bvnot\n                                                                                                            (bvand x\n                                                                                                                   (bvsrem x x)))))\n                                                                                                  (bvshl\n                                                                                                   (bvnot\n                                                                                                    (bvsrem\n                                                                                                     (bvshl x\n                                                                                                             (bvnot\n                                                                                                              (bvnot\n                                                                                                               (bvand x\n                                                                                                                      (bvsrem x x)))))\n                                                                                                     (bvshl\n                                                                                                      (bvnot\n                                                                                                       (bvsrem\n                                                                                                        (bvshl x\n                                                                                                                (bvnot\n                                                                                                                 (bvnot\n                                                                                                                  (bvand x\n                                                                                                                         (bvsrem x x)))))\n                                                                                                        (bvshl\n                                                                                                         (bvnot\n                                                                                                          (bvsrem\n                                                                                                           (bvshl x\n                                                                                                                   (bvnot\n                                                                                                                    (bvnot\n                                                                                                                     (bvand x\n                                                                                                                            (bvsrem x x)))))\n                                                                                                           (bvshl\n                                                                                                            (bvnot\n                                                                                                             (bvsrem\n                                                                                                              (bvshl x\n                                                                                                                      (bvnot\n                                                                                                                       (bvnot\n                                                                                                                        (bvand x\n                                                                                                                               (bvsrem x x)))))\n                                                                                                              (bvshl\n                                                                                                               (bvnot\n                                                                                                                (bvsrem\n                                                                                                                 (bvshl x\n                                                                                                                         (bvnot\n                                                                                                                          (bvnot\n                                                                                                                           (bvand x\n                                                                                                                                  (bvsrem x x)))))\n                                                                                                                 (bvshl\n                                                                                                                  (bvnot\n                                                                                                                   (bvsrem\n                                                                                                                    (bvshl x\n                                                                                                                            (bvnot\n                                                                                                                             (bvnot\n                                                                                                                              (bvand x\n                                                                                                                                     (bvsrem x x)))))\n                                                                                                                    (bvshl\n                                                                                                                     (bvnot\n                                                                                                                      (bvsrem\n                                                                                                                       (bvshl x\n                                                                                                                               (bvnot\n                                                                                                                                (bvnot\n                                                                                                                                 (bvand x\n                                                                                                                                        (bvsrem x x)))))\n                                                                                                                       (bvshl\n                                                                                                                        (bvnot\n                                                                                                                         (bvsrem\n                                                                                                                          (bvshl x\n                                                                                                                                  (bvnot\n                                                                                                                                   (bvnot\n                                                                                                                                    (bvand x\n                                                                                                                                           (bvsrem x x)))))\n                                                                                                                          (bvshl\n                                                                                                                           (bvnot\n                                                                                                                            (bvsrem\n                                                                                                                             (bvshl x\n                                                                                                                                     (bvnot\n                                                                                                                                      (bvnot\n                                                                                                                                       (bvand x\n                                                                                                                                              (bvsrem x x)))))\n                                                                                                                             (bvshl\n                                                                                                                              (bvnot\n                                                                                                                               (bvsrem\n                                                                                                                                (bvshl x\n                                                                                                                                        (bvnot\n                                                                                                                                         (bvnot\n                                                                                                                                          (bvand x\n                                                                                                                                                 (bvsrem x x)))))\n                                                                                                                                (bvshl\n                                                                                                                                 (bvnot\n                                                                                                                                  (bvsrem\n                                                                                                                                   (bvshl x\n                                                                                                                                           (bvnot\n                                                                                                                                            (bvnot\n                                                                                                                                             (bvand x\n                                                                                                                                                    (bvsrem x x)))))\n                                                                                                                                   (bvshl\n                                                                                                                                    (bvnot\n                                                                                                                                     (bvsrem\n                                                                                                                                      (bvshl x\n                                                                                                                                              (bvnot\n                                                                                                                                               (bvnot\n                                                                                                                                                (bvand x\n                                                                                                                                                       (bvsrem x x)))))\n                                                                                                                                      (bvshl\n                                                                                                                                       (bvnot\n                                                                                                                                        (bvsrem\n                                                                                                                                         (bvshl x\n                                                                                                                                                 (bvnot\n                                                                                                                                                  (bvnot\n                                                                                                                                                   (bvand x\n                                                                                                                                                          (bvsrem x x)))))\n                                                                                                                                         (bvshl\n                                                                                                                                          (bvnot\n                                                                                                                                           (bvsrem\n                                                                                                                                            (bvshl x\n                                                                                                                                                    (bvnot\n                                                                                                                                                     (bvnot\n                                                                                                                                                      (bvand x\n                                                                                                                                                             (bvsrem x x)))))\n                                                                                                                                            (bvshl\n                                                                                                                                             (bvnot\n                                                                                                                                              (bvsrem\n                                                                                                                                               (bvshl x\n                                                                                                                                                       (bvnot\n                                                                                                                                                        (bvnot\n                                                                                                                                                         (bvand x\n                                                                                                                                                                (bvsrem x x)))))\n                                                                                                                                               (bvshl\n                                                                                                                                                (bvnot\n                                                                                                                                                 (bvsrem\n                                                                                                                                                  (bvshl x\n                                                                                                                                                          (bvnot\n                                                                                                                                                           (bvnot\n                                                                                                                                                            (bvand x\n                                                                                                                                                                   (bvsrem x x)))))\n                                                                                                                                                  (bvshl\n                                                                                                                                                   (bvnot\n                                                                                                                                                    (bvsrem\n                                                                                                                                                     (bvshl x\n                                                                                                                                                             (bvnot\n                                                                                                                                                              (bvnot\n                                                                                                                                                               (bvand x\n                                                                                                                                                                      (bvsrem x x)))))\n                                                                                                                                                     (bvshl\n                                                                                                                                                      (bvnot\n                                                                                                                                                       (bvsrem\n                                                                                                                                                        (bvshl x\n                                                                                                                                                                (bvnot\n                                                                                                                                                                 (bvnot\n                                                                                                                                                                  (bvand x\n                                                                                                                                                                         (bvsrem x x)))))\n                                                                                                                                                        (bvshl\n                                                                                                                                                         (bvnot\n                                                                                                                                                          (bvsrem\n                                                                                                                                                           (bvshl x\n                                                                                                                                                                   (bvnot\n                                                                                                                                                                    (bvnot\n                                                                                                                                                                     (bvand x\n                                                                                                                                                                            (bvsrem x x)))))\n                                                                                                                                                           (bvshl\n                                                                                                                                                            (bvnot\n                                                                                                                                                             (bvsrem\n                                                                                                                                                              (bvshl x\n                                                                                                                                                                      (bvnot\n                                                                                                                                                                       (bvnot\n                                                                                                                                                                        (bvand x\n                                                                                                                                                                               (bvsrem x x)))))\n                                                                                                                                                              (bvshl\n                                                                                                                                                               (bvnot\n                                                                                                                                                                (bvsrem\n                                                                                                                                                                 (bvshl x\n                                                                                                                                                                         (bvnot\n                                                                                                                                                                          (bvnot\n                                                                                                                                                                           (bvand x\n                                                                                                                                                                                  (bvsrem x x)))))\n                                                                                                                                                                 (bvshl\n                                                                                                                                                                  (bvnot\n                                                                                                                                                                   (bvsrem\n                                                                                                                                                                    (bvshl x\n                                                                                                                                                                            (bvnot\n                                                                                                                                                                             (bvnot\n                                                                                                                                                                              (bvand x\n                                                                                                                                                                                     (bvsrem x x)))))\n                                                                                                                                                                    (bvshl\n                                                                                                                                                                     (bvnot\n                                                                                                                                                                      (bvsrem\n                                                                                                                                                                       (bvshl x\n                                                                                                                                                                               (bvnot\n                                                                                                                                                                                (bvnot\n                                                                                                                                                                                 (bvand x\n                                                                                                                                                                                        (bvsrem x x)))))\n                                                                                                                                                                       (bvshl\n                                                                                                                                                                        (bvnot\n                                                                                                                                                                         (bvsrem\n                                                                                                                                                                          (bvshl x\n                                                                                                                                                                                  (bvnot\n                                                                                                                                                                                   (bvnot\n                                                                                                                                                                                    (bvand x\n                                                                                                                                                                                           (bvsrem x x)))))\n                                                                                                                                                                          (bvshl\n                                                                                                                                                                           (bvnot\n                                                                                                                                                                            (bvsrem\n                                                                                                                                                                             (bvshl x\n                                                                                                                                                                                     (bvnot\n                                                                                                                                                                                      (bvnot\n                                                                                                                                                                                       (bvand x\n                                                                                                                                                                                              (bvsrem x x)))))\n                                                                                                                                                                             (bvshl\n                                                                                                                                                                              (bvnot\n                                                                                                                                                                               (bvsrem\n                                                                                                                                                                                (bvshl x\n                                                                                                                                                                                        (bvnot\n                                                                                                                                                                                         (bvnot\n                                                                                                                                                                                          (bvand x\n                                                                                                                                                                                                 (bvsrem x x)))))\n                                                                                                                                                                               (bvshl\n                                                                                                                                                                                (bvnot\n                                                                                                                                                                                 (bvsrem\n                                                                                                                                                                                  (bvshl x\n                                                                                                                                                                                          (bvnot\n                                                                                                                                                                                           (bvnot\n                                                                                                                                                                                            (bvand x\n                                                                                                                                                                                                   (bvsrem x x)))))\n                                                                                                                                                                                 (bvshl\n                                                                                                                                                                                  (bvnot\n                                                                                                                                                                                   (bvsrem\n                                                                                                                                                                                    (bvshl x\n                                                                                                                                                                                            (bvnot\n                                                                                                                                                                                             (bvnot\n                                                                                                                                                                                              (bvand x\n                                                                                                                                                                                                     (bvsrem x x)))))\n                                                                                                                                                                                    (bvshl\n                                                                                                                                                                                     (bvnot\n                                                                                                                                                                                      (bvsrem\n                                                                                                                                                                                       (bvshl x\n                                                                                                                                                                                               (bvnot\n                                                                                                                                                                                                (bvnot\n                                                                                                                                                                                                 (bvand x\n                                                                                                                                                                                                        (bvsrem x x)))))\n                                                                                                                                                                                       (bvshl\n                                                                                                                                                                                        (bvnot\n                                                                                                                                                                                         (bvsrem\n                                                                                                                                                                                          (bvshl x\n                                                                                                                                                                                                  (bvnot\n                                                                                                                                                                                                   (bvnot\n                                                                                                                                                                                                    (bvand x\n                                                                                                                                                                                                           (bvsrem x x)))))\n                                                                                                                                                                                          (bvshl\n                                                                                                                                                                                           (bvnot\n                                                                                                                                                                                            (bvsrem\n                                                                                                                                                                                             (bvshl x\n                                                                                                                                                                                                     (bvnot\n                                                                                                                                                                                                      (bvnot\n                                                                                                                                                                                                       (bvand x\n                                                                                                                                                                                                              (bvsrem x x)))))\n                                                                                                                                                                                             (bvshl\n                                                                                                                                                                                              (bvnot\n                                                                                                                                                                                               (bvsrem\n                                                                                                                                                                                                (bvshl x\n                                                                                                                                                                                                        (bvnot\n                                                                                                                                                                                                         (bvnot\n                                                                                                                                                                                                          (bvand x\n                                                                                                                                                                                                                 (bvsrem x x)))))\n                                                                                                                                                                                                (bvshl\n                                                                                                                                                                                                 (bvnot\n                                                                                                                                                                                                  (bvsrem\n                                                                                                                                                                                                   (bvshl x\n                                                                                                                                                                                                           (bvnot\n                                                                                                                                                    (bvnot\n                                                                                                                                                     (bvand x\n                                                                                                                                                             (bvsrem x x)))))\n                                                                                                                                   (bvshl\n                                                                                                                                    (bvnot\n                                                                                                                                     (bvsrem\n                                                                                                                                      (bvshl x\n                                                                                                                                            (bvnot\n                                                                                                                                             (bvnot\n                                                                                                                                              (bvand x\n                                                                                                                                                     (bvsrem x x)))))\n                                                                      (bvshl\n                                                                       (bvnot\n                                                                        (bvsrem\n                                                                         (bvshl x\n                                                                                 (bvnot\n                                                                                  (bvnot\n                                                                                   (bvand x\n                                                                                          (bvsrem x x)))))\n                                                                         (bvshl\n                                                                          (bvnot\n                                                                           (bvsrem\n                                                                            (bvshl x\n                                                                                    (bvnot\n                                                                                     (bvnot\n                                                                                      (bvand x\n                                                                                             (bvsrem x x)))))\n                                                                            (bvshl\n                                                                             (bvnot\n                                                                              (bvsrem\n                                                                               (bvshl x\n                                                                                       (bvnot\n                                                                                        (bvnot\n                                                                                         (bvand x\n                                                                                                (bvsrem x x)))))\n                                                                             (bvshl\n                                                                              (bvnot\n                                                                               (bvsrem\n                                                                                (bvshl x\n                                                                                        (bvnot\n                                                                                         (bvnot\n                                                                                          (bvand x\n                                                                                                 (bvsrem x x)))))\n                                                                               (bvshl\n                                                                                (bvnot\n                                                                                 (bvsrem\n                                                                                  (bvshl x\n                                                                                          (bvnot\n                                                                                           (bvnot\n                                                                                            (bvand x\n                                                                                                   (bvsrem x x)))))\n                                                                                 (bvshl\n                                                                                  (bvnot\n                                                                                   (bvsrem\n                                                                                    (bvshl x\n                                                                                            (bvnot\n                                                                                             (bvnot\n                                                                                              (bvand x\n                                                                                                     (bvsrem x x)))))\n                                                                                  (bvshl\n                                                                                   (bvnot\n                                                                                    (bvsrem\n                                                                                     (bvshl x\n                                                                                             (bvnot\n                                                                                              (bvnot\n                                                                                               (bvand x\n                                                                                                      (bvsrem x x)))))\n                                                                                   (bvshl\n                                                                                    (bvnot\n                                                                                     (bvsrem\n                                                                                      (bvshl x\n                                                                                              (bvnot\n                                                                                               (bvnot\n                                                                                                (bvand x\n                                                                                                       (bvsrem x x)))))\n                                                                                     (bvshl\n                                                                                      (bvnot\n                                                                                       (bvsrem\n                                                                                        (bvshl x\n                                                                                                (bvnot\n                                                                                                 (bvnot\n                                                                                                  (bvand x\n                                                                                                         (bvsrem x x)))))\n                                                                                       (bvshl\n                                                                                        (bvnot\n                                                                                         (bvsrem\n                                                                                          (bvshl x\n                                                                                                  (bvnot\n                                                                                                   (bvnot\n                                                                                                    (bvand x\n                                                                                                           (bvsrem x x)))))\n                                                                                         (bvshl\n                                                                                          (bvnot\n                                                                                           (bvsrem\n                                                                                            (bvshl x\n                                                                                                    (bvnot\n                                                                                                     (bvnot\n                                                                                                      (bvand x\n                                                                                                             (bvsrem x x)))))\n                                                                                            (bvshl\n                                                                                             (bvnot\n                                                                                              (bvsrem\n                                                                                               (bvshl x\n                                                                                                       (bvnot\n                                                                                                        (bvnot\n                                                                                                         (bvand x\n                                                                                                                (bvsrem x x)))))\n                                                                                               (bvshl\n                                                                                                (bvnot\n                                                                                                 (bvsrem\n                                                                                                  (bvshl x\n                                                                                                          (bvnot\n                                                                                                           (bvnot\n                                                                                                            (bvand x\n                                                                                                                   (bvsrem x x)))))\n                                                                                                 (bvshl\n                                                                                                  (bvnot\n                                                                                                   (bvsrem\n                                                                                                    (bvshl x\n                                                                                                            (bvnot",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvredor x)))\n    (bv2nat count)\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x\n         (bvnot (bvshl x #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd (bvand x #x5555555555555555)\n         (bvand (bvlshr (bvand x #x3333333333333333) #x1) #x5555555555555555)\n         (bvadd (bvand (bvlshr (bvand x #x0f0f0f0f0f0f0f0f) #x2) #x3333333333333333)\n                (bvlshr (bvand x #x00ff00ff00ff00ff) #x4))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvadd\n        (bvudiv x #x0000000000000002)\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (f (bvudiv x #x0000000000000002)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvadd (bvor (bvlshr x #x0000000000000001) x)\n                      (bvurem (bvlshr x #x0000000000000002) #x0000000000000003))))\n    (bvurem (bvurem count #x000000000000000F)\n            #x000000000000000F)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (let ((count (bvpopcount x)))\n    (ite (= count #x0000000000000000) #x0000000000000000\n      (bvsub count #x0000000000000001))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd\n    (bvudiv x #x0000000000000002)\n    (ite (= x #x0000000000000000) #x0000000000000000\n      (f (bvudiv x #x0000000000000002))\n    )\n  )\n)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvpopcnt x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvpopcount x))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvadd (bvor (bvlshr x #x0000000000000001) x) (ite (= x #x0000000000000000) #x0000000000000000 #x0000000000000001)))"
    ],
    "time_diff_ms": 560.489,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvshl x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvand x \\#x5555555555555555) (bvand (bvlshr x \\#x1) \\#x5555555555555555)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot (bvnot (bvand x (bvsrem x x))))) (bvshl (bvnot (bvsrem (bvshl x (bvnot)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvredor x))) (bv2nat count)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvshl x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvand x \\#x5555555555555555) (bvand (bvlshr (bvand x \\#x3333333333333333) \\#x1) \\#x5555555555555555) (bvadd (bvand (bvlshr (bvand x \\#x0f0f0f0f0f0f0f0f) \\#x2) \\#x3333333333333333) (bvlshr (bvand x \\#x00ff00ff00ff00ff) \\#x4))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvudiv x \\#x0000000000000002) (ite (= x \\#x0000000000000001) \\#x0000000000000001 (f (bvudiv x \\#x0000000000000002)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvadd (bvor (bvlshr x \\#x0000000000000001) x) (bvurem (bvlshr x \\#x0000000000000002) \\#x0000000000000003)))) (bvurem (bvurem count \\#x000000000000000F) \\#x000000000000000F)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (let ((count (bvpopcount x))) (ite (= count \\#x0000000000000000) \\#x0000000000000000 (bvsub count \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvudiv x \\#x0000000000000002) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (f (bvudiv x \\#x0000000000000002)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcnt x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvpopcount x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd (bvor (bvlshr x \\#x0000000000000001) x) (ite (= x \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x1",
        "#x5555555555555555"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x5555555555555555",
        "#x3333333333333333",
        "#x1",
        "#x00ff00ff00ff00ff",
        "#x2",
        "#x0f0f0f0f0f0f0f0f",
        "#x4"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x000000000000000F",
        "#x0000000000000002",
        "#x0000000000000003",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x000000000000000F",
      "#x0000000000000000",
      "#x5555555555555555",
      "#x3333333333333333",
      "#x1",
      "#x4",
      "#x00ff00ff00ff00ff",
      "#x0000000000000002",
      "#x0000000000000003",
      "#x2",
      "#x0f0f0f0f0f0f0f0f",
      "#x0000000000000001"
    ]
  },
  "hd-22.sl": {
    "completions": [
      "(bvand x #x5555555555555555)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x1111111111111111)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x0000000000000001)",
      "(bvurem x #x0000000000000002)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x5555555555555555)",
      "(bvand x #x0000000000000001)",
      "(bvand x #x0000000000000001)"
    ],
    "time_diff_ms": 963.371,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x1111111111111111))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvurem x \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x5555555555555555))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x \\#x0000000000000001))"
    ],
    "constants": [
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x1111111111111111"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x5555555555555555"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x5555555555555555",
      "#x0000000000000002",
      "#x1111111111111111",
      "#x0000000000000001"
    ]
  },
  "hd-18.sl": {
    "completions": [
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "((= x #x0000000000000001))",
      "((= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(= x #x0000000000000001))",
      "((= x #x0000000000000001))",
      "(ite (= x #x0000000000000001) true false)",
      "((= x #x0000000000000001))",
      "(and (= x #x0000000000000001) (not (= x #x0000000000000000)))",
      "(ite (bvult x #x0000000000000002) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (= x #x0000000000000001) true false)",
      "(ite (bvult x #x0000000000000002) true false)",
      "(= x #x0000000000000001))",
      "(= x #x00000000000000000000000000000001))",
      "(ite (bvult x #x0000000000000002) false (ite (= x #x0000000000000001) true (ite (= (bvand x (bvsub x #x0000000000000001)) #x0000000000000000) true false)))"
    ],
    "time_diff_ms": 706.882,
    "solutions": [
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool ((= x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) Bool (and (= x \\#x0000000000000001) (not (= x \\#x0000000000000000))))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (= x \\#x0000000000000001) true false))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) true false))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (= x \\#x00000000000000000000000000000001))",
      "(define-fun f (x (BitVec 64)) Bool (ite (bvult x \\#x0000000000000002) false (ite (= x \\#x0000000000000001) true (ite (= (bvand x (bvsub x \\#x0000000000000001)) \\#x0000000000000000) true false))))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x00000000000000000000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x00000000000000000000000000000001",
      "#x0000000000000002",
      "#x0000000000000001"
    ]
  },
  "hd-20.sl": {
    "completions": [
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvand (bvnot x) (bvadd x #x0000000000000001)))\n     x)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(bvadd x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd ((_ bv1 64) x) ((_ bv1 64) x)))",
      "(ite (= ((_+ x #x0000000000000001) ((_bvand x (_bvsub x #x0000000000000001)))) #x0000000000000000) ((_bvadd x #x0000000000000001)) ((_bvadd ((_bvand x (_bvsub x #x0000000000000001))) ((_bvlshr ((_bvand x (_bvsub x #x0000000000000001))) #x0000000000000001))))))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     x)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000) (bvadd x #x0000000000000001) #x0000000000000000)",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub x #x0000000000000001)))\n     #x0000000000000000)",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvadd x #x0000000000000001))",
      "(bvadd x #x0000000000000001))",
      "(ite (bvsdiv x #x0000000000000001) (bvadd x #x0000000000000001) (bvshl x #x0000000000000001))",
      "(ite (bvugt x #x0000000000000000)\n     (bvadd x (bvnot (bvsub (bvand x (bvneg x)) #x0000000000000001)))\n     x)"
    ],
    "time_diff_ms": 659.879,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvand (bvnot x) (bvadd x \\#x0000000000000001))) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ bv1 64) x) x) ((_ bv2 64) x) (bvadd ((_ bv1 64) x) ((_ bv1 64) x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_+ x \\#x0000000000000001) ((_bvand x (_bvsub x \\#x0000000000000001)))) \\#x0000000000000000) ((_bvadd x \\#x0000000000000001)) ((_bvadd ((_bvand x (_bvsub x \\#x0000000000000001))) ((_bvlshr ((_bvand x (_bvsub x \\#x0000000000000001))) \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) x))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x \\#x0000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub x \\#x0000000000000001))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvsdiv x \\#x0000000000000001) (bvadd x \\#x0000000000000001) (bvshl x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvugt x \\#x0000000000000000) (bvadd x (bvnot (bvsub (bvand x (bvneg x)) \\#x0000000000000001))) x))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-21.sl": {
    "completions": [
      "(bvand a b)",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand x\n       (bvxor a\n              (bvxor b c)))",
      "(bvand x (bvnot a))",
      "(bvand x (bvnot x))",
      "(bvand x (bvlshr (bvadd (bvlshr x a) b) c))",
      "(bvand a (bvnot a))",
      "(bvand x (bvor a (bvor b c)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot x))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand x (bvnot x))",
      "(bvand x (bvnot a))",
      "(bvand a (bvnot (bvand b c)))",
      "(bvand x (bvnot x))",
      "(bvand x x))",
      "(bvand a (bvnot a))",
      "(bvand a (bvnot (bvxor a (bvxor b c))))",
      "(bvand a (bvnot (bvand b c)))"
    ],
    "time_diff_ms": 734.097,
    "solutions": [
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a b))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvxor a (bvxor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvlshr (bvadd (bvlshr x a) b) c)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvor a (bvor b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x (bvnot x)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand x x))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot a)))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvxor a (bvxor b c)))))",
      "(define-fun f (x (BitVec 64) a (BitVec 64) b (BitVec 64) c (BitVec 64)) (BitVec 64) (bvand a (bvnot (bvand b c))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ]
  },
  "hd-19.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64)) (m (_ BitVec 64)) (k (_ BitVec 64))) (_ BitVec 64)\n  x)",
      "(ite (bvult k m)\n     (bvlshr (bvand x (bvnot (bvsub (bvshl #x0000000000000001 k) #x0000000000000001))) k)\n     (bvlshr (bvand x (bvnot (bvsub (bvshl #x0000000000000001 m) #x0000000000000001))) m))",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (bvult k m) (bvlshr x k) (bvshl x k))",
      "(ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x)",
      "(ite (bvult k m) (bvlshr x k) (bvashr x k))",
      "(ite (= (bvand x m) m) x (bvor (bvand x (bvnot m)) (bvlshr x k)))",
      "(ite (bvult k m) (bvlshr x k) (bvlshr (bvlshr x k) m))",
      "(ite (bvult k m) (bvand x (bvsub m (bvshl #x0000000000000001 k))) (bvor x (bvand m (bvlshr x k))))",
      "(ite (not (= (bvand x m) m)) (bvor (bvand x (bvnot m)) (bvlshr x k)) x)",
      "(ite (= k #x0000000000000000) x (ite (= k #x0000000000000001) (bvlshr x m) (bvlshr (bvand x (bvnot m)) (bvsub k #x0000000000000001))))",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) x)",
      "(ite (bvult k m) (bvlshr (bvlshr x k) k) x)",
      "(ite (= (bvand x m) m) x (bvxor x (bvlshr (bvand x m) k)))",
      "(ite (= (bvlshr x k) m) x (bvlshr (bvlshr x k) k))",
      "(ite (= (bvand x m) m) x (bvlshr (bvlshr x k) k))",
      "(ite (= (bvand x m) m) x (bvlshr (bvand x (bvnot m)) k))",
      "(ite (bvult k m) x (bvlshr x k))",
      "(ite (= (bvand x m) m) x (bvadd x (bvlshr m k)))",
      "(ite (= (bvand x m) m) x (bvadd x (bvlshr (bvand x (bvnot m)) k)))"
    ],
    "time_diff_ms": 162.494,
    "solutions": [
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) x)",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvand x (bvnot (bvsub (bvshl \\#x0000000000000001 k) \\#x0000000000000001))) k) (bvlshr (bvand x (bvnot (bvsub (bvshl \\#x0000000000000001 m) \\#x0000000000000001))) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvshl x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult (bvlshr x k) m) (bvor (bvand x (bvnot m)) (bvlshr x k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvashr x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvor (bvand x (bvnot m)) (bvlshr x k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr x k) (bvlshr (bvlshr x k) m)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvand x (bvsub m (bvshl \\#x0000000000000001 k))) (bvor x (bvand m (bvlshr x k)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (not (= (bvand x m) m)) (bvor (bvand x (bvnot m)) (bvlshr x k)) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= k \\#x0000000000000000) x (ite (= k \\#x0000000000000001) (bvlshr x m) (bvlshr (bvand x (bvnot m)) (bvsub k \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) (bvlshr (bvlshr x k) k) x))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvxor x (bvlshr (bvand x m) k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvlshr x k) m) x (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvlshr (bvlshr x k) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvlshr (bvand x (bvnot m)) k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (bvult k m) x (bvlshr x k)))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvadd x (bvlshr m k))))",
      "(define-fun f (x (BitVec 64) m (BitVec 64) k (BitVec 64)) (BitVec 64) (ite (= (bvand x m) m) x (bvadd x (bvlshr (bvand x (bvnot m)) k))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-07.sl": {
    "completions": [
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))"
    ],
    "time_diff_ms": 181.002,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000001"
    ]
  },
  "hd-10.sl": {
    "completions": [
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))",
      "(= (nlz x) (nlz y))"
    ],
    "time_diff_ms": 752.564,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (= (nlz x) (nlz y)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ]
  },
  "hd-11.sl": {
    "completions": [
      "(ite (bvult x y) true false)",
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult (bvlshr x 63) (bvlshr y 63)) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvslt (bvlshr x 63) (bvlshr y 63)) true false)",
      "(ite (bvult x y) true false)",
      "(ite (bvult (bvshl x (nlz x)) (bvshl y (nlz y))) true false)",
      "(> (nlz x) (nlz y))",
      "(ite (bvult x y) true false)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool\n  (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))"
    ],
    "time_diff_ms": 654.705,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvslt (bvlshr x 63) (bvlshr y 63)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvshl x (nlz x)) (bvshl y (nlz y))) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (> (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult x y) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (nlz x)) (bvlshr y (nlz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvnl x) (bvnl y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (bvlshr x (bvclz x)) (bvlshr y (bvclz y))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      63
    ]
  },
  "hd-06.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(ite (= ((_ extract 0 0) x) #b0) (bvadd x #x0000000000000001) (f (bvor x (bvsub x #x0000000000000001))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub x #x0000000000000001))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot (bvsub #x0000000000000000 (bvand x (bvsub x #x0000000000000001))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(ite (bvslt x #x0000000000000001) #x0000000000000001 (bvadd x (bvand x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(ite (= ((_ extract 0 0) x) #x0000000000000000) (bvadd x #x0000000000000001) (ite (= ((_ extract 1 1) x) #x0000000000000000) (bvadd x #x0000000000000002) (ite (= ((_ extract 2 2) x) #x0000000000000000) (bvadd x #x0000000000000004) (ite (= ((_ extract 3 3) x) #x0000000000000000) (bvadd x #x0000000000000008) (ite (= ((_ extract 4 4) x) #x0000000000000000) (bvadd x #x0000000000000010) (ite (= ((_ extract 5 5) x) #x0000000000000000) (bvadd x #x0000000000000020) (ite (= ((_ extract 6 6) x) #x0000000000000000) (bvadd x #x0000000000000040) (bvadd x #x0000000000000080)))))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvior x (bvadd x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvadd x\n           (bvand x\n                  (bvnot x)\n           )\n    )\n)",
      "(ite (= ((_ extract 0 0) x) #x0000000000000000) (bvadd x #x0000000000000001) (ite (= ((_ extract 1 1) x) #x0000000000000000) (bvadd x #x0000000000000002) (bvadd x #x0000000000000004)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvior x (bvadd x #x0000000000000001)))"
    ],
    "time_diff_ms": 621.076,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#b0) (bvadd x \\#x0000000000000001) (f (bvor x (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot (bvsub \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000001) \\#x0000000000000001 (bvadd x (bvand x (bvnot x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0000000000000000) (bvadd x \\#x0000000000000001) (ite (= ((_ extract 1 1) x) \\#x0000000000000000) (bvadd x \\#x0000000000000002) (ite (= ((_ extract 2 2) x) \\#x0000000000000000) (bvadd x \\#x0000000000000004) (ite (= ((_ extract 3 3) x) \\#x0000000000000000) (bvadd x \\#x0000000000000008) (ite (= ((_ extract 4 4) x) \\#x0000000000000000) (bvadd x \\#x0000000000000010) (ite (= ((_ extract 5 5) x) \\#x0000000000000000) (bvadd x \\#x0000000000000020) (ite (= ((_ extract 6 6) x) \\#x0000000000000000) (bvadd x \\#x0000000000000040) (bvadd x \\#x0000000000000080)))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvadd x (bvand x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= ((_ extract 0 0) x) \\#x0000000000000000) (bvadd x \\#x0000000000000001) (ite (= ((_ extract 1 1) x) \\#x0000000000000000) (bvadd x \\#x0000000000000002) (bvadd x \\#x0000000000000004))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvadd x \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        0,
        "#x0000000000000001",
        "#b0"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        "#x0000000000000000",
        1,
        2,
        3,
        "#x0000000000000004",
        4,
        "#x0000000000000010",
        5,
        "#x0000000000000020",
        6,
        "#x0000000000000040",
        "#x0000000000000002",
        "#x0000000000000008",
        "#x0000000000000080",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        "#x0000000000000000",
        1,
        "#x0000000000000004",
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      0,
      "#x0000000000000000",
      1,
      2,
      3,
      "#x0000000000000004",
      4,
      "#x0000000000000010",
      5,
      "#x0000000000000020",
      6,
      "#x0000000000000040",
      "#b0",
      "#x0000000000000002",
      "#x0000000000000008",
      "#x0000000000000080",
      "#x0000000000000001"
    ]
  },
  "hd-04.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x\n          (bvand x (bvneg x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvlshr x (bvand x (bvneg x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvneg x)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvor x (bvor (bvnot x) (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvneg x)))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvsub x #x0000000000000001))"
    ],
    "time_diff_ms": 594.965,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x (bvand x (bvneg x)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (_ bv1 64)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvlshr x (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvor (bvnot x) (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvneg (bvsub x (bvand x (bvneg x))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-13.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n  (bvor (bvand (bvlshr x #x0000000000000001f) #x0000000000000001)\n        (bvneg (bvlshr x #x0000000000000001f))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvnot (bvlshr x #x0000000000000001))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n    (ite (= x #x0000000000000001) #x0000000000000001\n      (ite (= x #x0000000000000000) #x0000000000000000\n        (ite (= x #xffffffffffffffff) #x0000000000000001\n          #x0000000000000000)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x000000000000001f) #x0000000000000001 0))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000)\n       #x0000000000000000\n       #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n    (ite (= x #x0000000000000001) #x0000000000000001\n      (ite (= x #x0000000000000000) #x0000000000000000\n        (ite (= x #xffffffffffffffff) #x0000000000000001\n          #x0000000000000000)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x0000000000000000) #x0000000000000000 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 x))))))))))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000001)))))",
      "(ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x5555555555555555) #x0000000000000000 (ite (= x #x00000000ffffffff) #x0000000000000001 (ite (= x #x0000000000000020) #x0000000000000001 (ite (= x #x0000000000000001) #x0000000000000001 x))))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64) (ite (= x #x0000000000010000) #x0000000000000001 (ite (= x #x000000000000001f) #x0000000000000001 (ite (= x #x0000000000000002) #x0000000000000001 (ite (= x #x00000000ffffffff) #x0000000000000001 #x0000000000000000)))))",
      "(define-fun f ((x (BitVec 64))) (BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000001)))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x000000000000001f) #x0000000000000001\n  (ite (= x #x0000000000000001) #x0000000000000001\n  (ite (= x #x0000000000000000) #x0000000000000000\n  (ite (= x #xffffffffffffffff) #x0000000000000001\n  (ite (= x #x0000000000010000) #x0000000000000001\n  (ite (= x #x5555555555555555) #x0000000000000000\n  (ite (= x #x00000000ffffffff) #x0000000000000001\n  (ite (= x #x0000000000000002) #x0000000000000001\n  (ite (= x #x0000000000000020) #x0000000000000001\n  (ite (= x #x0000000000000001) #x0000000000000001\n  (ite true #x0000000000000000))))))))))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (ite (= x #x000000000000001f) #x0000000000000001\n        (ite (= x #x0000000000000001) #x0000000000000001\n            (ite (= x #x0000000000000000) #x0000000000000000\n                (ite (= x #xffffffffffffffff) #x0000000000000001\n                    #x0000000000000000)))))",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(ite (= x #x000000000000001f) #x0000000000000001 #x0000000000000000)",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)",
      "(ite (bvslt x #x0000000000000000) #x0000000000000001 #x0000000000000000)"
    ],
    "time_diff_ms": 386.984,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor (bvand (bvlshr x \\#x0000000000000001f) \\#x0000000000000001) (bvneg (bvlshr x \\#x0000000000000001f))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvnot (bvlshr x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 0))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 x))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 x)))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000010000) \\#x0000000000000001 (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000010000) \\#x0000000000000001 (ite (= x \\#x5555555555555555) \\#x0000000000000000 (ite (= x \\#x00000000ffffffff) \\#x0000000000000001 (ite (= x \\#x0000000000000002) \\#x0000000000000001 (ite (= x \\#x0000000000000020) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite true \\#x0000000000000000))))))))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 (ite (= x \\#x0000000000000001) \\#x0000000000000001 (ite (= x \\#x0000000000000000) \\#x0000000000000000 (ite (= x \\#xffffffffffffffff) \\#x0000000000000001 \\#x0000000000000000)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x000000000000001f) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvslt x \\#x0000000000000000) \\#x0000000000000001 \\#x0000000000000000))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001f",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        0,
        "#x0000000000000001",
        "#x000000000000001f"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x5555555555555555",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x000000000000001f",
        "#x00000000ffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x5555555555555555",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x000000000000001f",
        "#x00000000ffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#x0000000000010000",
        "#x000000000000001f",
        "#x00000000ffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x5555555555555555",
        "#x0000000000000020",
        "#x0000000000000002",
        "#x0000000000010000",
        "#x000000000000001f",
        "#x00000000ffffffff",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x000000000000001f",
        "#xffffffffffffffff",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001",
        "#x000000000000001f"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      0,
      "#x0000000000000000",
      "#x5555555555555555",
      "#x0000000000000020",
      "#x0000000000000002",
      "#x0000000000000001f",
      "#x0000000000010000",
      "#x000000000000001f",
      "#x00000000ffffffff",
      "#xffffffffffffffff",
      "#x0000000000000001"
    ]
  },
  "hd-12.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (nlz x) (nlz y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (bvult (bvnot x) (bvnot y)) true false)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool (bvult (nlz x) (nlz y)))",
      "(ite (< (nlz x) (nlz y)) true false)",
      "(ite (bvult (nlz x) (nlz y)) true false)"
    ],
    "time_diff_ms": 321.563,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (bvnot x) (bvnot y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (bvult (nlz x) (nlz y)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (< (nlz x) (nlz y)) true false))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) Bool (ite (bvult (nlz x) (nlz y)) true false))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64
    ]
  },
  "hd-05.sl": {
    "completions": [
      "(bvior x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvnot (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvor x (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvnot x))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bv| (bvand x (bvsub x #x0000000000000001)) (bvneg (bvsub x #x0000000000000001)))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvor x (bvsub x #x0000000000000001))",
      "(bv| x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvior x (bvsub x #x0000000000000001))",
      "(bvsub x (bvsub #x0000000000000001 (bvand x (bvneg x))))"
    ],
    "time_diff_ms": 216.919,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvnot (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvor x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvnot x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| (bvand x (bvsub x \\#x0000000000000001)) (bvneg (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvor x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bv| x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvior x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub x (bvsub \\#x0000000000000001 (bvand x (bvneg x)))))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000001"
    ]
  },
  "hd-16.sl": {
    "completions": [
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  y)",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvor x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvor x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #b0) y x))",
      "(ite (= y #b0) x y)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(ite (= x #b0) y x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(ite (= x #x0000000000000000) y x)",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)\n  (ite (= x #x0000000000000000) y x))",
      "(define-fun f ((x (BitVec 64)) (y (BitVec 64))) (BitVec 64) (bvand x y))",
      "(define-fun f ((x (_ BitVec 64)) (y (_ BitVec 64))) (BitVec 64) x)"
    ],
    "time_diff_ms": 682.401,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) y)",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvor x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= y \\#b0) x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#b0) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) y x))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvand x y))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) x)"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64,
        "#b0"
      ],
      [
        64,
        "#b0"
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64,
        "#b0"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#b0"
    ]
  },
  "hd-01.sl": {
    "completions": [
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(ite (bvuge x #x0000000000000001) (bvsub x #x0000000000000001) #x0000000000000000)"
    ],
    "time_diff_ms": 26.022,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (bvuge x \\#x0000000000000001) (bvsub x \\#x0000000000000001) \\#x0000000000000000))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-17.sl": {
    "completions": [
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvor x (bvsub x #x0000000000000001)))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (_ bv1 64))))",
      "(ite (= x #x0000000000000000) #x0000000000000000\n     (bvand x (bvsub x #x0000000000000001)))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (BitVec 64)\n  (bvand x (bvsub x (bvor x (bvadd x (_ bv1 64))))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))",
      "(bvand x (bvsub x #x0000000000000001))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (bvnot x))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n    (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f ((x (_ BitVec 64))) (_ BitVec 64)\n  (bvand x (bvsub x (bvnot x))))"
    ],
    "time_diff_ms": 325.604,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvor x (bvsub x \\#x0000000000000001)))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvsub x \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvor x (bvadd x (_ bv1 64))))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (_ bv1 64))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvsub x (bvnot x))))"
    ],
    "constants": [
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-15.sl": {
    "completions": [
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsdiv (bvadd x y) #x0000000000000002))",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvlshr (bvadd x y) #x0000000000000001)\n     (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(ite (<= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001))",
      "(ite (>= (+ x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvlshr (bvadd x y) #x0000000000000001)\n     (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub #x0000000000000000 (bvlshr (bvsub x y) #x0000000000000001)))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvlshr (bvadd x y) #x0000000000000001))",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub #x0000000000000000 (bvlshr (bvsub x y) #x0000000000000001)))",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvudiv (bvadd x y) #x0000000000000002)\n     (bvsub (bvsdiv (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000)\n     (bvlshr (bvadd x y) #x0000000000000001)\n     (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= x y) (bvlshr (bvadd x y) #x0000000000000001) (bvlshr (bvadd y x) #x0000000000000001))"
    ],
    "time_diff_ms": 179.393,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsdiv (bvadd x y) \\#x0000000000000002)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (<= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (+ x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub \\#x0000000000000000 (bvlshr (bvsub x y) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvlshr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub \\#x0000000000000000 (bvlshr (bvsub x y) \\#x0000000000000001))))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvudiv (bvadd x y) \\#x0000000000000002) (bvsub (bvsdiv (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= x y) (bvlshr (bvadd x y) \\#x0000000000000001) (bvlshr (bvadd y x) \\#x0000000000000001)))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000002",
      "#x0000000000000001"
    ]
  },
  "hd-02.sl": {
    "completions": [
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(ite (= x #x0000000000000001) #x0000000000000001 #x0000000000000000)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x x) #x0000000000000001)",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvnot x) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvnot (bvadd x #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001)",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))",
      "(bvsub (bvadd x #x0000000000000001) #x0000000000000001))"
    ],
    "time_diff_ms": 182.155,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000001) \\#x0000000000000001 \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvnot x) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvnot (bvadd x \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvsub (bvadd x \\#x0000000000000001) \\#x0000000000000001))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x0000000000000001"
    ]
  },
  "hd-03.sl": {
    "completions": [
      "(bvand x (bvneg x))",
      "(ite (not (= ((_ extract 0 0) x) #x0000000000000000)) ((_ zero_extend 63) (bvand x (bvneg x))) #x0000000000000000)",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (= x #x0000000000000000) #x0000000000000000 (bvand x (bvneg x)))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(ite (not (= ((_ extract 0 0) x) #b0)) ((_ extract 0 0) x) #x0000000000000000)",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))",
      "(bvand x (bvneg x))"
    ],
    "time_diff_ms": 513.349,
    "solutions": [
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= ((_ extract 0 0) x) \\#x0000000000000000)) ((_ zero_extend 63) (bvand x (bvneg x))) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (= x \\#x0000000000000000) \\#x0000000000000000 (bvand x (bvneg x))))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (ite (not (= ((_ extract 0 0) x) \\#b0)) ((_ extract 0 0) x) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))",
      "(define-fun f (x (BitVec 64)) (BitVec 64) (bvand x (bvneg x)))"
    ],
    "constants": [
      [
        64
      ],
      [
        64,
        0,
        "#x0000000000000000",
        63
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        "#x0000000000000000"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64,
        0,
        "#x0000000000000000",
        "#b0"
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      0,
      "#x0000000000000000",
      "#b0",
      63
    ]
  },
  "hd-14.sl": {
    "completions": [
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) #x0000000000000000) (bvlshr (bvadd x y) #x0000000000000001) (bvsub (bvlshr (bvadd x y) #x0000000000000001) #x0000000000000001))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvudiv (bvadd x y) #x0000000000000002))",
      "(ite (>= (bvadd x y) #x00000000000000000000000000000001)\n     (bvlshr (bvadd x y) #x00000000000000001)\n     #x0000000000000000)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(ite (<= x y) y (bvadd (bvudiv (bvadd x y) #x0000000000000002) #x0000000000000000))",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(bvudiv (bvadd x y) #x0000000000000002)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (= x y) x (bvashr (bvadd x y) #x0000000000000001))",
      "(bvlshr (bvadd x y) #x0000000000000001)",
      "(bvashr (bvadd x y) #x0000000000000001)",
      "(ite (>= (bvadd x y) ((_ bv2 64))) ((_ bv1 64) ((_ bvashr (bvadd x y) ((_ bv1 64))) ((_ bv1 64))) ((_ bv0 64)))"
    ],
    "time_diff_ms": 49.329,
    "solutions": [
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x0000000000000000) (bvlshr (bvadd x y) \\#x0000000000000001) (bvsub (bvlshr (bvadd x y) \\#x0000000000000001) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) \\#x00000000000000000000000000000001) (bvlshr (bvadd x y) \\#x00000000000000001) \\#x0000000000000000))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (<= x y) y (bvadd (bvudiv (bvadd x y) \\#x0000000000000002) \\#x0000000000000000)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvudiv (bvadd x y) \\#x0000000000000002))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (= x y) x (bvashr (bvadd x y) \\#x0000000000000001)))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvlshr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (bvashr (bvadd x y) \\#x0000000000000001))",
      "(define-fun f (x (BitVec 64) y (BitVec 64)) (BitVec 64) (ite (>= (bvadd x y) ((_ bv2 64))) ((_ bv1 64) ((_ bvashr (bvadd x y) ((_ bv1 64))) ((_ bv1 64))) ((_ bv0 64)))))"
    ],
    "constants": [
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000000",
        "#x00000000000000001",
        "#x00000000000000000000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000000",
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000002"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64,
        "#x0000000000000001"
      ],
      [
        64
      ]
    ],
    "all_constants": [
      64,
      "#x0000000000000000",
      "#x00000000000000001",
      "#x00000000000000000000000000000001",
      "#x0000000000000002",
      "#x0000000000000001"
    ]
  }
}