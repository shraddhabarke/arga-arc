{
  "get-first-name-from-name-with-comma.sl": {
    "completions": [
      "(str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\") 1) \" \"))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof _arg_0 \",\" _arg_1))\n)",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name \n              (str.indexof name \",\" 0)\n              (str.indexof name \" \" 0)))",
      "(str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1))",
      "(str.at (str.replace _arg_0 \",\" \" \") _arg_1)",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \" \") (str.indexof _arg_0 \",\") 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (_arg_1 1) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" _arg_1)) \",\" 0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \",\")))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    _arg_0\n    (str.indexof _arg_0 \",\" _arg_1)\n    (-\n      (str.indexof _arg_0 \",\" (+\n        _arg_1 1))\n      (+\n        (str.indexof _arg_0 \",\" _arg_1)\n        1)\n    )\n  )\n)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.substr\n      _arg_0\n      (+ (str.indexof _arg_0 \",\" 0) 1)\n      (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))\n    )\n    0\n    (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)\n  )\n)",
      "(str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\"))",
      "(str.substr (str.replace _arg_0 \" \" \"\") (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" _arg_1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0\n              (str.indexof _arg_0 \",\" 0)\n              (ite (= _arg_1 1)\n                   (- (str.indexof _arg_0 \",\" 0) 1)\n                   (str.len _arg_0)\n                   )\n              )\n  )",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) 1)",
      "(str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\") 1) \",\"))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.substr _arg_0\n      (str.indexof _arg_0 \",\" (+ _arg_1 1))\n      (- (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \",\" (+ _arg_1 1))\n    )\n  )\n)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.indexof _arg_0 \" \"))",
      "(str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name\n              (str.indexof name \",\" 0)\n              (ite (= index 1)\n                   (- (str.indexof name \",\" 0) 1)\n                   (ite (= index 2)\n                        (- (str.len name) (+ (str.indexof name \",\" 0) 2))\n                        0\n                   )\n              )\n  )\n)",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)) 0 (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)) 0 (- (str.indexof _arg_0 \",\") 1))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name\n              (str.indexof name \",\" (+ index 1))\n              (str.indexof name \",\" index)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr (str.++ _arg_0 \",\") (str.indexof _arg_0 \",\") (+ (str.indexof _arg_0 \",\") (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" (+ _arg_1 1)) (- (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" (+ _arg_1 1)) 1)))",
      "(str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1))",
      "(ite (str.contains _arg_0 \",\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (_arg_1))\n     (str.substr _arg_0 0 _arg_1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr (str.replace _arg_0 \",\" \"\") (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1) (str.indexof (str.replace _arg_0 \",\" \"\") \",\" 0)))",
      "(str.substr (str.replace _arg_0 \",\" \" \") 0 (str.indexof (str.replace _arg_0 \",\" \" \") \" \" _arg_1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" _arg_1))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name\n              (str.indexof name \",\" 0)\n              (str.indexof name \" \" 0)))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr\n    (str.replace name \",\" \"\")\n    0\n    (str.indexof name \",\")))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0\n              (str.indexof _arg_0 \",\" 0)\n              (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" (+ _arg_1 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.replace _arg_0 \",\" \"\")\n    (ite (= _arg_1 1) 0\n      (ite (= _arg_1 2)\n        (+ 1 (str.indexof _arg_0 \",\" 0))\n        0))\n    (ite (= _arg_1 1)\n      (str.indexof _arg_0 \",\" 0)\n      (str.len (str.replace _arg_0 \",\" \"\")))\n  )\n)",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\") 1) \" \")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof _arg_0 \",\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (str.indexof name \",\" 0) (str.indexof name \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \",\" \" \") _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \" \") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (_arg_1 1) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" _arg_1)) \",\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (- (str.indexof _arg_0 \",\" (+ _arg_1 1)) (+ (str.indexof _arg_0 \",\" _arg_1) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \" \" \"\") (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\") 1) \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (str.indexof _arg_0 \",\" (+ _arg_1 1)) (- (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \",\" (+ _arg_1 1))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (str.indexof name \",\" 0) (ite (= index 1) (- (str.indexof name \",\" 0) 1) (ite (= index 2) (- (str.len name) (+ (str.indexof name \",\" 0) 2)) 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)) 0 (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)) 0 (- (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (str.indexof name \",\" (+ index 1)) (str.indexof name \",\" index)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.++ _arg_0 \",\") (str.indexof _arg_0 \",\") (+ (str.indexof _arg_0 \",\") (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" (+ _arg_1 1)) (- (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" (+ _arg_1 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (str.contains _arg_0 \",\") (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (_arg_1)) (str.substr _arg_0 0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1) (str.indexof (str.replace _arg_0 \",\" \"\") \",\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \" \") 0 (str.indexof (str.replace _arg_0 \",\" \" \") \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (str.indexof name \",\" 0) (str.indexof name \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace name \",\" \"\") 0 (str.indexof name \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" (+ _arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") (ite (= _arg_1 1) 0 (ite (= _arg_1 2) (+ 1 (str.indexof _arg_0 \",\" 0)) 0)) (ite (= _arg_1 1) (str.indexof _arg_0 \",\" 0) (str.len (str.replace _arg_0 \",\" \"\")))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) _arg_1))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        ","
      ],
      [
        "",
        0,
        ","
      ],
      [
        1,
        ","
      ],
      [
        0,
        " ",
        ","
      ],
      [
        "",
        0,
        " ",
        ","
      ],
      [
        " ",
        ","
      ],
      [
        1,
        ","
      ],
      [
        1,
        2,
        " ",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ","
      ],
      [
        1,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        0,
        " ",
        ","
      ],
      [
        "",
        " ",
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        ","
      ],
      [
        2,
        " ",
        ","
      ],
      [
        "",
        0,
        " ",
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        1,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        2,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        1,
        ","
      ],
      [
        2,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        ","
      ],
      [
        "",
        0,
        " ",
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        1,
        ","
      ],
      [
        "",
        0,
        " ",
        ","
      ],
      [
        0,
        " ",
        ","
      ],
      [
        " ",
        ","
      ],
      [
        0,
        " ",
        ","
      ],
      [
        "",
        0,
        ","
      ],
      [
        0,
        " ",
        ","
      ],
      [
        2,
        ","
      ],
      [
        1,
        " ",
        ","
      ],
      [
        2,
        ","
      ],
      [
        "",
        1,
        2,
        0,
        ","
      ],
      [
        2,
        ","
      ],
      [
        2,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      ",",
      2,
      " "
    ],
    "time_diff_ms": 138.539
  },
  "strip-html-from-text-or-numbers.sl": {
    "completions": [
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>|</b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.substr _arg_0 3 (- (str.len _arg_0) 7))",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<[^>]+>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")  ",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>|</b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 3 (- (str.len _arg_0) 7)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]+>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))"
    ],
    "constants": [
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>|</b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        3,
        7
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<[^>]+>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<[^>]*>"
      ],
      [
        "",
        "<b>"
      ]
    ],
    "all_constants": [
      "",
      3,
      "<[^>]+>",
      "<[^>]*>",
      7,
      "<b>|</b>",
      "<b>"
    ],
    "time_diff_ms": 2419.676
  },
  "count-total-words-in-a-cell.sl": {
    "completions": [
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(str.len _arg_0)",
      "(+ (str.len _arg_0) 1))",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(str.len _arg_0)",
      "(+ (str.len _arg_0) 1))",
      "(define-fun f ((_arg_0 String)) Int (str.len _arg_0))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(+ (str.to.int (str.len _arg_0)) 1)",
      "(define-fun f ((_arg_0 String)) Int (str.len _arg_0))",
      "(+ (str.len _arg_0) 1))",
      "(str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int\n    (str.len _arg_0))",
      "(str.len _arg_0)",
      "(str.len (str.replace (str.replace (str.replace _arg_0 \",\" \"\") \".\" \"\") \"-\" \" \"))",
      "(str.len _arg_0)",
      "(Start Int (str.len (str.replace _arg_0 \" \" \" \")))",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(str.len _arg_0)",
      "(+ (str.len _arg_0) 1))",
      "(Start Int (str.len _arg_0))",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))",
      "(str.len (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n    (str.len _arg_0))",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int\n    (str.len _arg_0))",
      "(str.len _arg_0)",
      "(str.len (str.replace _arg_0 \" \" \" \") 1)",
      "(str.len _arg_0))",
      "(str.len _arg_0))",
      "(+ (str.len _arg_0) 1)",
      "(str.len (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \",\" \"\") \".\" \"\") \";\" \"\") \"?\" \"\") \"!\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.to.int (str.len _arg_0)) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace (str.replace _arg_0 \",\" \"\") \".\" \"\") \"-\" \" \")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (Start Int (str.len (str.replace _arg_0 \" \" \" \"))))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (Start Int (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \" \") 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \",\" \"\") \".\" \"\") \";\" \"\") \"?\" \"\") \"!\")))"
    ],
    "constants": [
      [],
      [],
      [
        1
      ],
      [],
      [],
      [
        1
      ],
      [
        "",
        " "
      ],
      [],
      [
        1
      ],
      [],
      [],
      [],
      [
        1
      ],
      [],
      [
        1
      ],
      [
        "",
        " "
      ],
      [],
      [],
      [
        "",
        "-",
        " ",
        ",",
        "."
      ],
      [],
      [
        " "
      ],
      [],
      [],
      [],
      [],
      [
        1
      ],
      [],
      [
        "",
        " "
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        1
      ],
      [],
      [],
      [
        1,
        " "
      ],
      [],
      [],
      [
        1
      ],
      [
        "",
        ";",
        "!",
        ",",
        ".",
        "?"
      ]
    ],
    "all_constants": [
      "",
      1,
      ",",
      ".",
      "-",
      ";",
      "!",
      " ",
      "?"
    ],
    "time_diff_ms": 1559.636
  },
  "stackoverflow8.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 5) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0)))",
      "(define-fun f ((s String)) String\n  (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1))) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "\"(str.substr _arg_0 (- (str.indexof _arg_0 \\\"/\\\" 0) 6) 100)\"",
      "(define-fun f ((s String)) String\n  (str.substr s (+ (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1))) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 5) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (- (str.indexof _arg_0 \\\"/\\\" 0) 6) 100)\")",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        5
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "home/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 6) 100)"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/",
        "home/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      5,
      "home/",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 6) 100)"
    ],
    "time_diff_ms": 2084.973
  },
  "phone-6-long.sl": {
    "completions": [
      "\"(str.at name 5)\"",
      "\"(str.substr name 5 3))\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.at name 5)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.substr name 5 3))\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(str.substr name 5 3))",
      "(str.at name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "\"(str.at name 4)\"",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at name 5)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n    (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.at name 5)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 6))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 6))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(str.at name 5)",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at name 5)\"",
      "\"(str.at name 5)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.at name 5)\""
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 6))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 6))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")"
    ],
    "constants": [
      [
        "(str.at name 5)"
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        5
      ],
      [
        "(str.at name 5)"
      ],
      [
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        5
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        4
      ],
      [
        3,
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 5)"
      ],
      [
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        "(str.at name 5)"
      ],
      [
        5
      ],
      [
        4
      ],
      [
        5
      ],
      [
        5
      ],
      [
        6
      ],
      [
        5
      ],
      [
        5
      ],
      [
        3,
        4
      ],
      [
        4
      ],
      [
        6
      ],
      [
        3,
        4
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 5)"
      ],
      [
        "(str.at name 5)"
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 5)"
      ]
    ],
    "all_constants": [
      3,
      4,
      5,
      6,
      "(str.at name 5)",
      "(str.substr name 5 3))",
      "(str.at name 4)"
    ],
    "time_diff_ms": 1358.497
  },
  "phone-10.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 5)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)) )",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0)\n    \" (\"\n    (str.substr name 1 3)\n    \") \"\n    (str.substr name 5 3)\n    \"-\"\n    (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 5)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        5,
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        4,
        7,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      1,
      3,
      4,
      5,
      2,
      7,
      "-",
      9,
      8,
      11,
      6,
      13,
      " (",
      10,
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      "+"
    ],
    "time_diff_ms": 2459.3720000000003
  },
  "phone-6.sl": {
    "completions": [
      "\"(str.substr name 5 3))\"",
      "(str.substr name 5 3))",
      "\"(str.at (str.substr name 5 3) 0)\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at (str.substr name 5 3) 0)\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.at (str.substr name 5 3) 0 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.at name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at (str.replace name \"+\" \"\") 1)\"",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(str.at (str.substr name 4 3) 0 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 3) 0)\"",
      "\"(str.substr name 5 3))\"",
      "(str.substr name 5 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 2 3) (ite (= (str.at name 2) \" \") (str.substr name 3 3) (str.substr name 1 3)))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at (str.substr name 5 12) 0)\"",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.substr name 5 3))\"",
      "\"(str.at (str.substr name 5 12) 0)\"",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 12) 0)\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 11) 1)\"",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 3) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 3) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at (str.substr name 5 3) 0 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.replace name \")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at (str.substr name 4 3) 0 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 3) 0)\")",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 2 3) (ite (= (str.at name 2) \" \") (str.substr name 3 3) (str.substr name 1 3))))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 12) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 12) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 12) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 1)\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ],
    "constants": [
      [
        "(str.substr name 5 3))"
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 3) 0)"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 3) 0)"
      ],
      [
        3,
        5
      ],
      [
        5
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.replace name "
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 3) 0)"
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        3,
        5
      ],
      [
        3,
        1,
        " ",
        2
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 12) 0)"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        "(str.at (str.substr name 5 12) 0)"
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 12) 0)"
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 11) 1)"
      ],
      [
        1,
        " ",
        3
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      "(str.at (str.substr name 5 12) 0)",
      "(str.substr name 5 3))",
      "(str.at (str.replace name ",
      " ",
      "(str.at (str.substr name 5 3) 0)",
      "(str.at (str.substr name 5 11) 1)"
    ],
    "time_diff_ms": 1207.218
  },
  "phone-7-short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(str.substr name 6 3))",
      "(ite (str.prefixof name \"+6\") (str.substr name 6 3) (ite (str.prefixof name \"+7\") (str.substr name 6 3) (ite (str.prefixof name \"+8\") (str.substr name 6 3) (str.substr name 6 3))))",
      "(define-fun f (name String) String\n  (str.at name 6 9))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \" 0) 2) 3)\n     (str.substr name (+ (str.indexof name \"-\" 0) 1) 3))",
      "\"(str.substr name 6 3))\"",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(str.substr name 6 3))",
      "(define-fun f ((name String)) String (str.substr name 5 3))",
      "\"(str.substr name 5 3))\"",
      "\"(str.substr name 6 3))\"",
      "(str.substr (str.substr name 6 3) 0 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 7 8))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "\"(str.at (str.substr name 6 11) 4)\"",
      "(ite (= (str.at name 0) \"+\")\n     (str.substr name 6 3)\n     (str.substr name 5 3))",
      "(define-fun f ((name String)) String (str.substr name 6 3))",
      "\"(str.substr name 6 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(str.substr name 6 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"\")",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 4 (str.indexof name \"-\")) 3))",
      "(ite (= (str.indexof name \"-\" 6) 4) (str.substr name 6 3) (str.substr name 7 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String\n    (str.substr name 5 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(define-fun f ((name String)) String\n  (str.substr name 6 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n     (str.substr name (+ (str.indexof name \"-\" 0) 1) 3))",
      "(str.substr name 6 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 1 (str.indexof name \"-\")) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "\"(str.substr name 6 3))\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.prefixof name \"+6\") (str.substr name 6 3) (ite (str.prefixof name \"+7\") (str.substr name 6 3) (ite (str.prefixof name \"+8\") (str.substr name 6 3) (str.substr name 6 3)))))",
      "(define-fun f (name String) String (str.at name 6 9))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \" 0) 2) 3) (str.substr name (+ (str.indexof name \"-\" 0) 1) 3)))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (str.substr (str.substr name 6 3) 0 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 7 8))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 6 11) 4)\")",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"\"))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 4 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (ite (= (str.indexof name \"-\" 6) 4) (str.substr name 6 3) (str.substr name 7 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \" 0) 1) 3) (str.substr name (+ (str.indexof name \"-\" 0) 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 1 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6,
        "+6",
        "+8",
        "+7"
      ],
      [
        9,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        0,
        1,
        2,
        3,
        "-",
        " "
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        0,
        3,
        6
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        8,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        "(str.at (str.substr name 6 11) 4)"
      ],
      [
        0,
        3,
        5,
        6,
        "+"
      ],
      [
        3,
        6
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        3,
        7
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        6
      ],
      [
        "",
        1,
        " ",
        3
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        1,
        3,
        4,
        "-",
        " "
      ],
      [
        3,
        4,
        6,
        7,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        0,
        1,
        3,
        "-",
        " "
      ],
      [
        3,
        6
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        "(str.substr name 6 3))"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      "",
      5,
      6,
      7,
      8,
      9,
      4,
      "+",
      "(str.at (str.substr name 6 11) 4)",
      "+8",
      "+6",
      "(str.substr name 6 3))",
      "+7",
      "(str.substr name 5 3))",
      " ",
      "-"
    ],
    "time_diff_ms": 1126.8470000000002
  },
  "phone-7.sl": {
    "completions": [
      "(ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (str.substr name 8 3))))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \" 0) 1) 3)\n     (str.substr name (+ (str.indexof name \"-\" 0) 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String\n  (str.at (str.substr name 5 11) 0 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3)))",
      "(ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "(ite (str.prefixof name \"+6\") (str.substr name 5 3) (ite (str.prefixof name \"+7\") (str.substr name 5 3) (str.substr name 6 3)))",
      "(ite (= (str.at name 1) \"+\")\n     (str.substr name 6 3)\n     (str.substr name 5 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 5 3) (ite (= (str.at name 4) \" \") (str.substr name 5 3) (str.substr name 4 3))))",
      "\"(str.substr (str.substr name 6 3) 5 3))\"",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (ite (= (str.at name 4) \" \") (str.substr name 8 3) (ite (= (str.at name 5) \" \") (str.substr name 9 3) (str.substr name 10 3))))))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.prefixof name \"+6\") (str.substr name 6 3) (ite (str.prefixof name \"+7\") (str.substr name 6 3) (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 6 3) (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3)))",
      "\"(str.substr name 5 3))\"",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (= (str.indexof name \"-\") -1) (str.substr name 5 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (= (str.at name 4) \"-\") (str.substr name 6 3) (str.substr name 5 3))",
      "(ite (= (str.indexof name \" \") -1)\n     (str.substr name (+ 5 (str.indexof name \"-\")) 3)\n     (str.substr name (+ 5 (str.indexof name \" \")) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")(str.substr name (+ (str.indexof name \" \") 1) 3)(str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3)))",
      "\"(str.substr name 6 3))\"",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (= (str.at name 1) \"+\")\n     (str.substr name 6 3)\n     (str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"000\") )",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3)))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (str.substr name 8 3)))))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \" 0) 1) 3) (str.substr name (+ (str.indexof name \"-\" 0) 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.at (str.substr name 5 11) 0 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3))))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (ite (str.prefixof name \"+6\") (str.substr name 5 3) (ite (str.prefixof name \"+7\") (str.substr name 5 3) (str.substr name 6 3))))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 5 3) (ite (= (str.at name 4) \" \") (str.substr name 5 3) (str.substr name 4 3)))))",
      "(define-fun f (name String) String \"(str.substr (str.substr name 6 3) 5 3))\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) (str.substr name 6 3) (str.substr name (+ (str.indexof name \" \") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (ite (= (str.at name 4) \" \") (str.substr name 8 3) (ite (= (str.at name 5) \" \") (str.substr name 9 3) (str.substr name 10 3)))))))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.prefixof name \"+6\") (str.substr name 6 3) (ite (str.prefixof name \"+7\") (str.substr name 6 3) (str.substr name 6 3))))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3))))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (= (str.indexof name \"-\") -1) (str.substr name 5 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 4) \"-\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) (str.substr name (+ 5 (str.indexof name \"-\")) 3) (str.substr name (+ 5 (str.indexof name \" \")) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3))))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"000\"))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ 5 (str.indexof name \"-\")) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))"
    ],
    "constants": [
      [
        1,
        3,
        6,
        " ",
        -1
      ],
      [
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        " "
      ],
      [
        0,
        1,
        3,
        "-",
        " "
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        0,
        3,
        11,
        5
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        6
      ],
      [
        1,
        2,
        3,
        4,
        5,
        " "
      ],
      [
        1,
        3,
        6,
        " ",
        -1
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        3,
        5,
        6,
        "+6",
        "+7"
      ],
      [
        1,
        3,
        5,
        6,
        "+"
      ],
      [
        1,
        3,
        4,
        5,
        6,
        " "
      ],
      [
        "(str.substr (str.substr name 6 3) 5 3))"
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        3,
        6
      ],
      [
        1,
        3,
        6,
        " ",
        -1
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        " ",
        10
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        "+6",
        6,
        "+7"
      ],
      [
        3,
        7
      ],
      [
        0,
        3,
        5,
        6,
        "+"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        3,
        6
      ],
      [
        1,
        2,
        3,
        4,
        5,
        " "
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        3,
        5,
        "-",
        -1
      ],
      [
        3,
        5
      ],
      [
        3,
        4,
        5,
        6,
        "-"
      ],
      [
        3,
        5,
        "-",
        " ",
        -1
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        3,
        6
      ],
      [
        1,
        2,
        3,
        4,
        5,
        " "
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        3,
        5,
        6,
        "+"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "-"
      ],
      [
        1,
        " ",
        3,
        "000"
      ],
      [
        1,
        3,
        5,
        "-",
        " "
      ],
      [
        1,
        " ",
        3,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      "000",
      "+",
      "(str.substr (str.substr name 6 3) 5 3))",
      "+6",
      "(str.substr name 6 3))",
      "+7",
      "(str.substr name 5 3))",
      " ",
      "-",
      -1
    ],
    "time_diff_ms": 1911.0729999999999
  },
  "univ_6_short.sl": {
    "completions": [
      "\"(str.substr (str.replace (str.replace col2 col1 \\\"\\\" ) col2 \\\"\\\") 1 (- (str.indexof col2 \\\",\\\") 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.substr col2 3 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") \\\"USA\\\" \\\"USA\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1) (+ (str.indexof col1 \\\",\\\" 0) 2))\"",
      "\"(str.++ (str.replace (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\"USA\\\") (str.substr col2 (- (str.indexof col2 \\\",\\\" 0) 1) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \"University\" \"\") \"NYU\" \"New York University\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"Michigan\" \"Ann Arbor\") \"Columbia\" \"New York\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 2 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.replace\n      (str.replace\n        (str.replace\n          (str.replace\n            (str.replace\n              (str.replace\n                (str.replace\n                  (str.replace\n                    (str.replace\n                      (str.replace\n                        (str.replace\n                          (str.replace\n                            (str.replace\n                              (str.replace\n                                (str.replace\n                                  (str.replace\n                                    (str.replace\n                                      (str.replace\n                                        (str.replace\n                                          (str.replace\n                                            (str.replace\n                                              (str.replace\n                                                (str.replace\n                                                  (str.replace\n                                                    (str.replace\n                                                      (str.replace\n                                                        (str.replace\n                                                          (str.replace\n                                                            (str.replace\n                                                              (str.replace\n                                                                (str.replace\n                                                                  (str.replace\n                                                                    (str.replace\n                                                                      (str.replace\n                                                                        (str.replace\n                                                                          (str.replace\n                                                                            (str.replace\n                                                                              (str.replace\n                                                                                (str.replace\n                                                                                  (str.replace\n                                                                                    (str.replace\n                                                                                      (str.replace\n                                                                                        (str.replace\n                                                                                          (str.replace\n                                                                                            (str.replace\n                                                                                              (str.replace\n                                                                                                (str.replace\n                                                                                                  (str.replace\n                                                                                                    (str.replace\n                                                                                                      (str.replace\n                                                                                                        (str.replace\n                                                                                                          (str.replace\n                                                                                                            (str.replace\n                                                                                                              (str.replace\n                                                                                                                (str.replace\n                                                                                                                  (str.replace\n                                                                                                                    (str.replace\n                                                                                                                      (str.replace\n                                                                                                                        (str.replace\n                                                                                                                          (str.replace\n                                                                                                                            (str.replace\n                                                                                                                              (str.replace\n                                                                                                                                (str.replace\n                                                                                                                                  (str.replace\n                                                                                                                                    (str.replace\n                                                                                                                                      (str.replace\n                                                                                                                                        (str.replace\n                                                                                                                                          (str.replace\n                                                                                                                                            (str.replace\n                                                                                                                                              (str.replace\n                                                                                                                                                (str.replace\n                                                                                                                                                  (str.replace\n                                                                                                                                                    (str.replace\n                                                                                                                                                      (str.replace\n                                                                                                                                                        (str.replace\n                                                                                                                                                          (str.replace\n                                                                                                                                                            (str.replace\n                                                                                                                                                              (str.replace\n                                                                                                                                                                (str.replace\n                                                                                                                                                                  (str.replace\n                                                                                                                                                                    (str.replace\n                                                                                                                                                                      (str.replace\n                                                                                                                                                                        (str.replace\n                                                                                                                                                                          (str.replace\n                                                                                                                                                                            (str.replace\n                                                                                                                                                                              (str.replace\n                                                                                                                                                                                (str.replace\n                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                              (str.replace\n                                                                                                                                                                                                (str.replace\n                                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                                              (str.replace\n                                                                                                                                                col1\n                                                                                                                                                \"University of\" \"\"\n                                                                                                                                              )\n                                                                                                                                              \"UCLA\" \"Los Angeles, CA, USA\"\n                                                                                                                                            )\n                                                                                                                                            \"Cornell University\" \"Ithaca, NY, USA\"\n                                                                                                                                          )\n                                                                                                                                          \"Penn\" \"Philadelphia, PA, USA\"\n                                                                                                                                        )\n                                                                                                                                        \"University of Maryland College Park\" \"College Park, MD, USA\"\n                                                                                                                                      )\n                                                                                                                                      \"University of Michigan\" \"Ann Arbor, MI, USA\"\n                                                                                                                                    )\n                                                                                                                                    \"Columbia University\" \"New York, NY, USA\"\n                                                                                                                                  )\n                                                                                                                                  \"NYU\" \"New York, NY, USA\"\n                                                                                                                                )\n                                                                                                                                \"New York\" \"NY\"\n                                                                                                                              )\n                                                                                                                              \"Phialdelphia\" \"Philadelphia\"\n                                                                                                                            )\n                                                                                                                            \"Los Angeles\" \"Los Angeles\"\n                                                                                                                          )\n                                                                                                                          \"Ithaca\" \"Ithaca\"\n                                                                                                                        )\n                                                                                                                        \"College Park\" \"College Park\"\n                                                                                                                      )\n                                                                                                                      \"Ann Arbor\" \"Ann Arbor\"\n                                                                                                                    )\n                                                                                                                    \"New York\" \"New York\"\n                                                                                                                  )\n                                                                                                                  \"New York\" \"New York\"\n                                                                                                                )\n                                                                                                                \"PA\" \"PA\"\n                                                                                                              )\n                                                                                                              \"CA\" \"CA\"\n                                                                                                            )\n                                                                                                            \"NY\" \"NY\"\n                                                                                                          )\n                                                                                                          \"MD\" \"MD\"\n                                                                                                        )\n                                                                                                        \"MI\" \"MI\"\n                                                                                                      )\n                                                                                                      \"USA\" \"USA\"\n                                                                                                    )\n                                                                                                    \"USA\" \"USA\"\n                                                                                                  )\n                                                                                                  \"USA\" \"USA\"\n                                                                                                )\n                                                                                                \"USA\" \"USA\"\n                                                                                              )\n                                                                                              \"USA\" \"USA\"\n                                                                                            )\n                                                                                            \"USA\" \"USA\"\n                                                                                          )\n                                                                                          \"USA\" \"USA\"\n                                                                                        )\n                                                                                        \"USA\" \"USA\"\n                                                                                      )\n                                                                                      \"USA\" \"USA\"\n                                                                                    )\n                                                                                    \"USA\" \"USA\"\n                                                                                  )\n                                                                                  \"USA\" \"USA\"\n                                                                                )\n                                                                                \"USA\" \"USA\"\n                                                                              )\n                                                                              \"USA\" \"USA\"\n                                                                            )\n                                                                            \"USA\" \"USA\"\n                                                                          )\n                                                                          \"USA\" \"USA\"\n                                                                        )\n                                                                        \"USA\" \"USA\"\n                                                                      )\n                                                                      \"USA\" \"USA\"\n                                                                    )\n                                                                    \"USA\" \"USA\"\n                                                                  )\n                                                                  \"USA\" \"USA\"\n                                                                )\n                                                                \"USA\" \"USA\"\n                                                              )\n                                                              \"USA\" \"USA\"\n                                                            )\n                                                            \"USA\" \"USA\"\n                                                          )\n                                                          \"USA\" \"USA\"\n                                                        )\n                                                        \"USA\" \"USA\"\n                                                      )\n                                                      \"USA\" \"USA\"\n                                                    )\n                                                    \"USA\" \"USA\"\n                                                  )\n                                                  \"USA\" \"USA\"\n                                                )\n                                                \"USA\" \"USA\"\n                                              )\n                                              \"USA\" \"USA\"\n                                            )\n                                            \"USA\" \"USA\"\n                                          )\n                                          \"USA\" \"USA\"\n                                        )\n                                        \"USA\" \"USA\"\n                                      )\n                                      \"USA\" \"USA\"\n                                    )\n                                    \"USA\" \"USA\"\n                                  )\n                                  \"USA\" \"USA\"\n                                )\n                                \"USA\" \"USA\"\n                              )\n                              \"USA\" \"USA\"\n                            )\n                            \"USA\" \"USA\"\n                          )\n                          \"USA\" \"USA\"\n                        )\n                        \"USA\" \"USA\"\n                      )\n                      \"USA\" \"USA\"\n                    )\n                    \"USA\" \"USA\"\n                  )\n                  \"USA\" \"USA\"\n                )\n                \"USA\" \"USA\"\n              )\n              \"USA\" \"USA\"\n            )\n            \"USA\" \"USA\"\n          )\n          \"USA\" \"USA\"\n        )\n        \"USA\" \"USA\"\n      )\n      \"USA\" \"USA\"\n    )\n    0\n    (-\n      (str.len col1)\n      2\n    )\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \", USA\") 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    \", \"\n    (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2))\n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York,\" \"NY,\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ \n    (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0))\n    \", \"\n    (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0))\n    \", USA\"))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Ithaca\\\" \\\"Ithaca, NY\\\") \\\"Philadelphia\\\" \\\"Philadelphia, PA\\\") \\\"Los Angeles\\\" \\\"Los Angeles, CA\\\") \\\"College Park\\\" \\\"College Park, MD\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor, MI\\\") \\\"New York\\\" \\\"New York, NY\\\") \\\"Phialdelphia\\\" \\\"Phialdelphia, PA\\\") \\\"PA\\\" \\\"PA, USA\\\") \\\"CA\\\" \\\"CA, USA\\\") \\\"MD\\\" \\\"MD, USA\\\") \\\"NY\\\" \\\"NY, USA\\\") \\\"MI\\\" \\\"MI, USA\\\") \\\"USA\\\" \\\"USA\\\") \\\",\\\" \\\", USA\\\") \\\" \\\" \\\", \\\")\"",
      "\"(str.substr (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") \\\",\\\"))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", \\\")\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") \\\", \\\" \\\",\\\") 0 (- (str.indexof col2 col1 0) 1))\"",
      "(define-fun f (col1 String col2 String) String\n    (str.substr\n        (str.replace\n            (str.++\n                (str.replace col1 \", \" \"\")\n                (str.replace col2 \", \" \"\")\n            )\n            \"New York\"\n            \"NY\"\n        )\n        0\n        (str.indexof\n            (str.replace\n                (str.++\n                    (str.replace col1 \", \" \"\")\n                    (str.replace col2 \", \" \"\")\n                )\n                \"New York\"\n                \"NY\"\n            )\n            \", USA\"\n            0\n        )\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \") \" , \" \"\") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \" , \" \") \"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\")))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"Columbia\" \"\") \"UCLA\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"University of \" \"\") \"NYU\" \"\") \"Ithaca, New York\" \"Ithaca, NY, USA\"))",
      "\"(str.++ (str.substr col2 0 (+ 1 (str.indexof col2 \\\",\\\" 0))) (str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (str.len col2)))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))\n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \"\"))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", New York, USA\\\" \\\", NY, USA\\\") \\\", New York, NY, USA\\\" \\\", NY, USA\\\") \\\", Ann Arbor, MI, USA\\\" \\\", MI, USA\\\") \\\", College Park, MD\\\" \\\", MD, USA\\\") \\\", Ithaca, New York, USA\\\" \\\", NY, USA\\\") \\\", Los Angeles, CA\\\" \\\", CA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Philadelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\")\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 100) \", \" \n    (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \"\"))",
      "\"(ite (str.contains col2 \\\"USA\\\") col2 (str.++ col2 \\\", USA\\\"))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", \") \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", \") \"New York\" \"NY\")) 5)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 100) \n    \", \" \n    (str.substr col2 0 2) \n    \", USA\"))",
      "\"(str.substr (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" 0) 1))\"",
      "\"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)))\"",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"University of \\\" \\\"\\\") col2 \\\",\\\" \\\",\\\") \\\", USA\\\")\"",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\"",
      "\"(str.++ (str.substr col2 2 (- (str.len col2) 2)) (str.substr col1 0 (- (str.len col1) 2)) \\\", USA\\\")\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA\" \"Phialdelphia, PA, USA\"))",
      "\"(str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") 0 (- (str.indexof col2 \",\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace (ite (= col1 \"University of Pennsylvania\") \"Phialdelphia, PA, USA\"\n                                          (ite (= col1 \"UCLA\") \"Los Angeles, CA, USA\"\n                                               (ite (= col1 \"Cornell University\") \"Ithaca, NY, USA\"\n                                                    (ite (= col1 \"Penn\") \"Philadelphia, PA, USA\"\n                                                         (ite (= col1 \"University of Maryland College Park\") \"College Park, MD, USA\"\n                                                              (ite (= col1 \"University of Michigan\") \"Ann Arbor, MI, USA\"\n                                                                   (ite (= col1 \"Columbia University\") \"New York, NY, USA\"\n                                                                        (ite (= col1 \"NYU\") \"New York, NY, USA\"\n                                                                             col1)))))))\n                             \", New York\" \" NY\"\n                             \", PA\" \", PA, USA\")\n                  \", CA\" \", CA, USA\")\n            \", MD\" \", MD, USA\") col2))",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col1) 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"PA\\\") \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") 0 (- (str.len col2) 5))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.substr (str.replace (str.++ col1 \" , \" col2 \" , USA\") 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" 0) 2)) 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" 0) 2)) 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" (- (str.len (str.++ col1 \" , \" col2 \" , USA\")) 4)) 2)) 3 2))",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia, PA, USA\\\") \\\"UCLA\\\" \\\"Los Angeles, CA, USA\\\") \\\"Cornell University\\\" \\\"Ithaca, NY, USA\\\") \\\"Penn\\\" \\\"Philadelphia, PA, USA\\\") \\\"University of Maryland College Park\\\" \\\"College Park, MD, USA\\\") \\\"University of Michigan\\\" \\\"Ann Arbor, MI, USA\\\") \\\"Columbia University\\\" \\\"New York, NY, USA\\\") \\\"NYU\\\" \\\"New York, NY, USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", \\\" \\\", USA\\\")\""
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace col2 col1 \\\"\\\" ) col2 \\\"\\\") 1 (- (str.indexof col2 \\\",\\\") 2))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") \\\"USA\\\" \\\"USA\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1) (+ (str.indexof col1 \\\",\\\" 0) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\"USA\\\") (str.substr col2 (- (str.indexof col2 \\\",\\\" 0) 1) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \"University\" \"\") \"NYU\" \"New York University\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"Michigan\" \"Ann Arbor\") \"Columbia\" \"New York\") \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 2 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New Yorkstr.len col1) 2)))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \", USA\") 2)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York,\" \"NY,\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Ithaca\\\" \\\"Ithaca, NY\\\") \\\"Philadelphia\\\" \\\"Philadelphia, PA\\\") \\\"Los Angeles\\\" \\\"Los Angeles, CA\\\") \\\"College Park\\\" \\\"College Park, MD\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor, MI\\\") \\\"New York\\\" \\\"New York, NY\\\") \\\"Phialdelphia\\\" \\\"Phialdelphia, PA\\\") \\\"PA\\\" \\\"PA, USA\\\") \\\"CA\\\" \\\"CA, USA\\\") \\\"MD\\\" \\\"MD, USA\\\") \\\"NY\\\" \\\"NY, USA\\\") \\\"MI\\\" \\\"MI, USA\\\") \\\"USA\\\" \\\"USA\\\") \\\",\\\" \\\", USA\\\") \\\" \\\" \\\", \\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") \\\",\\\"))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", \\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") \\\", \\\" \\\",\\\") 0 (- (str.indexof col2 col1 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ (str.replace col1 \", \" \"\") (str.replace col2 \", \" \"\")) \"New York\" \"NY\") 0 (str.indexof (str.replace (str.++ (str.replace col1 \", \" \"\") (str.replace col2 \", \" \"\")) \"New York\" \"NY\") \", USA\" 0)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \") \" \\, \" \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \" \\, \" \") \" , \" \") \")))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"Columbia\" \"\") \"UCLA\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"University of \" \"\") \"NYU\" \"\") \"Ithaca, New York\" \"Ithaca, NY, USA\"))))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (+ 1 (str.indexof col2 \\\",\\\" 0))) (str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (str.len col2)))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", New York, USA\\\" \\\", NY, USA\\\") \\\", New York, NY, USA\\\" \\\", NY, USA\\\") \\\", Ann Arbor, MI, USA\\\" \\\", MI, USA\\\") \\\", College Park, MD\\\" \\\", MD, USA\\\") \\\", Ithaca, New York, USA\\\" \\\", NY, USA\\\") \\\", Los Angeles, CA\\\" \\\", CA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Philadelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(ite (str.contains col2 \\\"USA\\\") col2 (str.++ col2 \\\", USA\\\"))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", \") \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", \") \"New York\" \"NY\")) 5)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"University of \\\" \\\"\\\") col2 \\\",\\\" \\\",\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 2 (- (str.len col2) 2)) (str.substr col1 0 (- (str.len col1) 2)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA\" \"Phialdelphia, PA, USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace col2 col1 \")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (ite (= col1 \"University of Pennsylvania\") \"Phialdelphia, PA, USA\" (ite (= col1 \"UCLA\") \"Los Angeles, CA, USA\" (ite (= col1 \"Cornell University\") \"Ithaca, NY, USA\" (ite (= col1 \"Penn\") \"Philadelphia, PA, USA\" (ite (= col1 \"University of Maryland College Park\") \"College Park, MD, USA\" (ite (= col1 \"University of Michigan\") \"Ann Arbor, MI, USA\" (ite (= col1 \"Columbia University\") \"New York, NY, USA\" (ite (= col1 \"NYU\") \"New York, NY, USA\" col1))))))) \", New York\" \" NY\" \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") col2))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col1) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Los Angeles\\\" \\\"CA\\\") \\\"Ithaca\\\" \\\"NY\\\") \\\"Philadelphia\\\" \\\"PA\\\") \\\"College Park\\\" \\\"MD\\\") \\\"Ann Arbor\\\" \\\"MI\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"PA\\\") \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") 0 (- (str.len col2) 5))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.substr (str.replace (str.++ col1 \" , \" col2 \" , USA\") 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" 0) 2)) 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" 0) 2)) 0 (- (str.indexof (str.++ col1 \" , \" col2 \" , USA\") \" , \" (- (str.len (str.++ col1 \" , \" col2 \" , USA\")) 4)) 2)) 3 2))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia, PA, USA\\\") \\\"UCLA\\\" \\\"Los Angeles, CA, USA\\\") \\\"Cornell University\\\" \\\"Ithaca, NY, USA\\\") \\\"Penn\\\" \\\"Philadelphia, PA, USA\\\") \\\"University of Maryland College Park\\\" \\\"College Park, MD, USA\\\") \\\"University of Michigan\\\" \\\"Ann Arbor, MI, USA\\\") \\\"Columbia University\\\" \\\"New York, NY, USA\\\") \\\"NYU\\\" \\\"New York, NY, USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", \\\" \\\", USA\\\")\")"
    ],
    "constants": [
      [
        "(str.substr (str.replace (str.replace col2 col1 \"\" ) col2 \"\") 1 (- (str.indexof col2 \",\") 2))"
      ],
      [
        0,
        2,
        3,
        100,
        ", USA",
        ", "
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") \"USA\" \"USA\") 0 (- (str.indexof col1 \",\" 0) 1) (+ (str.indexof col1 \",\" 0) 2))"
      ],
      [
        "(str.++ (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\") (str.substr col2 (- (str.indexof col2 \",\" 0) 1) 1))"
      ],
      [
        "",
        0,
        1,
        ", USA",
        ", ",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "Ithaca",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        "Penn",
        " College Park",
        "Ann Arbor",
        "UCLA",
        "Cornell",
        "Columbia",
        "NYU",
        "Michigan",
        "New York",
        "Los Angeles",
        "Philadelphia",
        " College",
        "University ",
        "University",
        " of ",
        "Ithaca",
        "NY",
        "University of ",
        "New York University"
      ],
      [
        0,
        2,
        100,
        ", USA",
        ", "
      ],
      [
        "",
        0,
        2,
        "Penn",
        "Ann Arbor, MI, USA",
        "University of Maryland College Park",
        "PA",
        "MD",
        "UCLA",
        "Ann Arbor",
        "Columbia University",
        "NYU",
        "USA",
        "University of",
        "New York",
        "Los Angeles",
        "Cornell University",
        "MI",
        "Philadelphia",
        "New York, NY, USA",
        "Phialdelphia",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Ithaca, NY, USA",
        "College Park",
        "University of Michigan",
        "NY",
        "Ithaca",
        "Los Angeles, CA, USA",
        "CA"
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "Phialdelphia",
        "Philadelphia",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "NY,",
        ", USA",
        ", ",
        "New York,",
        "NY",
        "New York"
      ],
      [
        0,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Ithaca\" \"Ithaca, NY\") \"Philadelphia\" \"Philadelphia, PA\") \"Los Angeles\" \"Los Angeles, CA\") \"College Park\" \"College Park, MD\") \"Ann Arbor\" \"Ann Arbor, MI\") \"New York\" \"New York, NY\") \"Phialdelphia\" \"Phialdelphia, PA\") \"PA\" \"PA, USA\") \"CA\" \"CA, USA\") \"MD\" \"MD, USA\") \"NY\" \"NY, USA\") \"MI\" \"MI, USA\") \"USA\" \"USA\") \",\" \", USA\") \" \" \", \")"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") \",\"))"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\" ) \", USA\" \"\") \",\" \", \")"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "(str.substr (str.replace (str.replace col2 col1 \"\") \", \" \",\") 0 (- (str.indexof col2 col1 0) 1))"
      ],
      [
        "",
        0,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "",
        " , ",
        " ",
        "University of ",
        ") "
      ],
      [
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "Ithaca",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        "Ithaca, New York",
        "Cornell",
        "Penn",
        "University",
        "Ithaca, NY, USA",
        "University of ",
        "UCLA",
        "College Park",
        "Columbia",
        "NYU"
      ],
      [
        "(str.++ (str.substr col2 0 (+ 1 (str.indexof col2 \",\" 0))) (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)))"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", New York, USA\" \", NY, USA\") \", New York, NY, USA\" \", NY, USA\") \", Ann Arbor, MI, USA\" \", MI, USA\") \", College Park, MD\" \", MD, USA\") \", Ithaca, New York, USA\" \", NY, USA\") \", Los Angeles, CA\" \", CA, USA\") \", Phialdelphia, PA, USA\" \", PA, USA\") \", Philadelphia, PA, USA\" \", PA, USA\") \", Phialdelphia, PA, USA\" \", PA, USA\")"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        3,
        100,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        "(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))"
      ],
      [
        "",
        "MI",
        "NY",
        "Michigan",
        "University of ",
        "New York"
      ],
      [
        "",
        0,
        5,
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "Ithaca",
        "CA",
        "New York",
        "Los Angeles"
      ],
      [
        0,
        2,
        3,
        100,
        ", USA",
        ", "
      ],
      [
        "(str.substr (str.replace (str.++ col1 \",\" col2 \", USA\") \", USA\" \"\") 0 (- (str.indexof (str.replace (str.++ col1 \",\" col2 \", USA\") \", USA\" \"\") \",\" 0) 1))"
      ],
      [
        "(str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))"
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"University of \" \"\") col2 \",\" \",\") \", USA\")"
      ],
      [
        "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 1))"
      ],
      [
        "(str.++ (str.substr col2 2 (- (str.len col2) 2)) (str.substr col1 0 (- (str.len col1) 2)) \", USA\")"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\" ) \",\" \"\") \"USA\" \"\")"
      ],
      [
        "Phialdelphia, PA, USA",
        "Phialdelphia, PA",
        ", USA",
        ", "
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace col2 col1 "
      ],
      [
        ", MD",
        "Penn",
        "Ann Arbor, MI, USA",
        "University of Maryland College Park",
        ", New York",
        "UCLA",
        "Columbia University",
        ", MD, USA",
        "NYU",
        "Phialdelphia, PA, USA",
        ", CA, USA",
        ", PA",
        "Cornell University",
        "New York, NY, USA",
        " NY",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Ithaca, NY, USA",
        "University of Michigan",
        ", CA",
        "Los Angeles, CA, USA",
        ", PA, USA",
        "University of Pennsylvania"
      ],
      [
        "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, New York, USA\" \"New York, NY, USA\") 0 (- (str.len col1) 1))"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"University of Pennsylvania\" \"Phialdelphia\") 0 (- (str.len col2) 5))"
      ],
      [
        0,
        " , ",
        2,
        3,
        4,
        " , USA"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"New York, New York, USA\" \"New York, NY, USA\") \", USA\" \"\") \",\" \", USA\") \", \" \", USA\")"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      3,
      1,
      5,
      4,
      "Phialdelphia",
      "Ithaca",
      "University of Michigan",
      ", New York",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"New York, New York, USA\" \"New York, NY, USA\") \", USA\" \"\") \",\" \", USA\") \", \" \", USA\")",
      "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 1))",
      "Ithaca, NY, USA",
      "Philadelphia",
      " , USA",
      ", ",
      "MI",
      "College Park, MD, USA",
      "New York",
      "University of",
      ", MD",
      "Philadelphia, PA, USA",
      "NYU",
      " of ",
      "Los Angeles",
      " , ",
      "College Park",
      100,
      ", PA, USA",
      "Ann Arbor",
      "University of Pennsylvania",
      "(str.++ (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\") (str.substr col2 (- (str.indexof col2 \",\" 0) 1) 1))",
      "(str.++ (str.replace (str.replace col2 col1 \"University of \" \"\") col2 \",\" \",\") \", USA\")",
      "(str.replace (str.replace (str.replace col2 col1 \"\" ) \", USA\" \"\") \",\" \", \")",
      ", CA, USA",
      "(str.substr (str.replace (str.replace (str.replace col2 col1 ",
      "Columbia",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "Phialdelphia, PA",
      "New York,",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Ithaca\" \"Ithaca, NY\") \"Philadelphia\" \"Philadelphia, PA\") \"Los Angeles\" \"Los Angeles, CA\") \"College Park\" \"College Park, MD\") \"Ann Arbor\" \"Ann Arbor, MI\") \"New York\" \"New York, NY\") \"Phialdelphia\" \"Phialdelphia, PA\") \"PA\" \"PA, USA\") \"CA\" \"CA, USA\") \"MD\" \"MD, USA\") \"NY\" \"NY, USA\") \"MI\" \"MI, USA\") \"USA\" \"USA\") \",\" \", USA\") \" \" \", \")",
      "(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))",
      "(str.++ (str.substr col2 2 (- (str.len col2) 2)) (str.substr col1 0 (- (str.len col1) 2)) \", USA\")",
      "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, New York, USA\" \"New York, NY, USA\") 0 (- (str.len col1) 1))",
      ", MD, USA",
      "UCLA",
      "Ann Arbor, MI, USA",
      "Ithaca, New York",
      "Cornell University",
      "NY",
      "Penn",
      " NY",
      ",",
      "(str.substr (str.replace (str.replace col2 col1 \"\" ) col2 \"\") 1 (- (str.indexof col2 \",\") 2))",
      "NY,",
      "University ",
      " College",
      "(str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") \",\"))",
      "(str.++ (str.substr col2 0 (+ 1 (str.indexof col2 \",\" 0))) (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)))",
      "CA",
      " ",
      "(str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))",
      "(str.replace (str.replace (str.replace col2 col1 \"\" ) \",\" \"\") \"USA\" \"\")",
      ", PA",
      ") ",
      "PA",
      "(str.substr (str.replace (str.replace col2 col1 \"\") \", \" \",\") 0 (- (str.indexof col2 col1 0) 1))",
      ", USA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"University of Pennsylvania\" \"Phialdelphia\") 0 (- (str.len col2) 5))",
      "University of Maryland College Park",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", New York, USA\" \", NY, USA\") \", New York, NY, USA\" \", NY, USA\") \", Ann Arbor, MI, USA\" \", MI, USA\") \", College Park, MD\" \", MD, USA\") \", Ithaca, New York, USA\" \", NY, USA\") \", Los Angeles, CA\" \", CA, USA\") \", Phialdelphia, PA, USA\" \", PA, USA\") \", Philadelphia, PA, USA\" \", PA, USA\") \", Phialdelphia, PA, USA\" \", PA, USA\")",
      "University of ",
      "MD",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") \"USA\" \"USA\") 0 (- (str.indexof col1 \",\" 0) 1) (+ (str.indexof col1 \",\" 0) 2))",
      "USA",
      "University",
      "Columbia University",
      "(str.substr (str.replace (str.++ col1 \",\" col2 \", USA\") \", USA\" \"\") 0 (- (str.indexof (str.replace (str.++ col1 \",\" col2 \", USA\") \", USA\" \"\") \",\" 0) 1))",
      "New York, NY, USA",
      "New York University",
      "Los Angeles, CA, USA",
      ", CA",
      "Cornell",
      " College Park",
      "Michigan",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "Phialdelphia, PA, USA"
    ],
    "time_diff_ms": 1215.969
  },
  "stackoverflow9.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1510.707
  },
  "phone-9-long-repeat.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\")\"",
      "(str.++ (str.substr name 0 3) \".\" (str.++ (str.substr name 4 3) \".\" (str.++ (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.replace name \" \" \".\")",
      "\"(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\")",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\" ) \"-\" \".\" ) \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "(str.replace name \" \" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\""
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.++ (str.substr name 4 3) \".\" (str.++ (str.substr name 8 3) \".\" (str.substr name 12 3)))))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \".\" \".\") \".\" \".\")"
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "-",
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "",
        "-",
        " "
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ]
    ],
    "all_constants": [
      "",
      ".",
      0,
      3,
      4,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "-",
      8,
      12,
      "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      " ",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \".\" \".\") \".\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1034.149
  },
  "get-last-word.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "\"(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \\\" \\\" \\\"|\\\") \\\"|\\\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \" \") \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \" \") \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \" \") \" \" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \\\" \\\" \\\"|\\\") \\\"|\\\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \" \") \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \" \") \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \" \") \" \" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"|\") \"|\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))"
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"|\") \"|\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "_",
      -1
    ],
    "time_diff_ms": 1796.25
  },
  "phone-10_short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)) )",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "\"(str.++ (str.at name 0) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3))\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\"",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)) )",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \" \" \n    \"(\" (str.substr name 1 3) \") \" \n    (str.substr name 5 3) \"-\" \n    (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" \" \"(\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "\"(str.++ \"+\" (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \" (\" \n    (str.substr name 1 3) \") \" \n    (str.substr name 5 3) \"-\" \n    (str.substr name 9 3)))",
      "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \" (\" \n    (str.substr name 1 3) \") \" \n    (str.substr name 5 3) \"-\" \n    (str.substr name 9 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.at name 0) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 10 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" \" \"(\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" \" \"(\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))"
    ],
    "constants": [
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))"
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3))"
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))"
      ],
      [
        "(str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))"
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))"
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        " ",
        9,
        "(",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " ",
        "(",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        8,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        "-",
        11,
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      "(",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      " (",
      "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3))",
      " ",
      "(str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      ") ",
      "-",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))",
      "(str.++ "
    ],
    "time_diff_ms": 1834.047
  },
  "17212077.sl": {
    "completions": [
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)) (str.++ (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.++ (str.substr _arg_0 0 3) (str.substr _arg_0 6 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 5))",
      "\"(str.substr _arg_0 0 (+ (str.indexof _arg_0 \\\"/\\\" 0) 4))\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\"",
      "(str.substr _arg_0 0 5))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 3) (str.substr _arg_0 6 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 5))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (+ (str.indexof _arg_0 \\\"/\\\" 0) 4))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"/\\\" 0) 3))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 5))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        5
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        6
      ],
      [
        0,
        6
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        6
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        3,
        4,
        6
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        6
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))"
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        5
      ],
      [
        "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))"
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))"
      ],
      [
        0,
        5
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        "/",
        3
      ],
      [
        0,
        "/",
        4
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      3,
      4,
      5,
      6,
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))"
    ],
    "time_diff_ms": 1548.936
  },
  "phone-5.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(ite (str.prefixof name \"+\") (str.substr name 1 2) (str.at name 0))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f ((name String)) String (str.at name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \"-\" 0))\n)",
      "(ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) name)",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 0 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \"-\" 0))\n)",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (ite (str.prefixof name \"+\") (str.substr name 1 2) (str.at name 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \"-\" 0)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) name))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 0 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \"-\" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))"
    ],
    "constants": [
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        2,
        "+"
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        "-"
      ],
      [
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        3
      ],
      [
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        1,
        "-"
      ],
      [
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1,
        2
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      "-",
      "(str.at name 1)",
      " ",
      "+"
    ],
    "time_diff_ms": 978.1189999999999
  },
  "39060015.sl": {
    "completions": [
      "(str.replace _arg_0 \"/.*?/\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\")))",
      "(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \"->\") 2) (str.len _arg_0)))",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)))",
      "(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \"->\") 2) (str.len _arg_0)))",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \"/delete words in the area /\" \"\")",
      "\"(str.replace _arg_0 \\\"/delete words in the area /\\\" \\\"\\\")\"",
      "(str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\"))",
      "(str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\")",
      "(str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")",
      "(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\")))",
      "(str.++ \"This is a line. \" (str.replace _arg_0 \"/delete words in the area /\" \"\"))",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (- (str.len _arg_0) 3)))",
      "(str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" /\" \"\"))",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \" /\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")",
      "(str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0))",
      "(str.replace _arg_0 \"delete words in the area\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/.*?/\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \"->\") 2) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \"->\") 2) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\"/delete words in the area /\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\"))))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (- (str.len _arg_0) 3))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" /\" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))"
    ],
    "constants": [
      [
        "",
        "/.*?/"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "This is a line. ",
        "keep this part"
      ],
      [
        "",
        " /"
      ],
      [
        "This is a line. ",
        0,
        " /"
      ],
      [
        0,
        "->",
        "/",
        2
      ],
      [
        "This is a line. ",
        "keep this part"
      ],
      [
        "",
        " /"
      ],
      [
        "This is a line. ",
        0,
        "/"
      ],
      [
        0,
        "->",
        "/",
        2
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "(str.replace _arg_0 \"/delete words in the area /\" \"\")"
      ],
      [
        "This is a line. ",
        "",
        "delete words in the area "
      ],
      [
        "",
        "delete words in the area",
        "keep this part"
      ],
      [
        "",
        " /delete words in the area /",
        "keep this part"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "delete words in the area",
        "keep this part"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        0,
        " "
      ],
      [
        "This is a line. ",
        0,
        " /"
      ],
      [
        "This is a line. ",
        "",
        "/delete words in the area /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "This is a line. ",
        "keep this part"
      ],
      [
        "This is a line. ",
        0,
        3
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        " /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        "delete words in the area",
        "keep this part"
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        "",
        "delete words in the area",
        "keep this part"
      ],
      [
        0,
        " /"
      ],
      [
        "",
        "delete words in the area"
      ]
    ],
    "all_constants": [
      "",
      " /delete words in the area /",
      0,
      "/",
      2,
      " /",
      3,
      "(str.replace _arg_0 \"/delete words in the area /\" \"\")",
      "/.*?/",
      "delete words in the area ",
      "keep this part",
      "This is a line. ",
      "/delete words in the area /",
      "->",
      " ",
      "delete words in the area"
    ],
    "time_diff_ms": 1291.862
  },
  "phone-7-long-repeat.sl": {
    "completions": [
      "(str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.at name 8 3))",
      "(str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 6 3))",
      "(str.at name 9 3))",
      "(str.at name 7))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "\"(str.at name 7)\"",
      "(str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 8 3))",
      "(str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 8 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 8 3))",
      "(str.at name 7 3))",
      "(str.at name 8 3))",
      "\"(str.at name 7)\"",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 8 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 8 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 9 3))",
      "(define-fun f (name String) String (str.at name 7))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String \"(str.at name 7)\")",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.at name 8 3))",
      "(define-fun f (name String) String \"(str.at name 7)\")",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        "(str.at name 7)"
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        "(str.at name 7)"
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      3,
      6,
      7,
      8,
      9,
      "(str.at name 7)"
    ],
    "time_diff_ms": 1948.774
  },
  "38871714.sl": {
    "completions": [
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "\"(str.replace _arg_0 \\\"<\\\" \\\"\\\")\"",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \" <\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \" <\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\"<\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" <\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" <\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "(str.replace _arg_0 \"<\" \"\")"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        " <"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        " <"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      "(str.replace _arg_0 \"<\" \"\")",
      " <",
      "<"
    ],
    "time_diff_ms": 1835.128
  },
  "43120683.sl": {
    "completions": [
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))"
    ],
    "constants": [
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ]
    ],
    "all_constants": [
      "1",
      "apple"
    ],
    "time_diff_ms": 1397.297
  },
  "stackoverflow11.sl": {
    "completions": [
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"A\") 0)\n            (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"a\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"a\") 0) (str.indexof _arg_0 (str.to.int \"a\") 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 (str.len _arg_0))) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int \"0\") (str.len _arg_0))\n           (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int \"0\") 0)\n           (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 (str.len _arg_0))) 0))",
      "(str.substr _arg_0 \n            (str.indexof _arg_0 \" \" 0) \n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n                (str.indexof _arg_0 \" \" 0)\n                1)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.str 0) 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int 48) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int \"A\") 0)\n           (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"9\")) 0)\n           (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (- (str.len _arg_0)\n               (str.indexof _arg_0 (str.to.int \"0\") 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n              (str.indexof _arg_0 \" \")\n              1)\n            (-\n              (str.len _arg_0)\n              (+\n                (str.indexof\n                  (str.substr _arg_0\n                              (+\n                                (str.indexof _arg_0 \" \")\n                                1)\n                              (-\n                                (str.len _arg_0)\n                                (+\n                                  (str.indexof _arg_0 \" \")\n                                  1)))\n                  \" \")\n                1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"A\") 0)\n            (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 \" \" 0)\n           (str.len _arg_0))",
      "(ite (str.contains _arg_0 \" \")(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) \"No substring found\")",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (ite (str.contains _arg_0 \" \") (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n                (str.indexof _arg_0 \" \")\n                1)\n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n                (str.indexof _arg_0 \" \")\n                1)\n            (-\n                (str.len _arg_0)\n                (+\n                    (str.indexof\n                        (str.substr _arg_0\n                            (+\n                                (str.indexof _arg_0 \" \")\n                                1)\n                            (str.len _arg_0))\n                        \" \")\n                    1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int 0) (str.len _arg_0)) (str.len _arg_0))",
      "(str.substr _arg_0\n            (+\n                (str.indexof _arg_0 \" \")\n                1)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"a\") 0)\n            (str.indexof _arg_0 (str.to.int \"z\") 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"a\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"a\") 0) (str.indexof _arg_0 (str.to.int \"a\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 (str.len _arg_0))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") (str.len _arg_0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 (str.to.int (str.substr _arg_0 0 (str.len _arg_0))) 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.str 0) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int 48) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"9\")) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (- (str.len _arg_0) (str.indexof _arg_0 (str.to.int \"0\") 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \") 1))) \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) \"No substring found\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (ite (str.contains _arg_0 \" \") (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int 0) (str.len _arg_0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"a\") 0) (str.indexof _arg_0 (str.to.int \"z\") 0)))"
    ],
    "constants": [
      [
        0,
        "A",
        "Z"
      ],
      [
        "0",
        0
      ],
      [
        "0",
        0
      ],
      [
        0
      ],
      [
        "0",
        0
      ],
      [
        "0",
        0
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        "a"
      ],
      [
        0,
        "a"
      ],
      [
        0
      ],
      [
        "0"
      ],
      [
        0,
        1,
        " "
      ],
      [
        "0",
        0
      ],
      [
        "0",
        0
      ],
      [
        0,
        1,
        " "
      ],
      [
        "0",
        0
      ],
      [
        "0",
        0
      ],
      [
        0,
        "A",
        "Z"
      ],
      [
        0
      ],
      [
        0,
        1,
        " "
      ],
      [
        0
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0
      ],
      [
        48,
        0
      ],
      [
        0,
        "A",
        "Z"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "9",
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ],
      [
        0,
        "A"
      ],
      [
        0,
        " "
      ],
      [
        "0",
        0
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "A",
        "Z"
      ],
      [
        0,
        " "
      ],
      [
        1,
        " ",
        "No substring found"
      ],
      [
        "0",
        0
      ],
      [
        "0",
        0
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0
      ],
      [
        1,
        " "
      ],
      [
        0
      ],
      [
        0,
        "a",
        "z"
      ]
    ],
    "all_constants": [
      0,
      "",
      "A",
      1,
      "No substring found",
      "a",
      "0",
      48,
      "Z",
      " ",
      "9",
      "z"
    ],
    "time_diff_ms": 2012.853
  },
  "split-text-string-at-specific-character.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 - 1))))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (_arg_1))",
      "(define-fun f ((s String) (i Int)) String\n  (str.substr s 0 i))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (_arg_1))",
      "(str.substr _arg_0 0 (_arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1))))",
      "(str.substr _arg_0 0 _arg_1)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 0))))",
      "(define-fun f ((s String) (n Int)) String\n  (str.substr s 0 (str.indexof s \"_\" n)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 - 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr s 0 i))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr s 0 (str.indexof s \"_\" n)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))"
    ],
    "constants": [
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ],
    "time_diff_ms": 2389.8019999999997
  },
  "get-domain-name-from-url.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 2) 1) 1)))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) -1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 0 (str.indexof _arg_0 \"/\" 8))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) 1)) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=//\") 2)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len (str.substr _arg_0 (str.len \"http=//\") (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1)))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 2) 1) 1))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) -1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 0 (str.indexof _arg_0 \"/\" 8)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=//\") 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len (str.substr _arg_0 (str.len \"http=//\") (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1))))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))"
    ],
    "constants": [
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        2,
        "/",
        "http=//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        "/",
        2
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        "/",
        2,
        "https=//"
      ],
      [
        0,
        1,
        "/",
        "http=//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        1,
        "/",
        "http=//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        1
      ]
    ],
    "all_constants": [
      0,
      "/",
      1,
      2,
      "https=//",
      8,
      "//",
      "http=//",
      -1
    ],
    "time_diff_ms": 1850.933
  },
  "get-last-name-from-name-with-comma.sl": {
    "completions": [
      "(str.replace _arg_0 \",\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.replace _arg_0 \",\" \"\") \",\")",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))",
      "(str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) \"\")",
      "(str.replace _arg_0 \",\" \"\"))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \" \")",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) 2) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 (str.++ (str.indexof _arg_0 \",\" 0) 1) \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))) , (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)))",
      "(str.++ (str.at _arg_0 (- (str.len _arg_0) 1)) \",\" (str.substr _arg_0 0 (- (str.len _arg_0) 1)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.++ \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.replace _arg_0 (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1)) \",\") \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(str.++ (str.at _arg_0 (- (str.len _arg_0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "\"(str.replace _arg_0 \\\",\\\" \\\"\\\")\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \",\" \"\") \",\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) 2) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.indexof _arg_0 \",\" 0) 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.len _arg_0) 1)) \",\" (str.substr _arg_0 0 (- (str.len _arg_0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.++ \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1)) \",\") \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.len _arg_0) 1) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\",\\\" \\\"\\\")\")"
    ],
    "constants": [
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        " ",
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ],
      [
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.replace _arg_0 \",\" \"\")"
      ]
    ],
    "all_constants": [
      "",
      ",",
      2,
      0,
      1,
      "(str.replace _arg_0 \",\" \"\")",
      " "
    ],
    "time_diff_ms": 2072.382
  },
  "initials.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.indexof name \" \" 0) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace (str.substr name 0 1) \" \" \".\") 0 3) \n    \".\"))",
      "(define-fun f (name String) String\n    (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\"\n            (str.substr (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \" \" \".\") 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.at (str.replace name \" \" \".\") 1) 0 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace (str.substr name 0 1) name \".\") 0 3)\n    \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at name 1)\n      0\n      1\n    )\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \". \" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \n    \".\"\n    (str.substr \n      (str.at \n        (str.replace \n          (str.replace name \" \" \".\") \n          \".\" \n          \"\") \n        1) \n      0 \n      1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) (str.len name)) 1)))",
      "(define-fun f (name String) String\n    (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ 1 (str.indexof name \" \" 0)) 2) 0)))",
      "(define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.++\n      (str.substr \n        (str.at name 1) 0 1)\n      \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.at name (+ (str.indexof name \" \" 0) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at \n        (str.replace name \" \" \".\") \n        1) \n      0 \n      1)))",
      "(define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.++ (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at name 1)\n      0\n      1\n    )\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.replace name \" \" \"\") 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.indexof name \" \" 0) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace (str.substr name 0 1) \" \" \".\") 0 3) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) \" \" \".\") 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.at (str.replace name \" \" \".\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace (str.substr name 0 1) name \".\") 0 3) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \". \" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at (str.replace (str.replace name \" \" \".\") \".\" \"\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) (str.len name)) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ 1 (str.indexof name \" \" 0)) 2) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.at name (+ (str.indexof name \" \" 0) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at (str.replace name \" \" \".\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.replace name \" \" \"\") 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        3,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        3,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        "",
        " ",
        "."
      ],
      [
        0,
        "",
        " ",
        ".",
        ". "
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      3,
      "",
      2,
      ". ",
      " "
    ],
    "time_diff_ms": 422.054
  },
  "univ_5-long-repeat.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 5)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 0 1) (str.at col1 1 1) \", \" (str.at col2 0 1) (str.at col2 1 1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.++ col1 \", USA\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.substr col1 0 2)) \", USA\"))",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.substr col1 0 (- (str.indexof col1 \",\") 1))) )",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Storrs\" \"CT\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace col1 \"University of \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 0 0 1) (str.at col1 1 0 1) (str.at col1 2 0 1) (str.at col1 3 0 1) (str.at col1 4 0 1) \", \" (str.at col2 0 0 1) (str.at col2 1 0 1) (str.at col2 2 0 1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ (str.at col2 0) (str.substr col2 1 (- (str.len col2) 1))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace col1 col2 \"\") \", USA\"))",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \"University of \" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \", \" 0) 1)) \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\",\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"Berkeley\" \"B\" \"CA\" \"C\" \"University of Pennsylvania\" \"D\" \"Phialdelphia\" \"E\" \"PA\" \"F\" \"Cornell University\" \"G\" \"Ithaca\" \"H\" \"NY\" \"I\" \"Penn\" \"J\" \"Philadelphia\" \"K\" \"University of Michigan\" \"L\" \"Ann Arbor\" \"M\" \"MI\" \"N\" \"MIT\" \"O\" \"Cambridge\" \"P\" \"MA\" \"Q\" \"UCLA\" \"R\" \"Los Angeles\" \"S\" \"University of Maryland College Park\" \"T\" \"College Park\" \"U\" \"University of Connecticut\" \"V\" \"Storrs\" \"W\" \"Drexel University\" \"X\" \"NYU\" \"Y\" \"Columbia University\" \"Z\" \"New York\" \"New Haven University\" \"AA\" \"Houston\" \"AB\" \"TX\" \"AC\" \"Rice University\" \"AD\" \"Yale University\" \"AE\" \"Temple University\" \"AF\" \"Harvard University\" \"AG\" \"UIUC\" \"AH\" \"Urbana\" \"AI\" \"IL\" \"AJ\" \"New Haven\" \"AK\" \"Santa Barbara\" \"AL\" \"CA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of\" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col1 \", \" \"\") \", \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.substr col1 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 3) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 5)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 0 1) (str.at col1 1 1) \", \" (str.at col2 0 1) (str.at col2 1 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.++ col1 \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.substr col1 0 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.substr col1 0 (- (str.indexof col1 \",\") 1))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Storrs\" \"CT\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace col1 \"University of \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 0 0 1) (str.at col1 1 0 1) (str.at col1 2 0 1) (str.at col1 3 0 1) (str.at col1 4 0 1) \", \" (str.at col2 0 0 1) (str.at col2 1 0 1) (str.at col2 2 0 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.at col2 0) (str.substr col2 1 (- (str.len col2) 1))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace col1 col2 \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \"University of \" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \", \" 0) 1)) \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\",\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"Berkeley\" \"B\" \"CA\" \"C\" \"University of Pennsylvania\" \"D\" \"Phialdelphia\" \"E\" \"PA\" \"F\" \"Cornell University\" \"G\" \"Ithaca\" \"H\" \"NY\" \"I\" \"Penn\" \"J\" \"Philadelphia\" \"K\" \"University of Michigan\" \"L\" \"Ann Arbor\" \"M\" \"MI\" \"N\" \"MIT\" \"O\" \"Cambridge\" \"P\" \"MA\" \"Q\" \"UCLA\" \"R\" \"Los Angeles\" \"S\" \"University of Maryland College Park\" \"T\" \"College Park\" \"U\" \"University of Connecticut\" \"V\" \"Storrs\" \"W\" \"Drexel University\" \"X\" \"NYU\" \"Y\" \"Columbia University\" \"Z\" \"New York\" \"New Haven University\" \"AA\" \"Houston\" \"AB\" \"TX\" \"AC\" \"Rice University\" \"AD\" \"Yale University\" \"AE\" \"Temple University\" \"AF\" \"Harvard University\" \"AG\" \"UIUC\" \"AH\" \"Urbana\" \"AI\" \"IL\" \"AJ\" \"New Haven\" \"AK\" \"Santa Barbara\" \"AL\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of\" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col1 \", \" \"\") \", \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.substr col1 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 3) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))"
    ],
    "constants": [
      [
        0,
        1,
        5,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", "
      ],
      [
        ", USA"
      ],
      [
        ", USA",
        ", ",
        "NY",
        "A",
        "New York"
      ],
      [
        ", USA",
        ", ",
        "NY",
        "A",
        "New York"
      ],
      [
        ", USA",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "(str.++ col2 \", USA\")"
      ],
      [
        0,
        1,
        ",",
        ", "
      ],
      [
        ", USA",
        ", ",
        "LA",
        "NY",
        "CT",
        "Storrs",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA",
        "University of ",
        ", "
      ],
      [
        "USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        ", USA"
      ],
      [
        0,
        1,
        2,
        3,
        4,
        ", USA",
        ", "
      ],
      [
        ", USA"
      ],
      [
        "(str.++ (str.replace (str.++ col1 \", \" col2) \", USA\" \"\") \", USA\")"
      ],
      [
        ", USA",
        ", "
      ],
      [
        "(str.++ col2 \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \", USA\")"
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        "NY",
        "NH",
        "New Haven",
        "New York"
      ],
      [
        "",
        ", USA"
      ],
      [
        "(str.++ col2 \", USA\")"
      ],
      [
        "",
        "NY",
        "NH",
        "University of ",
        "New Haven",
        "New York"
      ],
      [
        0,
        1,
        "USA",
        ", "
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \",\") \", USA\")"
      ],
      [
        "New Haven",
        "Ann Arbor",
        "NYU",
        "AH",
        "Los Angeles",
        "AA",
        "D",
        "Berkeley",
        ", USA",
        "V",
        "AC",
        "X",
        "AD",
        "J",
        "AJ",
        "MIT",
        "University of Connecticut",
        "University of Pennsylvania",
        "N",
        "IL",
        "TX",
        "Urbana",
        "AL",
        "AI",
        "W",
        "Temple University",
        "AG",
        "MI",
        "Philadelphia",
        "Rice University",
        "F",
        "A",
        "AE",
        "Cambridge",
        "T",
        "University of Michigan",
        "Ithaca",
        "O",
        "U",
        "Q",
        "University of Maryland College Park",
        "C",
        "UCLA",
        "H",
        "AK",
        "B",
        "L",
        ", ",
        "P",
        "Houston",
        "New York",
        "R",
        "K",
        "G",
        "Y",
        "I",
        "UIUC",
        "M",
        "Penn",
        "S",
        "Yale University",
        "PA",
        "MA",
        "Columbia University",
        "Z",
        "Cornell University",
        "New Haven University",
        "Phialdelphia",
        "Storrs",
        "E",
        "College Park",
        "AF",
        "NY",
        "Drexel University",
        "CA",
        "Santa Barbara",
        "AB",
        "Harvard University"
      ],
      [
        ", USA",
        "NY",
        "NH",
        "New Haven",
        "New York"
      ],
      [
        "(str.++ col2 \", USA\")"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        ", USA",
        "University of",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "M",
        "N",
        "S",
        "U",
        "Q",
        "C",
        "H",
        "Z",
        "B",
        "L",
        ", ",
        "P",
        "New York",
        "W",
        "R",
        "D",
        ", USA",
        "K",
        "F",
        "A",
        "V",
        "E",
        "G",
        "Y",
        "T",
        "X",
        "J",
        "I",
        "NY",
        "O"
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", "
      ],
      [
        0,
        2,
        3,
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      3,
      5,
      4,
      "Phialdelphia",
      "Ithaca",
      "University of Michigan",
      "K",
      "D",
      "A",
      "Yale University",
      "Philadelphia",
      "Drexel University",
      ", ",
      "MI",
      "F",
      "New York",
      "B",
      "University of",
      "NYU",
      "Los Angeles",
      "College Park",
      "AA",
      "Ann Arbor",
      "University of Pennsylvania",
      "AK",
      "C",
      "Z",
      "IL",
      "(str.++ (str.replace (str.++ col1 \", \" col2) \", USA\" \"\") \", USA\")",
      "W",
      "MA",
      "G",
      "L",
      "V",
      "AH",
      "UIUC",
      "J",
      "UCLA",
      "AF",
      "Urbana",
      "I",
      "Cornell University",
      "NY",
      "X",
      "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \",\") \", USA\")",
      "University of Connecticut",
      "M",
      "TX",
      "Penn",
      "T",
      "(str.++ (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \", USA\")",
      ",",
      "CT",
      "P",
      "AB",
      "LA",
      "AD",
      "CA",
      "New Haven",
      "AJ",
      "AL",
      "Storrs",
      "AE",
      "MIT",
      "Berkeley",
      "PA",
      "Santa Barbara",
      "Rice University",
      "Temple University",
      "Y",
      "Q",
      ", USA",
      "O",
      "University of Maryland College Park",
      "New Haven University",
      "Harvard University",
      "Houston",
      "AI",
      "Cambridge",
      "University of ",
      "AC",
      "NH",
      "AG",
      "USA",
      "N",
      "E",
      "R",
      "Columbia University",
      "H",
      "U",
      "(str.++ col2 \", USA\")",
      "S"
    ],
    "time_diff_ms": 1539.077
  },
  "stackoverflow10.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4)",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \") (str.len _arg_0)) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 7 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (s String) String\n  (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.len s) (+ (str.indexof s \" \" 0) 1))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String\n    (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(define-fun f (date String) String\n  (str.substr date 8 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) _arg_0)",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.at _arg_0 (- (str.len _arg_0) 5) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))) _arg_0)",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) (- (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(ite (str.contains _arg_0 \" -> \")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \" -> \") 4) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" -> \") 4)))\n     \"\")",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) (- (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \") (str.len _arg_0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.len s) (+ (str.indexof s \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr date 8 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) _arg_0))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 5) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))) _arg_0))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) (- (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" -> \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" -> \") 4) (- (str.len _arg_0) (+ (str.indexof _arg_0 \" -> \") 4))) \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.len _arg_0) (- (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))"
    ],
    "constants": [
      [
        0,
        " ",
        2,
        4
      ],
      [
        " "
      ],
      [
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4,
        7
      ],
      [
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        2,
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        0,
        " "
      ],
      [
        8,
        4
      ],
      [
        4
      ],
      [
        1,
        " "
      ],
      [
        0,
        " ",
        2,
        4
      ],
      [
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        4,
        5
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        " ",
        2,
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        4
      ],
      [
        4
      ],
      [
        "",
        4,
        " -> "
      ],
      [
        0,
        1,
        " "
      ],
      [
        4
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      "",
      7,
      8,
      " -> ",
      " "
    ],
    "time_diff_ms": 1055.257
  },
  "phone-9-short.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \".\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\") \" \" \"\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \".\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) (str.substr name 1 3) \".\" (str.substr name 5 3) \".\" (str.substr name 9 3) \".\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    (str.substr name 1 3) \n    \".\" \n    (str.substr name 5 3) \n    \".\" \n    (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+ \" \"+\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\"))\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0)\n    (str.substr name 2 3)\n    \".\"\n    (str.substr name 6 3)\n    \".\"\n    (str.substr name 10 3)\n    \".\"\n    (str.substr name 14 3)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3) \".\"\n    (str.substr name 12 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3))",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"\n    (str.replace name \"-\" \".\")))",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3) \".\"\n    (str.substr name 12 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \".\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) (str.substr name 1 3) \".\" (str.substr name 5 3) \".\" (str.substr name 9 3) \".\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.at name 0) (str.substr name 1 3) \".\" (str.substr name 5 3) \".\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.at name 0) (str.substr name 2 3) \".\" (str.substr name 6 3) \".\" (str.substr name 10 3) \".\" (str.substr name 14 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace name \" \" \".\" (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \".\") \" \" \".\") \".\" \".\") \".\" \".\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        1,
        3,
        5,
        9,
        13,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        1,
        3,
        5,
        9,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        2,
        3,
        6,
        10,
        14,
        "."
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ]
    ],
    "all_constants": [
      0,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      ".",
      3,
      4,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "",
      1,
      8,
      5,
      9,
      2,
      6,
      13,
      10,
      14,
      12,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \".\") \" \" \".\") \".\" \".\") \".\" \".\") \".\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      " ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")",
      "-",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1146.795
  },
  "phone-6-short.sl": {
    "completions": [
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(ite (= (str.at name 4) \"-\")\n     (str.substr name 5 3)\n     (ite (= (str.at name 3) \"-\")\n          (str.substr name 4 3)\n          (str.substr name 3 3)))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 2 3) (ite (= (str.at name 1) \" \") (str.substr name 3 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name 1 3) (str.substr name 0 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(str.at (str.substr name 5 3) 0)",
      "(ite (= (str.at name 1) \" \") (str.substr name 2 3) (ite (= (str.at name 2) \" \") (str.substr name 3 3) (str.substr name 4 3)))",
      "(define-fun f (name String) String\n    (str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 11) 0)\"",
      "(ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 2 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 12) 0)\"",
      "(ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(ite (= (str.at name 4) \"-\") (str.substr name 5 3) (ite (= (str.at name 3) \"-\") (str.substr name 4 3) (str.substr name 3 3)))",
      "(str.substr name 5 3))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.at (str.substr name 5 11) 0 3))",
      "(define-fun f (name String) String\n  (str.at (str.substr name 5 12) 0))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.at (str.substr name 5 3) 0 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name 1 (str.indexof name \" \" 0))\n     (str.substr name 1 (str.indexof name \"-\")))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 4) \"-\") (str.substr name 5 3) (ite (= (str.at name 3) \"-\") (str.substr name 4 3) (str.substr name 3 3))))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 2 3) (ite (= (str.at name 1) \" \") (str.substr name 3 3) (str.substr name 1 3))))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 3) (str.substr name 0 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at (str.substr name 5 3) 0))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 2 3) (ite (= (str.at name 2) \" \") (str.substr name 3 3) (str.substr name 4 3))))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 0)\")",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 2 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 12) 0)\")",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 2 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 4) \"-\") (str.substr name 5 3) (ite (= (str.at name 3) \"-\") (str.substr name 4 3) (str.substr name 3 3))))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 3 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at (str.substr name 5 11) 0 3))",
      "(define-fun f (name String) String (str.at (str.substr name 5 12) 0))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at (str.substr name 5 3) 0 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \" 0)) (str.substr name 1 (str.indexof name \"-\"))))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        "-",
        3,
        4,
        5
      ],
      [
        0,
        1,
        2,
        3,
        " ",
        "+"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        0,
        1,
        " ",
        3
      ],
      [
        1,
        " ",
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        5
      ],
      [
        0,
        3,
        5
      ],
      [
        1,
        2,
        3,
        4,
        " "
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 11) 0)"
      ],
      [
        0,
        3,
        2,
        "+"
      ],
      [
        3,
        5
      ],
      [
        "(str.at (str.substr name 5 12) 0)"
      ],
      [
        0,
        1,
        2,
        3,
        "+"
      ],
      [
        1,
        " ",
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "-",
        3,
        4,
        5
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        "+",
        1
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        11,
        5
      ],
      [
        0,
        12,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        0,
        3,
        5
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3
      ],
      [
        3,
        5
      ],
      [
        0,
        1,
        " ",
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      "(str.at (str.substr name 5 11) 0)",
      "-",
      "(str.at (str.substr name 5 12) 0)",
      11,
      12,
      " ",
      "+"
    ],
    "time_diff_ms": 1641.393
  },
  "43606446.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ 1 (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\" 0) 1) (- (str.indexof _arg_0 \\\",\\\" 0) 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<CASH,\") 6) (- (str.indexof _arg_0 \",CASH>\") (str.indexof _arg_0 \"<CASH,\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\") 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\")) -1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 16)))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ (str.indexof _arg_0 \">\") -1))",
      "(define-fun f ((_arg_0 String)) String\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\" (+ (str.indexof _arg_0 \"<\") 1)))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(define-fun f (s String) String\n  (str.substr s (+ (str.indexof s \"<\") 1) (- (str.indexof s \",\") (str.indexof s \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (str.indexof _arg_0 \",\"))\n```",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.len _arg_0))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ 1 (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\" 0) 1) (- (str.indexof _arg_0 \\\",\\\" 0) 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<CASH,\") 6) (- (str.indexof _arg_0 \",CASH>\") (str.indexof _arg_0 \"<CASH,\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\")) -1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 16)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (+ (str.indexof _arg_0 \">\") -1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\" (+ (str.indexof _arg_0 \"<\") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"<\") 1) (- (str.indexof s \",\") (str.indexof s \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (str.indexof _arg_0 \",\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 15))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))"
    ],
    "constants": [
      [
        ">",
        "<IDEALPRO,CASH,",
        15
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" 0) 1))"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        ",CASH>",
        "<CASH,",
        6
      ],
      [
        1,
        ","
      ],
      [
        1,
        ",",
        "<",
        -1
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        16,
        1,
        "<IDEALPRO,CASH,",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">",
        -1
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ","
      ],
      [
        1,
        "<"
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))"
      ],
      [
        ">",
        "<IDEALPRO,CASH,",
        15
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ]
    ],
    "all_constants": [
      1,
      ",",
      "<CASH,",
      6,
      ">",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" 0) 1))",
      15,
      "<IDEALPRO,CASH,",
      ",CASH>",
      16,
      -1,
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))",
      "<"
    ],
    "time_diff_ms": 1514.633
  },
  "initials-long.sl": {
    "completions": [
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0)\n    \".\"\n    (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \n    \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \n    \".\" \n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\"\n    (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (- (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n    (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\"\n    (str.at \n      (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \n      0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\"\n    (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n    (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(define-fun f (name String) String\n    (str.++ \n        (str.substr name 0 1) \".\"\n        (str.substr (str.at name (+ 1 (str.indexof name \" \" 0))) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 1 (str.len (str.at name 1)))\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.at name 1) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \n      0 1\n    )\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n    (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (- (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ 1 (str.indexof name \" \" 0))) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 1 (str.len (str.at name 1)))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.replace name \" \" \"\") 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "constants": [
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      "",
      2,
      " "
    ],
    "time_diff_ms": 2298.041
  },
  "phone-5-long-repeat.sl": {
    "completions": [
      "(str.at name 1)",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(str.at name 1)",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "(str.to.int (str.substr name 1 3))",
      "\"(str.to.int (str.substr name 1 (str.indexof name \\\" \\\")))\"",
      "(str.to.int (str.substr name 1 3)))",
      "\"(str.at name 0)\"",
      "\"(str.at name 0)\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "\"(str.to.int (str.substr name 1 3))\"",
      "(str.at name 1))",
      "\"(str.at name 1)\"",
      "(str.at name 1))",
      "\"(str.at name 1)\"",
      "(str.at name 0)",
      "\"(str.at name 1)\"",
      "\"(str.to.int (str.substr name 1 (- (str.indexof name \\\" \\\") 1)))\"",
      "(str.at name 1 2))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "(str.substr name 1 (str.indexof name \" \" 0))",
      "\"(str.at name 1)\"",
      "(str.to.int (str.substr name 1 (- (str.indexof name \" \") 1)))",
      "(str.at name 1))",
      "\"(str.at name 1)\"",
      "(str.at name 1)",
      "(str.at name 1))",
      "\"(str.at name 1)\"",
      "(str.at name 1))",
      "\"(str.to.int (str.substr name 1 3))\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(str.at name 1)"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.to.int (str.substr name 1 3)))",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 (str.indexof name \\\" \\\")))\")",
      "(define-fun f (name String) String (str.to.int (str.substr name 1 3)))",
      "(define-fun f (name String) String \"(str.at name 0)\")",
      "(define-fun f (name String) String \"(str.at name 0)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 0))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 (- (str.indexof name \\\" \\\") 1)))\")",
      "(define-fun f (name String) String (str.at name 1 2))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.to.int (str.substr name 1 (- (str.indexof name \" \") 1))))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))"
    ],
    "constants": [
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        "(str.to.int (str.substr name 1 (str.indexof name \" \")))"
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 0)"
      ],
      [
        "(str.at name 0)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        "(str.to.int (str.substr name 1 3))"
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        0
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.to.int (str.substr name 1 (- (str.indexof name \" \") 1)))"
      ],
      [
        1,
        2
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        " "
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.to.int (str.substr name 1 3))"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      "(str.at name 0)",
      3,
      2,
      "(str.at name 1)",
      "(str.to.int (str.substr name 1 3))",
      "(str.to.int (str.substr name 1 (- (str.indexof name \" \") 1)))",
      " ",
      "(str.to.int (str.substr name 1 (str.indexof name \" \")))"
    ],
    "time_diff_ms": 1947.288
  },
  "phone-7-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.at name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 8 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.at name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.at name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f ((name String)) String (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n    (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 6 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      8
    ],
    "time_diff_ms": 2328.047
  },
  "univ_6-long.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") 1 (str.len (str.replace (str.replace col2 col1 \"\") \"USA\" \"\"))))",
      "(define-fun f (col1 String col2 String) String\n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)\n        (str.replace (str.replace col1 \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.indexof col2 \",\") 1)))",
      "\"(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))\"",
      "\"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") col1 col2) 0 (- (str.len col2) 4))\"",
      "\"(str.++ (str.substr col2 0 (- (str.len col2) 4)) (str.substr col2 (- (str.len col2) 3) 2) \\\", USA\\\")\"",
      "\"(str.substr col2 (- (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "\"(str.substr col2 (str.indexof col2 \\\",\\\" 0) (str.len col2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\"))",
      "\"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\"",
      "\"(str.substr (str.replace col2 col1 \\\"\\\") 0 (- (str.indexof col2 col1 0) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.++ col1 \", \" col2 \", \" \"USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", \" \"USA\") \"New York\" \"NY\")) 5))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 1 100) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.++ col2 \", USA\") 2 (str.len col2)))",
      "(define-fun f (col1 String col2 String) String\n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"UC Berkeley\" \"Berkeley, CA, USA\") \"MIT\" \"Cambridge, MA, USA\") \"Rice University\" \"Houston, TX, USA\") \"Yale University\" \"New Haven, CT, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"UC Berkeley\" \"Berkeley, CA, USA\") \"UIUC\" \"Urbana, IL, USA\") \"Temple University\" \"Philadelphia, PA, USA\") \"Harvard University\" \"Cambridge, MA, USA\") \"University of Connecticut\" \"Storrs, CT, USA\") \"Drexel University\" \"Philadelphia, PA, USA\") \"New Haven University\" \"New Haven, CT, USA\") \"University of California, Santa Barbara\" \"Santa Barbara, CA, USA\") 0 (- (str.len col1) 5)))",
      "\"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.replace col2 \", \" \"\") \", USA\" \"\") 2 (str.len (str.replace (str.replace col2 \", \" \"\") \", USA\"))))",
      "(define-fun f (col1 String col2 String) String\n  (str.substr col2 0  (str.indexof col2 \",\")))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace col2 \"New York\" \"NY\") \"Santa Barbara\" \"CA\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 4))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"USA\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.substr (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") 2 (- (str.len (str.replace (str.replace col2 col1 \"\") \", USA\" \"\")) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.++ col1 \", \" col2 \", USA\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 1)))",
      "(define-fun f (col1 String col2 String) String\n  (str.replace\n    (str.replace\n      (str.replace col2 \"New York\" \"NY\")\n      \"New York\" \"NY\")\n    \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "\"(str.substr (str.++ col2 \\\", USA\\\") 2 (- (str.len col2) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col2 \" \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"USA\" \"\") 0 (- (str.indexof (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"USA\" \"\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") 1 (str.len (str.replace (str.replace col2 col1 \"\") \"USA\" \"\"))))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1) (str.replace (str.replace col1 \"New York\" \"NY\") \"New York\" \"NY\")))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") col1 col2) 0 (- (str.len col2) 4))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.len col2) 4)) (str.substr col2 (- (str.len col2) 3) 2) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (- (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (str.indexof col2 \\\",\\\" 0) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace col2 col1 \\\"\\\") 0 (- (str.indexof col2 col1 0) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", \" \"USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", \" \"USA\") \"New York\" \"NY\")) 5)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 1 100) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.++ col2 \", USA\") 2 (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"UC Berkeley\" \"Berkeley, CA, USA\") \"MIT\" \"Cambridge, MA, USA\") \"Rice University\" \"Houston, TX, USA\") \"Yale University\" \"New Haven, CT, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"UC Berkeley\" \"Berkeley, CA, USA\") \"UIUC\" \"Urbana, IL, USA\") \"Temple University\" \"Philadelphia, PA, USA\") \"Harvard University\" \"Cambridge, MA, USA\") \"University of Connecticut\" \"Storrs, CT, USA\") \"Drexel University\" \"Philadelphia, PA, USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 \", \" \"\") \", USA\" \"\") 2 (str.len (str.replace (str.replace col2 \", \" \"\") \", USA\"))))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 \"New York\" \"NY\") \"Santa Barbara\" \"CA\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 4)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"USA\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") 2 (- (str.len (str.replace (str.replace col2 col1 \"\") \", USA\" \"\")) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.++ col1 \", \" col2 \", USA\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.++ col2 \\\", USA\\\") 2 (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.replace col2 \" \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"USA\" \"\") 0 (- (str.indexof (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"USA\" \"\") 1))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2)))"
    ],
    "constants": [
      [
        0,
        1,
        ", USA",
        ","
      ],
      [
        "",
        1,
        "USA"
      ],
      [
        0,
        1,
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "",
        0,
        1,
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))"
      ],
      [
        "(str.substr (str.replace (str.replace col2 col1 \"\") col1 col2) 0 (- (str.len col2) 4))"
      ],
      [
        "(str.++ (str.substr col2 0 (- (str.len col2) 4)) (str.substr col2 (- (str.len col2) 3) 2) \", USA\")"
      ],
      [
        "(str.substr col2 (- (str.indexof col2 \",\") 2) (- (str.len col2) 2))"
      ],
      [
        "(str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        "NY",
        "New York",
        "California",
        "CA"
      ],
      [
        "(str.replace (str.replace col2 col1 \"USA\") col1 \"\")"
      ],
      [
        "(str.substr (str.replace col2 col1 \"\") 0 (- (str.indexof col2 col1 0) 2))"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        5,
        ", ",
        "USA",
        "NY",
        "New York"
      ],
      [
        1,
        100,
        ", USA"
      ],
      [
        2,
        ", USA"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "Penn",
        "Ann Arbor, MI, USA",
        "Yale University",
        "University of Maryland College Park",
        "UIUC",
        "UCLA",
        "Columbia University",
        "NYU",
        "Phialdelphia, PA, USA",
        "Cornell University",
        "University of Pennsylvania",
        "Temple University",
        "Cambridge, MA, USA",
        "Berkeley, CA, USA",
        "Rice University",
        "New York, NY, USA",
        "Storrs, CT, USA",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Ithaca, NY, USA",
        "Urbana, IL, USA",
        "University of Michigan",
        "Harvard University",
        "Houston, TX, USA",
        "Los Angeles, CA, USA",
        "Drexel University",
        "University of Connecticut",
        "New Haven, CT, USA",
        "UC Berkeley",
        "MIT"
      ],
      [
        "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))"
      ],
      [
        "",
        2,
        ", USA",
        ", "
      ],
      [
        0,
        ","
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \", USA\")"
      ],
      [
        0,
        1,
        ",",
        "NY",
        "CA",
        "Santa Barbara",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        4,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "USA",
        "California",
        "NY",
        "CA",
        "New York"
      ],
      [
        "",
        2,
        ", USA"
      ],
      [
        0,
        1,
        ", USA",
        ", "
      ],
      [
        "NY",
        "New York"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        ","
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "NY",
        "New Haven",
        "NH",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \", USA\" \"\")"
      ],
      [
        0,
        1,
        ", USA",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.substr (str.++ col2 \", USA\") 2 (- (str.len col2) 2))"
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        1,
        ", ",
        "USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "NY",
        "",
        "New York",
        "USA"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      2,
      "University of Maryland College Park",
      5,
      4,
      "(str.replace (str.replace col2 col1 \"USA\") col1 \"\")",
      "Harvard University",
      "University of Connecticut",
      "Penn",
      "Urbana, IL, USA",
      "University of Michigan",
      "University of ",
      "Storrs, CT, USA",
      ",",
      "Ithaca, NY, USA",
      "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))",
      "Yale University",
      "(str.++ (str.substr col2 0 (- (str.len col2) 4)) (str.substr col2 (- (str.len col2) 3) 2) \", USA\")",
      "Houston, TX, USA",
      "Drexel University",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "Berkeley, CA, USA",
      "NH",
      "New Haven, CT, USA",
      "(str.substr (str.replace col2 col1 \"\") 0 (- (str.indexof col2 col1 0) 2))",
      "USA",
      ", ",
      "(str.substr (str.++ col2 \", USA\") 2 (- (str.len col2) 2))",
      "College Park, MD, USA",
      "New York",
      "CA",
      "(str.substr col2 (- (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      "(str.substr col2 (str.indexof col2 \",\" 0) (str.len col2))",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \", USA\")",
      "New Haven",
      "(str.substr (str.replace (str.replace col2 col1 \"\") col1 col2) 0 (- (str.len col2) 4))",
      "California",
      "Columbia University",
      "UIUC",
      " ",
      "Philadelphia, PA, USA",
      "NYU",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      "Cambridge, MA, USA",
      "MIT",
      "UCLA",
      100,
      "Ann Arbor, MI, USA",
      "UC Berkeley",
      "Santa Barbara",
      "(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))",
      "Rice University",
      "Temple University",
      "University of Pennsylvania",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \", USA\" \"\")",
      "Cornell University",
      "Phialdelphia, PA, USA",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1422.171
  },
  "33619752.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      " ",
      " Inc"
    ],
    "time_diff_ms": 1703.242
  },
  "extract-text-between-parentheses.sl": {
    "completions": [
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(str.to.int (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"<\")) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<\")) (+ 6 (str.indexof _arg_0 \"<\"))))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 6 2))",
      "(str.to.int (str.at _arg_0 7))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.len _arg_0) 7)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.at _arg_0 (- (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 7 2))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (+ (str.indexof _arg_0 \">\" 0) -1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6)))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\") 1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6)))",
      "(str.to.int (str.substr _arg_0 6 2)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"<\")) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<\")) (+ 6 (str.indexof _arg_0 \"<\"))))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 7)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.len _arg_0) 7))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (- (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 7 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (+ (str.indexof _arg_0 \">\" 0) -1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ],
    "constants": [
      [
        0,
        ">",
        6
      ],
      [
        ">",
        "<",
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        2,
        6
      ],
      [
        2,
        6
      ],
      [
        7
      ],
      [
        0,
        1,
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        2,
        6
      ],
      [
        0,
        ">",
        6
      ],
      [
        6,
        7
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        2,
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        2,
        6
      ],
      [
        2,
        7
      ],
      [
        0,
        1,
        "<"
      ],
      [
        0,
        1,
        "<",
        ">",
        -1
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<"
      ],
      [
        2,
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        6
      ],
      [
        1,
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        6
      ],
      [
        2,
        6
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      6,
      7,
      ">",
      -1,
      "<"
    ],
    "time_diff_ms": 2069.583
  },
  "remove-leading-and-trailing-spaces-from-text.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.trim _arg_0))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))) )",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "\"(str.++ (ite (str.prefixof \\\" \\\" _arg_0) \\\"\\\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") 1 (str.len _arg_0)))\"",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))) )",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.trim _arg_0))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String \"(str.++ (ite (str.prefixof \\\" \\\" _arg_0) \\\"\\\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") 1 (str.len _arg_0)))\")",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))"
    ],
    "constants": [
      [],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))"
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      " "
    ],
    "time_diff_ms": 2029.615
  },
  "strip-non-numeric-characters.sl": {
    "completions": [
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f ((s String)) String\n  (str.replace s \" \" \"\"))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \" \" \"\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.replace s \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \" \" \"\")))"
    ],
    "constants": [
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      "",
      " ",
      "%"
    ],
    "time_diff_ms": 1187.68
  },
  "get-middle-name-from-full-name.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof _arg_0 \" \" 0) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof _arg_0 \" \" 0) 1)) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1221.969
  },
  "initials_small.sl": {
    "completions": [
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \") 1) 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.indexof name \" \" 0) 1 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at (str.replace name \" \" \".\") 0) \".\"\n           (str.at (str.replace name \" \" \".\") (+ (str.indexof name \" \") 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\")",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(define-fun f (name String) String\n    (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.at name 0) 0 1)\n    \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.at name (+ (str.indexof name \" \" 0) 1) 0) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.++ \n      (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at \n        (str.replace name \" \" \".\") \n        1) \n      0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \") 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.indexof name \" \" 0) 1 1)))",
      "(define-fun f (name String) String (str.++ (str.at (str.replace name \" \" \".\") 0) \".\" (str.at (str.replace name \" \" \".\") (+ (str.indexof name \" \") 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.at name 0) 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.at name (+ (str.indexof name \" \" 0) 1) 0) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at (str.replace name \" \" \".\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr name (+ (str.indexof name \" \" 0) 1) 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 2343.051
  },
  "stackoverflow5.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(define-fun f ((s String)) String s)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(define-fun f ((s String)) String\n  (ite (str.contains s \",\")\n       (str.substr s 0 (str.indexof s \",\" 0))\n       s))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(define-fun f ((x String)) String x)"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String s)",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (ite (str.contains s \",\") (str.substr s 0 (str.indexof s \",\" 0)) s))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String x)"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        ","
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      []
    ],
    "all_constants": [
      0,
      1,
      "=",
      ","
    ],
    "time_diff_ms": 2826.0389999999998
  },
  "extract-word-that-begins-with-specific-character.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.at _arg_0 (+ 1 (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\") 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\")) (str.indexof _arg_0 \" _\")))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.len \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ (str.indexof _arg_0 \" _\" 0) (str.len \" _\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))) ",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (+ 1 (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\") 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\")) (str.indexof _arg_0 \" _\"))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.len \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ (str.indexof _arg_0 \" _\" 0) (str.len \" _\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))"
    ],
    "constants": [
      [
        1,
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        1,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        1,
        " ",
        " _"
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " ",
        " _"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        "_"
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        0,
        1,
        " ",
        " _"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        1,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        " _"
      ],
      [
        0,
        " ",
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      " _",
      " ",
      "_"
    ],
    "time_diff_ms": 727.703
  },
  "35744094.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \"/\"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") (str.len \"www.\")))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"http://\") (str.indexof _arg_0 \"//\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.indexof _arg_0 \"//\"))))",
      "(str.substr _arg_0 7 (- (str.len _arg_0) 7))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" (+ 3 (str.indexof _arg_0 \"/\" 3))) (str.indexof _arg_0 \"/\" (+ 3 (str.indexof _arg_0 \"/\" 3))))",
      "(str.substr _arg_0 13 (- (str.len _arg_0) 13))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"microsoft\" 0) (str.len \"microsoft\")) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 7) 100))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len \"https=//\"))) (str.len _arg_0))",
      "(str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"//\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") 2)) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\") (+ 2 (str.indexof _arg_0 \"//\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=//www.\") 1)) (str.indexof _arg_0 \"/\" (+ (str.len \"https=//www.\") 1)))",
      "(str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7)))",
      "(str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=\") 2)) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"microsoft\" 0) 2) (str.len \"microsoft\"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \".com/\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (+ (str.indexof _arg_0 \"/\" 0 8) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 8))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 7))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"https://www.\") 12) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"https://www.\") 12)))",
      "(ite (str.contains _arg_0 \"apple\") \"apple\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"://\") 3) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"//www.\") 7) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//www.\") 7)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\") 1) 1)) 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \"/\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") (str.len \"www.\"))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"http://\") (str.indexof _arg_0 \"//\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (- (str.len _arg_0) 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" (+ 3 (str.indexof _arg_0 \"/\" 3))) (str.indexof _arg_0 \"/\" (+ 3 (str.indexof _arg_0 \"/\" 3)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (- (str.len _arg_0) 13)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"microsoft\" 0) (str.len \"microsoft\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 7) 100))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") (str.len \"https=//\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (- (str.indexof _arg_0 \"/\" 7) 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"//\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" (+ (str.len \"https://\") 2)) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\") (+ 2 (str.indexof _arg_0 \"//\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=//www.\") 1)) (str.indexof _arg_0 \"/\" (+ (str.len \"https=//www.\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=\") 2)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") 2)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"microsoft\" 0) 2) (str.len \"microsoft\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \".com/\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (+ (str.indexof _arg_0 \"/\" 0 8) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"://www.\") 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\") 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"https://www.\") 12) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"https://www.\") 12))))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"apple\") \"apple\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"://\") 3) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//www.\") 7) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//www.\") 7))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"http://\") (str.len \"https://\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\") 1) 1)) 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\")))))"
    ],
    "constants": [
      [
        "http://",
        "/",
        "https://"
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        "/",
        2,
        "https://"
      ],
      [
        "/",
        "www.",
        4
      ],
      [
        "/",
        "www.",
        "//",
        "https://"
      ],
      [
        "http://",
        "/",
        "//",
        "https://"
      ],
      [
        7
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "/",
        3,
        "://"
      ],
      [
        13
      ],
      [
        0,
        "/"
      ],
      [
        "microsoft",
        0
      ],
      [
        0,
        "/",
        100,
        7
      ],
      [
        "/",
        "http=//",
        "https=//"
      ],
      [
        "/",
        7
      ],
      [
        "/",
        2,
        "https://"
      ],
      [
        0,
        "/",
        2,
        "//"
      ],
      [
        0,
        "/"
      ],
      [
        "/",
        2,
        "//",
        "https://"
      ],
      [
        "http://",
        "/",
        "https://"
      ],
      [
        2,
        "//"
      ],
      [
        "https=//www.",
        "/",
        1
      ],
      [
        "/",
        7
      ],
      [
        "/",
        7
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "http=",
        "/",
        2
      ],
      [
        0,
        1,
        "/"
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        "/",
        2,
        "https://"
      ],
      [
        0,
        1,
        "/",
        "://"
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        1,
        "/"
      ],
      [
        "http://",
        "/",
        "https://"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "microsoft",
        0,
        2
      ],
      [
        ".com/",
        "www.",
        4
      ],
      [
        1,
        "/",
        "://www.",
        7
      ],
      [
        "/",
        2
      ],
      [
        0,
        1,
        "/",
        3,
        8,
        "://"
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        "/",
        "://www.",
        7
      ],
      [
        "https://www.",
        "/",
        12
      ],
      [
        "microsoft",
        "",
        "apple",
        "windows"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        1,
        "/",
        3,
        8,
        "://"
      ],
      [
        "/",
        7,
        "//www."
      ],
      [
        "http://",
        "/",
        "https://"
      ],
      [
        0,
        1,
        "/",
        "://"
      ],
      [
        "/",
        "www.",
        "https://"
      ]
    ],
    "all_constants": [
      "www.",
      0,
      2,
      1,
      4,
      3,
      "https://www.",
      7,
      8,
      "",
      12,
      13,
      "http=//",
      "https://",
      "https=//",
      "//www.",
      ".com/",
      "https=//www.",
      "//",
      "http=",
      "/",
      "://",
      "http://",
      "windows",
      "microsoft",
      100,
      "://www.",
      "apple"
    ],
    "time_diff_ms": 1835.708
  },
  "get-last-line-in-cell.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"n\" (+ 1 (str.indexof _arg_0 \"n\"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -4)) (+ (str.len _arg_0) -1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0 (+ (str.indexof _arg_0 \"/n\" 0) 2))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -4)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) \"/n\" 0) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (str.len _arg_0)) \"/n\" 0) 3))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \"/n\" 0)) \"/n\" 0) 3))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0)) \"/n\" 0))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\"/n\\\" (- (str.len _arg_0) 1)) (str.len _arg_0))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (str.len _arg_0)) \"/n\" 0) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"n\" (+ 1 (str.indexof _arg_0 \"n\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -4)) (+ (str.len _arg_0) -1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0 (+ (str.indexof _arg_0 \"/n\" 0) 2)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -4)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) \"/n\" 0) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (str.len _arg_0)) \"/n\" 0) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \"/n\" 0)) \"/n\" 0) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0)) \"/n\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\"/n\\\" (- (str.len _arg_0) 1)) (str.len _arg_0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (str.len _arg_0)) \"/n\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))))"
    ],
    "constants": [
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        2,
        "/n",
        -1
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        1,
        "n"
      ],
      [
        2,
        "/n",
        -1
      ],
      [
        "/n",
        -4,
        -1
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        2,
        "/n",
        -1
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        2,
        "/n"
      ],
      [
        "/n",
        -4
      ],
      [
        0,
        2,
        "/n"
      ],
      [
        0,
        1,
        "/n"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        3,
        1,
        "/n",
        0
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        2,
        "/n",
        -1
      ],
      [
        3,
        1,
        "/n",
        0
      ],
      [
        1,
        2,
        "/n"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))"
      ],
      [
        3,
        1,
        "/n"
      ],
      [
        0,
        3,
        "/n"
      ],
      [
        0,
        2,
        "/n"
      ],
      [
        0,
        2,
        "/n"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "/n",
      3,
      "n",
      " ",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))",
      -4,
      -1
    ],
    "time_diff_ms": 1182.412
  },
  "31753108.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 13)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \") 1) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 8))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 13 8))",
      "(str.substr _arg_0 11 8))",
      "(str.substr _arg_0 13 8))",
      "(str.substr _arg_0 12 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (- (str.indexof _arg_0 \" \") 13))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 13)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 11 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (- (str.indexof _arg_0 \" \") 13)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        8,
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        8,
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        8,
        13
      ],
      [
        8,
        11
      ],
      [
        8,
        13
      ],
      [
        0,
        " ",
        12
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " ",
        13
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        13
      ]
    ],
    "all_constants": [
      0,
      1,
      8,
      11,
      12,
      13,
      " "
    ],
    "time_diff_ms": 729.3069999999999
  },
  "exceljet4.sl": {
    "completions": [
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(str.replace _arg_0 \"ftp=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https://\" \"\")",
      "(str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"([^:]+://)\" \"\")",
      "(str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\")",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\")",
      "(str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0))",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (- (str.len _arg_0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\")",
      "(str.replace _arg_0 \"^(https|ftp|sftp)://\")",
      "(str.replace _arg_0 \"^(https|http|ftp|sftp)://\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\")",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\")",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\")",
      "(str.replace (str.replace (str.replace _arg_0 \"https=//\" \"\") \"http=//\" \"\") \"ftp=//\" \"\")",
      "(str.replace _arg_0 \"https://\" \"\")",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"ftp=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"([^:]+://)\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https|ftp|sftp)://\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https|http|ftp|sftp)://\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^[a-zA-Z]+=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"https=//\" \"\") \"http=//\" \"\") \"ftp=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))"
    ],
    "constants": [
      [
        "",
        "^(https?|ftp|sftp)://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "ftp=//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "^(https?|ftp|sftp)://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        0,
        "//"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https://"
      ],
      [
        0,
        "//",
        6
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "([^:]+://)",
        ""
      ],
      [
        "",
        "^[a-zA-Z]+=//"
      ],
      [
        "",
        "https=//"
      ],
      [
        "",
        "^[a-zA-Z]+=//"
      ],
      [
        8,
        0,
        "//"
      ],
      [
        "^(https?|ftp|sftp)://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        1,
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        "",
        "^(https?|ftp|sftp)://"
      ],
      [
        "^(https|ftp|sftp)://"
      ],
      [
        "^(https|http|ftp|sftp)://"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "^[a-zA-Z]+=//"
      ],
      [
        "",
        "^(https?|ftp|sftp)://"
      ],
      [
        "",
        "https=//"
      ],
      [
        2,
        "//"
      ],
      [
        3,
        "://"
      ],
      [
        "",
        "https=//"
      ],
      [
        "^(https?|ftp|sftp)://"
      ],
      [
        "",
        "ftp=//",
        "http=//",
        "https=//"
      ],
      [
        "",
        "https://"
      ],
      [
        "",
        "https=//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ]
    ],
    "all_constants": [
      "",
      "^(https?|ftp|sftp)://",
      0,
      3,
      "https=//",
      1,
      6,
      "^(https|http|ftp|sftp)://",
      8,
      "https://",
      2,
      "://",
      "^[a-zA-Z]+=//",
      "//",
      "^(https|ftp|sftp)://",
      "http=//",
      "([^:]+://)",
      "ftp=//"
    ],
    "time_diff_ms": 1178.8519999999999
  },
  "44789427.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (str.indexof _arg_0 \"-\" _arg_1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"-\" 0 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 0) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 0) _arg_1)) (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 0) _arg_1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) 10))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (+ (str.len (str.indexof _arg_0 \"-\" 0)) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (+ _arg_1 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 1) 1)) (- (str.indexof _arg_0 \"-\" 1) (str.indexof _arg_0 \"-\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (+ (str.len _arg_0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (str.indexof _arg_0 \"-\" _arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"-\" 0 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 0) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 0) _arg_1)) (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 0) _arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) 10)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (+ (str.len (str.indexof _arg_0 \"-\" 0)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (+ _arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.indexof _arg_0 \"-\" 1) 1)) (- (str.indexof _arg_0 \"-\" 1) (str.indexof _arg_0 \"-\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (_arg_1 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (- (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \"-\" 0) 1) (+ (str.len _arg_0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))"
    ],
    "constants": [
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        "/",
        3
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        10,
        1
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-",
        1
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      3,
      "-",
      10
    ],
    "time_diff_ms": 1964.967
  },
  "stackoverflow4.sl": {
    "completions": [
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 2)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 2)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 1))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ (str.substr _arg_0 0 1) \" \" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 2))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2))))",
      "(str.++ (str.substr _arg_0 3 3) \" \" (str.substr _arg_0 7 3) \" \" (str.substr _arg_0 11 2) \" \" (str.substr _arg_0 15 2))",
      "(str.++ \"R/\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 \",\")) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 \",\")))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 5 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) (+ (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.substr _arg_0 0 3) \" \" (str.substr _arg_0 4 3) \" \" (str.substr _arg_0 8 2) \" \" (str.substr _arg_0 11 2))",
      "(str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2))))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 4 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 12 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 (str.indexof _arg_0 \",\" 3)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 3) 1) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 3) 1)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 3) 1)) 1) (str.len _arg_0)))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 (str.indexof _arg_0 \",\" 0)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 4 (str.indexof _arg_0 \",\" 0)) (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 5 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0))) (str.len _arg_0))))))",
      "(str.++ \"R/\" (str.at _arg_0 1) \" \" (str.at _arg_0 4) \" \" (str.at _arg_0 7))",
      "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")",
      "(str.++ \"R\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\" 2))) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 2) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 2))))",
      "(str.++ \"R/\" (str.at _arg_0 1) \" \" (str.at _arg_0 4) \" \" (str.at _arg_0 7))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 2) \" \" (str.substr _arg_0 13 2))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 2)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 2)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)) 1)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 1) \" \" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 2)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 3 3) \" \" (str.substr _arg_0 7 3) \" \" (str.substr _arg_0 11 2) \" \" (str.substr _arg_0 15 2)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 \",\")) \" \" (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 5 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) (+ (str.indexof _arg_0 \",\" 0) 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) 1))))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 0 3) \" \" (str.substr _arg_0 4 3) \" \" (str.substr _arg_0 8 2) \" \" (str.substr _arg_0 11 2)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 4 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 12 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 (str.indexof _arg_0 \",\" 3)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 3) 1) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 3) 1)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 3) 1)) 1) (str.len _arg_0)))))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 (str.indexof _arg_0 \",\" 0)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 4 (str.indexof _arg_0 \",\" 0)) (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 5 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0))) (str.len _arg_0)))))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 1) \" \" (str.at _arg_0 4) \" \" (str.at _arg_0 7)))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\" 2))) \" \" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 2) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 1) \" \" (str.at _arg_0 4) \" \" (str.at _arg_0 7)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 2) \" \" (str.substr _arg_0 13 2)))"
    ],
    "constants": [
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        0,
        1,
        2,
        " ",
        ",",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        ">"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        1,
        2,
        3,
        5,
        9,
        " "
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        2,
        3,
        6,
        9,
        " ",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        11,
        15
      ],
      [
        0,
        1,
        " ",
        ",",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        0,
        2,
        4,
        " ",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        1,
        " ",
        ",",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        1,
        2,
        3,
        5,
        8,
        " ",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        1,
        " ",
        ",",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        2,
        3,
        4,
        8,
        " ",
        11,
        "R/"
      ],
      [
        0,
        2,
        4,
        " ",
        "R/"
      ],
      [
        2,
        3,
        6,
        9,
        " ",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        2,
        3,
        4,
        8,
        " ",
        12,
        "R/"
      ],
      [
        2,
        3,
        6,
        9,
        " ",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        1,
        3,
        " ",
        ",",
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        "R/",
        " ",
        ","
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        0,
        2,
        4,
        " ",
        "R/"
      ],
      [
        0,
        3,
        4,
        5,
        " ",
        ",",
        "R/"
      ],
      [
        1,
        4,
        7,
        " ",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        ">"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        2,
        3,
        7,
        " ",
        10,
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        ">"
      ],
      [
        2,
        3,
        6,
        9,
        " ",
        "R"
      ],
      [
        "R/",
        " ",
        ","
      ],
      [
        1,
        2,
        " ",
        ",",
        "R/"
      ],
      [
        1,
        4,
        7,
        " ",
        "R/"
      ],
      [
        "",
        "<",
        " ",
        ",",
        "R/",
        ">"
      ],
      [
        1,
        2,
        3,
        5,
        9,
        " ",
        13,
        "R/"
      ]
    ],
    "all_constants": [
      "",
      0,
      2,
      3,
      1,
      5,
      6,
      7,
      4,
      9,
      10,
      11,
      8,
      12,
      13,
      "R/",
      15,
      "<",
      ",",
      ">",
      "R",
      " "
    ],
    "time_diff_ms": 1450.716
  },
  "stackoverflow6.sl": {
    "completions": [
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31))",
      "(str.substr _arg_0 26 (- (str.len _arg_0) 26))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"=\\\"))\"",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 25 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 33 (- (str.len _arg_0) 33))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 36 (- (str.len _arg_0) 36))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 28 (- (str.len _arg_0) 28))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 28 (- (str.len _arg_0) 28)))",
      "(str.substr _arg_0 33 (- (str.len _arg_0) 33)))",
      "(str.substr _arg_0 31 (str.len _arg_0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 29 (- (str.len _arg_0) 29))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 30 (str.len _arg_0))",
      "\"(str.substr _arg_0 29 (str.len _arg_0))\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 25 (- (str.len _arg_0) 25)))",
      "\"(str.replace (str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1)) \\\"+91 \\\" \\\"\\\")\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 36 (- (str.len _arg_0) 36)))",
      "(str.substr _arg_0 39 (- (str.len _arg_0) 39))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1))\"",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 31 (str.len _arg_0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 26 (- (str.len _arg_0) 26)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"=\\\"))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 25 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 33 (- (str.len _arg_0) 33)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 36 (- (str.len _arg_0) 36)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 28 (- (str.len _arg_0) 28)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 28 (- (str.len _arg_0) 28)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 33 (- (str.len _arg_0) 33)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 29 (- (str.len _arg_0) 29)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 30 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 29 (str.len _arg_0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 25 (- (str.len _arg_0) 25)))",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1)) \\\"+91 \\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 36 (- (str.len _arg_0) 36)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 39 (- (str.len _arg_0) 39)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))"
    ],
    "constants": [
      [
        31
      ],
      [
        26
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))"
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        25,
        "="
      ],
      [
        0,
        "="
      ],
      [
        33
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        36
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ],
      [
        28
      ],
      [
        0,
        "=",
        1
      ],
      [
        28
      ],
      [
        33
      ],
      [
        31
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ],
      [
        29
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        31
      ],
      [
        0,
        "=",
        1
      ],
      [
        30
      ],
      [
        "(str.substr _arg_0 29 (str.len _arg_0))"
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        25
      ],
      [
        "(str.replace (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1)) \"+91 \" \"\")"
      ],
      [
        0,
        "=",
        1
      ],
      [
        36
      ],
      [
        39
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1))"
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "="
      ],
      [
        0,
        "=",
        1
      ],
      [
        31
      ],
      [
        0,
        "=",
        1
      ],
      [
        0,
        "=",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      33,
      "(str.substr _arg_0 29 (str.len _arg_0))",
      36,
      "(str.replace (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1)) \"+91 \" \"\")",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1))",
      39,
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "=",
      25,
      26,
      28,
      29,
      30,
      31
    ],
    "time_diff_ms": 1272.865
  },
  "univ_4-long.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col1 \",\" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \" , \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (- (str.len col1) (+ (str.indexof col1 \",\") 2))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \"Santa Barbara\" \"CA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          col2 \n                                                          \"New York\" \n                                                          \"NY\") \n                                                        \"New Haven\" \n                                                        \"New Haven\") \n                                                      \"Santa Barbara\" \n                                                      \"Santa Barbara\") \n                                                    \"Los Angeles\" \n                                                    \"Los Angeles\") \n                                                  \"Philadelphia\" \n                                                  \"Philadelphia\") \n                                                \"Cambridge\" \n                                                \"Cambridge\") \n                                              \"Berkeley\" \n                                              \"Berkeley\") \n                                            \"Ithaca\" \n                                            \"Ithaca\") \n                                          \"College Park\" \n                                          \"College Park\") \n                                        \"Ann Arbor\" \n                                        \"Ann Arbor\") \n                                      \"Houston\" \n                                      \"Houston\") \n                                    \"Urbana\" \n                                    \"Urbana\") \n                                  \"Storrs\" \n                                  \"Storrs\") \n                                \"Phialdelphia\" \n                                \"Phialdelphia\") \n                              \"Temple University\" \n                              \"Temple University\") \n                            \"University of California, Santa Barbara\" \n                            \"University of California, Santa Barbara\") \n                          \"University of Connecticut\" \n                          \"University of Connecticut\") \n                        \"University of Michigan\" \n                        \"University of Michigan\") \n                      \"University of Pennsylvania\" \n                      \"University of Pennsylvania\") \n                    \"Yale University\" \n                    \"Yale University\") \n                  \"Harvard University\" \n                  \"Harvard University\") \n                \"Rice University\" \n                \"Rice University\") \n              \"Columbia University\" \n              \"Columbia University\") \n            \"Cornell University\" \n            \"Cornell University\") \n          \"Drexel University\" \n          \"Drexel University\") \n        \"MIT\" \n        \"MIT\") \n      \"NYU\" \n      \"NYU\") \n    \"UIUC\" \n    \"UIUC\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace col2 col1 \"\") \",\" \" USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \"University, \" \"\"))",
      "(str.replace (str.replace (str.replace col2 \"USA\" \"\") \"PA\" \"\") \"CT\" \"\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.replace\n      (str.++ col1 \", \" col2 \", USA\")\n      \"New York\"\n      \"NY\")\n    0\n    (- (str.len col1) 2)\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"USA\" \"\") \"USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"New \" \"\") 0 2) \", \" (str.substr (str.replace (str.replace col2 \"University of\" \"\") \"University\" \"\") 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UC Berkeley\" \"Berkeley\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") \"PA\" \"PA, USA\") \"CA\" \"CA, USA\") \"CT\" \"CT, USA\") \"MD\" \"MD, USA\") \"NY\" \"NY, USA\") \"New York\" \"NY, USA\") \"MA\" \"MA, USA\") \"MI\" \"MI, USA\") \"TX\" \"TX, USA\") \"IL\" \"IL, USA\") \"USA\" \"USA\"))))",
      "(str.substr (str.substr (str.++ col1 \", \" col2 \", USA\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1) (str.len (str.++ col1 \", \" col2 \", USA\"))) 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"CT\" \"CT\" \"CA\" \"CA\" \"MD\" \"MD\" \"NY\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"Connecticut\" \"CT\") \"Maryland\" \"MD\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.++ \n        (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"College Park\" \"College Park,\") \"Santa Barbara\" \"Santa Barbara,\") \n        \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"University of \" \"\") \"California, \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 (- (str.indexof col2 \",\" 0) 3))\n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace",
      "(str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \"\") \",\") 0 (- (str.indexof col2 \",\") 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \"USA\" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") col2 \"USA\" \"PA\" \"CT\" \"CA\" \"MD\" \"NY\" \"New York\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Connecticut\" \"CT\") \"California\" \"CA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col2 \"USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University of California,\" \"\") \"University of\" \"\") \"University\" \"\") \"University of Connecticut\" \"\") \"University of Pennsylvania\" \"\") \"University of Michigan\" \"\") \"University of Maryland\" \"\") \"University of California, Santa Barbara\" \"\") \"University of California\" \"\") \"University of\" \"\") \"University\" \"\") \" of \" \" \") \"University of\" \"\") \"University\" \"\") \",\" \"\") \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"Philadelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"Berkeley\" \"Berkeley\") \"Cambridge\" \"Cambridge\") \"Houston\" \"Houston\") \"Urbana\" \"Urbana\") \"Storrs\" \"Storrs\") \"Santa Barbara\" \"Santa Barbara\") \"NY,\" \"NY,\") \"PA,\" \"PA,\") \"CA,\" \"CA,\") \"MD,\" \"MD,\") \"CT,\" \"CT,\") \"MA,\" \"MA,\") \"TX,\" \"TX,\") \"IL,\" \"IL,\") \"USA,\" \"USA\")",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace\n    (str.++ col1 \", \" col2 \", USA\")\n    \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\"\n    \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n    \"Ithaca, New York, USA\" \"Ithaca, NY, USA\"\n    \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\"\n    \"College Park, MD\" \"College Park, MD, USA\"\n    \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\"\n    \"Berkeley, CA\" \"Berkeley, CA, USA\"\n    \"Cambridge, MA\" \"Cambridge, MA, USA\"\n    \"Houston, TX\" \"Houston, TX, USA\"\n    \"New Haven, CT, USA\" \"New Haven, CT, USA\"\n    \"New York, NY, USA\" \"New York, NY, USA\"\n    \"Urbana, IL\" \"Urbana, IL, USA\"\n    \"Storrs, CT, USA\" \"Storrs, CT, USA\"\n    \"Santa Barbara, CA, USA\" \"Santa Barbara, CA, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \"California, Santa Barbara\" \"CA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"California\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col1 0 (- (str.indexof col1 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"USA\" \"\") \"New York\" \"NY\") \" \" \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col1 \",\" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \" , \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (- (str.len col1) (+ (str.indexof col1 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \"Santa Barbara\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"Santa Barbara\" \"Santa Barbara\") \"Los Angeles\" \"Los Angeles\") \"Philadelphia\" \"Philadelphia\") \"Cambridge\" \"Cambridge\") \"Berkeley\" \"Berkeley\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"Houston\" \"Houston\") \"Urbana\" \"Urbana\") \"Storrs\" \"Storrs\") \"Phialdelphia\" \"Phialdelphia\") \"Temple University\" \"Temple University\") \"University of California, Santa Barbara\" \"University of California, Santa Barbara\") \"University of Connecticut\" \"University of Connecticut\") \"University of Michigan\" \"University of Michigan\") \"University of Pennsylvania\" \"University of Pennsylvania\") \"Yale University\" \"Yale University\") \"Harvard University\" \"Harvard University\") \"Rice University\" \"Rice University\") \"Columbia University\" \"Columbia University\") \"Cornell University\" \"Cornell University\") \"Drexel University\" \"Drexel University\") \"MIT\" \"MIT\") \"NYU\" \"NYU\") \"UIUC\" \"UIUC\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \",\" \" USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \"University, \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"USA\" \"\") \"PA\" \"\") \"CT\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"USA\" \"\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"New \" \"\") 0 2) \", \" (str.substr (str.replace (str.replace col2 \"University of\" \"\") \"University\" \"\") 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UC Berkeley\" \"Berkeley\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") \"PA\" \"PA, USA\") \"CA\" \"CA, USA\") \"CT\" \"CT, USA\") \"MD\" \"MD, USA\") \"NY\" \"NY, USA\") \"New York\" \"NY, USA\") \"MA\" \"MA, USA\") \"MI\" \"MI, USA\") \"TX\" \"TX, USA\") \"IL\" \"IL, USA\") \"USA\" \"USA\")))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr (str.++ col1 \", \" col2 \", USA\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1) (str.len (str.++ col1 \", \" col2 \", USA\"))) 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"CT\" \"CT\" \"CA\" \"CA\" \"MD\" \"MD\" \"NY\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"Connecticut\" \"CT\") \"Maryland\" \"MD\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"College Park\" \"College Park,\") \"Santa Barbara\" \"Santa Barbara,\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"University of \" \"\") \"California, \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 (- (str.indexof col2 \",\" 0) 3)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \"\") \",\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \"USA\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") col2 \"USA\" \"PA\" \"CT\" \"CA\" \"MD\" \"NY\" \"New York\"))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Connecticut\" \"CT\") \"California\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace col2 \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University of California,\" \"\") \"University of\" \"\") \"University\" \"\") \"University of Connecticut\" \"\") \"University of Pennsylvania\" \"\") \"University of Michigan\" \"\") \"University of Maryland\" \"\") \"University of California, Santa Barbara\" \"\") \"University of California\" \"\") \"University of\" \"\") \"University\" \"\") \" of \" \" \") \"University of\" \"\") \"University\" \"\") \",\" \"\") \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"Philadelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"Berkeley\" \"Berkeley\") \"Cambridge\" \"Cambridge\") \"Houston\" \"Houston\") \"Urbana\" \"Urbana\") \"Storrs\" \"Storrs\") \"Santa Barbara\" \"Santa Barbara\") \"NY,\" \"NY,\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York, USA\" \"Ithaca, NY, USA\" \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\" \"Berkeley, CA\" \"Berkeley, CA, USA\" \"Cambridge, MA\" \"Cambridge, MA, USA\" \"Houston, TX\" \"Houston, TX, USA\" \"New Haven, CT, USA\" \"New Haven, CT, USA\" \"New York, NY, USA\" \"New York, NY, USA\" \"Urbana, IL\" \"Urbana, IL, USA\" \"Storrs, CT, USA\" \"Storrs, CT, USA\" \"Santa Barbara, CA, USA\" \"Santa Barbara, CA, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \"California, Santa Barbara\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"California\" \"CA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col1 0 (- (str.indexof col1 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"USA\" \"\") \"New York\" \"NY\") \" \" \", USA\"))"
    ],
    "constants": [
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "",
        ","
      ],
      [
        "",
        "University of "
      ],
      [
        "",
        " , ",
        ", ",
        "University ",
        "University of "
      ],
      [],
      [
        0,
        1,
        2,
        ", USA",
        ","
      ],
      [
        "NY",
        "CT",
        "CA",
        "New Haven",
        "Santa Barbara",
        "New York"
      ],
      [
        "Yale University",
        "UIUC",
        "New Haven",
        "Ann Arbor",
        "Columbia University",
        "NYU",
        "Urbana",
        "Houston",
        "University of California, Santa Barbara",
        "New York",
        "Los Angeles",
        "Cornell University",
        "Temple University",
        "Berkeley",
        "Philadelphia",
        "Phialdelphia",
        "Rice University",
        "Storrs",
        "Cambridge",
        "College Park",
        "University of Michigan",
        "MIT",
        "NY",
        "Ithaca",
        "Drexel University",
        "University of Connecticut",
        "Santa Barbara",
        "University of Pennsylvania",
        "Harvard University"
      ],
      [
        ", USA",
        "NY",
        "CT",
        "New Haven",
        "New York"
      ],
      [
        "",
        ",",
        " USA"
      ],
      [
        ", USA"
      ],
      [
        "",
        "University ",
        "University of ",
        "University, "
      ],
      [
        "",
        "PA",
        "CT",
        "USA"
      ],
      [
        ", USA"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        "",
        "USA"
      ],
      [
        "",
        "University of "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        0,
        2,
        ", USA",
        ", ",
        "University of",
        "New ",
        "University"
      ],
      [
        "Penn",
        "MD, USA",
        "MI, USA",
        "IL",
        "Yale University",
        "University of Maryland College Park",
        "PA",
        "MA",
        "UIUC",
        "New Haven",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        "MD",
        "TX",
        "NYU",
        "Urbana",
        "USA",
        "CT",
        "Houston",
        "CT, USA",
        "New York",
        "University of California, Santa Barbara",
        "Los Angeles",
        "Cornell University",
        "University of Pennsylvania",
        "Temple University",
        "New Haven University",
        "Berkeley",
        "NY, USA",
        "IL, USA",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "Rice University",
        "Storrs",
        "Cambridge",
        "TX, USA",
        "CA, USA",
        "College Park",
        "MA, USA",
        "University of Michigan",
        "Harvard University",
        "PA, USA",
        "Ithaca",
        "NY",
        "Drexel University",
        "University of Connecticut",
        "CA",
        "Santa Barbara",
        "UC Berkeley",
        "MIT"
      ],
      [
        0,
        1,
        ", USA",
        ", "
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [],
      [
        "MD",
        ", USA",
        ", ",
        "NY",
        "CT",
        "CA",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "MD",
        "Connecticut",
        "Maryland",
        "California",
        "NY",
        "CT",
        "CA",
        "New York"
      ],
      [
        ", USA"
      ],
      [
        "",
        ", USA",
        "College Park,",
        "University of ",
        "Santa Barbara,",
        "Santa Barbara",
        "College Park"
      ],
      [
        "Penn",
        "Yale University",
        "University of Maryland College Park",
        "UIUC",
        "New Haven",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        "NYU",
        "Urbana",
        "Houston",
        "New York",
        "Los Angeles",
        "Cornell University",
        "University of Pennsylvania",
        "Temple University",
        "Berkeley",
        "Philadelphia",
        "Rice University",
        "Cambridge",
        "College Park",
        "University of Michigan",
        "Harvard University",
        "Ithaca",
        "UC Berkeley",
        "MIT"
      ],
      [
        "",
        "California, ",
        "University of "
      ],
      [
        0,
        3,
        ", USA",
        ","
      ],
      [
        "NY",
        "New Haven",
        "New York"
      ],
      [],
      [
        "",
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        "USA"
      ],
      [
        "Penn",
        "Yale University",
        "University of Maryland College Park",
        "PA",
        "UIUC",
        "New Haven",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        "MD",
        "NYU",
        "Urbana",
        "USA",
        "CT",
        "Houston",
        "New York",
        "University of California, Santa Barbara",
        "Los Angeles",
        "Cornell University",
        "University of Pennsylvania",
        "Temple University",
        "New Haven University",
        "Berkeley",
        "Philadelphia",
        "Phialdelphia",
        "Rice University",
        "Storrs",
        "Cambridge",
        "College Park",
        "University of Michigan",
        "Harvard University",
        "Ithaca",
        "NY",
        "Drexel University",
        "University of Connecticut",
        "CA",
        "Santa Barbara",
        "UC Berkeley",
        "MIT"
      ],
      [
        "Connecticut",
        "California",
        "NY",
        "CT",
        "CA",
        "New York"
      ],
      [
        "",
        "USA"
      ],
      [
        "",
        " ",
        "University of Maryland",
        "University of California",
        "New Haven",
        "Ann Arbor",
        "Urbana",
        "University of",
        ",",
        "Houston",
        "New York",
        "University of California, Santa Barbara",
        "Los Angeles",
        "University of California,",
        "NY,",
        "Berkeley",
        "Philadelphia",
        "Storrs",
        "Cambridge",
        "College Park",
        "University",
        " of ",
        "University of Michigan",
        "NY",
        "Ithaca",
        "University of Connecticut",
        "Santa Barbara",
        "University of Pennsylvania"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "Ann Arbor, MI, USA",
        "Cambridge, MA",
        ", ",
        "Phialdelphia, PA, USA",
        "Santa Barbara, CA, USA",
        "College Park, MD",
        "Ithaca, New York, USA",
        "Cambridge, MA, USA",
        ", USA",
        "Berkeley, CA, USA",
        "New York, NY, USA",
        "Storrs, CT, USA",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Ithaca, NY, USA",
        "Los Angeles, CA",
        "Urbana, IL, USA",
        "Houston, TX",
        "Houston, TX, USA",
        "Los Angeles, CA, USA",
        "New Haven, CT, USA",
        "Urbana, IL",
        "Berkeley, CA"
      ],
      [
        ", USA"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "California, Santa Barbara",
        "NY",
        "CT",
        "CA",
        "New Haven",
        "New York"
      ],
      [
        "California",
        "NY",
        "CA",
        "New Haven",
        "New York"
      ],
      [
        "",
        "University of California, Santa Barbara",
        "NY",
        "University of ",
        "New Haven",
        "Santa Barbara",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        "NY",
        "University ",
        "University of ",
        "New York"
      ],
      [
        "",
        ", USA",
        " ",
        "USA",
        "NY",
        "New York"
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      2,
      3,
      "MI, USA",
      "Phialdelphia",
      "Ithaca",
      "University of Michigan",
      "Ithaca, NY, USA",
      "Yale University",
      "Philadelphia",
      "Drexel University",
      "College Park,",
      "Berkeley, CA, USA",
      ", ",
      "MI",
      "College Park, MD, USA",
      "New York",
      "University of",
      "CT, USA",
      "Philadelphia, PA, USA",
      "NYU",
      " of ",
      "Los Angeles",
      " , ",
      "Santa Barbara, CA, USA",
      "College Park",
      "UC Berkeley",
      "Ann Arbor",
      "University of California, Santa Barbara",
      "University of Pennsylvania",
      "University of Maryland",
      "IL",
      "MD, USA",
      "Storrs, CT, USA",
      "MA",
      "UIUC",
      "Maryland",
      "UCLA",
      "Ann Arbor, MI, USA",
      "Urbana",
      "Ithaca, New York, USA",
      "New ",
      "Cornell University",
      "NY",
      "Cambridge, MA",
      "University of California,",
      "Connecticut",
      "University of Connecticut",
      "Penn",
      "TX",
      "PA, USA",
      ",",
      "CT",
      "NY,",
      "Santa Barbara,",
      "University ",
      "TX, USA",
      "CA",
      "College Park, MD",
      "New Haven",
      " ",
      "Storrs",
      "MIT",
      "Cambridge, MA, USA",
      "Berkeley",
      "University, ",
      "PA",
      "California, ",
      "Santa Barbara",
      "CA, USA",
      "Rice University",
      "Temple University",
      "Houston, TX, USA",
      ", USA",
      "University of Maryland College Park",
      "New Haven University",
      "Los Angeles, CA",
      "Harvard University",
      "Houston",
      "California, Santa Barbara",
      "IL, USA",
      "Urbana, IL, USA",
      "Cambridge",
      "University of ",
      "MD",
      "MA, USA",
      "New Haven, CT, USA",
      "NY, USA",
      " USA",
      "USA",
      "University of California",
      "University",
      "California",
      "Columbia University",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      "Berkeley, CA",
      "Houston, TX",
      "Urbana, IL",
      "Phialdelphia, PA, USA"
    ],
    "time_diff_ms": 1653.2690000000002
  },
  "phone-5-long.sl": {
    "completions": [
      "(define-fun f (name String) String (str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "\"(str.substr name 1 3))\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "(str.substr name 1 3))",
      "(str.at name 1)",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 (- (str.indexof name \" \") 1)))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"106\")",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String \"106\")",
      "(define-fun f ((name String)) String (str.at name 1))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f ((name String)) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "\"(str.at name 1)\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \") 1)))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"106\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"106\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")"
    ],
    "constants": [
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        " "
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        "106"
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        "106"
      ],
      [
        1
      ],
      [
        "(str.at name 1)"
      ],
      [
        "(str.at name 1)"
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        "(str.at name 1)"
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      "(str.substr name 1 3))",
      "(str.at name 1)",
      " ",
      "106"
    ],
    "time_diff_ms": 1121.153
  },
  "phone-5-short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(str.at name 1)",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \"-\" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at (str.replace name \" \" \"\") 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(str.at name 1)",
      "\"(str.substr name 1 (str.indexof name \\\" \\\")))\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at (str.substr name 1 (- (str.indexof name \\\" \\\") 1)) 1 3))\"",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(str.at name 1)",
      "(ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\")))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 2))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(str.at name 1)",
      "(define-fun f (name String) String (str.at name 1))",
      "(str.at name 1)"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \"-\" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at (str.replace name \" \" \"\") 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.substr name 1 (str.indexof name \\\" \\\")))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at (str.substr name 1 (- (str.indexof name \\\" \\\") 1)) 1 3))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\"))))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))"
    ],
    "constants": [
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        0,
        1,
        "-"
      ],
      [
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        "(str.substr name 1 (str.indexof name \" \")))"
      ],
      [
        1
      ],
      [
        "(str.at (str.substr name 1 (- (str.indexof name \" \") 1)) 1 3))"
      ],
      [
        1
      ],
      [
        1,
        3
      ],
      [
        1
      ],
      [
        1,
        " ",
        "-"
      ],
      [
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1
      ],
      [
        2
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      3,
      "-",
      "(str.at (str.substr name 1 (- (str.indexof name \" \") 1)) 1 3))",
      " ",
      "(str.substr name 1 (str.indexof name \" \")))"
    ],
    "time_diff_ms": 1042.011
  },
  "11604909.sl": {
    "completions": [
      "(str.substr _arg_0\n             (str.indexof _arg_0 \" \")\n             (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))",
      "(str.substr _arg_0 \n            (str.indexof _arg_0 \" \" 0) \n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f ((s String)) String\n  (str.substr s \n              (+ (str.indexof s \" \" 0) 1) \n              (- (str.indexof s \" \" 0) 1)))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \" 0)\n            (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\"))\"",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 3))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.len \" \") (str.indexof _arg_0 \" \"))) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 \n            (str.indexof _arg_0 \" \" 0) \n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) -1))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3))",
      "(str.substr _arg_0\n               (+ (str.indexof _arg_0 \" \" 0) 1)\n               (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0\n           (+ (str.indexof _arg_0 \" \" 0) 1)\n           (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \")))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\"",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0)\n            (-\n              (str.indexof _arg_0 \".\")\n              (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0)\n            )\n)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.substr _arg_0 (- (str.indexof _arg_0 \" \") 1) 100) 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \".\" 0) 3))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) 0))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\"",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\"",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 1) )\"",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \" 0)\n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \")\n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 \" \")\n           (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))))))",
      "(str.substr _arg_0\n            (+ (str.indexof _arg_0 \" \") 1)\n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \")))",
      "\"(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.indexof s \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\"))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 3))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.len \" \") (str.indexof _arg_0 \" \"))) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) -1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (+ (str.indexof _arg_0 \\\".\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 (str.to.str (+ 1 (str.indexof _arg_0 \" \"))) 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.substr _arg_0 (- (str.indexof _arg_0 \" \") 1) 100) 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) 0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 1) )\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String \"(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\")"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 3))"
      ],
      [
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))"
      ],
      [
        1,
        " ",
        3
      ],
      [
        1,
        " ",
        "."
      ],
      [
        0,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))"
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " ",
        3
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 2))"
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        100
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \")))"
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 1) )"
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " ",
        "."
      ],
      [
        1,
        " ",
        "."
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))"
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      3,
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 2))",
      100,
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 1) )",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 3))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))",
      " ",
      "(str.substr _arg_0 (str.indexof _arg_0 ",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (+ (str.indexof _arg_0 \".\") 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      -1
    ],
    "time_diff_ms": 1672.549
  },
  "phone-9-long.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                name \" \" \"\") \"+\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\"\\\") \\\" \\\" \\\"\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3) \".\"\n    (str.substr name 12 3)\n  )\n)",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\"\n          (str.substr name 4 3) \".\"\n          (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3) \".\"\n    (str.substr name 12 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"+\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")))))))))))))))))))))))))))))))))))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\"\\\") \\\" \\\" \\\"\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\"))\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "",
        "-",
        " ",
        "+",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\") \" \" \".\")"
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"+\" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \"\") \" \" \"\") \" \" \".\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\"))"
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \" \" \".\"))"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\"))"
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")"
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")"
      ],
      [
        "-",
        " ",
        "."
      ]
    ],
    "all_constants": [
      ".",
      "",
      0,
      3,
      4,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      8,
      "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\")",
      12,
      "(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\")",
      "+",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\") \" \" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \" \" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\"))",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"+\" \"\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \".\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\") \" \" \".\")",
      "(str.replace (str.replace (str.replace (str.replace (str.replace name ",
      " ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \"\") \" \" \"\") \" \" \".\") \" \" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \" \" \".\")",
      "-",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 857.163
  },
  "univ_4_short.sl": {
    "completions": [
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"CA\\\" \\\"Los Angeles\\\") \\\"New York\\\" \\\"NY\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca\\\" \\\"Ithaca, NY\\\") \\\"MD\\\" \\\"College Park\\\") \\\"CT\\\" \\\"CT, USA\\\") \\\"PA\\\" \\\"PA, USA\\\") \\\"NY\\\" \\\"NY, USA\\\") \\\"USA\\\" \\\"USA\\\") 0 (- (str.len col1) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.at col1 0 0) \n    (str.at col1 1 1) \n    \", \" \n    (str.at col1 3 0) \n    (str.at col1 4 1) \n    \", USA\"))",
      "\"(str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") 0 (- (str.indexof col2 col1 0) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col2 \" \" \", \") 0 (str.indexof col2 \",\" 0)) (str.substr (str.replace col2 \" \" \", \") (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.++ \n        (ite (str.contains col1 \"University\") \n            (str.substr col2 0 2)\n            (str.substr col2 0 3))\n        \", \" \n        (ite (str.contains col1 \"University\") \n            (str.substr col2 (- (str.len col2) 2) 2)\n            (ite (str.contains col1 \"New York\") \n                \"NY, USA\"\n                (str.substr col2 (- (str.len col2) 3) 2))\n        )\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0))\n    \", \"\n    (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \" \" 0) 1)))\n    \", USA\"))",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of\\\" \\\"\\\") \\\"University\\\" \\\"\\\") \\\" of\\\" \\\"\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Cornell\\\" \\\"\\\") \\\"College Park\\\" \\\"\\\") \\\"University of Maryland\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"Columbia\\\" \\\"\\\") \\\"NYU\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof col1 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col1 0 (str.indexof col1 \",\" 0))\n    \", \"\n    (str.substr col2 0 (str.indexof col2 \",\" 0))\n    \", USA\"\n  )\n)",
      "\"(ite (str.contains col2 \\\",\\\") (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \\\",\\\" 0) 2))) (ite (str.contains col2 \\\", USA\\\") (str.substr col2 (+ (str.indexof col2 \\\", USA\\\") 2) (- (str.len col2) (+ (str.indexof col2 \\\", USA\\\") 2))) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) (+ (str.indexof col2 \\\",\\\") 2)))))\"",
      "\"(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\",\\\" 0)) (str.len col1)) 2 (str.len (str.replace col2 \\\",\\\" \\\"USA\\\")))\"",
      "\"(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \\\",\\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\" \\\", USA\\\") 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1)) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1)\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  col1 \"University of Pennsylvania\" \"Phialdelphia\") \n                                                \"UCLA\" \"Los Angeles\") \n                                              \"Cornell University\" \"Ithaca\") \n                                            \"Penn\" \"Philadelphia\") \n                                          \"University of Maryland College Park\" \"College Park\") \n                                        \"University of Michigan\" \"Ann Arbor\") \n                                      \"Columbia University\" \"New York\") \n                                    \"NYU\" \"New York\") \n                                  \"New York\" \"New York\") \n                                \"PA\" \"PA\") \n                              \"CA\" \"CA\") \n                            \"NY\" \"NY\") \n                          \"MI\" \"MI\") \n                        \"MD\" \"MD\") \n                      \"USA\" \"USA\") \n                    \" \" \", \") \n                  \"New York\" \"NY\") \n                \"New York\" \"NY\") \n              \"New York\" \"NY\") \n            \"New York\" \"NY\") \n          \"New York\" \"NY\") \n        \"New York\" \"NY\") \n      \"New York\" \"NY\") \n    \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA\" \"Philadelphia, PA\"\n    \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n    \"Ithaca, New York\" \"Ithaca, NY, USA\"\n    \"College Park, MD\" \"College Park, MD, USA\"\n    \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\"\n    \"New York, New York\" \"New York, NY, USA\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") 0 8)\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" , \" \"\") \" ,\") \"\") \", \" \"\") \" ,\" \"\") \" ,\") \"\" \"USA\") 0 (- (str.indexof col2 \",\") 1))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 100)\n    \", \"\n    (str.substr col2 0 2)\n    \", USA\"\n  )\n)",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca, New York\\\" \\\"Ithaca, NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.++ col1 \", \" col2 \", USA\") \n      \", USA\" \n      \"\") \n    0 \n    (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", USA\" 0) \n       2)\n  )\n)",
      "\"(str.substr (str.substr (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0) 1) (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1))\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CT\\\" \\\"CT\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") 0 100)\"",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", USA\\\" 0) 1) )\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\",\\\" \\\", USA\\\") \\\", PA\\\" \\\", USA\\\") \\\", CT\\\" \\\", USA\\\") \\\", CA\\\" \\\", USA\\\") \\\", MD\\\" \\\", USA\\\") \\\", NY\\\" \\\", USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Phialdelphia\\\" \\\", PA\\\") 0 (str.len col1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    (ite \n      (str.contains col2 \",\")\n      \", USA\"\n      \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col2 \"USA\" \"\") 1 (- (str.len (str.replace col2 \"USA\" \"\")) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.replace \n      (str.replace \n        (str.replace col2 \"New York\" \"NY\") \n        \"University of \" \"\") \n      \"University \" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\")\n    0\n    (- (str.indexof col2 \",\" 0) 1)\n  )\n)",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of\\\" \\\"\\\") \\\"University\\\" \\\"\\\") \\\"Cornell\\\" \\\"\\\") \\\"Penn\\\" \\\"\\\") \\\"College Park\\\" \\\"\\\") \\\"Michigan\\\" \\\"\\\") \\\"Columbia\\\" \\\"\\\") \\\"NYU\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1)) 2 (- (str.indexof col1 \\\",\\\" 0) (str.indexof col1 \\\",\\\" 0 1)))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.replace\n      (str.replace\n        (str.replace col2 \"New York\" \"NY\")\n        \"University of \" \"\")\n      \"College Park\" \"CP\")\n    0\n    (-\n      (str.indexof col2 \",\" 0)\n      1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 (- (str.len \"Phialdelphia, PA, USA\") 4)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col1 0 (str.indexof col1 \",\" 0))\n    \", \"\n    (str.substr col2 1 (str.indexof col2 \",\" 0))\n    \", USA\"\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", NY\" \", NY, USA\") \"New York, NY\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"USA\\\" ) col1 \\\"New York\\\") \\\", \\\" \\\", USA)\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"CA\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.replace\n      (str.replace\n        (str.replace col1 \"University of \" \"\")\n        \"University\" \"\")\n      \"College Park\" \"CP\")\n    0\n    (str.indexof col1 \",\" 0)\n  )\n)",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\" College Park\\\" \\\"\\\") \\\" College\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\" , USA\\\" \\\"\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1)) 100)\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"Philadelphia, PA, USA\\\" \\\"Phialdelphia, PA, USA\\\") \\\"Los Angeles, CA\\\" \\\"Los Angeles, CA, USA\\\") \\\"Ithaca, New York, USA\\\" \\\"Ithaca, NY, USA\\\") \\\"Philadelphia, PA, USA\\\" \\\"Philadelphia, PA, USA\\\") \\\"College Park, MD\\\" \\\"College Park, MD, USA\\\") \\\"Ann Arbor, MI, USA\\\" \\\"Ann Arbor, MI, USA\\\") \\\"New York, NY, USA\\\" \\\"New York, NY, USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col2) 5))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col1 \"University of\" \"\")\n                                                                                                                                              \"University\" \"\")\n                                                                            \"College Park\" \"MD\")\n                                                                          \"University of Maryland\" \"College Park\")\n                                                                        \"University of Michigan\" \"Ann Arbor\")\n                                                                      \"University of Pennsylvania\" \"Philadelphia\")\n                                                                    \"Columbia University\" \"New York\")\n                                                                  \"Cornell University\" \"Ithaca\")\n                                                                \"UCLA\" \"Los Angeles\")\n                                                              \"NYU\" \"New York\")\n                                                            \"NY\" \"New York\")\n                                                          \"MI\" \"Ann Arbor\")\n                                                        \"PA\" \"Philadelphia\")\n                                                      \"USA\" \"\")\n                                                    \"CA\" \"USA\")\n                                                  \"CT\" \"CT\")\n                                                \"MD\" \"MD\")\n                                              \"NY\" \"New York\")\n                                            \"Phialdelphia\" \"Philadelphia\")\n                                          \"Los Angeles\" \"Los Angeles\")\n                                        \"Ithaca\" \"Ithaca\")\n                                      \"Ann Arbor\" \"Ann Arbor\")\n                                    \"New York\" \"New York\")\n                                  \"Philadelphia\" \"Philadelphia\")\n                                \"New York\" \"New York\")\n                              \"New York\" \"New York\")\n                            \"New York\" \"New York\")\n                          \"New York\" \"New York\")\n                        \"New York\" \"New York\")\n                      \"New York\" \"New York\")\n                    \"New York\" \"New York\")\n                  \"New York\" \"New York\")\n                \"New York\" \"New York\")\n              \"New York\" \"New York\")\n            \"New York\" \"New York\")\n          \"New York\" \"New York\")\n        \"New York\" \"New York\")\n      \"New York\" \"New York\")\n    \"New York\" \"New York\")\n  0 100))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \" of\" \"\") \",\") \"\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"New York\" \"NY\") \"Philadelphia\" \"Philadelphia\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"USA\"))",
      "\"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 2 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"CA\\\" \\\"Los Angeles\\\") \\\"New York\\\" \\\"NY\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca\\\" \\\"Ithaca, NY\\\") \\\"MD\\\" \\\"College Park\\\") \\\"CT\\\" \\\"CT, USA\\\") \\\"PA\\\" \\\"PA, USA\\\") \\\"NY\\\" \\\"NY, USA\\\") \\\"USA\\\" \\\"USA\\\") 0 (- (str.len col1) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 0 0) (str.at col1 1 1) \", \" (str.at col1 3 0) (str.at col1 4 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace col2 col1 \")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col2 \" \" \", \") 0 (str.indexof col2 \",\" 0)) (str.substr (str.replace col2 \" \" \", \") (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (ite (str.contains col1 \"University\") (str.substr col2 0 2) (str.substr col2 0 3)) \", \" (ite (str.contains col1 \"University\") (str.substr col2 (- (str.len col2) 2) 2) (ite (str.contains col1 \"New York\") \"NY, USA\" (str.substr col2 (- (str.len col2) 3) 2)))))",
      "(define-fun f (col1 String col2 String) String (str.++ (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \" \" 0) 1))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of\\\" \\\"\\\") \\\"University\\\" \\\"\\\") \\\" of\\\" \\\"\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Cornell\\\" \\\"\\\") \\\"College Park\\\" \\\"\\\") \\\"University of Maryland\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"Columbia\\\" \\\"\\\") \\\"NYU\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof col1 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\" 0)) \", \" (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(ite (str.contains col2 \\\",\\\") (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \\\",\\\" 0) 2))) (ite (str.contains col2 \\\", USA\\\") (str.substr col2 (+ (str.indexof col2 \\\", USA\\\") 2) (- (str.len col2) (+ (str.indexof col2 \\\", USA\\\") 2))) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) (+ (str.indexof col2 \\\",\\\") 2)))))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\",\\\" 0)) (str.len col1)) 2 (str.len (str.replace col2 \\\",\\\" \\\"USA\\\")))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \\\",\\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\" \\\", USA\\\") 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1)) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1)\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"New York\" \"New York\") \"PA\" \"PA\") \"CA\" \"CA\") \"NY\" \"NY\") \"MI\" \"MI\") \"MD\" \"MD\") \"USA\" \"USA\") \" \" \", \") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA\" \"Philadelphia, PA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York\" \"Ithaca, NY, USA\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\" \"New York, New York\" \"New York, NY, USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") 0 8)\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" , \" \"\") \" ,\") \"\") \", \" \"\") \" ,\" \"\") \" ,\") \"\" \"USA\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca, New York\\\" \\\"Ithaca, NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", USA\" \"\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", USA\" 0) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.substr (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0) 1) (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CT\\\" \\\"CT\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") 0 100)\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", USA\\\" 0) 1) )\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\",\\\" \\\", USA\\\") \\\", PA\\\" \\\", USA\\\") \\\", CT\\\" \\\", USA\\\") \\\", CA\\\" \\\", USA\\\") \\\", MD\\\" \\\", USA\\\") \\\", NY\\\" \\\", USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Phialdelphia\\\" \\\", PA\\\") 0 (str.len col1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (ite (str.contains col2 \",\") \", USA\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col2 \"USA\" \"\") 1 (- (str.len (str.replace col2 \"USA\" \"\")) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of\\\" \\\"\\\") \\\"University\\\" \\\"\\\") \\\"Cornell\\\" \\\"\\\") \\\"Penn\\\" \\\"\\\") \\\"College Park\\\" \\\"\\\") \\\"Michigan\\\" \\\"\\\") \\\"Columbia\\\" \\\"\\\") \\\"NYU\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1)) 2 (- (str.indexof col1 \\\",\\\" 0) (str.indexof col1 \\\",\\\" 0 1)))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"CP\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 (- (str.len \"Phialdelphia, PA, USA\") 4)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\" 0)) \", \" (str.substr col2 1 (str.indexof col2 \",\" 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", NY\" \", NY, USA\") \"New York, NY\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\"))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"USA\\\" ) col1 \\\"New York\\\") \\\", \\\" \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 100))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"CA\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University\" \"\") \"College Park\" \"CP\") 0 (str.indexof col1 \",\" 0)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\" College Park\\\" \\\"\\\") \\\" College\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\" ,\\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\", USA\\\" \\\"\\\") \\\" , USA\\\" \\\"\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof col1 \\\",\\\" 0) 1)) 100)\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"Philadelphia, PA, USA\\\" \\\"Phialdelphia, PA, USA\\\") \\\"Los Angeles, CA\\\" \\\"Los Angeles, CA, USA\\\") \\\"Ithaca, New York, USA\\\" \\\"Ithaca, NY, USA\\\") \\\"Philadelphia, PA, USA\\\" \\\"Philadelphia, PA, USA\\\") \\\"College Park, MD\\\" \\\"College Park, MD, USA\\\") \\\"Ann Arbor, MI, USA\\\" \\\"Ann Arbor, MI, USA\\\") \\\"New York, NY, USA\\\" \\\"New York, NY, USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col2) 5))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"MD\") \"University of Maryland\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"University of Pennsylvania\" \"Philadelphia\") \"Columbia University\" \"New York\") \"Cornell University\" \"Ithaca\") \"UCLA\" \"Los Angeles\") \"NYU\" \"New York\") \"NY\" \"New York\") \"MI\" \"Ann Arbor\") \"PA\" \"Philadelphia\") \"USA\" \"\") \"CA\" \"USA\") \"CT\" \"CT\") \"MD\" \"MD\") \"NY\" \"New York\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"Philadelphia\" \"Philadelphia\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") 0 100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \" of\" \"\") \",\") \"\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"New York\" \"NY\") \"Philadelphia\" \"Philadelphia\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\") \"New York\" \"New York\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 2 100) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))"
    ],
    "constants": [
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"CA\" \"Los Angeles\") \"New York\" \"NY\") \"Michigan\" \"Ann Arbor\") \"Ithaca\" \"Ithaca, NY\") \"MD\" \"College Park\") \"CT\" \"CT, USA\") \"PA\" \"PA, USA\") \"NY\" \"NY, USA\") \"USA\" \"USA\") 0 (- (str.len col1) 2))"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        "Phialdelphia",
        "Philadelphia",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        3,
        4,
        ", USA",
        ", "
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace col2 col1 "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        " ",
        ","
      ],
      [
        0,
        2,
        3,
        ", ",
        "NY, USA",
        "University",
        "New York"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        " ",
        "NY",
        "New York"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \" of\" \"\") \"Penn\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Cornell\" \"\") \"College Park\" \"\") \"University of Maryland\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"Columbia\" \"\") \"NYU\" \"\") \",\" \"\") \", USA\" \"\") \",\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") 0 (- (str.indexof col1 \",\") 1))"
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        "(ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) (ite (str.contains col2 \", USA\") (str.substr col2 (+ (str.indexof col2 \", USA\") 2) (- (str.len col2) (+ (str.indexof col2 \", USA\") 2))) (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)))))"
      ],
      [
        "(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" 0)) (str.len col1)) 2 (str.len (str.replace col2 \",\" \"USA\")))"
      ],
      [
        "(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \",\" col2) \"New York\" \"NY\") \", USA\" \", USA\") 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1)) 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1) col1)"
      ],
      [
        "Penn",
        " ",
        "University of Maryland College Park",
        "PA",
        "MD",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        "NYU",
        ", ",
        "USA",
        "New York",
        "Los Angeles",
        "Cornell University",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "College Park",
        "University of Michigan",
        "Ithaca",
        "NY",
        "CA",
        "University of Pennsylvania"
      ],
      [
        "Ithaca, New York",
        "Phialdelphia, PA",
        ", USA",
        "New York, New York",
        ", ",
        "New York, NY, USA",
        "Ann Arbor, MI",
        "Ann Arbor, MI, USA",
        "College Park, MD, USA",
        "Los Angeles, CA, USA",
        "Ithaca, NY, USA",
        "College Park, MD",
        "Los Angeles, CA",
        "Philadelphia, PA"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") 0 8)"
      ],
      [
        "",
        " , ",
        0,
        1,
        " of ",
        ", ",
        " ,",
        "USA",
        ",",
        "University ",
        "University of "
      ],
      [
        0,
        2,
        3,
        100,
        ", USA",
        ", "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \",\" \"\") \"Michigan\" \"Ann Arbor\") \"Ithaca, New York\" \"Ithaca, NY\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\")"
      ],
      [
        "",
        0,
        2,
        ", USA",
        ", "
      ],
      [
        "(str.substr (str.substr (str.replace (str.++ col1 \",\" col2) \", USA\" \"\") 0 (- (str.indexof (str.++ col1 \",\" col2) \",\" 0) 1) (- (str.len (str.indexof (str.++ col1 \",\" col2) \",\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \",\" col2) \",\" 0)) 1))"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"Ann Arbor\" \"Ann Arbor\") \"College Park\" \"College Park\") \"New York\" \"New York\") \"PA\" \"PA\") \"CT\" \"CT\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") 0 100)"
      ],
      [
        "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", USA\" \"\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", USA\" 0) 1) )"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \",\" \", USA\") \", PA\" \", USA\") \", CT\" \", USA\") \", CA\" \", USA\") \", MD\" \", USA\") \", NY\" \", USA\") \", New York\" \", NY\") \", Ithaca\" \", NY\") \", Philadelphia\" \", PA\") \", College Park\" \", MD\") \", Ann Arbor\" \", MI\") \", Los Angeles\" \", CA\") \", Phialdelphia\" \", PA\") 0 (str.len col1))"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "",
        ", USA",
        ","
      ],
      [
        "",
        1,
        "USA",
        ", USA"
      ],
      [
        "",
        "NY",
        "University ",
        "University of ",
        "New York"
      ],
      [
        "",
        "NY",
        "University of ",
        "CA",
        "New York",
        "Los Angeles"
      ],
      [
        0,
        1,
        "Philadelphia",
        "Phialdelphia",
        ","
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"College Park\" \"\") \"Michigan\" \"\") \"Columbia\" \"\") \"NYU\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) 2 (- (str.indexof col1 \",\" 0) (str.indexof col1 \",\" 0 1)))"
      ],
      [
        "",
        0,
        1,
        "CP",
        ",",
        "NY",
        "University of ",
        "College Park",
        "New York"
      ],
      [
        0,
        4,
        ", USA",
        ", ",
        "Phialdelphia, PA, USA"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        ", MD",
        "Penn",
        "University of Maryland College Park",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        ", MD, USA",
        "NYU",
        "New York, New York",
        ", NY, USA",
        ", CA, USA",
        ", PA",
        "New York",
        "Los Angeles",
        "Cornell University",
        ", NY",
        "Philadelphia",
        "Phialdelphia",
        "New York, NY, USA",
        "College Park",
        "New York, NY",
        "University of Michigan",
        ", CA",
        "Ithaca",
        ", PA, USA",
        "University of Pennsylvania"
      ],
      [
        0,
        1,
        ", ",
        "USA",
        ","
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"USA\" ) col1 \"New York\") \", \" \", USA)"
      ],
      [
        0,
        100,
        ", USA",
        ", ",
        "Phialdelphia, PA, USA"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "University of ",
        "CA",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        0,
        "University",
        "CP",
        ",",
        "University of ",
        "College Park"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \",\" \"\") \" ,\" \"\") \",\" \"\") \", USA\" \"\") \" , USA\" \"\") \"New York\" \"NY\") 0 (- (str.indexof col1 \",\" 0) 1)) 100)"
      ],
      [
        "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Philadelphia, PA, USA\" \"Phialdelphia, PA, USA\") \"Los Angeles, CA\" \"Los Angeles, CA, USA\") \"Ithaca, New York, USA\" \"Ithaca, NY, USA\") \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\") \"College Park, MD\" \"College Park, MD, USA\") \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\") \"New York, NY, USA\" \"New York, NY, USA\") \"New York, New York, USA\" \"New York, NY, USA\") 0 (- (str.len col2) 5))"
      ],
      [
        "",
        0,
        "University of Maryland",
        "PA",
        "MD",
        "UCLA",
        "Ann Arbor",
        "Columbia University",
        "NYU",
        "USA",
        "University of",
        "CT",
        "New York",
        "Los Angeles",
        "Cornell University",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "College Park",
        "University",
        100,
        "University of Michigan",
        "Ithaca",
        "NY",
        "CA",
        "University of Pennsylvania"
      ],
      [
        "",
        " of",
        "College Park",
        "Philadelphia",
        "Phialdelphia",
        "University of",
        ",",
        "Ithaca",
        "NY",
        "Ann Arbor",
        "University",
        "New York",
        "Los Angeles"
      ],
      [
        "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))"
      ],
      [
        0,
        2,
        100,
        ", USA",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      "",
      "(str.substr (str.substr (str.replace (str.++ col1 \",\" col2) \", USA\" \"\") 0 (- (str.indexof (str.++ col1 \",\" col2) \",\" 0) 1) (- (str.len (str.indexof (str.++ col1 \",\" col2) \",\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \",\" col2) \",\" 0)) 1))",
      "Phialdelphia",
      "Ithaca",
      "University of Michigan",
      "(str.replace (str.replace (str.replace col2 col1 \"USA\" ) col1 \"New York\") \", \" \", USA)",
      "Ithaca, NY, USA",
      "Philadelphia",
      ", ",
      "MI",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") 0 8)",
      "(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \",\" col2) \"New York\" \"NY\") \", USA\" \", USA\") 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1)) 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \",\" \",\") \",\" 1) 1) col1)",
      "College Park, MD, USA",
      "New York",
      "University of",
      ", MD",
      "Philadelphia, PA",
      "NYU",
      " of ",
      "Los Angeles",
      " , ",
      ", NY, USA",
      ", NY",
      "College Park",
      100,
      ", PA, USA",
      "Ann Arbor",
      "University of Pennsylvania",
      "University of Maryland",
      "CP",
      "New York, New York",
      ", CA, USA",
      "(str.substr (str.replace (str.replace (str.replace col2 col1 ",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "Phialdelphia, PA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"CA\" \"Los Angeles\") \"New York\" \"NY\") \"Michigan\" \"Ann Arbor\") \"Ithaca\" \"Ithaca, NY\") \"MD\" \"College Park\") \"CT\" \"CT, USA\") \"PA\" \"PA, USA\") \"NY\" \"NY, USA\") \"USA\" \"USA\") 0 (- (str.len col1) 2))",
      ", MD, USA",
      "UCLA",
      "Ann Arbor, MI, USA",
      "(ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) (ite (str.contains col2 \", USA\") (str.substr col2 (+ (str.indexof col2 \", USA\") 2) (- (str.len col2) (+ (str.indexof col2 \", USA\") 2))) (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)))))",
      "Ithaca, New York",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \",\" \", USA\") \", PA\" \", USA\") \", CT\" \", USA\") \", CA\" \", USA\") \", MD\" \", USA\") \", NY\" \", USA\") \", New York\" \", NY\") \", Ithaca\" \", NY\") \", Philadelphia\" \", PA\") \", College Park\" \", MD\") \", Ann Arbor\" \", MI\") \", Los Angeles\" \", CA\") \", Phialdelphia\" \", PA\") 0 (str.len col1))",
      "Cornell University",
      "NY",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"College Park\" \"\") \"Michigan\" \"\") \"Columbia\" \"\") \"NYU\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") \" ,\" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) 2 (- (str.indexof col1 \",\" 0) (str.indexof col1 \",\" 0 1)))",
      "Penn",
      ",",
      "CT",
      "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", USA\" \"\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \", USA\" 0) 1) )",
      "University ",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" College Park\" \"\") \" College\" \"\") \",\" \"\") \" ,\" \"\") \",\" \"\") \", USA\" \"\") \" , USA\" \"\") \"New York\" \"NY\") 0 (- (str.indexof col1 \",\" 0) 1)) 100)",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \",\" \"\") \"Michigan\" \"Ann Arbor\") \"Ithaca, New York\" \"Ithaca, NY\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\")",
      "CA",
      "College Park, MD",
      " ",
      "Ann Arbor, MI",
      " ,",
      ", PA",
      "PA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Philadelphia, PA, USA\" \"Phialdelphia, PA, USA\") \"Los Angeles, CA\" \"Los Angeles, CA, USA\") \"Ithaca, New York, USA\" \"Ithaca, NY, USA\") \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\") \"College Park, MD\" \"College Park, MD, USA\") \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\") \"New York, NY, USA\" \"New York, NY, USA\") \"New York, New York, USA\" \"New York, NY, USA\") 0 (- (str.len col2) 5))",
      " of",
      ", USA",
      "University of Maryland College Park",
      "Los Angeles, CA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"Ann Arbor\" \"Ann Arbor\") \"College Park\" \"College Park\") \"New York\" \"New York\") \"PA\" \"PA\") \"CT\" \"CT\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") 0 100)",
      "University of ",
      "MD",
      "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))",
      "NY, USA",
      "USA",
      "New York, NY",
      "University",
      "Columbia University",
      "(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" 0)) (str.len col1)) 2 (str.len (str.replace col2 \",\" \"USA\")))",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      ", CA",
      "(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \" of\" \"\") \"Penn\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Cornell\" \"\") \"College Park\" \"\") \"University of Maryland\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"Columbia\" \"\") \"NYU\" \"\") \",\" \"\") \", USA\" \"\") \",\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") \", USA\" \"\") 0 (- (str.indexof col1 \",\") 1))",
      "Phialdelphia, PA, USA"
    ],
    "time_diff_ms": 1065.325
  },
  "phone-10-long.sl": {
    "completions": [
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n           (str.substr name 0 3)\n           \" (\"\n           (str.substr name 3 3)\n           \") \"\n           (str.substr name 6 3)))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\"\n          (str.substr name 1 3) \") \"\n          (str.substr name 5 3) \"-\"\n          (str.substr name 9 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-(str.substr name 9 3))\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ (str.at name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-(str.substr name 9 3))\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-(str.substr name 9 3))\"))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0 1) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-(str.substr name 9 3))\"))"
    ],
    "constants": [
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        4,
        7,
        "-",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-(str.substr name 9 3))",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))"
      ],
      [
        0,
        1,
        3,
        5,
        "-(str.substr name 9 3))",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      1,
      3,
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      4,
      6,
      5,
      8,
      9,
      7,
      "-",
      " (",
      "-(str.substr name 9 3))",
      "+",
      "(str.++ "
    ],
    "time_diff_ms": 528.429
  },
  "phone-9.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\") \" \" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\".\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\".\\\" \\\".\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"\n    (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\") \"-\" \"\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\"))\"",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "\"(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"\n",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace name \" \" \".\" (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "+",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")"
      ],
      [
        "-",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        "-",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ]
    ],
    "all_constants": [
      ".",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      "",
      0,
      3,
      4,
      "-",
      8,
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name ",
      " ",
      "+",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\") \"-\" \".\") \"+\" \"\")",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1007.8209999999999
  },
  "clean-and-reformat-telephone-numbers.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\") \" \" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\") \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "constants": [
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "<",
        "-",
        " ",
        ".",
        ">"
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ]
    ],
    "all_constants": [
      "",
      ".",
      "-",
      ">",
      " ",
      "<"
    ],
    "time_diff_ms": 1410.408
  },
  "stackoverflow7.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))"
    ],
    "constants": [
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        0
      ]
    ],
    "all_constants": [
      0,
      ""
    ],
    "time_diff_ms": 1683.851
  },
  "univ_4-long-repeat.sl": {
    "completions": [
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col1 \\\", \\\" \\\",\\\") col2 \\\",\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.++ col1 \\\", \\\" col2) \\\", USA\\\")\"",
      "(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.replace \n      (str.replace \n        (str.replace col2 \"New York\" \"NY\") \n        \"New Haven\" \"New Haven\") \n      \"University\" \"\")))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.replace col1 \"University of \" \"\") \",\" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n    (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")\n            \", USA\"))",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\"",
      "(str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \", \" \", \")",
      "\"(str.++ col2 \\\", \\\" col1 \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"USA\\\")) \\\"PA\\\" \\\"PA, USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.++ (str.replace col1 \", \" \", \") col2) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"USA\\\")) col1 \\\", USA\\\")\"",
      "(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.replace \n      (str.replace col1 \"University of \" \"\")\n      \"New York\" \"NY\")\n    (str.replace \n      (str.replace \n        (str.replace col2 \"New York\" \"NY\")\n        \"University of \" \"\")\n      \"New York\" \"NY\")\n    \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "\"(str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\",\\\") (str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\"))\"",
      "\"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"USA\\\" ) col1 \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \",\" \"\") \", USA\"))",
      "\"(str.++ (str.replace col2 col1 \\\"\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\""
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col1 \\\", \\\" \\\",\\\") col2 \\\",\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.++ col1 \\\", \\\" col2) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \",\" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", \\\" col1 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"USA\\\")) \\\"PA\\\" \\\"PA, USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.replace col1 \", \" \", \") col2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"USA\\\")) col1 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \"New York\" \"NY\") (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"New York\" \"NY\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\",\\\") (str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\"))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"USA\\\" ) col1 \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col1 \"University of \" \"\") \",\" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace col2 col1 \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\")"
    ],
    "constants": [
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.replace col1 \", \" \",\") col2 \",\") \", USA\")"
      ],
      [
        "(str.++ (str.++ col1 \", \" col2) \", USA\")"
      ],
      [
        "",
        "NY",
        "New Haven",
        "University",
        "New York"
      ],
      [
        "",
        ", USA",
        ",",
        "University of "
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA)"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \", USA\")"
      ],
      [
        "",
        "University ",
        "University of ",
        ", "
      ],
      [
        "(str.++ col2 \", \" col1 \", USA\")"
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA)"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.++ col1 col2) \", USA\" \"\") \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "USA",
        ", "
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"USA\")) \"PA\" \"PA, USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.++ col1 \",\" col2) \", USA\" \"\") \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        ", USA",
        ", "
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"USA\")) col1 \", USA\")"
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "(str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        ", USA",
        ", "
      ],
      [
        "(str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \",\") (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))"
      ],
      [
        "(str.++ (str.replace (str.++ col1 col2) \", USA\" \"\") \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"USA\" ) col1 \"\") \", USA\")"
      ],
      [
        "",
        ", USA",
        ", ",
        "University ",
        "University of "
      ],
      [
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA)"
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\")"
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\")"
      ],
      [
        "",
        ", USA",
        ",",
        "University of "
      ],
      [
        "(str.++ (str.replace col2 col1 \"\") \", USA\")"
      ],
      [
        "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA)"
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \", USA\") \", USA\")"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "(str.++ (str.replace (str.replace col2 col1 \"USA\" ) col1 \"\") \", USA\")",
      "(str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \", USA\")",
      "(str.++ (str.replace (str.replace col2 col1 \"\") \",\" \", USA\") \", USA\")",
      "University of ",
      ",",
      "(str.++ (str.++ col1 \", \" col2) \", USA\")",
      "(str.++ (str.replace (str.replace col2 col1 \"USA\")) col1 \", USA\")",
      "University ",
      "(str.++ (str.replace (str.replace col1 \", \" \",\") col2 \",\") \", USA\")",
      "USA",
      ", ",
      "New York",
      "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA)",
      "University",
      "New Haven",
      "(str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\")",
      "(str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\")",
      "(str.++ (str.replace (str.++ col1 col2) \", USA\" \"\") \", USA\")",
      "(str.++ (str.replace col2 col1 \"\") \", USA\")",
      "(str.replace (str.replace (str.replace col2 col1 \"USA\")) \"PA\" \"PA, USA\")",
      "(str.++ (str.replace (str.++ col1 \",\" col2) \", USA\" \"\") \", USA\")",
      "(str.++ col2 \", \" col1 \", USA\")",
      "(str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \",\") (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1768.9679999999998
  },
  "strip-numeric-characters-from-cell.sl": {
    "completions": [
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 1) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 1) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\"))",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 1) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\"))",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (str.to.int _arg_0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.to.int _arg_0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))"
    ],
    "constants": [
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        1
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        "",
        1
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        "0",
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        "",
        1
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        "",
        "0123456789"
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        0,
        ""
      ],
      [
        ""
      ],
      [
        0,
        ""
      ]
    ],
    "all_constants": [
      "",
      0,
      1,
      "0123456789",
      "0"
    ],
    "time_diff_ms": 2619.585
  },
  "36462127.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.len _arg_0) (+ 1 (str.indexof (str.replace _arg_0 \"/\" \" \") _arg_0 (- (str.len _arg_0) 1))) (str.len (str.replace _arg_0 \"/\" \" \"))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.len (str.replace _arg_0 \"/\" \"\")))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) (+ (str.indexof _arg_0 \"/\") 1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1)) 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) (+ 1 (str.indexof (str.replace _arg_0 \"/\" \" \") _arg_0 (- (str.len _arg_0) 1))) (str.len (str.replace _arg_0 \"/\" \" \")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.len (str.replace _arg_0 \"/\" \"\")))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) (+ (str.indexof _arg_0 \"/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1)) 1)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        " "
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      "",
      1,
      "/",
      0,
      " "
    ],
    "time_diff_ms": 1002.298
  },
  "exceljet3.sl": {
    "completions": [
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 5 (str.len _arg_0))",
      "(str.replace _arg_0 \".*= \" \"\")",
      "(str.++ _arg_0 \"\")",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\")",
      "(str.at _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 5 (- (str.len _arg_0) 5))",
      "(str.++ _arg_0 \"\")",
      "(str.replace _arg_0 \" \" \"\")",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.++ _arg_0 \"\")",
      "(str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4))",
      "(str.++ (str.substr _arg_0 5 (str.len _arg_0)))",
      "(str.++ (str.substr _arg_0 5 4))",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\")",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4))",
      "(str.++ _arg_0 \"\")",
      "(str.++ (str.at _arg_0 5) (str.at _arg_0 6) (str.at _arg_0 7) (str.at _arg_0 8) (str.at _arg_0 9) (str.at _arg_0 10) (str.at _arg_0 11) (str.at _arg_0 12) (str.at _arg_0 13) (str.at _arg_0 14) (str.at _arg_0 15) (str.at _arg_0 16) (str.at _arg_0 17) (str.at _arg_0 18) (str.at _arg_0 19) (str.at _arg_0 20) (str.at _arg_0 21) (str.at _arg_0 22) (str.at _arg_0 23) (str.at _arg_0",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3))",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.replace _arg_0 \"=[^=]*\" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \"=\" \"\")",
      "(str.++ \"year=\" _arg_0)",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 5 (- (str.len _arg_0) 5))",
      "(str.substr _arg_0 5 (str.len _arg_0))",
      "(str.replace _arg_0 \".*= \")",
      "(str.++ \"year= \" (str.substr _arg_0 5 (str.len _arg_0)))",
      "(str.replace _arg_0 \".*= \")",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.substr _arg_0 5 (- (str.len _arg_0) 5))",
      "(str.substr _arg_0 4 (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\"))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 4)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) (str.substr _arg_0 0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 5) (str.at _arg_0 6) (str.at _arg_0 7) (str.at _arg_0 8) (str.at _arg_0 9) (str.at _arg_0 10) (str.at _arg_0 11) (str.at _arg_0 12) (str.at _arg_0 13) (str.at _arg_0 14) (str.at _arg_0 15) (str.at _arg_0 16) (str.at _arg_0 17) (str.at _arg_0 18) (str.at _arg_0 19) (str.at _arg_0 20) (str.at _arg_0 21) (str.at _arg_0 22) (str.at _arg_0 23) (str.at _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(define-fun f (_arg_0 String) String (str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"=[^=]*\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"year=\" _arg_0))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.++ \"year= \" (str.substr _arg_0 5 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 5 (- (str.len _arg_0) 5)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))"
    ],
    "constants": [
      [
        4
      ],
      [
        ".*= "
      ],
      [
        0,
        "="
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        5
      ],
      [
        "",
        ".*= "
      ],
      [
        ""
      ],
      [
        "",
        5
      ],
      [
        0,
        "=",
        1
      ],
      [
        ".*= "
      ],
      [
        5
      ],
      [
        ""
      ],
      [
        "",
        " "
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        ""
      ],
      [
        5
      ],
      [
        0,
        4,
        5
      ],
      [
        5
      ],
      [
        4,
        5
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        "",
        5
      ],
      [
        0,
        4,
        5
      ],
      [
        ""
      ],
      [
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23
      ],
      [
        ".*= "
      ],
      [
        5
      ],
      [
        0,
        1,
        "/",
        2,
        3,
        "fuel economy="
      ],
      [
        4
      ],
      [
        "",
        "=[^=]*"
      ],
      [
        0,
        "="
      ],
      [
        ".*= "
      ],
      [
        "",
        "="
      ],
      [
        "year="
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        5
      ],
      [
        5
      ],
      [
        ".*= "
      ],
      [
        "year= ",
        5
      ],
      [
        ".*= "
      ],
      [
        ".*= "
      ],
      [
        4
      ],
      [
        5
      ],
      [
        4
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      2,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      3,
      "year=",
      "year= ",
      "fuel economy=",
      "=",
      "=[^=]*",
      "/",
      " ",
      ".*= "
    ],
    "time_diff_ms": 2469.807
  },
  "stackoverflow3.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (- (str.len (str.replace _arg_0 \" \" \"\")) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" 0) 1) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\" ) (int.to.str (- 1 (str.to.int (str.at (str.replace _arg_0 \" \" \"\" ) (- (str.len (str.replace _arg_0 \" \" \"\" )) 1)) 0))))) )",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof (str.to.int (str.substr _arg_0 0 (- (str.len _arg_0) 1))) _arg_0 (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"1\" -1)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0))) (str.len \"0\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr (str.replace _arg_0 \" \" \"\") (- (str.len (str.replace _arg_0 \" \")) 1) 1)))))) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10)) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) 1))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 10 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.replace (str.replace (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") -1) 1))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof (_arg_0 \"1\") _arg_0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))) 1)) 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" 0) 1) (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \"1\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.len (str.replace _arg_0 \" \" \"\")))) 1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"0\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0)))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"0\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.rindexof _arg_0 \"1\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)))))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"9\"))) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"X\"))) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (- (str.len (str.replace _arg_0 \" \" \"\")) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" 0) 1) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.at (str.replace _arg_0 \" \" \"\") (- (str.len (str.replace _arg_0 \" \" \"\")) 1)) 0)))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.to.int (str.substr _arg_0 0 (- (str.len _arg_0) 1))) _arg_0 (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"1\" -1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0))) (str.len \"0\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr (str.replace _arg_0 \" \" \"\") (- (str.len (str.replace _arg_0 \" \")) 1) 1)))))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10)) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 10 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.replace (str.replace (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") -1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof (_arg_0 \"1\") _arg_0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))) 1)) 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len _arg_0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" 0) 1) (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \"1\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.len (str.replace _arg_0 \" \" \"\")))) 1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"0\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0)))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"0\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.rindexof _arg_0 \"1\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"9\"))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"X\"))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1))))))"
    ],
    "constants": [
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        "",
        " ",
        "1"
      ],
      [
        1,
        "0123456789"
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        0
      ],
      [
        "1",
        -1,
        1
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        "0",
        1
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1
      ],
      [
        "",
        1,
        " ",
        10
      ],
      [
        0,
        1
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        "0123456789"
      ],
      [
        "1",
        1
      ],
      [
        "",
        1,
        " ",
        10
      ],
      [
        0,
        1
      ],
      [
        "1",
        -1,
        1
      ],
      [
        "0",
        "",
        1,
        9,
        "2",
        "1",
        -1
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        "1"
      ],
      [
        0,
        1
      ],
      [
        0,
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        0
      ],
      [
        0,
        1
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        0,
        1
      ],
      [
        0,
        "1",
        1
      ],
      [
        "",
        1,
        " "
      ],
      [
        "0",
        1
      ],
      [
        0,
        1
      ],
      [
        1,
        "123456789"
      ],
      [
        "0",
        1
      ],
      [
        "0",
        1
      ],
      [
        "1",
        1
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        1
      ],
      [
        "9",
        0,
        " "
      ],
      [
        1,
        "0123456789"
      ],
      [
        0,
        " ",
        "X"
      ],
      [
        1,
        "0123456789"
      ],
      [
        "",
        1,
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "X",
      "0123456789",
      9,
      10,
      "1",
      "0",
      "2",
      "123456789",
      " ",
      "9",
      -1
    ],
    "time_diff_ms": 675.316
  },
  "univ_5-long.sl": {
    "completions": [
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \")",
      "(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \")",
      "(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "\"(str.replace col1 col2 \"\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \" University\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, \" \"NY, \") \"New York\" \"NY\"))",
      "(str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \"New York\" \"NY\") 2 100))",
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \",\" \"\")",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace col2 \", USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, New York\" \"New York, NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \",\" \"\"))",
      "\"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University\" \"\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \"\"))",
      "(str.substr (str.substr col2 0 (str.indexof col2 \",\" 0)) 1 (str.len (str.substr col2 0 (str.indexof col2 \",\" 0))))\", USA\")",
      "(str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \" , \" \", \") \", USA\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \" of \" \", \" \", \")))",
      "(str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \"California, \" \"CA, \")",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "(str.substr col2 (str.indexof col2 \", \" 0) (str.len col2))",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \",\" \" \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col1 \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(str.substr (str.substr col2 0 (- (str.indexof col2 \",\") 1)) (+ (str.indexof col2 \", \") 2) (- (str.len col2) 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \", USA\"))",
      "\"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f (col1 String col2 String) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(str.substr (str.substr col2 0 (- (str.indexof col2 \",\") 1)) (+ (str.indexof col2 \",\") 2) (str.len col2))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (ite (str.contains col1 \"New York\")\n       (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY, USA\")\n       (str.replace col2 \"New York\" \"NY, USA\")))",
      "(define-fun f (col1 String col2 String) String\n  (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \",\" \" \"))",
      "\"(str.replace (str.replace col1 col2 \\\", USA\\\") \\\",\\\" \\\"\\\")\"",
      "(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \"New York\" \"NY\") 0 (- (str.indexof col2 \",\") 1))",
      "\"(str.replace col1 col2 \"\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \", USA\") 0 (- (str.len col2) 5)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\"))",
      "(str.replace (str.replace (str.replace col2 \"New York,\" \"NY,\") \"New York\" \"NY\") \"USA\" \"USA\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", USA, \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace col1 col2 \")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \" University\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, \" \"NY, \") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \"New York\" \"NY\") 2 100))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace col2 \", USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York, New York\" \"New York, NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (str.indexof col2 \",\" 0)) 1 (str.len (str.substr col2 0 (str.indexof col2 \",\" 0)))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \" , \" \", \") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \" of \" \", \" \", \")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \"California, \" \"CA, \"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (str.indexof col2 \", \" 0) (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \",\" \" \"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col1 \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (- (str.indexof col2 \",\") 1)) (+ (str.indexof col2 \", \") 2) (- (str.len col2) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (- (str.indexof col2 \",\") 1)) (+ (str.indexof col2 \",\") 2) (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (ite (str.contains col1 \"New York\") (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY, USA\") (str.replace col2 \"New York\" \"NY, USA\")))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \",\" \" \"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col1 col2 \\\", USA\\\") \\\",\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \"New York\" \"NY\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace col1 col2 \")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \", USA\") 0 (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York,\" \"NY,\") \"New York\" \"NY\") \"USA\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))"
    ],
    "constants": [
      [
        0,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", ",
        "NY",
        "University of ",
        ", USA, ",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", ",
        "NY",
        "University of ",
        ", USA, ",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.replace col1 col2 "
      ],
      [
        "NY",
        "",
        "New York",
        " University"
      ],
      [
        "NY, ",
        ", USA",
        ", ",
        "NY",
        "New York",
        "New York, "
      ],
      [
        "",
        2,
        100,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        "",
        ",",
        "NY",
        "University",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", USA"
      ],
      [
        "New York, NY",
        "New York, New York",
        ", USA",
        ", "
      ],
      [
        "",
        ","
      ],
      [
        "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))"
      ],
      [
        "",
        "NY",
        "University of ",
        "University",
        "New York"
      ],
      [
        "",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        " , ",
        ", USA",
        ", ",
        "NY",
        "University",
        "New York"
      ],
      [
        "",
        " of ",
        ", ",
        "NY",
        "University",
        "New York"
      ],
      [
        "",
        "NY",
        "CA, ",
        "California, ",
        "University",
        "New York"
      ],
      [
        "",
        "University of "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        ", "
      ],
      [
        2,
        ", "
      ],
      [
        "",
        " ",
        ","
      ],
      [
        "",
        "University of "
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "",
        " , ",
        "University of ",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        ", ",
        ","
      ],
      [
        "",
        " , ",
        ", USA",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "(str.replace (str.replace col2 col1 \"\") \", USA\" \"\")"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        "",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        "NY",
        "NY, USA",
        "New York"
      ],
      [
        "",
        "University of "
      ],
      [
        "",
        " ",
        ","
      ],
      [
        "(str.replace (str.replace col1 col2 \", USA\") \",\" \"\")"
      ],
      [
        0,
        1,
        ",",
        "NY",
        "New York"
      ],
      [
        "(str.replace col1 col2 "
      ],
      [
        "",
        0,
        ", USA",
        5,
        ", ",
        ","
      ],
      [
        "Phialdelphia",
        "Philadelphia",
        ", USA",
        ", "
      ],
      [
        "NY,",
        "USA",
        "New York,",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      5,
      "Phialdelphia",
      "New York, New York",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      "University of ",
      ",",
      "Philadelphia",
      "NY,",
      "NY, USA",
      "CA, ",
      "USA",
      ", ",
      "New York, NY",
      "New York,",
      "NY, ",
      "New York",
      "University",
      ", USA, ",
      " University",
      "(str.replace (str.replace col1 col2 \", USA\") \",\" \"\")",
      " ",
      " of ",
      " , ",
      100,
      "California, ",
      "(str.replace (str.replace col2 col1 \"\") \", USA\" \"\")",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "New York, ",
      "(str.replace col1 col2 ",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1672.687
  },
  "exceljet2.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" -1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 4)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 4) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" -1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 4)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 4) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \".\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        -1,
        "."
      ],
      [
        1,
        4,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      4,
      -1
    ],
    "time_diff_ms": 1237.27
  },
  "univ_6.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (- (str.len col2) 4)))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "\"(str.++ (str.substr col2 0 (str.indexof col2 \\\",\\\" 0)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.++ \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col2 0 (str.indexof col2 \",\" 0)) col2) (ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\")) \"New York\" \"NY\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (str.indexof col2 \", \" 0 1) 3)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 1) (str.substr col2 1 1) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col2 1) (str.at col2 2) \", \" (str.at col2 0) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col2 \", \" col1 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (- (str.indexof col2 \", \" 0) 3) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 0) (str.at col1 1) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))) )",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col2 1) (str.at col2 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.++ \n        (str.substr col2 0 (str.indexof col2 \",\" 0))\n        \", \"\n        (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.indexof col2 \",\" (+ (str.indexof col2 \",\" 0) 1)))\n        \", USA\"\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.substr (str.replace (str.substr col2 0 (str.indexof col2 \",\")) 0 (str.indexof (str.replace col2 \"New York\" \"NY\") \",\")) 0 (str.indexof (str.replace (str.replace col1 \"University of\" \"\") \",\")) \",\" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) (str.++ \", \" (str.substr col2 0 (str.indexof col2 \",\"))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 1) (str.substr col1 (str.indexof col1 \",\" 0) (str.indexof col1 \",\" 0)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"MD\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"USA\" \"\") \"AK\" \"USA\") \"AZ\" \"USA\") \"AR\" \"USA\") \"CA\" \"USA\") \"CO\" \"USA\") \"CT\" \"USA\") \"DE\" \"USA\") \"FL\" \"USA\") \"GA\" \"USA\") \"HI\" \"USA\") \"ID\" \"USA\") \"IL\" \"USA\") \"IN\" \"USA\") \"IA\" \"USA\") \"KS\" \"USA\") \"KY\" \"USA\") \"LA\" \"USA\") \"ME\" \"USA\") \"MD\" \"USA\") \"MA\" \"USA\") \"MI\" \"USA\") \"MN\" \"USA\") \"MS\" \"USA\") \"MO\" \"USA\") \"MT\" \"USA\") \"NE\" \"USA\") \"NV\" \"USA\") \"NH\" \"USA\") \"NJ\" \"USA\") \"NM\" \"USA\") \"NY\" \"USA\") \"NC\" \"USA\") \"ND\" \"USA\") \"OH\" \"USA\") \"OK\" \"USA\") \"OR\" \"USA\") \"PA\" \"USA\") \"RI\" \"USA\") \"SC\" \"USA\") \"SD\" \"USA\") \"TN\" \"USA\") \"TX\" \"USA\") \"UT\" \"USA\") \"VT\" \"USA\") \"VA\" \"USA\") \"WA\" \"USA\") \"WV\" \"USA\") \"WI\" \"USA\")) 0 (str.indexof col2 \", \" 0) (- (str.len col2) (str.indexof col2 \", \" 0))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n    (str.++ \n        (str.replace \n            (str.replace \n                (str.replace col2 \"New York\" \"NY\") \n            \"University of\" \"\") \n        \", \" \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr (str.substr col2 0 (str.indexof col2 \",\")) 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 1 (str.indexof col2 \", \" 0)))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\""
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (- (str.len col2) 4)))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (str.indexof col2 \\\",\\\" 0)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.++ \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col2 0 (str.indexof col2 \",\" 0)) col2) (ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\")) \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (str.indexof col2 \", \" 0 1) 3)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 1) (str.substr col2 1 1) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (ite (str.contains col2 \"New York\") \"New York\" (str.at col2 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col2 1) (str.at col2 2) \", \" (str.at col2 0) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col2 \", \" col1 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (- (str.indexof col2 \", \" 0) 3) 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 0) (str.at col1 1) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col2 1) (str.at col2 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.indexof col2 \",\" (+ (str.indexof col2 \",\" 0) 1))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr (str.replace (str.substr col2 0 (str.indexof col2 \",\")) 0 (str.indexof (str.replace col2 \"New York\" \"NY\") \",\")) 0 (str.indexof (str.replace (str.replace col1 \"University of\" \"\") \",\")) \",\" \"USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) (str.++ \", \" (str.substr col2 0 (str.indexof col2 \",\"))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 1) (str.substr col1 (str.indexof col1 \",\" 0) (str.indexof col1 \",\" 0)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"MD\") 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"USA\" \"\") \"AK\" \"USA\") \"AZ\" \"USA\") \"AR\" \"USA\") \"CA\" \"USA\") \"CO\" \"USA\") \"CT\" \"USA\") \"DE\" \"USA\") \"FL\" \"USA\") \"GA\" \"USA\") \"HI\" \"USA\") \"ID\" \"USA\") \"IL\" \"USA\") \"IN\" \"USA\") \"IA\" \"USA\") \"KS\" \"USA\") \"KY\" \"USA\") \"LA\" \"USA\") \"ME\" \"USA\") \"MD\" \"USA\") \"MA\" \"USA\") \"MI\" \"USA\") \"MN\" \"USA\") \"MS\" \"USA\") \"MO\" \"USA\") \"MT\" \"USA\") \"NE\" \"USA\") \"NV\" \"USA\") \"NH\" \"USA\") \"NJ\" \"USA\") \"NM\" \"USA\") \"NY\" \"USA\") \"NC\" \"USA\") \"ND\" \"USA\") \"OH\" \"USA\") \"OK\" \"USA\") \"OR\" \"USA\") \"PA\" \"USA\") \"RI\" \"USA\") \"SC\" \"USA\") \"SD\" \"USA\") \"TN\" \"USA\") \"TX\" \"USA\") \"UT\" \"USA\") \"VT\" \"USA\") \"VA\" \"USA\") \"WA\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of\" \"\") \", \" \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr (str.substr col2 0 (str.indexof col2 \",\")) 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 1 (str.indexof col2 \", \" 0)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\")"
    ],
    "constants": [
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        4,
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        1,
        2,
        ", USA",
        ", "
      ],
      [
        "(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\")"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        2,
        ", ",
        "USA",
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        3,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", "
      ],
      [
        "NY",
        "",
        "New York",
        "USA"
      ],
      [
        0,
        ", USA",
        ", ",
        ",",
        "New York"
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.++ (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \", USA\")"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        0,
        1,
        2,
        3,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ", USA",
        ", "
      ],
      [
        0,
        1,
        ",",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        1,
        2,
        ", USA",
        ", "
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "NY",
        "",
        "New York",
        "University of "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        " , ",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        "",
        "USA",
        ",",
        "University of",
        "NY",
        "New York"
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ","
      ],
      [
        "",
        0,
        1,
        ", ",
        ",",
        "NY",
        "University of ",
        "MD",
        "College Park",
        "New York"
      ],
      [
        0,
        ", USA",
        ",",
        "NY",
        "New York"
      ],
      [
        "NY",
        "",
        "New York",
        "University of "
      ],
      [
        "",
        "OR",
        "IN",
        "MT",
        "OK",
        "HI",
        "IL",
        "GA",
        "PA",
        "MA",
        "UT",
        "MD",
        "AK",
        "Ann Arbor",
        "AR",
        "KY",
        "MN",
        "NM",
        "RI",
        "TX",
        "KS",
        "USA",
        "CT",
        "ID",
        "TN",
        "New York",
        "Los Angeles",
        "MS",
        "NV",
        "MI",
        "Philadelphia",
        "NJ",
        "VA",
        "SC",
        "ME",
        "WA",
        "College Park",
        "MO",
        "SD",
        "IA",
        "NC",
        "LA",
        "VT",
        "NY",
        "Ithaca",
        "DE",
        "NH",
        "OH",
        "AZ",
        "CA",
        "NE",
        "CO",
        "ND",
        "FL"
      ],
      [
        0,
        1,
        ",",
        ", "
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        "",
        ", USA",
        ", ",
        "University of",
        "NY",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        0,
        ", USA",
        ",",
        ", "
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        ", "
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\" \"\")"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      "",
      "GA",
      "KS",
      "AK",
      "DE",
      "TN",
      "MS",
      "MT",
      "Ithaca",
      "AR",
      "TX",
      "IL",
      "(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\")",
      "University of ",
      "(str.++ (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \", USA\")",
      ",",
      "MD",
      "RI",
      "NM",
      "CT",
      "Philadelphia",
      "VA",
      "VT",
      "AZ",
      "MA",
      "NV",
      "UT",
      "NH",
      "CO",
      "OR",
      "NJ",
      "SC",
      "USA",
      ", ",
      "MI",
      "LA",
      "FL",
      "New York",
      "CA",
      "University of",
      "OK",
      "HI",
      "ND",
      "NC",
      "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", USA\" \"\")",
      "Los Angeles",
      "ME",
      " , ",
      "OH",
      "PA",
      "WA",
      "College Park",
      "NE",
      "ID",
      "SD",
      "KY",
      "IA",
      "MO",
      "Ann Arbor",
      "MN",
      "IN",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 880.037
  },
  "stackoverflow2.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.replace _arg_0 \" korea\" \"\")",
      "(str.filter (lambda (x) (str.contains x \" \")) _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.len _arg_0) 1))",
      "(str.++ \"indonesia\" \" \" \"korea\")",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 5) \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.join \" \" (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \" korea\" \"\")",
      "(str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0))",
      "(str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" _arg_0))",
      "(str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))))",
      "(str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))",
      "(str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" \"india china japan indonesia korea\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.replace _arg_0 \" \" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x \" \")) _arg_0))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.++ \"indonesia\" \" \" \"korea\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 5) \" \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.join \" \" (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (x) (str.contains x _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.filter (lambda (s) (str.contains s _arg_0)) (str.split \" \" \"india china japan indonesia korea\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\"))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        " korea"
      ],
      [
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1
      ],
      [
        "indonesia",
        " ",
        "korea"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        " "
      ],
      [
        0,
        " "
      ],
      [
        "",
        " korea"
      ],
      [
        " "
      ],
      [
        " "
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        " ",
        "india china japan indonesia korea"
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " korea",
      5,
      "india china japan indonesia korea",
      " ",
      "indonesia",
      "korea"
    ],
    "time_diff_ms": 1095.918
  },
  "phone-6-long-repeat.sl": {
    "completions": [
      "\"(str.at name 4)\"",
      "(str.substr name 4 3))",
      "(ite (= (str.len name) 14) (str.substr name 4 3) (ite (= (str.len name) 13) (str.substr name 3 3) (str.substr name 2 3)))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(str.substr name 4 3))",
      "\"(str.at name 4)\"",
      "(str.substr name 4 3))",
      "(str.substr name 4 3))",
      "(str.substr name 4 3))",
      "\"(str.at name 4)\"",
      "(str.substr name 4 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n    (str.at name 5))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "\"(str.at name 4)\"",
      "(str.at name 4))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "\"(str.at name 4)\"",
      "\"(str.at name 5)\"",
      "\"(str.at name 5)\"",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(ite (= (str.indexof name \" \") (- (str.indexof name \"-\") 1))\n     (str.substr name (+ (str.indexof name \" \") 1) (- (str.indexof name \"-\") (str.indexof name \" \") 1))\n     (str.substr name (+ (str.indexof name \" \") 1) (- (str.indexof name \".\") (str.indexof name \" \") 1)))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "\"(str.substr name 5 3))\"",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String\n    (str.at name 4))",
      "\"(str.at name 5)\"",
      "(str.at name 4)",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.substr name 5 3))\"",
      "(str.substr name 4 3))",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "(str.substr name 5 3))",
      "\"(str.at name 4)\"",
      "(define-fun f (name String) String\n    (str.at name 5))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 5))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (ite (= (str.len name) 14) (str.substr name 4 3) (ite (= (str.len name) 13) (str.substr name 3 3) (str.substr name 2 3))))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") (- (str.indexof name \"-\") 1)) (str.substr name (+ (str.indexof name \" \") 1) (- (str.indexof name \"-\") (str.indexof name \" \") 1)) (str.substr name (+ (str.indexof name \" \") 1) (- (str.indexof name \".\") (str.indexof name \" \") 1))))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 5))"
    ],
    "constants": [
      [
        "(str.at name 4)"
      ],
      [
        3,
        4
      ],
      [
        2,
        3,
        4,
        13,
        14
      ],
      [
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        3,
        4
      ],
      [
        5
      ],
      [
        5
      ],
      [
        "(str.at name 4)"
      ],
      [
        5
      ],
      [
        "(str.at name 4)"
      ],
      [
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        5
      ],
      [
        5
      ],
      [
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        "(str.at name 5)"
      ],
      [
        "(str.at name 5)"
      ],
      [
        4
      ],
      [
        "-",
        " ",
        1,
        "."
      ],
      [
        4
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        3,
        4
      ],
      [
        4
      ],
      [
        "(str.at name 5)"
      ],
      [
        4
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 4)"
      ],
      [
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        3,
        4
      ],
      [
        "(str.at name 4)"
      ],
      [
        "(str.at name 4)"
      ],
      [
        3,
        5
      ],
      [
        "(str.at name 4)"
      ],
      [
        5
      ],
      [
        4
      ],
      [
        4
      ],
      [
        5
      ]
    ],
    "all_constants": [
      ".",
      1,
      2,
      3,
      4,
      5,
      "-",
      "(str.at name 5)",
      "(str.substr name 5 3))",
      13,
      14,
      "(str.at name 4)",
      " "
    ],
    "time_diff_ms": 894.505
  },
  "25239569.sl": {
    "completions": [
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \" _BRD \" \" _Branding \"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n  (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f ((s String)) String\n  (str.replace s \" _BRD \" \" _Branding \"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((x String)) String (str.replace x \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace x \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))"
    ],
    "constants": [
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ]
    ],
    "all_constants": [
      " _BRD ",
      "BRD",
      " _Branding ",
      "Branding"
    ],
    "time_diff_ms": 151.481
  },
  "univ_5_short.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \"of \" \"\")) )",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") \"College \" \"\") \", \" \",\") \"Los Angeles\" \"LA\") \"Ann Arbor\" \"MI\") \"Ithaca\" \"NY\") 0 13))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2\n              (+ 1 (str.indexof col2 \",\"))\n              (- (str.len col2) (+ 1 (str.indexof col2 \",\")))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 6)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \"USA\") 0 (- (str.len col2) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    0 (- (str.indexof col2 \",\" 0) 1)) \"USA\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"USA\" \"\") 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 1 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") 2 (- (str.len (str.replace (str.replace col2 col1 \"\") \", USA\" \"\")) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace col2 \"New York\" \"NY\") \n            \"University of \" \"\") \n          \"University \" \"\") \n        \"College Park\" \"MD\") \n      \"College\" \"MD\") \n    0 100))",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.++ col2 \", USA\") 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr\n    (str.++ col2 \", USA\")\n    (+ 2 (str.indexof col2 \",\" 0))\n    (- (str.len col2) 2)\n  )\n)",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" 1) col1 \\\"\\\" 1) \\\", \\\" \\\", USA, \\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) (+ (str.len col2) (str.indexof col2 \", \"))))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.++ col2 \", USA\") 2 100))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.++ col2 \", \" \" USA\") \"New York, \" \"NY, \") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "\"(str.substr col2 1 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 5)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") \"College Park\" \"CP\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col1 \"University of \" \"\") \" College Park\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.substr \n        (str.replace \n            (str.++ col1 \", \" col2 \", USA\") \n            \", New York\" \", NY\") \n        2 \n        (- (str.len col1) 2)\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 2)))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 2 100))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University\" \"\") \"of \" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") \"College \" \"\") \", \" \",\") \"Los Angeles\" \"LA\") \"Ann Arbor\" \"MI\") \"Ithaca\" \"NY\") 0 13))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\")) (- (str.len col2) (+ 1 (str.indexof col2 \",\")))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"New York\" \"NY\") 0 (- (str.len (str.++ col1 \", \" col2 \", USA\")) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 6)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \"USA\") 0 (- (str.len col2) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"USA\" \"\") 2 100)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 1 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") 2 (- (str.len (str.replace (str.replace col2 col1 \"\") \", USA\" \"\")) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") \"College Park\" \"MD\") \"College\" \"MD\") 0 100)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.++ col2 \", USA\") 2 100))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.++ col2 \", USA\") (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" 1) col1 \\\"\\\" 1) \\\", \\\" \\\", USA, \\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) (+ (str.len col2) (str.indexof col2 \", \")))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"College Park\" \"\") 0 100))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.++ col2 \", USA\") 2 100))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.++ col2 \", \" \" USA\") \"New York, \" \"NY, \") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 1 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") \"College Park\" \"CP\") 0 100))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col1 \"University of \" \"\") \" College Park\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", New York\" \", NY\") 2 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 2)))"
    ],
    "constants": [
      [
        2,
        100
      ],
      [
        "",
        "of ",
        "NY",
        "University",
        "New York"
      ],
      [
        "",
        0,
        "MI",
        ", ",
        "LA",
        ",",
        13,
        "NY",
        "Ithaca",
        "University ",
        "University of ",
        "Ann Arbor",
        "New York",
        "College ",
        "Los Angeles"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", "
      ],
      [
        1,
        ","
      ],
      [
        0,
        2,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        2,
        6,
        ", "
      ],
      [
        "",
        " , ",
        0,
        1,
        ", ",
        "USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        2,
        ", "
      ],
      [
        2,
        ","
      ],
      [
        "",
        "University of "
      ],
      [
        "",
        2,
        100,
        "Philadelphia",
        "Phialdelphia",
        "USA",
        "NY",
        "Ithaca",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        2,
        ", USA"
      ],
      [
        0,
        1,
        ", "
      ],
      [
        "",
        0,
        100,
        "NY",
        "University ",
        "College",
        "University of ",
        "MD",
        "College Park",
        "New York"
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        2,
        100,
        ", USA"
      ],
      [
        "",
        "University of "
      ],
      [
        0,
        1,
        ",",
        "NY",
        "New York"
      ],
      [
        0,
        2,
        ",",
        ", USA"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\" 1) col1 \"\" 1) \", \" \", USA, \")"
      ],
      [
        2,
        ", "
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "",
        ", "
      ],
      [
        "",
        "USA",
        ","
      ],
      [
        2,
        ", "
      ],
      [
        "",
        "University of "
      ],
      [
        2,
        ", "
      ],
      [
        "NY",
        "New York"
      ],
      [
        "",
        0,
        100,
        "NY",
        "University of ",
        "College Park",
        "New York"
      ],
      [
        2,
        4,
        ", "
      ],
      [
        2,
        100,
        ", USA"
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \",\")"
      ],
      [
        2,
        ", "
      ],
      [
        "NY, ",
        ", ",
        "NY",
        " USA",
        "New York",
        "New York, "
      ],
      [
        "",
        ", "
      ],
      [
        "(str.substr col2 1 (- (str.indexof col2 \",\") 1))"
      ],
      [
        2,
        5,
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        "",
        0,
        100,
        "CP",
        "NY",
        "University ",
        "University of ",
        "College Park",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        " College Park",
        "University of "
      ],
      [
        ", NY",
        2,
        ", USA",
        ", ",
        ", New York"
      ],
      [
        "",
        "University of "
      ],
      [
        0,
        2,
        ", "
      ]
    ],
    "all_constants": [
      "",
      0,
      2,
      1,
      4,
      5,
      6,
      13,
      "CP",
      "Phialdelphia",
      "Ithaca",
      ", New York",
      "University of ",
      "College",
      ",",
      "MD",
      "Philadelphia",
      "University ",
      "of ",
      " USA",
      "LA",
      "MI",
      ", ",
      "USA",
      "NY, ",
      "New York",
      "University",
      "(str.replace (str.replace (str.replace col2 col1 \"\" 1) col1 \"\" 1) \", \" \", USA, \")",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \",\")",
      "Los Angeles",
      "College ",
      " , ",
      ", NY",
      "College Park",
      100,
      " College Park",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "New York, ",
      "Ann Arbor",
      "(str.substr col2 1 (- (str.indexof col2 \",\") 1))",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1706.958
  },
  "remove-text-by-position.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/dave/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.len \"/users/dave/\"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/dave/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.len \"/users/dave/\"))) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len \"/users/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/dave/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/dave/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "/users/",
      "/users/dave/"
    ],
    "time_diff_ms": 2160.308
  },
  "univ_6-long-repeat.sl": {
    "completions": [
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n    (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String \"USA\")",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n    (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n    (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"USA\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col1 \", \" col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))"
    ],
    "constants": [
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        "USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        "USA"
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ],
      [
        ", USA",
        ", "
      ]
    ],
    "all_constants": [
      "USA",
      ", ",
      ", USA"
    ],
    "time_diff_ms": 2669.156
  },
  "univ_4.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") 0 12) 0 (- (str.indexof col2 \"PA\" 0) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") \"USA\" \"USA\") 0 27))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Philadelphia\" \"PA\") \"USA\" \"\")))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "\"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace col1 \"University of \" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 2) \", USA\"))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\" \\\" \\\",\\\") \\\"USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace col1 \"University of \" \"\")\n                  \"University \" \"\")\n                \" of \" \"\")\n              \"College \" \"\")\n            \"Penn \" \"\")\n          \"NYU \" \"\")\n        \"Columbia \" \"\")\n      \"UCLA \" \"\")\n    0 \n    (- \n      (str.indexof col2 \",\" 0) \n      2)\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col2\n                                                                                                                                                \"New York\"\n                                                                                                                                                \"NY\")\n                                                                                                                                              \"New York\"\n                                                                                                                                              \"NY\")\n                                                                            \"New York\"\n                                                                            \"NY\")\n                                                                          \"New York\"\n                                                                          \"NY\")\n                                                                        \"New York\"\n                                                                        \"NY\")\n                                                                      \"New York\"\n                                                                      \"NY\")\n                                                                    \"New York\"\n                                                                    \"NY\")\n                                                                  \"New York\"\n                                                                  \"NY\")\n                                                                \"New York\"\n                                                                \"NY\")\n                                                              \"New York\"\n                                                              \"NY\")\n                                                            \"New York\"\n                                                            \"NY\")\n                                                          \"New York\"\n                                                          \"NY\")\n                                                        \"New York\"\n                                                        \"NY\")\n                                                      \"New York\"\n                                                      \"NY\")\n                                                    \"New York\"\n                                                    \"NY\")\n                                                  \"New York\"\n                                                  \"NY\")\n                                                \"New York\"\n                                                \"NY\")\n                                              \"New York\"\n                                              \"NY\")\n                                            \"New York\"\n                                            \"NY\")\n                                          \"New York\"\n                                          \"NY\")\n                                        \"New York\"\n                                        \"NY\")\n                                      \"New York\"\n                                      \"NY\")\n                                    \"New York\"\n                                    \"NY\")\n                                  \"New York\"\n                                  \"NY\")\n                                \"New York\"\n                                \"NY\")\n                              \"New York\"\n                              \"NY\")\n                            \"New York\"\n                            \"NY\")\n                          \"New York\"\n                          \"NY\")\n                        \"New York\"\n                        \"NY\")\n                      \"New York\"\n                      \"NY\")\n                    \"New York\"\n                    \"NY\")\n                  \"New York\"\n                  \"NY\")\n                \"New York\"\n                \"NY\")\n              \"New York\"\n              \"NY\")\n            \"New York\"\n            \"NY\")\n          \"New York\"\n          \"NY\")\n        \"New York\"\n        \"NY\")\n      \"New York\"\n      \"NY\")\n    0\n    2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \",\" \",\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", MI\" \", MI, USA\") \", NY\" \", NY, USA\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2) 4)) \", USA\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2) 4)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col1 \"University of\" \"\")\n                                                                                                                                              \"College Park\" \"MD\")\n                                                                                                                                            \"Ann Arbor\" \"MI\")\n                                                                                                                                          \"Ithaca\" \"NY\")\n                                                                                                                                        \"Los Angeles\" \"CA\")\n                                                                                                                                      \"Philadelphia\" \"PA\")\n                                                                                                                                    \"New York\" \"NY\")\n                                                                                                                                  \"Philadelphia\" \"PA\")\n                                                                                                                                \"USA\" \"\")\n                                                                                                                              \"USA\" \"\")\n                                                                                                                            \"USA\" \"\")\n                                                                                                                          \"USA\" \"\")\n                                                                                                                        \"USA\" \"\")\n                                                                                                                      \"USA\" \"\")\n                                                                                                                    \"USA\" \"\")\n                                                                                                                  \"USA\" \"\")\n                                                                                                                \"USA\" \"\")\n                                                                                                              \"USA\" \"\")\n                                                                                                            \"USA\" \"\")\n                                                                                                          \"USA\" \"\")\n                                                                                                        \"USA\" \"\")\n                                                                                                      \"USA\" \"\")\n                                                                                                    \"USA\" \"\")\n                                                                                                  \"USA\" \"\")\n                                                                                                \"USA\" \"\")\n                                                                                              \"USA\" \"\")\n                                                                                            \"USA\" \"\")\n                                                                                          \"USA\" \"\")\n                                                                                        \"USA\" \"\")\n                                                                                      \"USA\" \"\")\n                                                                                    \"USA\" \"\")\n                                                                                  \"USA\" \"\")\n                                                                                \"USA\" \"\")\n                                                                              \"USA\" \"\")\n                                                                            \"USA\" \"\")\n                                                                          \"USA\" \"\")\n                                                                        \"USA\" \"\")\n                                                                      \"USA\" \"\")\n                                                                    \"USA\" \"\")\n                                                                  \"USA\" \"\")\n                                                                \"USA\" \"\")\n                                                              \"USA\" \"\")\n                                                            \"USA\" \"\")\n                                                          \"USA\" \"\")\n                                                        \"USA\" \"\")\n                                                      \"USA\" \"\")\n                                                    \"USA\" \"\")\n                                                  \"USA\" \"\")\n                                                \"USA\" \"\")\n                                              \"USA\" \"\")\n                                            \"USA\" \"\")\n                                          \"USA\" \"\")\n                                        \"USA\" \"\")\n                                      \"USA\" \"\")\n                                    \"USA\" \"\")\n                                  \"USA\" \"\")\n                                \"USA\" \"\")\n                              \"USA\" \"\")\n                            \"USA\" \"\")\n                          \"USA\" \"\")\n                        \"USA\" \"\")\n                      \"USA\" \"\")\n                    \"USA\" \"\")\n                  \"USA\" \"\")\n                \"USA\" \"\")\n              \"USA\" \"\")\n            \"USA\" \"\")\n          \"USA\" \"\")\n        \"USA\" \"\")\n      \"USA\" \"\")\n    0\n    (- \n      (str.indexof col2 \",\" 0) \n      (str.indexof col2 \" \" 0)\n    )\n  )\n)",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col2\n                                                                                                                                                \"New York\" \"NY\")\n                                                                                                                                              \"New York\" \"NY\")\n                                                                            \"New York\" \"NY\")\n                                                                          \"New York\" \"NY\")\n                                                                        \"New York\" \"NY\")\n                                                                      \"New York\" \"NY\")\n                                                                    \"New York\" \"NY\")\n                                                                  \"New York\" \"NY\")\n                                                                \"New York\" \"NY\")\n                                                              \"New York\" \"NY\")\n                                                            \"New York\" \"NY\")\n                                                          \"New York\" \"NY\")\n                                                        \"New York\" \"NY\")\n                                                      \"New York\" \"NY\")\n                                                    \"New York\" \"NY\")\n                                                  \"New York\" \"NY\")\n                                                \"New York\" \"NY\")\n                                              \"New York\" \"NY\")\n                                            \"New York\" \"NY\")\n                                          \"New York\" \"NY\")\n                                        \"New York\" \"NY\")\n                                      \"New York\" \"NY\")\n                                    \"New York\" \"NY\")\n                                  \"New York\" \"NY\")\n                                \"New York\" \"NY\")\n                              \"New York\" \"NY\")\n                            \"New York\" \"NY\")\n                          \"New York\" \"NY\")\n                        \"New York\" \"NY\")\n                      \"New York\" \"NY\")\n                    \"New York\" \"NY\")\n                  \"New York\" \"NY\")\n                \"New York\" \"NY\")\n              \"New York\" \"NY\")\n            \"New York\" \"NY\")\n          \"New York\" \"NY\")\n        \"New York\" \"NY\")\n      \"New York\" \"NY\")\n    \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") col2 \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia, PA\" \"Philadelphia, PA, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\") \"Phialdelphia, PA\" \"Phialdelphia, PA, USA\") \"Los Angeles, CA\" \"Los Angeles, CA, USA\") \"Ithaca, NY\" \"Ithaca, NY, USA\") \"College Park, MD\" \"College Park, MD, USA\") \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \" \") \"New York\" \"NY\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.replace (str.replace (str.++ col2 \\\", \\\" col1) \\\"New York\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI, USA\\\")\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \"University\" \"\") \"College Park\" \"\") \"College\" \"\") \"University of\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) (str.substr col1 (+ (str.indexof col1 \",\" 0) 2) (str.len col1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"MI\" \"MI, USA\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia\" \"Philadelphia\") 0 12) 0 (- (str.indexof col2 \"PA\" 0) 2)))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Michigan\" \"MI\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"PA\" \"PA\") \"CA\" \"CA\") \"MD\" \"MD\") \"NY\" \"NY\") \"MI\" \"MI\") \"USA\" \"USA\") 0 27)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Philadelphia\" \"PA\") \"USA\" \"\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 2 (str.indexof col2 \\\",\\\" 0)) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace col1 \"University of \" \"\") 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\" \\\" \\\",\\\") \\\"USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \"College \" \"\") \"Penn \" \"\") \"NYU \" \"\") \"Columbia \" \"\") \"UCLA \" \"\") 0 (- (str.indexof col2 \",\" 0) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"UCLA\" \"Los Angeles\") \"Cornell\" \"Ithaca\") \"Penn\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\") \"University of\" \"\") \"University\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") 0 2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \",\" \",\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", MI\" \", MI, USA\") \", NY\" \", NY, USA\") \"New York\" \"NY\") \"Phialdelphia\" \"PA\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"Philadelphia\" \"PA\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"New York\" \"NY\")))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2) 4)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2) 4)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"College Park\" \"MD\") \"Ann Arbor\" \"MI\") \"Ithaca\" \"NY\") \"Los Angeles\" \"CA\") \"Philadelphia\" \"PA\") \"New York\" \"NY\") \"Philadelphia\" \"PA\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") \"USA\" \"\") 0 (- (str.indexof col2 \",\" 0) (str.indexof col2 \" \" 0))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") col2 \"New York\" \"NY\"))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia, PA\" \"Philadelphia, PA, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"Ithaca\" \"Ithaca\") \"College Park\" \"College Park\") \"Ann Arbor\" \"Ann Arbor\") \"New York\" \"New York\") \"New York\" \"New York\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia, PA, USA\") \"UCLA\" \"Los Angeles, CA, USA\") \"Cornell University\" \"Ithaca, NY, USA\") \"Penn\" \"Philadelphia, PA, USA\") \"University of Maryland College Park\" \"College Park, MD, USA\") \"University of Michigan\" \"Ann Arbor, MI, USA\") \"Columbia University\" \"New York, NY, USA\") \"NYU\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\") \"Phialdelphia, PA\" \"Phialdelphia, PA, USA\") \"Los Angeles, CA\" \"Los Angeles, CA, USA\") \"Ithaca, NY\" \"Ithaca, NY, USA\") \"College Park, MD\" \"College Park, MD, USA\") \"Ann Arbor, MI\" \"Ann Arbor, MI, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \",\" \" \") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.++ col2 \\\", \\\" col1) \\\"New York\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI, USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 2))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \"University\" \"\") \"College Park\" \"\") \"College\" \"\") \"University of\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) (str.substr col1 (+ (str.indexof col1 \",\" 0) 2) (str.len col1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Los Angeles\" \"Los Angeles\") \"MI\" \"MI, USA\")))"
    ],
    "constants": [
      [
        0,
        2,
        "Philadelphia",
        "Phialdelphia",
        12,
        "PA"
      ],
      [
        "",
        "MI",
        "NY",
        "Michigan",
        "University of ",
        "New York"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        "MD",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        27,
        "USA",
        "NY",
        "Ithaca",
        "PA",
        "CA",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        "Philadelphia",
        "USA",
        "NY",
        "PA",
        "CA",
        "New York",
        "Los Angeles"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "NY",
        "New York"
      ],
      [
        "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "",
        0,
        1,
        2,
        ", USA",
        ", ",
        ",",
        "University of "
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \" \" \",\") \"USA\" \"\") \",\" \", USA\")"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "",
        "NY",
        "University ",
        "University of ",
        "New York"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "NY",
        "",
        "New York",
        "USA"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        "",
        ", USA",
        "NY",
        "University of ",
        "New York"
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        0,
        "Penn ",
        2,
        " of ",
        "UCLA ",
        ",",
        "Columbia ",
        "University ",
        "University of ",
        "NYU ",
        "College "
      ],
      [
        "Phialdelphia",
        "Philadelphia",
        ", USA",
        ", "
      ],
      [],
      [
        "",
        "Cornell",
        "College Park",
        "Penn",
        "University of",
        "Ithaca",
        "UCLA",
        "University",
        "Los Angeles"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "NY",
        0,
        2,
        "New York"
      ],
      [
        ", MD",
        "Penn",
        "University of Maryland College Park",
        "CA",
        "PA",
        "MD",
        "Ann Arbor",
        "UCLA",
        "Columbia University",
        ", MD, USA",
        "NYU",
        ", MI",
        ",",
        ", NY, USA",
        ", CA, USA",
        ", PA",
        "New York",
        "Los Angeles",
        "Cornell University",
        ", MI, USA",
        ", NY",
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "College Park",
        "University of Michigan",
        ", CA",
        "Ithaca",
        "NY",
        ", PA, USA",
        "University of Pennsylvania"
      ],
      [
        0,
        1,
        2,
        4,
        ", USA",
        ", ",
        ","
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        0,
        1,
        2,
        4,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        0,
        "MI",
        "Philadelphia",
        " ",
        "USA",
        "University of",
        ",",
        "Ithaca",
        "NY",
        "CA",
        "PA",
        "MD",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        ", USA",
        ", "
      ],
      [
        "NY",
        "New York"
      ],
      [
        "Columbia University",
        "Ann Arbor",
        "New York",
        "Penn",
        "Phialdelphia",
        "Philadelphia",
        "University of Michigan",
        "Ithaca",
        "NY",
        "University of Maryland College Park",
        "NYU",
        "UCLA",
        "College Park",
        "University of Pennsylvania",
        "Los Angeles",
        "Cornell University"
      ],
      [
        "Phialdelphia, PA",
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "Philadelphia, PA, USA",
        "New York"
      ],
      [
        "Philadelphia",
        "Phialdelphia",
        "NY",
        "Ithaca",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "Ithaca, NY",
        "Penn",
        "Ann Arbor, MI, USA",
        "University of Maryland College Park",
        "UCLA",
        "Columbia University",
        "NYU",
        "Phialdelphia, PA",
        "New York, New York",
        "Phialdelphia, PA, USA",
        "College Park, MD",
        "Cornell University",
        "New York, NY, USA",
        "Ann Arbor, MI",
        "Philadelphia, PA, USA",
        "College Park, MD, USA",
        "Ithaca, NY, USA",
        "Los Angeles, CA",
        "University of Michigan",
        "Los Angeles, CA, USA",
        "University of Pennsylvania"
      ],
      [
        0,
        1,
        " ",
        ",",
        "NY",
        "New York"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        "(str.replace (str.replace (str.++ col2 \", \" col1) \"New York\" \"NY\") \"MI\" \"MI, USA\")"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 2))"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ", ",
        ","
      ],
      [
        "",
        "University",
        "University of",
        "University ",
        "College",
        "University of ",
        "College Park"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))"
      ],
      [
        0,
        1,
        2,
        ", USA",
        ","
      ],
      [
        "MI",
        "Philadelphia",
        "Phialdelphia",
        "MI, USA",
        "NY",
        "New York",
        "Los Angeles"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      1,
      "University of Maryland College Park",
      4,
      "(str.replace (str.replace (str.++ col2 \", \" col1) \"New York\" \"NY\") \"MI\" \"MI, USA\")",
      "MI, USA",
      ", MI, USA",
      "Los Angeles, CA",
      12,
      "Phialdelphia",
      "Ithaca",
      "Penn",
      "University of Michigan",
      "New York, New York",
      27,
      "University of ",
      "College",
      ", CA, USA",
      "MD",
      ",",
      "Ithaca, NY, USA",
      "(str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) 2))",
      "Columbia ",
      "(str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))",
      "Philadelphia",
      "Ithaca, NY",
      "(str.replace (str.replace (str.replace col2 col1 \" \" \",\") \"USA\" \"\") \",\" \", USA\")",
      "University ",
      "USA",
      "MI",
      ", ",
      "NYU ",
      "Phialdelphia, PA",
      "College Park, MD, USA",
      "New York",
      "CA",
      "College Park, MD",
      "University",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 2))",
      "UCLA ",
      "Columbia University",
      "University of",
      ", MD",
      " ",
      "Philadelphia, PA, USA",
      " of ",
      "NYU",
      "Ann Arbor, MI",
      "New York, NY, USA",
      "Los Angeles, CA, USA",
      ", PA",
      "Los Angeles",
      "College ",
      ", MD, USA",
      "PA",
      ", NY, USA",
      "College Park",
      "UCLA",
      ", NY",
      ", CA",
      "Ann Arbor, MI, USA",
      "Cornell",
      "Michigan",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      ", PA, USA",
      "Ann Arbor",
      ", MI",
      "University of Pennsylvania",
      "Cornell University",
      "Phialdelphia, PA, USA",
      "NY",
      ", USA",
      "Penn "
    ],
    "time_diff_ms": 731.7570000000001
  },
  "phone-10-long-repeat.sl": {
    "completions": [
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 6 3)\n  \"-\"\n  (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n         (str.substr name 1 2)\n         \" (\"\n         (str.substr name 4 3)\n         \") \"\n         (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n          (str.substr name 0 3)\n          \" (\"\n          (str.substr name 3 3)\n          \") \"\n          (str.substr name 6 3)\n          \"-\"\n          (str.substr name 10 3))",
      "(str.++ \"+\" \"(\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3) \"-\" (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n          (str.substr name 0 3)\n          \" (\"\n          (str.substr name 3 3)\n          \") \"\n          (str.substr name 6 3)\n          \"-\"\n          (str.substr name 10 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.replace (str.replace name \"-\" \") \") \"-\")",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 10 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 10 3)\n         \"-\" \n         (str.substr name 13 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 7 3)\n  \"-\"\n  (str.substr name 11 3)\n  \"-\" \n  (str.substr name 15 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 10 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "\"(str.++ \"+\" (str.at name 1) (str.at name 2) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))\"",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 10 3)\n         \"-\" \n         (str.substr name 13 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 7 3)\n  \"-\"\n  (str.substr name 11 3))",
      "(str.++ \"+\"\n(str.substr name 0 3)\n\" (\"\n(str.substr name 3 3)\n\") \"\n(str.substr name 6 3)\n\"-\"\n(str.substr name 10 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3))",
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 6 3)\n  \"-\"\n  (str.substr name 9 3)\n  )",
      "(str.++ \"+106 (\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" \"(\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.replace (str.replace name \"-\" \") \") \"-\"))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+106 (\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))"
    ],
    "constants": [
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        2,
        3,
        6,
        "-",
        9,
        "+",
        "(",
        ") "
      ],
      [
        1,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        "+106 (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        1,
        2,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        1,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        "-",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        15,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ "
      ],
      [
        "(str.++ "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        1,
        2,
        3,
        4,
        8,
        "-",
        "+106 (",
        ") "
      ],
      [
        0,
        3,
        7,
        "+",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      "(",
      "+",
      " (",
      ") ",
      "+106 (",
      "-",
      "(str.++ "
    ],
    "time_diff_ms": 1689.7640000000001
  },
  "univ_5.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")) \", USA\")",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 100))",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \"New York\" \"NY\") \"USA\" \"\")\n              1\n              (- (str.len (str.replace (str.replace (str.replace col2 col1 \"\") \"New York\" \"NY\") \"USA\" \"\")) 1))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 3 100))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", , USA\" \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col1 \"University of \" \"\")\n                                                                                                                                            \"College Park\" \"CP\")\n                                                                                                                                          \"University\" \"\")\n                                                                                                                                        \"Columbia\" \"\")\n                                                                                                                                      \"Cornell\" \"\")\n                                                                                                                                    \"UCLA\" \"\")\n                                                                                                                                  \"NYU\" \"\")\n                                                                                                                                \"University\" \"\")\n                                                                                                                              \"University\" \"\")\n                                                                                                                            \"University\" \"\")\n                                                                                                                          \"University\" \"\")\n                                                                                                                        \"University\" \"\")\n                                                                                                                      \"University\" \"\")\n                                                                                                                    \"University\" \"\")\n                                                                                                                  \"University\" \"\")\n                                                                                                                \"University\" \"\")\n                                                                                                              \"University\" \"\")\n                                                                                                            \"University\" \"\")\n                                                                                                          \"University\" \"\")\n                                                                                                        \"University\" \"\")\n                                                                                                      \"University\" \"\")\n                                                                                                    \"University\" \"\")\n                                                                                                  \"University\" \"\")\n                                                                                                \"University\" \"\")\n                                                                                              \"University\" \"\")\n                                                                                            \"University\" \"\")\n                                                                                          \"University\" \"\")\n                                                                                        \"University\" \"\")\n                                                                                      \"University\" \"\")\n                                                                                    \"University\" \"\")\n                                                                                  \"University\" \"\")\n                                                                                \"University\" \"\")\n                                                                              \"University\" \"\")\n                                                                            \"University\" \"\")\n                                                                          \"University\" \"\")\n                                                                        \"University\" \"\")\n                                                                      \"University\" \"\")\n                                                                    \"University\" \"\")\n                                                                  \"University\" \"\")\n                                                                \"University\" \"\")\n                                                              \"University\" \"\")\n                                                            \"University\" \"\")\n                                                          \"University\" \"\")\n                                                        \"University\" \"\")\n                                                      \"University\" \"\")\n                                                    \"University\" \"\")\n                                                  \"University\" \"\")\n                                                \"University\" \"\")\n                                              \"University\" \"\")\n                                            \"University\" \"\")\n                                          \"University\" \"\")\n                                        \"University\" \"\")\n                                      \"University\" \"\")\n                                    \"University\" \"\")\n                                  \"University\" \"\")\n                                \"University\" \"\")\n                              \"University\" \"\")\n                            \"University\" \"\")\n                          \"University\" \"\")\n                        \"University\" \"\")\n                      \"University\" \"\")\n                    \"University\" \"\")\n                  \"University\" \"\")\n                \"University\" \"\")\n              \"University\" \"\")\n            \"University\" \"\")\n          \"University\" \"\")\n        \"University\" \"\")\n      \"University\" \"\")\n    \"University\" \"\")\n  \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"New York\" \"NY\" \"Los Angeles\" \"CA\" \"Philadelphia\" \"PA\" \"Ithaca\" \"NY\" \"College Park\" \"MD\" \"Ann Arbor\" \"MI\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "\"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") 0 (- (str.len col2) 5)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \", \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 2 100))",
      "\"(str.replace col1 col2 \"\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \", \" 0)) (str.len col1) (str.len (str.replace (str.at col2 (+ (str.indexof col2 \", \" 0) 2)) \" \" \"\")) 3))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 0 (- (str.len col2) 5)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", \\\" \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "\"(str.substr col2 2 (- (str.indexof col2 \\\",\\\") 2))\"",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 1)))",
      "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 2 (- (str.len col2) 2))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \"New York\" \"NY\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 0 (+ 2 (str.indexof col2 \",\" 0))))",
      "\"(str.++ (str.substr col2 2 100) (str.substr col1 2 100) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 3 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \")))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace col2 \", USA\" \"\") \n        \"New York\" \"NY\") \n      \"New York\" \"NY\") \n    2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \"\") 0 (- (str.len (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \")) 4)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 2 100))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of Pennsylvania\" \"Phialdelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 3 100))",
      "\"(str.++ col2 (str.at col1 0) (str.at col1 1) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \", \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 100))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \"New York\" \"NY\") \"USA\" \"\") 1 (- (str.len (str.replace (str.replace (str.replace col2 col1 \"\") \"New York\" \"NY\") \"USA\" \"\")) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 3 100))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", , USA\" \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"College Park\" \"CP\") \"University\" \"\") \"Columbia\" \"\") \"Cornell\" \"\") \"UCLA\" \"\") \"NYU\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \", USA\"))))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"New York\" \"NY\" \"Los Angeles\" \"CA\" \"Philadelphia\" \"PA\" \"Ithaca\" \"NY\" \"College Park\" \"MD\" \"Ann Arbor\" \"MI\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") 0 (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \", \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 2 100))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 2 100))",
      "(define-fun f (col1 String col2 String) String \"(str.replace col1 col2 \")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) 0 (- (str.indexof (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \", \" 0)) (str.len col1) (str.len (str.replace (str.at col2 (+ (str.indexof col2 \", \" 0) 2)) \" \" \"\")) 3)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", \\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 2 (- (str.indexof col2 \\\",\\\") 2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\")) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 2 (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr col2 0 (- (str.indexof col2 \", \" 0) 2)) \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (+ 2 (str.indexof col2 \",\" 0))))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 2 100) (str.substr col1 2 100) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 3 100))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \")))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \"New York\" \"NY\") \"New York\" \"NY\") 2 100))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \"\") 0 (- (str.len (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \")) 4)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 2 100))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of Pennsylvania\" \"Phialdelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\")))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 3 100))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 (str.at col1 0) (str.at col1 1) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \", \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))"
    ],
    "constants": [
      [
        0,
        ","
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        100
      ],
      [
        2,
        ","
      ],
      [
        "",
        "University of "
      ],
      [
        0,
        2,
        ", "
      ],
      [
        "",
        1,
        "USA",
        "NY",
        "New York"
      ],
      [
        3,
        100
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \",\")"
      ],
      [
        "",
        ", USA",
        "NY",
        ", , USA",
        "University of ",
        "New York"
      ],
      [
        "",
        "Cornell",
        ", USA",
        "College Park",
        "CP",
        "University of ",
        "UCLA",
        "University",
        "Columbia",
        "NYU"
      ],
      [
        "MD",
        ", USA",
        "MI",
        ", ",
        "Philadelphia",
        "NY",
        "Ithaca",
        "PA",
        "CA",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles"
      ],
      [
        "",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))"
      ],
      [
        "",
        ",",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "",
        0,
        5,
        "NY",
        "University ",
        "University of ",
        "New York"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", "
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        2,
        ","
      ],
      [
        2,
        100
      ],
      [
        2,
        100
      ],
      [
        "(str.replace col1 col2 "
      ],
      [
        0,
        "",
        2,
        3,
        ", ",
        " "
      ],
      [
        0,
        5
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", \" \", USA\")"
      ],
      [
        0,
        1,
        ","
      ],
      [
        "(str.substr col2 2 (- (str.indexof col2 \",\") 2))"
      ],
      [
        2,
        ", "
      ],
      [
        0,
        1,
        ", USA",
        ", ",
        "NY",
        "New York"
      ],
      [
        2,
        ", USA",
        "Philadelphia",
        "Phialdelphia",
        ", "
      ],
      [
        0,
        2,
        ", ",
        "NY",
        "New York"
      ],
      [
        "(str.substr col2 0 (- (str.indexof col2 \",\") 1))"
      ],
      [
        0,
        2,
        ","
      ],
      [
        "(str.++ (str.substr col2 2 100) (str.substr col1 2 100) \", USA\")"
      ],
      [
        0,
        2,
        ","
      ],
      [
        3,
        100
      ],
      [
        "",
        " , ",
        ", ",
        "NY",
        "University of ",
        "New York"
      ],
      [
        "",
        2,
        100,
        ", USA",
        "NY",
        "New York"
      ],
      [
        "",
        " , ",
        0,
        4,
        "NY",
        "University of ",
        "New York"
      ],
      [
        0,
        1,
        ", "
      ],
      [
        2,
        100
      ],
      [
        "University of Pennsylvania",
        "Columbia University",
        "UCLA",
        "Penn",
        "Phialdelphia",
        "Philadelphia",
        "University of Michigan",
        "NY",
        "Ithaca",
        "University of Maryland College Park",
        "Ann Arbor",
        "College Park",
        "New York",
        "Los Angeles",
        "Cornell University"
      ],
      [
        3,
        100
      ],
      [
        "(str.++ col2 (str.at col1 0) (str.at col1 1) \", USA\")"
      ],
      [
        "NY",
        "New York",
        ", USA",
        ", "
      ],
      [
        "",
        ", "
      ],
      [
        "",
        ",",
        "NY",
        "University of ",
        "New York"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      1,
      3,
      5,
      4,
      "University of Maryland College Park",
      "(str.++ col2 (str.at col1 0) (str.at col1 1) \", USA\")",
      "CP",
      "(str.++ (str.substr col2 2 100) (str.substr col1 2 100) \", USA\")",
      "Phialdelphia",
      "Ithaca",
      "Penn",
      "University of Michigan",
      "(str.substr col2 2 (- (str.indexof col2 \",\") 2))",
      "University of ",
      ",",
      "MD",
      ", , USA",
      "Columbia",
      "Philadelphia",
      "University ",
      "USA",
      ", ",
      "MI",
      "New York",
      "CA",
      "University",
      "Columbia University",
      " ",
      "(str.replace (str.replace (str.replace col2 col1 \"\") col1 \"\") \", \" \", USA\")",
      "NYU",
      "(str.replace (str.replace (str.replace col2 col1 \"\") \", USA\" \"\") \",\" \",\")",
      "Los Angeles",
      " , ",
      "PA",
      "College Park",
      100,
      "UCLA",
      "(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))",
      "Cornell",
      "(str.substr col2 0 (- (str.indexof col2 \",\") 1))",
      "Ann Arbor",
      "(str.replace col1 col2 ",
      "University of Pennsylvania",
      "Cornell University",
      "NY",
      ", USA"
    ],
    "time_diff_ms": 1413.942
  },
  "stackoverflow1.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\"))))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\"))))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\") 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))"
    ],
    "constants": [
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        " "
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        " Inc."
      ],
      [
        0,
        " Inc"
      ],
      [
        0,
        " Inc."
      ]
    ],
    "all_constants": [
      0,
      1,
      " Inc.",
      " ",
      " Inc"
    ],
    "time_diff_ms": 961.3800000000001
  },
  "exceljet1.sl": {
    "completions": [
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\"))) )",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))) 0 (str.len (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (str.indexof _arg_1 \"_\" (+ (str.len _arg_0) 2)) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))) 0 (str.len (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (str.indexof _arg_1 \"_\" (+ (str.len _arg_0) 2)) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))"
    ],
    "constants": [
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        1,
        "_"
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        2,
        "_"
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "_",
        "."
      ],
      [
        1,
        "."
      ]
    ],
    "all_constants": [
      ".",
      1,
      2,
      0,
      "_"
    ],
    "time_diff_ms": 1188.5140000000001
  },
  "initials-long-repeat.sl": {
    "completions": [
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \".\") 1 2))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 7 100) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ 1 (str.indexof name \" \"))) 0 1) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\")",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \".\") 1 2)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 7 100) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ 1 (str.indexof name \" \"))) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        100,
        7,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      "",
      2,
      100,
      7,
      " "
    ],
    "time_diff_ms": 1474.045
  },
  "find-nth-occurrence-of-character.sl": {
    "completions": [
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (- _arg_1 1)) 1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(str.indexof (str.replace (str.replace _arg_0 \"_\" \"\") \", and \" \"\") \"_\" _arg_1)",
      "(str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" _arg_1))",
      "(str.indexof _arg_0 \", and \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \"_\") + 1) + 1) 1)",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(str.indexof _arg_0 \", \" _arg_1))",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(str.indexof _arg_0 \", \" (- _arg_1 1))",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" 0) 1)",
      "(+ (str.indexof _arg_0 \",\" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" 0) 6)",
      "(str.indexof _arg_0 \"_\" _arg_1)",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(+ (str.indexof _arg_0 \", \" 0) (* _arg_1 6))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(str.indexof _arg_0 \"_\" _arg_1)",
      "(str.indexof _arg_0 \",\" (- (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" 0) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(+ (str.indexof _arg_0 \", \" (ite (= _arg_1 1) 0 (str.indexof _arg_0 \", \" (ite (= _arg_1 2) 0 (str.indexof _arg_0 \", \" 0)))))) 11)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10)",
      "(str.indexof _arg_0 \",\" _arg_1))",
      "(str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" _arg_1) _arg_1) _arg_1))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (- _arg_1 1)) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \", \" (- _arg_1 1)) 2) (str.len _arg_0)) \", \"))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(str.indexof _arg_0 \", \" (- _arg_1 1) 0)",
      "(str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (+ _arg_1 1)) (+ _arg_1 1)) (+ _arg_1 1))",
      "(str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2)))",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 2)",
      "(+ (str.indexof _arg_0 \", \" (- _arg_1 1) 0) 1)",
      "(str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" _arg_1)))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (- _arg_1 1)) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof (str.replace (str.replace _arg_0 \"_\" \"\") \", and \" \"\") \"_\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", and \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \"_\") + 1) + 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (- _arg_1 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 6))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) (* _arg_1 6)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" (- (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (ite (= _arg_1 1) 0 (str.indexof _arg_0 \", \" (ite (= _arg_1 2) 0 (str.indexof _arg_0 \", \" 0)))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" _arg_1) _arg_1) _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (- _arg_1 1)) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \", \" (- _arg_1 1)) 2) (str.len _arg_0)) \", \")))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (- _arg_1 1) 0))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (+ _arg_1 1)) (+ _arg_1 1)) (+ _arg_1 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (* (- _arg_1 1) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 2))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (- _arg_1 1) 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" _arg_1))))))"
    ],
    "constants": [
      [
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        -1,
        ", "
      ],
      [
        "",
        "_",
        ", and "
      ],
      [
        ", "
      ],
      [
        ", and "
      ],
      [
        1,
        "_",
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        1,
        -1,
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        ","
      ],
      [
        0,
        6,
        ", "
      ],
      [
        "_"
      ],
      [
        1,
        2,
        ", "
      ],
      [
        0,
        6,
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        "_"
      ],
      [
        1,
        ","
      ],
      [
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        1,
        -1,
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        0,
        1,
        2,
        ", "
      ],
      [
        1,
        10,
        -1,
        ", "
      ],
      [
        ","
      ],
      [
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        ", "
      ],
      [
        1,
        2,
        ", "
      ],
      [
        ", "
      ],
      [
        1,
        2,
        -1,
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        ", "
      ]
    ],
    "all_constants": [
      "",
      1,
      2,
      0,
      ",",
      6,
      ", and ",
      10,
      ", ",
      "_",
      -1
    ],
    "time_diff_ms": 1417.628
  },
  "extract-word-containing-specific-text.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.len \" \") (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \") 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 1 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))) ) )",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.len \" \") (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 1 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1777.1180000000002
  },
  "extract-nth-word-from-text-string.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 _arg_1)",
      "(str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (str.len _arg_0)) \" \" 0))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (-\n  (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof\n  _arg_0 \" \" 0) 1))))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 _arg_1)",
      "(str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (str.len _arg_0)) \" \" 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))",
      "(str.++ \"anything\" \" \")",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 1))",
      "(str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)) \" \" \"\")",
      "(str.at _arg_0 _arg_1)",
      "(str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.len _arg_0)) \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1)))",
      "(str.++ \"anything\" \" \")",
      "(str.++ \"anything\" \" \")",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (-\n  (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))\n  (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)))",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.++ \"anything\" \"can\" \"do\" \"everything\")",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \".\")))))",
      "(str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" _arg_1))))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 2)))",
      "(str.++ \"anything\" \" you\" \" can\" \" do\")",
      "(str.substr _arg_0 \n            (+ (str.indexof _arg_0 \" \" 0) 1) \n            (-\n                (str.indexof \n                    (str.substr _arg_0 \n                        (+ (str.indexof _arg_0 \" \" 0) 1) \n                        (str.len _arg_0)) \n                    \" \" 0) \n                (+ (str.indexof _arg_0 \" \" 0) 1)\n            )\n)",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) (str.indexof _arg_0 \" \" _arg_1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 2)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 0) 0) 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 0) 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (str.len _arg_0)) \" \" 0)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" _arg_1) (str.len _arg_0)) \" \" 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \" \"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)) \" \" \"\"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 0))) (str.len _arg_0)) \" \" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \" \"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \" \"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \"can\" \"do\" \"everything\"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \".\"))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ (str.at _arg_0 (str.indexof _arg_0 \" \" _arg_1) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" _arg_1)))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.++ \"anything\" \" you\" \" can\" \" do\"))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) (str.indexof _arg_0 \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 2))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 0) 0) 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 0) 0)))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        "anything"
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        ""
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        "anything"
      ],
      [
        " ",
        "anything"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "anything",
        "everything",
        "do",
        "can"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "."
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        2
      ],
      [
        "anything",
        " do",
        " you",
        " can"
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        2
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "everything",
      ".",
      2,
      " you",
      "anything",
      " ",
      "can",
      "do",
      " can",
      " do"
    ],
    "time_diff_ms": 1907.275
  }
}