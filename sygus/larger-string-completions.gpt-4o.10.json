{
  "exceljet2modified.sl": {
    "completions": [
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 572.467,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \".\"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))"
    ],
    "constants": [
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ]
    ],
    "all_constants": [
      ".",
      1
    ]
  },
  "31753108modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(str.substr _arg_0 14 (- (str.len _arg_0) 22))\n```",
      "```lisp\n(str.substr _arg_0 15 (- (str.indexof _arg_0 \" \" 15) 15))\n```"
    ],
    "time_diff_ms": 846.864,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.len _arg_0) 22))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 15 (- (str.indexof _arg_0 \" \" 15) 15))))"
    ],
    "constants": [
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        14,
        22
      ],
      [
        " ",
        14
      ],
      [
        9,
        14
      ],
      [
        14,
        22
      ],
      [
        " ",
        15
      ]
    ],
    "all_constants": [
      " ",
      9,
      14,
      15,
      22
    ]
  },
  "find-nth-occurrence-of-charactermodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= _arg_1 1) pos\n      (let ((next (str.indexof _arg_0 \"_\" (+ pos 1))))\n        (ite (= _arg_1 2) next\n          (str.indexof _arg_0 \"_\" (+ next 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int \n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1) \n        pos \n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((helper (lambda ((s String) (c Int) (n Int) (pos Int)) Int\n                  (ite (= n 0) pos\n                      (let ((next-pos (str.indexof s \"_\" pos)))\n                        (ite (= next-pos -1) -1\n                             (helper s c (- n 1) (+ next-pos 1))))))))\n    (helper _arg_0 _arg_1 _arg_1 0)))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) Int\n  (let ((helper (lambda ((str String) (char String) (count Int) (idx Int)) Int\n                   (ite (= count n)\n                        idx\n                        (let ((next_idx (str.indexof str char (+ idx 1))))\n                          (ite (= next_idx -1)\n                               -1\n                               (helper str char (+ count 1) next_idx)))))))\n    (helper s \",\" 0 -1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n          (if (= next -1)\n              -1\n              (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (<= _arg_1 1)\n      pos\n      (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))\n        (if (= next -1) -1 (+ pos 1 next))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n      pos\n      (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1)))))\n```",
      "```lisp\n  (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((find-nth (lambda (s n i count)\n                    (if (or (= i (str.len s)) (= count n))\n                        i\n                        (find-nth s n (+ i 1) (if (= (str.at s i) \",\") (+ count 1) count))))))\n    (find-nth _arg_0 _arg_1 0 0)))\n```"
    ],
    "time_diff_ms": 529.969,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= _arg_1 1) pos (let ((next (str.indexof _arg_0 \"_\" (+ pos 1)))) (ite (= _arg_1 2) next (str.indexof _arg_0 \"_\" (+ next 1))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((helper (lambda ((s String) (c Int) (n Int) (pos Int)) Int (ite (= n 0) pos (let ((next-pos (str.indexof s \"_\" pos))) (ite (= next-pos -1) -1 (helper s c (- n 1) (+ next-pos 1)))))))) (helper _arg_0 _arg_1 _arg_1 0))))",
      "((define-fun f ((s String) (n Int)) Int (let ((helper (lambda ((str String) (char String) (count Int) (idx Int)) Int (ite (= count n) idx (let ((next_idx (str.indexof str char (+ idx 1)))) (ite (= next_idx -1) -1 (helper str char (+ count 1) next_idx))))))) (helper s \",\" 0 -1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (<= _arg_1 1) pos (let ((next (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))) (if (= next -1) -1 (+ pos 1 next)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) pos 1)) (- _arg_1 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" (ite (= _arg_1 1) 0 (+ 1 (f (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) (- _arg_1 1)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \"_\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((find-nth (lambda (s n i count) (if (or (= i (str.len s)) (= count n)) i (find-nth s n (+ i 1) (if (= (str.at s i) \",\") (+ count 1) count)))))) (find-nth _arg_0 _arg_1 0 0))))"
    ],
    "constants": [
      [
        0,
        1,
        2,
        "_"
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        ",",
        1,
        -1,
        0
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        "_",
        -1
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "_",
      ",",
      -1
    ]
  },
  "clean-and-reformat-telephone-numbersmodified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")\n```"
    ],
    "time_diff_ms": 913.992,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \")\" \"\") \"(\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \" \" \"\")))"
    ],
    "constants": [
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "(",
        "-",
        ")"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "(",
        "-",
        ")"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "(",
        "-",
        ")"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "(",
      "-",
      ".",
      ")"
    ]
  },
  "17212077modified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```"
    ],
    "time_diff_ms": 874.103,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))"
    ],
    "constants": [
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ]
    ],
    "all_constants": [
      0,
      2,
      4,
      5,
      6,
      "/"
    ]
  },
  "11604909modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 3 (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0))))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)) \" \" 0))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 \n    (str.indexof _arg_0 \" \" 0) \n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 1)))\n```",
      "```s-expression\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) 3)\n```"
    ],
    "time_diff_ms": 91.196,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (+ 3 (str.indexof _arg_0 \".\" (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) \" \" 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 4)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)) 3)))"
    ],
    "constants": [
      [
        0,
        " ",
        3,
        "."
      ],
      [
        0,
        " ",
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        4
      ],
      [
        0,
        " ",
        4
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        3
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      3,
      4,
      "."
    ]
  },
  "stackoverflow4modified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \"))\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")\n```"
    ],
    "time_diff_ms": 823.164,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \" \")))"
    ],
    "constants": [
      [
        ">",
        " ",
        "<"
      ],
      [
        " ",
        "<",
        ","
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        " ",
        "<",
        ","
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        " ",
        "<",
        ","
      ],
      [
        ">",
        " ",
        "<"
      ],
      [
        ">",
        " ",
        "<"
      ]
    ],
    "all_constants": [
      "",
      " ",
      ">",
      ",",
      "<"
    ]
  },
  "remove-text-by-positionmodified.sl": {
    "completions": [
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```"
    ],
    "time_diff_ms": 992.935,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))"
    ],
    "constants": [
      [
        12
      ],
      [
        0,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ]
    ],
    "all_constants": [
      0,
      "/",
      12
    ]
  },
  "44789427modified.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n      (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n      (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (if (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1)))))\n```"
    ],
    "time_diff_ms": 826.904,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (if (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "-"
    ]
  },
  "stackoverflow11modified.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 296.944,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"PAX\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))"
    ],
    "constants": [
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ]
    ],
    "all_constants": [
      "PAX",
      0
    ]
  },
  "stackoverflow3modified.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (ite (= lastDigitPos -1)\n         \"\"\n         (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((s String)) String\n  (let ((i (str.indexof s \" \" (- (str.len s) 1))))\n    (ite (= i -1) \"\" (str.substr s (+ i 1) (- (str.len s) (+ i 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit -1)\n        \"\"\n        (str.substr _arg_0 (+ last-digit 1) (- (str.len _arg_0) (+ last-digit 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0)))\n    (if (= last-digit-pos -1)\n      \"\"\n      (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))\n```"
    ],
    "time_diff_ms": 916.947,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (ite (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((s String)) String (let ((i (str.indexof s \" \" (- (str.len s) 1)))) (ite (= i -1) \"\" (str.substr s (+ i 1) (- (str.len s) (+ i 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit (str.indexof _arg_0 \"9\" 0))) (if (= last-digit -1) \"\" (str.substr _arg_0 (+ last-digit 1) (- (str.len _arg_0) (+ last-digit 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-digit-pos (str.indexof _arg_0 \"9\" 0))) (if (= last-digit-pos -1) \"\" (str.substr _arg_0 (+ last-digit-pos 1) (- (str.len _arg_0) (+ last-digit-pos 1)))))))"
    ],
    "constants": [
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        "9"
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        1,
        " "
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      " ",
      "9",
      -1
    ]
  },
  "initials-longmodified.sl": {
    "completions": [
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.++ (str.substr name 0 1) \".\") \n          (str.++ (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\")))\n```"
    ],
    "time_diff_ms": 369.752,
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) 0 1) \".\"))))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "phone-7modified.sl": {
    "completions": [
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```"
    ],
    "time_diff_ms": 651.55,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5
    ]
  },
  "43606446modified.sl": {
    "completions": [
      "```scheme\n  (str.substr _arg_0 12 3)\n```",
      "```(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))\n```",
      "```scheme\n(str.substr _arg_0 15 3)\n```",
      "```scheme\n(str.substr _arg_0 12 3)\n```",
      "```s-expression\n(str.substr _arg_0 13 3)\n```",
      "```scheme\n(str.substr _arg_0 15 3)\n```",
      "```(str.substr _arg_0 12 3)```",
      "```scheme\n(str.substr _arg_0 16 3)\n```",
      "```lisp\n(str.substr _arg_0 13 3)\n```"
    ],
    "time_diff_ms": 94.823,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 15 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 15 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 16 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 3)))"
    ],
    "constants": [
      [
        3,
        12
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        3,
        15
      ],
      [
        3,
        12
      ],
      [
        3,
        13
      ],
      [
        3,
        15
      ],
      [
        3,
        12
      ],
      [
        16,
        3
      ],
      [
        3,
        13
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      ">",
      12,
      13,
      15,
      16,
      ","
    ]
  },
  "extract-nth-word-from-text-stringmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (str.indexof words \" \" (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (< _arg_1 (str.len words))\n         (str.at words _arg_1)\n         \"\")))\n```",
      "```lisp\n  (str.at (str.split _arg_0 \" \") (- _arg_1 1))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.at words 0) \" \" (str.at words 1) \" \" (str.at words 2) \" \" (str.at words 3) \" \" (str.at words 4) \" \" (str.at words 5) \" \" (str.at words 6) \" \" (str.at words 7) \" \" (str.at words 8) \" \" (str.at words 9)) _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```"
    ],
    "time_diff_ms": 186.705,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (str.indexof words \" \" (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (< _arg_1 (str.len words)) (str.at words _arg_1) \"\"))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.split _arg_0 \" \") (- _arg_1 1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.at words 0) \" \" (str.at words 1) \" \" (str.at words 2) \" \" (str.at words 3) \" \" (str.at words 4) \" \" (str.at words 5) \" \" (str.at words 6) \" \" (str.at words 7) \" \" (str.at words 8) \" \" (str.at words 9)) _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      2,
      0,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]
  },
  "remove-leading-and-trailing-spaces-from-textmodified.sl": {
    "completions": [
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n  (str.trim _arg_0)\n)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```scheme\n(str.trim _arg_0)\n```"
    ],
    "time_diff_ms": 962.541,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))"
    ],
    "constants": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ],
    "all_constants": []
  },
  "phone-5-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 1))\n```"
    ],
    "time_diff_ms": 658.16,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "count-total-words-in-a-cellmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n  (str.len (str.split _arg_0 \" \"))\n)\n```"
    ],
    "time_diff_ms": 744.041,
    "solutions": [
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \"))))"
    ],
    "constants": [
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " "
      ]
    ],
    "all_constants": [
      "",
      " "
    ]
  },
  "stackoverflow8modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" -1) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))\n```"
    ],
    "time_diff_ms": 178.217,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" -1) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" 0))))))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/n",
        -1
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "/n",
      -1
    ]
  },
  "strip-numeric-characters-from-cellmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" (str.replace _arg_0 \"9\" \"\")))))))))))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\")))))))))))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")\n```",
      "```s-expression\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 0 1) (ite (str.contains \"0123456789\" (str.substr _arg_0 0 1)) \"\" (str.substr _arg_0 0 1)))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\")))))))\n```"
    ],
    "time_diff_ms": 843.921,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" (str.replace _arg_0 \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" (str.replace \"2\" (str.replace \"3\" (str.replace \"4\" (str.replace \"5\" (str.replace \"6\" (str.replace \"7\" (str.replace \"8\" (str.replace \"9\" \"\"))))))))))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"0\" (str.++ \"1\" (str.++ \"2\" (str.++ \"3\" (str.++ \"4\" (str.++ \"5\" (str.++ \"6\" (str.++ \"7\" (str.++ \"8\" \"9\"))))))))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 1) (ite (str.contains \"0123456789\" (str.substr _arg_0 0 1)) \"\" (str.substr _arg_0 0 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace \"1\" \"2\" (str.replace \"3\" \"4\" (str.replace \"5\" \"6\" (str.replace \"7\" \"8\" (str.replace \"9\" \"\"))))))))"
    ],
    "constants": [
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        0,
        1,
        "",
        "0123456789"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ]
    ],
    "all_constants": [
      "",
      0,
      "3",
      "0",
      "7",
      "4",
      1,
      "0123456789",
      "5",
      "6",
      "9",
      "1",
      "8",
      "2"
    ]
  },
  "phone-9modified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s\n(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```"
    ],
    "time_diff_ms": 791.86,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      null,
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "-",
      ".",
      "+"
    ]
  },
  "initialsmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```"
    ],
    "time_diff_ms": 421.303,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 1) \".\") (str.++ (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "phone-10-long-repeatmodified.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 223.327,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      "(",
      10,
      "-",
      ") "
    ]
  },
  "39060015modified.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \"/delete words in the area /\")\n     (str.replace _arg_0 \"/delete words in the area /\" \"\")\n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1)))) \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"/\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" 1) (str.indexof _arg_0 \"/\" 0) 1)) \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"/delete words in the area /\" \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"/\")\n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))\n             (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 + 1)) (str.len _arg_0)))\n     _arg_0)\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"/keep\") (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/keep\" 0)) \"\") \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 6)) \"\"))\n```"
    ],
    "time_diff_ms": 989.954,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/delete words in the area /\") (str.replace _arg_0 \"/delete words in the area /\" \"\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (+ 1 (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 1)) (str.indexof _arg_0 \"/\" 1)))) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\") (- (str.indexof _arg_0 \"/\" 1) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 + 1)) (str.len _arg_0))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/keep\") (str.replace _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \"/keep\" 0)) \"\") \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/delete\" 0) (+ (str.indexof _arg_0 \"/keep\" 0) 6)) \"\")))"
    ],
    "constants": [
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        1,
        "/"
      ],
      [
        "",
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "",
        "/keep"
      ],
      [
        0,
        "",
        6,
        "/delete",
        "/keep"
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      6,
      "/delete words in the area /",
      "/delete",
      "/",
      "/keep"
    ]
  },
  "phone-7-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```s-expression\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```"
    ],
    "time_diff_ms": 842.15,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      8,
      3,
      5
    ]
  },
  "stackoverflow6modified.sl": {
    "completions": [
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"= \")) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.indexof _arg_0 \" -\" 0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"= \" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"= \" 0) 2))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))\n```"
    ],
    "time_diff_ms": 225.534,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"= \")) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.indexof _arg_0 \" -\" 0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"= \" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"= \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"= \" 0) 2))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"= \" 0) 2)))))"
    ],
    "constants": [
      [
        1,
        "= "
      ],
      [
        0,
        " -",
        2,
        "= "
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        2,
        "= "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      " -",
      "= ",
      "="
    ]
  },
  "strip-non-numeric-charactersmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"0\") \"1\" \"1\") \"2\" \"2\") \"3\" \"3\") \"4\" \"4\") \"5\" \"5\") \"6\" \"6\") \"7\" \"7\") \"8\" \"8\") \"9\" \"9\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") \"3\" \"\") \"4\" \"\") \"5\" \"\") \"6\" \"\") \"7\" \"\") \"8\" \"\") \"9\" \"\") \" \" \"\") \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\"",
      "```lisp\n(str.replace _arg_0 (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\")\n```",
      "```lisp\n  (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \" \" \"\") \",\" \"\") \".\" \"\") \"-\" \"\") \"/\" \"\") \":\" \"\") \";\" \"\") \"=\" \"\") \"+\" \"\") \"(\" \"\") \")\" \"\") \"%\" \"\") \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\")"
    ],
    "time_diff_ms": 478.017,
    "solutions": [
      null,
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"0\" \"0\") \"1\" \"1\") \"2\" \"2\") \"3\" \"3\") \"4\" \"4\") \"5\" \"5\") \"6\" \"6\") \"7\" \"7\") \"8\" \"8\") \"9\" \"9\"))",
      null,
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"0\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\")))",
      null
    ],
    "constants": [
      null,
      null,
      null,
      [
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      null,
      null,
      [
        "",
        "d",
        "g",
        "e",
        "f",
        "a",
        "b",
        "c"
      ],
      [
        "",
        "0"
      ],
      [
        "",
        "d",
        "h",
        "g",
        "e",
        "f",
        "i",
        "a",
        "b",
        "c"
      ],
      null
    ],
    "all_constants": [
      "",
      "d",
      "0",
      "5",
      "6",
      "c",
      "3",
      "f",
      "b",
      "h",
      "7",
      "a",
      "1",
      "2",
      "4",
      "g",
      "e",
      "i",
      "9",
      "8"
    ]
  },
  "stackoverflow1modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n  (str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```"
    ],
    "time_diff_ms": 891.247,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \", LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))"
    ],
    "constants": [
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        ", LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ]
    ],
    "all_constants": [
      "",
      ", LLC",
      " Inc.",
      " Inc"
    ]
  },
  "get-last-wordmodified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-space (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-space 1) (- (str.len _arg_0) (+ last-space 1)))))\n```",
      "```scheme\n(str.at _arg_0 (- (str.len _arg_0) (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1)))))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.at _arg_0 (- (str.len _arg_0) 1))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))\n```"
    ],
    "time_diff_ms": 336.567,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.lastindexof _arg_0 \" \") 1) (- (str.len _arg_0) (+ (str.lastindexof _arg_0 \" \") 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-space (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-space 1) (- (str.len _arg_0) (+ last-space 1))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1)))))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \" \")) (- (str.len _arg_0) (+ 1 (str.lastindexof _arg_0 \" \"))))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        "_"
      ],
      [
        1
      ],
      [
        1
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      1,
      " ",
      "_"
    ]
  },
  "phone-5modified.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```",
      "```s-expression\n(str.substr name 1 2)\n```",
      "```lisp\n(str.substr name 1 2)\n```"
    ],
    "time_diff_ms": 517.523,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))",
      "((define-fun f (name String) String (str.substr name 1 2)))"
    ],
    "constants": [
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ]
    ],
    "all_constants": [
      1,
      2
    ]
  },
  "phone-6-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 505.627,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5,
      6
    ]
  },
  "get-last-line-in-cellmodified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" -1) 3))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 3))))\n```",
      "```lisp\n(str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 736.217,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" -1) 3) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" -1) 3))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" -1)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/n\" -1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 2)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 3)) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 3))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.lastindexof _arg_0 \"/n\") (str.len _arg_0))))"
    ],
    "constants": [
      [
        1,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        0,
        "/n"
      ],
      [
        3,
        "/n",
        -1
      ],
      [
        1,
        "/n",
        -1
      ],
      [
        0,
        "/n"
      ],
      [
        2,
        "/n"
      ],
      [
        3,
        "/n"
      ],
      [
        "/n"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      "/n",
      -1
    ]
  },
  "phone-9-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```smt\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```"
    ],
    "time_diff_ms": 16.73,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))"
    ],
    "constants": [
      [
        "",
        "+",
        "-",
        "."
      ],
      null,
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        "",
        1,
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        1,
        " ",
        "-",
        "."
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      "-",
      ".",
      "+"
    ]
  },
  "38871714modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```"
    ],
    "time_diff_ms": 631.18,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      "<"
    ]
  },
  "phone-5-shortmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 898.751,
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "initials_smallmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\"))\n```",
      "```lisp\n(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```"
    ],
    "time_diff_ms": 90.674,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "get-domain-name-from-urlmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 end)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \"/\" 8)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```"
    ],
    "time_diff_ms": 127.072,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))) \"/\")))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 end))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 8))) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \"/\" 8))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))"
    ],
    "constants": [
      [
        8,
        0,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      8,
      "/",
      -1
    ]
  },
  "get-middle-name-from-full-namemodified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ 1 start) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 1)\n        \"\"\n        (str.++ (str.at parts 1) (if (= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (>= (str.len (str.at parts 1)) 1)\n        (str.at parts 1)\n        \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= start -1) \"\"\n         (ite (= end -1) \"\"\n              (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((names (str.split _arg_0 \" \")))\n    (if (> (str.len (str.at _arg_0 1)) 0)\n        (str.substr _arg_0 \n                    (+ (str.indexof _arg_0 \" \" 0) 1) \n                    (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) \n                       (+ (str.indexof _arg_0 \" \" 0) 1)))\n        \"\")))\n```",
      "```lisp\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (if (or (= start -1) (= end -1))\n        \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))\n```"
    ],
    "time_diff_ms": 96.85,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ 1 start) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 1) \"\" (str.++ (str.at parts 1) (if (= (str.len parts) 3) \"\" (str.++ \" \" (str.at parts 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (>= (str.len (str.at parts 1)) 1) (str.at parts 1) \"\"))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((names (str.split _arg_0 \" \"))) (if (> (str.len (str.at _arg_0 1)) 0) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))) \"\"))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (if (or (= start -1) (= end -1)) \"\" (str.substr _arg_0 (+ start 1) (- end start 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        "",
        1,
        " ",
        3,
        2
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " ",
        ""
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      3,
      2,
      -1
    ]
  },
  "35744094modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))\n```"
    ],
    "time_diff_ms": 504.119,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)) (+ (str.indexof _arg_0 \"/\" 8) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 8) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 8) 2)))))"
    ],
    "constants": [
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        0,
        1,
        2,
        "//",
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        "/"
      ],
      [
        8,
        1,
        2,
        "/"
      ]
    ],
    "all_constants": [
      "",
      1,
      "mac",
      0,
      "windows",
      2,
      "//",
      8,
      "/",
      "microsoft"
    ]
  },
  "extract-text-between-parenthesesmodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```"
    ],
    "time_diff_ms": 464.4,
    "solutions": [
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      "<",
      ">"
    ]
  },
  "phone-5-longmodified.sl": {
    "completions": [
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n  (str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 666.608,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "phone-9-long-repeatmodified.sl": {
    "completions": [
      "```scheme\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```"
    ],
    "time_diff_ms": 689.479,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))"
    ],
    "constants": [
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        ".",
        "",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        ".",
        "-"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "-",
      ".",
      "+"
    ]
  },
  "exceljet1modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (str.indexof _arg_1 \"@\" 0) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0) 1))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))\n```"
    ],
    "time_diff_ms": 160.936,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (str.indexof _arg_1 \"@\" 0) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"@\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"@\" 0) 1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (str.indexof _arg_1 \"_\" 0) 1))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        "@"
      ],
      [
        0,
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "@"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "@",
      "_"
    ]
  },
  "phone-7-shortmodified.sl": {
    "completions": [
      "```lisp\n  (str.substr name 7 3)\n)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 7 3)\n)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 9 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```"
    ],
    "time_diff_ms": 606.276,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      9
    ]
  },
  "extract-word-containing-specific-textmodified.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n(ite (str.contains _arg_0 \"@\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))) \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))\n```",
      "```lisp\n  (str.replace _arg_0 \" \" \"\")\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0))) \" \" 0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 480.229,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"@\") (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" 0))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 1)) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0)) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0))) \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"@\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"@\" 0) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        " ",
        "@"
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " ",
        "",
        "@"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "@"
      ],
      [
        "",
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "@"
      ],
      [
        0,
        "@"
      ]
    ],
    "all_constants": [
      0,
      "",
      " ",
      1,
      "@",
      "_"
    ]
  },
  "stackoverflow7modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```"
    ],
    "time_diff_ms": 562.352,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      ""
    ]
  },
  "phone-6-shortmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 3 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```s-expression\n(str.substr name 3 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 705.791,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 3 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 3 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4
    ]
  },
  "43120683modified.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\")\n  (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\")\n  (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\")\n  (ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\")\n  _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (str.replace _arg_0 \"4\" \" oranges\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\")\n(ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\")\n(ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\")\n(str.replace _arg_0 \", 4\" \" oranges\"))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n  (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n  (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\")\n  _arg_0)))))\n```"
    ],
    "time_diff_ms": 156.604,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\") (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\") (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\") (ite (str.contains _arg_0 \", 4\") (str.replace _arg_0 \", 4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \", 1\") (str.replace _arg_0 \", 1\" \" apple\") (ite (str.contains _arg_0 \", 2\") (str.replace _arg_0 \", 2\" \" bananas\") (ite (str.contains _arg_0 \", 3\") (str.replace _arg_0 \", 3\" \" strawberries\") (str.replace _arg_0 \", 4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))"
    ],
    "constants": [
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        ", 1",
        " bananas",
        ", 2",
        ", 3",
        " apple",
        " strawberries",
        " oranges",
        ", 4"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        ", 1",
        " bananas",
        ", 2",
        ", 3",
        " apple",
        " strawberries",
        " oranges",
        ", 4"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ]
    ],
    "all_constants": [
      "3",
      "4",
      ", 1",
      " bananas",
      ", 2",
      " strawberries",
      " apple",
      ", 3",
      " oranges",
      "1",
      "2",
      ", 4"
    ]
  },
  "split-text-string-at-specific-charactermodified.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) \n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String \n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1)\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) \n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((s String) (n Int)) String\n  (ite (= n 1)\n    (str.substr s 0 (str.indexof s \"_\" 0))\n    (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (+ (str.indexof s \"_\" 0) 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))\n)\n```"
    ],
    "time_diff_ms": 844.994,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((s String) (n Int)) String (ite (= n 1) (str.substr s 0 (str.indexof s \"_\" 0)) (str.substr s (+ (str.indexof s \"_\" 0) 1) (- (str.len s) (+ (str.indexof s \"_\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ]
  },
  "phone-7-longmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```"
    ],
    "time_diff_ms": 525.409,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "all_constants": [
      3,
      5,
      6
    ]
  },
  "phone-6modified.sl": {
    "completions": [
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```scheme\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 703.341,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4
    ]
  },
  "phone-10-longmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))\n```"
    ],
    "time_diff_ms": 236.345,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 14 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        14,
        ")"
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      "(",
      8,
      10,
      11,
      "-",
      12,
      14,
      ")",
      ") "
    ]
  },
  "stackoverflow2modified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (= space -1) _arg_0 (str.substr _arg_0 0 space))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (= space -1) _arg_0 (str.substr _arg_0 0 space))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((space (str.indexof _arg_0 \" \" 0)))\n    (ite (= space -1)\n         _arg_0\n         (str.substr _arg_0 0 space))))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n```"
    ],
    "time_diff_ms": 293.428,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (= space -1) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"j\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (= space -1) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((space (str.indexof _arg_0 \" \" 0))) (ite (= space -1) _arg_0 (str.substr _arg_0 0 space)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        "j"
      ],
      [
        0,
        "japan"
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        " "
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      " ",
      "japan",
      "j",
      -1
    ]
  },
  "stackoverflow9modified.sl": {
    "completions": [
      "```s-expression\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))\n```"
    ],
    "time_diff_ms": 423.203,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "strip-html-from-text-or-numbersmodified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```"
    ],
    "time_diff_ms": 611.357,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))"
    ],
    "constants": [
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ]
    ],
    "all_constants": [
      "<b>",
      "",
      "</b>"
    ]
  },
  "phone-10modified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3)))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 194.301,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 (str.len name)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      "(",
      10,
      "-",
      ") "
    ]
  },
  "phone-9-longmodified.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \"\") \"-\" \".\")\n```"
    ],
    "time_diff_ms": 722.583,
    "solutions": [
      null,
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 3) \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))"
    ],
    "constants": [
      null,
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      null,
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        ".",
        1,
        " ",
        "-"
      ],
      [
        1,
        " ",
        3,
        "-",
        "."
      ],
      [
        "",
        1,
        " ",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        "."
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      3,
      "-",
      ".",
      "+"
    ]
  },
  "exceljet4modified.sl": {
    "completions": [
      "```s-expression\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```",
      "```s\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")\n```"
    ],
    "time_diff_ms": 966.43,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"ftp://\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https=//\" \"\") \"ftp=//\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"https://\" \"\") \"/\" \"\")))"
    ],
    "constants": [
      [
        "https://",
        "",
        "ftp://"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "https://",
        "",
        "/"
      ],
      [
        "https://",
        "",
        "ftp://"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "https://",
        "",
        "ftp://"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "",
        "ftp=//",
        "https=//"
      ],
      [
        "https://",
        "",
        "/"
      ]
    ],
    "all_constants": [
      "",
      "ftp://",
      "ftp=//",
      "/",
      "https://",
      "https=//"
    ]
  },
  "33619752modified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((sub (str.substr _arg_0 0 idx)))\n           (ite (or (str.contains _arg_0 (str.++ sub \" Inc\"))\n                    (str.contains _arg_0 (str.++ sub \" Company\")))\n                sub\n                _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \" \" 0)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \" \" 0)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((end (str.indexof _arg_0 \" \" 0)))\n    (ite (= end -1) _arg_0 (str.substr _arg_0 0 end))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ idx 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1) _arg_0 (str.substr _arg_0 0 idx))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (ite (str.contains _arg_0 \"Company\") \n       (str.substr _arg_0 0 (str.indexof _arg_0 \"Company\" 0))\n       (ite (str.contains _arg_0 \"Inc\")\n            (str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\" 0))\n            _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1)\n         _arg_0\n         (let ((sub (str.substr _arg_0 0 idx)))\n           (ite (str.contains _arg_0 (str.++ sub \" \" sub))\n                sub\n                _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((suffixes (list \" LLC\" \" Inc\" \" Corporation\" \" Enterprises\" \" Company\")))\n    (ite (str.suffixof \" LLC\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    (ite (str.suffixof \" Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 12))\n    (ite (str.suffixof \" Company\" _",
      "```lisp\n  (let ((idx (str.indexof _arg_0 \" \" 0)))\n    (ite (= idx -1) _arg_0\n      (let ((nextIdx (str.indexof _arg_0 \" \" (+ idx 1))))\n        (ite (= nextIdx -1) _arg_0 (str.substr _arg_0 0 nextIdx)))))\n```"
    ],
    "time_diff_ms": 988.142,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (let ((sub (str.substr _arg_0 0 idx))) (ite (or (str.contains _arg_0 (str.++ sub \" Inc\")) (str.contains _arg_0 (str.++ sub \" Company\"))) sub _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \" \" 0))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \" \" 0))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((end (str.indexof _arg_0 \" \" 0))) (ite (= end -1) _arg_0 (str.substr _arg_0 0 end)))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" (+ idx 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 0 idx)))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"Company\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Company\" 0)) (ite (str.contains _arg_0 \"Inc\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\" 0)) _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (let ((sub (str.substr _arg_0 0 idx))) (ite (str.contains _arg_0 (str.++ sub \" \" sub)) sub _arg_0))))))",
      null,
      "((define-fun f (_arg_0 String) String (let ((idx (str.indexof _arg_0 \" \" 0))) (ite (= idx -1) _arg_0 (let ((nextIdx (str.indexof _arg_0 \" \" (+ idx 1)))) (ite (= nextIdx -1) _arg_0 (str.substr _arg_0 0 nextIdx)))))))"
    ],
    "constants": [
      [
        0,
        " ",
        " Inc",
        " Company",
        -1
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        1,
        " ",
        -1
      ],
      [
        0,
        " ",
        -1
      ],
      [
        0,
        "Inc",
        "Company"
      ],
      [
        0,
        " ",
        -1
      ],
      null,
      [
        0,
        1,
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      " Inc",
      "Inc",
      "Company",
      " Company",
      -1
    ]
  },
  "phone-6-longmodified.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n  (str.substr name 5 3)\n)\n```"
    ],
    "time_diff_ms": 628.234,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5
    ]
  },
  "get-last-name-from-name-with-commamodified.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```"
    ],
    "time_diff_ms": 570.276,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \",\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \",\" 0)))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      ","
    ]
  },
  "initials-long-repeatmodified.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```scheme\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```",
      "```lisp\n(str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")\n```"
    ],
    "time_diff_ms": 889.091,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (str.indexof name \" \" 0) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ 1 (str.indexof name \" \" 0)) 1) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "exceljet3modified.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))\n```",
      "```lisp\n(str.replace _arg_0 \"=\" \"\")\n```",
      "```scheme\n  (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 100)\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")\n```",
      "```scheme\n(str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")\n```"
    ],
    "time_diff_ms": 104.062,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\" 0) 100)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)) \"=\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 0 (+ 1 (str.indexof _arg_0 \"=\" 0))) \"\")))"
    ],
    "constants": [
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ],
      [
        0,
        1,
        "="
      ],
      [
        "",
        "="
      ],
      [
        0,
        "=",
        100
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "",
        "="
      ],
      [
        0,
        1,
        "=",
        ""
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      100,
      "="
    ]
  },
  "phone-10_shortmodified.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3)))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 286.421,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        "(",
        9,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        "(",
        9,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        12,
        ") ",
        " ("
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      5,
      7,
      "(",
      9,
      10,
      8,
      "-",
      13,
      12,
      ") ",
      " ("
    ]
  },
  "get-first-name-from-name-with-commamodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n       (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\") (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n     (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) \n     (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```"
    ],
    "time_diff_ms": 918.614,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \" \" \"\") (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        " ",
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      ","
    ]
  },
  "stackoverflow10modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 12 4)\n```",
      "```lisp\n  (str.substr _arg_0 11 4)\n```",
      "```scheme\n(str.substr _arg_0 11 4)\n```",
      "```lisp\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n(str.substr _arg_0 11 4)\n```",
      "```lisp\n(str.substr _arg_0 11 4)\n```",
      "```lisp\n(str.substr _arg_0 11 4)\n```",
      "```lisp\n(str.substr _arg_0 11 4)\n```",
      "```scheme\n(str.substr _arg_0 (- (str.len _arg_0) 4) 4)\n```",
      "```lisp\n  (str.substr _arg_0 11 4)\n```"
    ],
    "time_diff_ms": 792.583,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 4)))"
    ],
    "constants": [
      [
        12,
        4
      ],
      [
        11,
        4
      ],
      [
        11,
        4
      ],
      [
        4
      ],
      [
        11,
        4
      ],
      [
        11,
        4
      ],
      [
        11,
        4
      ],
      [
        11,
        4
      ],
      [
        4
      ],
      [
        11,
        4
      ]
    ],
    "all_constants": [
      11,
      12,
      4
    ]
  },
  "25239569modified.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```lisp\n(str.replace _arg_0 \"_BRD\" \"_Branding\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\"))\n```"
    ],
    "time_diff_ms": 200.105,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"_BRD\" \"_Branding\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_LDS\" \"_Leads\") \"_DRS\" \"_Direct Response\")))"
    ],
    "constants": [
      [
        "DRS",
        "BRD",
        "Branding",
        "Direct Response",
        "Leads",
        "LDS"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_BRD",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ]
    ],
    "all_constants": [
      "DRS",
      "BRD",
      "Direct Response",
      "Branding",
      "_Leads",
      "_LDS",
      "_Direct Response",
      "_BRD",
      "Leads",
      "LDS",
      "_DRS",
      "_Branding"
    ]
  },
  "36462127modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 13 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 12 6)\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) -1))\n```",
      "```lisp\n(str.substr _arg_0 11 6)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))\n```"
    ],
    "time_diff_ms": 798.739,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) -1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0)))))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))))))))))"
    ],
    "constants": [
      [
        13,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        "/",
        6
      ],
      [
        0,
        1,
        "/",
        -1
      ],
      [
        11,
        6
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      6,
      11,
      12,
      13,
      "/",
      -1
    ]
  },
  "stackoverflow5modified.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```scheme\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```",
      "```lisp\n(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n```"
    ],
    "time_diff_ms": 713.817,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      "="
    ]
  },
  "extract-word-that-begins-with-specific-charactermodified.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```"
    ],
    "time_diff_ms": 999.933,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))"
    ],
    "constants": [
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        1,
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      " ",
      1,
      "_",
      -1
    ]
  }
}