{
  "get-first-name-from-name-with-comma.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\"))",
      "(str.substr (str.substr _arg_0 1 (str.indexof _arg_0 \",\")) 0 (- (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" (+ _arg_1 1)) (- (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" (+ _arg_1 1)) 1)))",
      "(str.substr (str.replace _arg_0 \", \" \",\") 0 (str.indexof (str.replace _arg_0 \", \" \",\") \",\"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2))",
      "(str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1))",
      "(str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (_arg_1 1) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" _arg_1)) \",\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ 1 (str.indexof _arg_0 \",\" (+ _arg_1 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ 1 (str.indexof _arg_0 \" \" _arg_1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0\n              (str.indexof _arg_0 \",\" (_arg_1 - 1))\n              (str.indexof _arg_0 \",\" _arg_1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0\n              (str.indexof _arg_0 \",\" 0)\n              (ite (= _arg_1 1)\n                   (- (str.indexof _arg_0 \",\" 0) 1)\n                   (str.len _arg_0)\n                   )\n              )\n  )",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr\n    (str.substr\n      _arg_0\n      (+ (str.indexof _arg_0 \",\" 0) 1)\n      (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))\n    )\n    0\n    (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)\n  )\n)",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" (+ _arg_1 1))))"
    ],
    "time_diff_ms": 38.048,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 1 (str.indexof _arg_0 \",\")) 0 (- (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" (+ _arg_1 1)) (- (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" (+ _arg_1 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \", \" \",\") 0 (str.indexof (str.replace _arg_0 \", \" \",\") \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \",\" \"\") 0 (str.indexof (str.replace _arg_0 \",\" \"\") \" \" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.replace _arg_0 \" \" \"\") 0 (str.indexof (str.replace _arg_0 \" \" \"\") \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (_arg_1 1) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" _arg_1)) \",\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ 1 (str.indexof _arg_0 \",\" (+ _arg_1 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ 1 (str.indexof _arg_0 \" \" _arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (+ (str.indexof _arg_0 \",\" _arg_1) 2)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" (_arg_1 - 1)) (str.indexof _arg_0 \",\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" 0) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \",\" 0) (str.indexof _arg_0 \",\" 0))) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)) \",\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \",\" _arg_1) (str.indexof _arg_0 \" \" (+ _arg_1 1))))"
    ]
  },
  "exceljet3.sl": {
    "completions": [
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.replace _arg_0 \".*= \")",
      "(str.++ (str.at _arg_0 5) (str.at _arg_0 6) (str.at _arg_0 7) (str.at _arg_0 8) (str.at _arg_0 9))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"=\") (+ (str.indexof _arg_0 \"=\") 1)))",
      "(str.++ \"year=\" _arg_0)",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.replace _arg_0 \"=\" \"\")",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.replace _arg_0 \".*= \")",
      "(str.substr _arg_0 4 (str.len _arg_0))",
      "(str.++ \"year=\" _arg_0)",
      "(str.++ _arg_0 \"\")",
      "(str.++ \"fuel economy=\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0)))",
      "(str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3))"
    ],
    "time_diff_ms": 827.718,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 5) (str.at _arg_0 6) (str.at _arg_0 7) (str.at _arg_0 8) (str.at _arg_0 9)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"=\") (+ (str.indexof _arg_0 \"=\") 1)))",
      "(define-fun f (_arg_0 String) String (str.++ \"year=\" _arg_0))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"=\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 (- (str.len _arg_0) 5)) \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \".*= \"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 4 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.++ \"year=\" _arg_0))",
      "(define-fun f (_arg_0 String) String (str.++ _arg_0 \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"fuel economy=\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 0))))",
      "(define-fun f (_arg_0 String) String (str.++ \"fuel economy=\" (str.at _arg_0 0) \"/\" (str.at _arg_0 1) (str.at _arg_0 2) (str.at _arg_0 3)))"
    ]
  },
  "strip-html-from-text-or-numbers.sl": {
    "completions": [
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]+>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\") )",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<[^>]*>\" \"\")"
    ],
    "time_diff_ms": 919.025,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]+>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<[^>]*>\" \"\"))"
    ]
  },
  "count-total-words-in-a-cell.sl": {
    "completions": [
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len (str.split _arg_0 \" \"))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len (str.replace _arg_0 \" \" \" \") 1)",
      "(str.len _arg_0)",
      "(str.len (str.split _arg_0 \" \"))",
      "(Start (str.len _arg_0))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(+\n  (str.len _arg_0)\n  1)",
      "(str.len (str.replace _arg_0 \" \" \"\"))",
      "(str.len _arg_0)",
      "(str.len _arg_0)",
      "(str.len (str.replace _arg_0 \" \" \"\")))",
      "(str.len _arg_0)",
      "(+ (str.len _arg_0) 1))",
      "(+ (str.len _arg_0) 1))"
    ],
    "time_diff_ms": 975.112,
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \" \") 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.split _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) Int (Start (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))",
      "(define-fun f (_arg_0 String) Int (+ (str.len _arg_0) 1))"
    ]
  },
  "stackoverflow8.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f ((s String)) String\n  (str.substr s (- (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (- (str.len s) (str.indexof s \"/\"))))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(define-fun f ((s String)) String\n  (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(define-fun f ((s String)) String\n  (str.substr s (+ (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f ((str String)) String\n  (str.substr str (+ (str.indexof str \"/\" 0) 1) (str.len str)))",
      "(define-fun f ((s String)) String\n  (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1))))))"
    ],
    "time_diff_ms": 948.543,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr s (- (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (- (str.len s) (str.indexof s \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"/\" (+ 1 (str.indexof s \"/\"))) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr str (+ (str.indexof str \"/\" 0) 1) (str.len str)))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \"/\" 0) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)))))"
    ]
  },
  "phone-6-long.sl": {
    "completions": [
      "\"(str.at name 5)\"",
      "(str.substr name 5 3))",
      "\"(str.at name 5)\"",
      "\"(str.at name 5)\"",
      "\"(str.at name 4)\"",
      "(str.at name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at name 4)\"",
      "(str.substr name 5 3))",
      "\"(str.substr name 5 3))\"",
      "\"(str.at name 5)\"",
      "(str.at name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at name 5)\"",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "\"(str.at (str.replace name \"-\" \" \") 5)\"",
      "(str.substr name 5 3))",
      "\"(str.at name 5)\""
    ],
    "time_diff_ms": 27.36,
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.replace name \")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at name 5)\")"
    ]
  },
  "phone-10.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 4) \" (\" \n    (str.substr name 5 3) \") \" \n    (str.substr name 9 3) \"-\" \n    (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0)\n    \" (\"\n    (str.substr name 1 3)\n    \") \"\n    (str.substr name 5 3)\n    \"-\"\n    (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 4 6) \"-\" (str.at name 7 10)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 4 6) \"-\" (str.at name 7 10)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))"
    ],
    "time_diff_ms": 890.091,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 4 6) \"-\" (str.at name 7 10)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.at name 1 3) \") \" (str.at name 4 6) \"-\" (str.at name 7 10)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))"
    ]
  },
  "phone-6.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))"
    ],
    "time_diff_ms": 411.131,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))"
    ]
  },
  "phone-7-short.sl": {
    "completions": [
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr (str.substr name 6 3) 0 3))",
      "(str.substr name 5 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "time_diff_ms": 373.112,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr (str.substr name 6 3) 0 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ]
  },
  "phone-7.sl": {
    "completions": [
      "\"(str.substr name 5 3))\"",
      "(ite (= (str.at name 1) \"+\")\n     (str.substr name 6 3)\n     (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"000\") )",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (= (str.at name 0) \"+\") (str.substr name 6 3) (str.substr name 5 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "\"(str.substr name 6 3))\"",
      "(ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (str.substr name 8 3))))",
      "(define-fun f (name String) String\n  (str.at name 6 5))",
      "(ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3)))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "\"(str.substr name 6 3))\"",
      "\"(str.substr name 6 3))\"",
      "\"(str.substr (str.substr name 6 3) 5 3))\"",
      "(str.at (str.substr name 6 3) 0 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ 1 (str.indexof name \" \")) 3)\n     (str.substr name (+ 1 (str.indexof name \" \")) 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name (+ (str.indexof name \"-\") 1) 3))",
      "(ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3))"
    ],
    "time_diff_ms": 959.074,
    "solutions": [
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (ite (= (str.at name 1) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) \"000\"))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.at name 0) \"+\") (str.substr name 6 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 5 3) (ite (= (str.at name 2) \" \") (str.substr name 6 3) (ite (= (str.at name 3) \" \") (str.substr name 7 3) (str.substr name 8 3)))))",
      "(define-fun f (name String) String (str.at name 6 5))",
      "(define-fun f (name String) String (ite (= (str.at name 1) \" \") (str.substr name 3 3) (ite (= (str.at name 2) \" \") (str.substr name 4 3) (str.substr name 5 3))))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String \"(str.substr (str.substr name 6 3) 5 3))\")",
      "(define-fun f (name String) String (str.at (str.substr name 6 3) 0 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ 1 (str.indexof name \" \")) 3) (str.substr name (+ 1 (str.indexof name \" \")) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name (+ (str.indexof name \"-\") 1) 3)))"
    ]
  },
  "univ_6_short.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", New York, USA\\\" \\\", NY, USA\\\") \\\", New York, NY, USA\\\" \\\", NY, USA\\\") \\\", Ann Arbor, MI, USA\\\" \\\", MI, USA\\\") \\\", College Park, MD\\\" \\\", MD, USA\\\") \\\", Ithaca, New York, USA\\\" \\\", NY, USA\\\") \\\", Los Angeles, CA\\\" \\\", CA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Philadelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\", PA\\\" \\\", PA, USA\\\") \\\", USA\\\" \\\", USA\\\") \\\", MI\\\" \\\", MI, USA\\\") \\\", CA\\\" \\\", CA, USA\\\") \\\", MD\\\" \\\", MD, USA\\\") \\\", NY\\\" \\\", NY, USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Los Angeles\\\" \\\", CA, USA\\\") \\\", Ithaca, New York\\\" \\\", NY, USA\\\") \\\", College Park\\\" \\\", MD, USA\\\") \\\", Ann Arbor\\\" \\\", MI, USA\\\") \\\", Los Angeles\\\" \\\", CA, USA\\\") \\\", New York, New York\\\" \\\", NY, USA\\\") \\\", New York, NY\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA, USA\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", New York\\\" \\\", NY\\\")\"",
      "\"(str.substr (str.replace (str.replace (str.replace col2 col1 \"\") \",\" \"\") \"USA\" \"\") 0 (- (str.indexof col2 \",\" 0) 1))\"",
      "\"(str.substr (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") \\\",\\\"))\"",
      "(define-fun f (col1 String col2 String) String\n    (str.substr\n        (str.replace\n            (str.++\n                (str.replace col1 \", \" \"\")\n                (str.replace col2 \", \" \"\")\n            )\n            \"New York\"\n            \"NY\"\n        )\n        0\n        (str.indexof\n            (str.replace\n                (str.++\n                    (str.replace col1 \", \" \"\")\n                    (str.replace col2 \", \" \"\")\n                )\n                \"New York\"\n                \"NY\"\n            )\n            \", USA\"\n            0\n        )\n    )\n)",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr (str.replace (str.replace col2 col1 \\\"\\\" ) col2 \\\"\\\") 1 (- (str.indexof col2 \\\",\\\") 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col1 \"University of \" \"\")\n                                                                                                                                                col2 \"University of \" \"\")\n                                                                                                                                              \"New York\" \"NY\")\n                                                                                                                                            \"New York\" \"NY\")\n                                                                                                                                          \"New York\" \"NY\")\n                                                                                                                                        \"New York\" \"NY\")\n                                                                                                                                      \"New York\" \"NY\")\n                                                                                                                                    \"New York\" \"NY\")\n                                                                                                                                  \"New York\" \"NY\")\n                                                                                                                                \"New York\" \"NY\")\n                                                                                                                              \"New York\" \"NY\")\n                                                                                                                            \"New York\" \"NY\")\n                                                                                                                          \"New York\" \"NY\")\n                                                                                                                        \"New York\" \"NY\")\n                                                                                                                      \"New York\" \"NY\")\n                                                                                                                    \"New York\" \"NY\")\n                                                                                                                  \"New York\" \"NY\")\n                                                                                                                \"New York\" \"NY\")\n                                                                                                              \"New York\" \"NY\")\n                                                                                                            \"New York\" \"NY\")\n                                                                                                          \"New York\" \"NY\")\n                                                                                                        \"New York\" \"NY\")\n                                                                                                      \"New York\" \"NY\")\n                                                                                                    \"New York\" \"NY\")\n                                                                                                  \"New York\" \"NY\")\n                                                                                                \"New York\" \"NY\")\n                                                                                              \"New York\" \"NY\")\n                                                                                            \"New York\" \"NY\")\n                                                                                          \"New York\" \"NY\")\n                                                                                        \"New York\" \"NY\")\n                                                                                      \"New York\" \"NY\")\n                                                                                    \"New York\" \"NY\")\n                                                                                  \"New York\" \"NY\")\n                                                                                \"New York\" \"NY\")\n                                                                              \"New York\" \"NY\")\n                                                                            \"New York\" \"NY\")\n                                                                          \"New York\" \"NY\")\n                                                                        \"New York\" \"NY\")\n                                                                      \"New York\" \"NY\")\n                                                                    \"New York\" \"NY\")\n                                                                  \"New York\" \"NY\")\n                                                                \"New York\" \"NY\")\n                                                              \"New York\" \"NY\")\n                                                            \"New York\" \"NY\")\n                                                          \"New York\" \"NY\")\n                                                        \"New York\" \"NY\")\n                                                      \"New York\" \"NY\")\n                                                    \"New York\" \"NY\")\n                                                  \"New York\" \"NY\")\n                                                \"New York\" \"NY\")\n                                              \"New York\" \"NY\")\n                                            \"New York\" \"NY\")\n                                          \"New York\" \"NY\")\n                                        \"New York\" \"NY\")\n                                      \"New York\" \"NY\")\n                                    \"New York\" \"NY\")\n                                  \"New York\" \"NY\")\n                                \"New York\" \"NY\")\n                              \"New York\" \"NY\")\n                            \"New York\" \"NY\")\n                          \"New York\" \"NY\")\n                        \"New York\" \"NY\")\n                      \"New York\" \"NY\")\n                    \"New York\" \"NY\")\n                  \"New York\" \"NY\")\n                \"New York\" \"NY\")\n              \"New York\" \"NY\")\n            \"New York\" \"NY\")\n          \"New York\" \"NY\")\n        \"New York\" \"NY\")\n      \"New York\" \"NY\")\n    \"New York\" \"NY\"))))",
      "\"(str.substr (str.replace (str.replace (str.++ col2 \\\", USA\\\") \\\", New York, USA\\\") \\\", New York, USA\\\") 0 (- (str.indexof col1 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))\n    \", USA\"))",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", \\\" \\\",\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\"",
      "\"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col1) 1))\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", USA\\\" \\\",\\\") \\\", PA\\\" \\\", PA\\\") \\\", CT\\\" \\\", CT\\\") \\\", CA\\\" \\\", CA\\\") \\\", MD\\\" \\\", MD\\\") \\\", NY\\\" \\\", NY\\\") \\\", New York\\\" \\\", NY\\\") \\\", MI\\\" \\\", MI\\\") \\\", Phialdelphia\\\" \\\", PA\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    \", \"\n    (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2))\n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \", USA\") 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"Columbia\" \"\") \"UCLA\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"University of \" \"\") \"NYU\" \"\") \"Ithaca, New York\" \"Ithaca, NY, USA\"))"
    ],
    "time_diff_ms": 496.721,
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", New York, USA\\\" \\\", NY, USA\\\") \\\", New York, NY, USA\\\" \\\", NY, USA\\\") \\\", Ann Arbor, MI, USA\\\" \\\", MI, USA\\\") \\\", College Park, MD\\\" \\\", MD, USA\\\") \\\", Ithaca, New York, USA\\\" \\\", NY, USA\\\") \\\", Los Angeles, CA\\\" \\\", CA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Philadelphia, PA, USA\\\" \\\", PA, USA\\\") \\\", Phialdelphia, PA, USA\\\" \\\", PA, USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\", PA\\\" \\\", PA, USA\\\") \\\", USA\\\" \\\", USA\\\") \\\", MI\\\" \\\", MI, USA\\\") \\\", CA\\\" \\\", CA, USA\\\") \\\", MD\\\" \\\", MD, USA\\\") \\\", NY\\\" \\\", NY, USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Los Angeles\\\" \\\", CA, USA\\\") \\\", Ithaca, New York\\\" \\\", NY, USA\\\") \\\", College Park\\\" \\\", MD, USA\\\") \\\", Ann Arbor\\\" \\\", MI, USA\\\") \\\", Los Angeles\\\" \\\", CA, USA\\\") \\\", New York, New York\\\" \\\", NY, USA\\\") \\\", New York, NY\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA, USA\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", New York\\\" \\\", NY\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace col2 col1 \")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") 1 (str.indexof (str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"\\\") \\\",\\\"))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ (str.replace col1 \", \" \"\") (str.replace col2 \", \" \"\")) \"New York\" \"NY\") 0 (str.indexof (str.replace (str.++ (str.replace col1 \", \" \"\") (str.replace col2 \", \" \"\")) \"New York\" \"NY\") \", USA\" 0)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace col2 col1 \\\"\\\" ) col2 \\\"\\\") 1 (- (str.indexof col2 \\\",\\\") 2))\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") col2 \"University of \" \"\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\")))))))))))))))))))))))))))))))))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.++ col2 \\\", USA\\\") \\\", New York, USA\\\") \\\", New York, USA\\\") 0 (- (str.indexof col1 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\", \\\" \\\",\\\") 0 (- (str.indexof (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York, New York, USA\\\" \\\"New York, NY, USA\\\") 0 (- (str.len col1) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\", USA\\\" \\\",\\\") \\\", PA\\\" \\\", PA\\\") \\\", CT\\\" \\\", CT\\\") \\\", CA\\\" \\\", CA\\\") \\\", MD\\\" \\\", MD\\\") \\\", NY\\\" \\\", NY\\\") \\\", New York\\\" \\\", NY\\\") \\\", MI\\\" \\\", MI\\\") \\\", Phialdelphia\\\" \\\", PA\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") 0 (- (str.indexof (str.replace (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \", USA\") 2)))",
      null,
      "(define-fun f (col1 String col2 String) String (str.replace (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University\" \"\") \"College Park\" \"\") \"University\" \"\") \"Columbia\" \"\") \"UCLA\" \"\") \"Cornell\" \"\") \"Penn\" \"\") \"University of \" \"\") \"NYU\" \"\") \"Ithaca, New York\" \"Ithaca, NY, USA\"))))"
    ]
  },
  "stackoverflow9.sl": {
    "completions": [
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))"
    ],
    "time_diff_ms": 488.064,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) 1) (str.len _arg_0)))"
    ]
  },
  "phone-9-long-repeat.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.++ (str.substr name 0 3) \".\" (str.++ (str.substr name 4 3) \".\" (str.++ (str.substr name 8 3) \".\" (str.substr name 12 3))))",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \".\"))",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3))",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")"
    ],
    "time_diff_ms": 140.409,
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.++ (str.substr name 4 3) \".\" (str.++ (str.substr name 8 3) \".\" (str.substr name 12 3)))))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\"))"
    ]
  },
  "get-last-word.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" -1))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"x\") \"x\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"x\") \"x\" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))))"
    ],
    "time_diff_ms": 361.915,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.len _arg_0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" -1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.len _arg_0) -1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" -1))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"x\") \"x\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"x\") \"x\" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1))) (- (str.len _arg_0) (str.indexof (str.replace _arg_0 \" \" \"_\") \"_\" (- (str.len _arg_0) 1)))))"
    ]
  },
  "phone-10_short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "\"(str.++ \" \" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 6 3) \\\"-\\\" (str.substr name 9 3))\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 4) \" (\" \n    (str.substr name 5 3) \") \" \n    (str.substr name 9 3) \"-\" \n    (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)) )",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.at name 0) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3))\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "\"(str.++ (str.++ (str.at name 0) (str.at name 1)) \\\" (\\\" (str.++ (str.++ (str.at name 2) (str.at name 3)) \\\") \\\" (str.++ (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3)))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) (str.substr name 11 3))\"",
      "\"(str.++ (str.substr name 0 1) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 4 3) \\\"-\\\" (str.substr name 7 3))\""
    ],
    "time_diff_ms": 154.892,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 6 3) \\\"-\\\" (str.substr name 9 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.at name 0) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 2 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String \"(str.++ (str.++ (str.at name 0) (str.at name 1)) \\\" (\\\" (str.++ (str.++ (str.at name 2) (str.at name 3)) \\\") \\\" (str.++ (str.substr name 5 3) \\\"-\\\" (str.substr name 9 3)))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) (str.substr name 11 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\" (\\\" (str.substr name 1 3) \\\") \\\" (str.substr name 4 3) \\\"-\\\" (str.substr name 7 3))\")"
    ]
  },
  "17212077.sl": {
    "completions": [
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1))+\"/\"+(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5)))",
      "(str.substr _arg_0 0 5))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "\"(str.substr _arg_0 0 (+ (str.indexof _arg_0 \\\"/\\\" 0) 4))\"",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4))"
    ],
    "time_diff_ms": 853.124,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 5)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 5))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"/\" 0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (+ (str.indexof _arg_0 \\\"/\\\" 0) 4))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\" 0) 4)))"
    ]
  },
  "phone-5.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(str.at (str.replace name \"-\" \"\") 0)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\")))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(ite (str.prefixof name \"+\") (str.substr name 1 2) (str.at name 0))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(str.at name 0 2))"
    ],
    "time_diff_ms": 331.556,
    "solutions": [
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at (str.replace name \"-\" \"\") 0))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \")) (str.substr name 1 (str.indexof name \"-\"))))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (ite (str.prefixof name \"+\") (str.substr name 1 2) (str.at name 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 0 2))"
    ]
  },
  "39060015.sl": {
    "completions": [
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\")",
      "(str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "\"(str.replace _arg_0 \\\"/delete words in the area /\\\" \\\"\\\")\"",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" \"keep this part\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\")))",
      "(str.replace _arg_0 \"/.*?/\" \"\")",
      "(str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")))",
      "(str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\"))",
      "(str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\"))"
    ],
    "time_diff_ms": 134.821,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \"delete words in the area\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\"/delete words in the area /\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \" /\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/.*?/\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"This is a line. \" (str.replace _arg_0 \"delete words in the area \" \"\")))"
    ]
  },
  "phone-7-long-repeat.sl": {
    "completions": [
      "(str.substr name 7 3))",
      "(str.substr name 6 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 6 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.at name 7))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 7 3))",
      "(str.substr name 8 3))",
      "(str.substr name 7 3))",
      "(str.at name 7 3))",
      "(str.substr name 7 3))"
    ],
    "time_diff_ms": 582.738,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 8 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.at name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ]
  },
  "38871714.sl": {
    "completions": [
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \" <\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")"
    ],
    "time_diff_ms": 1.169,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" <\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))"
    ]
  },
  "43120683.sl": {
    "completions": [
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")"
    ],
    "time_diff_ms": 635.896,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))"
    ]
  },
  "stackoverflow11.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0\n            (+\n                (str.indexof _arg_0 \" \" 0)\n                1)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 ntInt 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0\n              (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0)\n              (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)) )",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 \" \" 0)\n           (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 \n            (str.indexof _arg_0 (str.to.int \"0\") 0) \n            (str.len _arg_0))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 (str.to.int \"0\") 0)\n            (- (str.len _arg_0)\n               (str.indexof _arg_0 (str.to.int \"0\") 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0)\n           (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.substr _arg_0\n           (str.indexof _arg_0 (str.to.int \"A\") 0)\n           (str.indexof _arg_0 (str.to.int \"Z\") 0))"
    ],
    "time_diff_ms": 808.756,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 ntInt 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"0\") 0) (- (str.len _arg_0) (str.indexof _arg_0 (str.to.int \"0\") 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.at _arg_0 0)) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int (str.replace _arg_0 \" \" \"\")) 0) (str.to.int (str.replace _arg_0 \" \" \"\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (str.to.int \"A\") 0) (str.indexof _arg_0 (str.to.int \"Z\") 0)))"
    ]
  },
  "split-text-string-at-specific-character.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 0))))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))\n)"
    ],
    "time_diff_ms": 532.742,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" (_arg_1 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))"
    ]
  },
  "get-domain-name-from-url.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 8)))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.len \"http=//\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0))))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) -1))))"
    ],
    "time_diff_ms": 255.997,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 8)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.len \"http=//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len \"http=//\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 8) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ (str.len _arg_0) -1))))"
    ]
  },
  "get-last-name-from-name-with-comma.sl": {
    "completions": [
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) 2) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(str.++ (str.replace _arg_0 \",\" \"\") \",\")",
      "(str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))"
    ],
    "time_diff_ms": 790.599,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) 2) \",\" (str.substr _arg_0 0 (- (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\"))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \",\" \"\") \",\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.at _arg_0 (- (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))) \",\" (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))))"
    ]
  },
  "initials.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \". \" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1)\n    \".\"\n    (str.substr (str.indexof name \" \" 0) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at \n        (str.replace name \" \" \".\") \n        1) \n      0 \n      1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr (str.replace (str.substr name 0 1) name \".\") 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \n    \".\"\n    (str.substr \n      (str.at \n        (str.replace \n          (str.replace name \" \" \".\") \n          \".\" \n          \"\") \n        1) \n      0 \n      1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0)\n    \".\"\n    (str.at \n      (str.substr name \n        (+ \n          (str.indexof name \" \" 0) \n          1) \n        1) \n      0)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \". \" (str.at (str.replace name \" \" \"\") 0) \".\"))"
    ],
    "time_diff_ms": 171.793,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (str.indexof name \" \" 0) 2) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \". \" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.indexof name \" \" 0) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.at (str.replace name \" \" \".\") 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at (str.replace name \" \" \".\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace (str.substr name 0 1) name \".\") 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at (str.replace (str.replace name \" \" \".\") \".\" \"\") 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \". \" (str.at (str.replace name \" \" \"\") 0) \".\"))"
    ]
  },
  "univ_5-long-repeat.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 3) \", \" (str.substr col2 4 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Storrs\" \"CT\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)) \", \" \"USA\"))))",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.substr col1 0 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Santa Barbara\" \"CA\" \"Storrs\" \"CT\" \"Ithaca\" \"NY\" \"Phialdelphia\" \"PA\" \"College Park\" \"MD\" \"Ann Arbor\" \"MI\" \"Cambridge\" \"MA\" \"Houston\" \"TX\" \"New Haven\" \"CT\" \"Berkeley\" \"CA\" \"Urbana\" \"IL\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))"
    ],
    "time_diff_ms": 520.499,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 3) \", \" (str.substr col2 4 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Storrs\" \"CT\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.substr col2 0 (- (str.indexof col2 \", \" 0) 1)) \", \" \"USA\")))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (ite (str.contains col1 \"New York\") \"NY\" (str.substr col1 0 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\" \"Los Angeles\" \"LA\" \"Santa Barbara\" \"CA\" \"Storrs\" \"CT\" \"Ithaca\" \"NY\" \"Phialdelphia\" \"PA\" \"College Park\" \"MD\" \"Ann Arbor\" \"MI\" \"Cambridge\" \"MA\" \"Houston\" \"TX\" \"New Haven\" \"CT\" \"Berkeley\" \"CA\" \"Urbana\" \"IL\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.indexof col2 \",\") 1)) \", USA\"))"
    ]
  },
  "stackoverflow10.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) (str.len (str.at _arg_0 0))) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4)",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \") (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \"))))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 6 4))",
      "(str.substr _arg_0 7 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(str.at _arg_0 (- (str.len _arg_0) 5) 4))"
    ],
    "time_diff_ms": 638.617,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) (str.len (str.at _arg_0 0))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \") (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \"))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 6 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 2) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.len _arg_0) 4) 4))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (- (str.len _arg_0) 5) 4))"
    ]
  },
  "phone-9-short.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\"))\"",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \"\") \"+ \" \"+\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\"",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"\n    (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\"\n",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\""
    ],
    "time_diff_ms": 566.33,
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.replace name \" \" \".\" (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")"
    ]
  },
  "phone-6-short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.at (str.substr name 5 11) 0)\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n    (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "(str.substr name 5 3))",
      "\"(str.at (str.substr name 5 11) 0)\"",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))"
    ],
    "time_diff_ms": 122.82,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.at (str.substr name 5 11) 0)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ]
  },
  "43606446.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\"))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") 1))"
    ],
    "time_diff_ms": 528.846,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\",\\\") 1) (- (str.indexof _arg_0 \\\">\\\") (str.indexof _arg_0 \\\",\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (str.indexof _arg_0 \">\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") 1)))"
    ]
  },
  "initials-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.at name 0) \n    \".\"\n    (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.at name (+ 1 (str.indexof name \" \" 0))) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))"
    ],
    "time_diff_ms": 787.757,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ 1 (str.indexof name \" \" 0))) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (- (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \") 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))"
    ]
  },
  "phone-5-long-repeat.sl": {
    "completions": [
      "\"(str.to.int (str.substr name 1 3))\"",
      "\"(str.at name 1)\"",
      "(str.substr name 1 3))",
      "(str.at name 1)",
      "\"(str.at name 1)\"",
      "\"(str.to.int (str.substr name 1 3))\"",
      "(str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 0)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at name 0)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n    (str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))"
    ],
    "time_diff_ms": 474.607,
    "solutions": [
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.to.int (str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 0)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 0)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))"
    ]
  },
  "phone-7-long.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(str.substr name 6 3))"
    ],
    "time_diff_ms": 923.044,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))"
    ]
  },
  "univ_6-long.sl": {
    "completions": [
      "\"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\"",
      "\"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\", USA\\\")\"",
      "\"(str.substr (str.replace col2 col1 \\\"\\\") 0 (- (str.indexof col2 col1 0) 2))\"",
      "\"(str.substr col2 (str.indexof col2 col1 0) (str.len col2))\"",
      "(str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\"))",
      "\"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") col1 col2) 0 (- (str.len col2) 4))\"",
      "\"(str.replace (str.replace col2 col1 \\\" \\\") col1 \\\", USA\\\")\"",
      "\"(str.substr col2 (str.indexof col2 \\\",\\\" 0) (str.len col2))\"",
      "\"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\"",
      "(str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) 0 (- (str.indexof (str.replace col2 \", USA\" \"\") \",\") 1) \"\") 0 (- (str.indexof col2 \",\") 1))",
      "\"(str.substr (str.replace (str.++ col1 col2) col1 col2) 0 (- (str.len col2) 1))\"",
      "\"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\"",
      "\"(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\"",
      "\"(str.substr col2 (- (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (str.indexof col2 \",\")))"
    ],
    "time_diff_ms": 867.251,
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace col2 col1 \\\"\\\") 0 (- (str.indexof col2 col1 0) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (str.indexof col2 col1 0) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace col2 \"New York\" \"NY\") 0 (str.indexof col2 \",\")))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace col2 col1 \\\"\\\") col1 col2) 0 (- (str.len col2) 4))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\" \\\") col1 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (str.indexof col2 \\\",\\\" 0) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.substr col2 0 (- (str.indexof col2 \",\") 1)) 0 (- (str.indexof (str.replace col2 \", USA\" \"\") \",\") 1) \"\") 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 col2) col1 col2) 0 (- (str.len col2) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"USA\\\") col1 \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.substr col2 0 (- (str.len col2) 4)) 0 (- (str.len (str.substr col2 0 (- (str.len col2) 4))) 4))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (- (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"NH\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\")))"
    ]
  },
  "33619752.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "time_diff_ms": 958.505,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ]
  },
  "extract-text-between-parentheses.sl": {
    "completions": [
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\"))))",
      "(str.to.int (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"<\")) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<\")) (+ 6 (str.indexof _arg_0 \"<\"))))))",
      "(str.to.int (str.substr _arg_0 7 2)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ],
    "time_diff_ms": 692.754,
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"<\")) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<\")) (+ 6 (str.indexof _arg_0 \"<\"))))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 7 2)))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 6 (- (str.indexof _arg_0 \">\" 0) 6))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.at _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ]
  },
  "remove-leading-and-trailing-spaces-from-text.sl": {
    "completions": [
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "\"(str.++ (ite (str.prefixof \\\" \\\" _arg_0) \\\"\\\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") 1 (str.len _arg_0)))\"",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))) )",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))"
    ],
    "time_diff_ms": 748.911,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String \"(str.++ (ite (str.prefixof \\\" \\\" _arg_0) \\\"\\\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") (str.++ \\\" \\\" \\\" \\\") \\\" \\\") 1 (str.len _arg_0)))\")",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))"
    ]
  },
  "strip-non-numeric-characters.sl": {
    "completions": [
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\"\"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(str.to.int (str.replace _arg_0 \" \" \"\")))"
    ],
    "time_diff_ms": 35.386,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \" \" \"\")))"
    ]
  },
  "get-middle-name-from-full-name.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))"
    ],
    "time_diff_ms": 96.446,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))"
    ]
  },
  "initials_small.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.substr name 1 (str.indexof name \" \" 0)) 0 1)\n    \".\"\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ (str.indexof name \" \" 0) 1))))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.++ \n      (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr \n      (str.at name 1)\n      0\n      1\n    )\n  )\n)",
      "(define-fun f (name String) String\n    (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n          \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr \n      (str.at name (+ (str.indexof name \" \" 0) 1) 1) \n      0 1)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n           (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1)\n           \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr (str.replace name \" \" \".\") 0 1) \n    \".\"\n    (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 1) \".\"\n          (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))"
    ],
    "time_diff_ms": 914.206,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name 1 (str.indexof name \" \" 0)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ (str.indexof name \" \" 0) 1))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ (str.substr (str.at name 1) 0 1) \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.at name (+ (str.indexof name \" \" 0) 1)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr (str.replace name \" \" \".\") 0 1) \".\" (str.substr (str.replace name \" \" \".\") (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.++ \" \" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))))"
    ]
  },
  "stackoverflow5.sl": {
    "completions": [
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))"
    ],
    "time_diff_ms": 918.955,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))"
    ]
  },
  "extract-word-that-begins-with-specific-character.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.len _arg_0)) \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\")))",
      "(str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))"
    ],
    "time_diff_ms": 205.266,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (+ (str.indexof _arg_0 \"_\" 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (+ 1 (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \" _\" 0) (str.len _arg_0)) \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\") (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\"))))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" _\" 0) 1) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" _\" 0)) (+ (str.indexof _arg_0 \" _\" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))"
    ]
  },
  "35744094.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (str.indexof _arg_0 \"/\" 0 (+ (str.indexof _arg_0 \"/\" 0 3) 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 2) (+ (str.indexof _arg_0 \"/\" 0) 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"//\" 0) 1) (str.indexof _arg_0 \"/\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" 8))",
      "(str.substr _arg_0 12 (- (str.indexof _arg_0 \"microsoft\" 0) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"http://\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"http://\"))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\") 1) 1)) 0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=\") 2)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \".com/\"))",
      "(str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"microsoft\" 0) (str.len \"microsoft\")) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) (str.len \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"//\") 2) (str.indexof _arg_0 \"/\"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (+ (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\")) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))"
    ],
    "time_diff_ms": 878.416,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (str.indexof _arg_0 \"/\" 0 (+ (str.indexof _arg_0 \"/\" 0 3) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 2) (+ (str.indexof _arg_0 \"/\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"//\" 0) 1) (str.indexof _arg_0 \"/\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.indexof _arg_0 \"microsoft\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"http://\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"http://\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://\" 0 (+ (str.len \"://\") 1)) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\") 1) 1)) 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https=\") 2)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"www.\") 4) (str.indexof _arg_0 \".com/\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 7 (str.indexof _arg_0 \"/\" 7)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"microsoft\" 0) (str.len \"microsoft\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" 0) (str.len \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"//\") 2) (str.indexof _arg_0 \"/\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\"))) (+ (str.indexof _arg_0 \"/\" (+ (str.len \"https://\") (str.len \"www.\")) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))"
    ]
  },
  "get-last-line-in-cell.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (str.len _arg_0)) \"/n\" 0) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 2)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 2)) 2)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"n\" (+ 1 (str.indexof _arg_0 \"n\"))))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0))"
    ],
    "time_diff_ms": 57.492,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (str.len _arg_0)) \"/n\" 0) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 2)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 2)) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\" 0) 3)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) 3))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"n\" (+ 1 (str.indexof _arg_0 \"n\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/n\" 0) 1) (str.len _arg_0)))"
    ]
  },
  "31753108.sl": {
    "completions": [
      "(str.substr _arg_0 12 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr\n    _arg_0\n    (str.indexof _arg_0 \" \" 0)\n    (str.len _arg_0)\n))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 13 (- (str.indexof _arg_0 \" \") 13))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 12 8))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))"
    ],
    "time_diff_ms": 354.06,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 13 (- (str.indexof _arg_0 \" \") 13)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 12 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))"
    ]
  },
  "exceljet4.sl": {
    "completions": [
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))",
      "(str.replace _arg_0 \"https://\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (- (str.len _arg_0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"ftp=//\" \"\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0))",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\")",
      "(str.replace _arg_0 \"https=//\" \"\")",
      "(define-fun f ((url String)) String (str.replace url \"https=//\" \"\") )"
    ],
    "time_diff_ms": 203.521,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"ftp=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 8 (str.indexof _arg_0 \"//\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"https=//\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace url \"https=//\" \"\"))"
    ]
  },
  "44789427.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" (_arg_1 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"-\" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"-\\\"))\"",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))"
    ],
    "time_diff_ms": 614.431,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" (_arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (+ (str.indexof _arg_0 \"-\" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"-\\\"))\")",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)))"
    ]
  },
  "stackoverflow4.sl": {
    "completions": [
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 (str.indexof _arg_0 \",\")))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 3 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 (+ 4 (str.indexof _arg_0 \",\")))))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 5 (str.indexof _arg_0 \",\")) (str.len _arg_0)))))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \"))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \",\" \" \") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" \" \"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2))))",
      "(str.++ \"R/\" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 3))",
      "(str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4))",
      "(str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 4 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 12 2))))"
    ],
    "time_diff_ms": 906.79,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 2 (str.indexof _arg_0 \",\")))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 3 (str.indexof _arg_0 \",\")) (str.indexof _arg_0 (+ 4 (str.indexof _arg_0 \",\")))))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ 5 (str.indexof _arg_0 \",\")) (str.len _arg_0))))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \") (str.replace (str.substr _arg_0 1 (- (str.indexof _arg_0 \",\") 1)) \",\" \" \") (str.replace (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R\" (int.to.str (str.to.int (str.substr _arg_0 2 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 6 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 3 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 7 2))) \" \" (int.to.str (str.to.int (str.substr _arg_0 10 2)))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.substr _arg_0 1 3) \" \" (str.substr _arg_0 5 3) \" \" (str.substr _arg_0 9 3)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.at _arg_0 0) \" \" (str.at _arg_0 2) \" \" (str.at _arg_0 4)))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 4 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 8 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 12 2)))))"
    ]
  },
  "stackoverflow6.sl": {
    "completions": [
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31))",
      "(str.substr _arg_0 32 (- (str.len _arg_0) 32))",
      "(str.substr _arg_0 32 (- (str.len _arg_0) 32)))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 26 (- (str.len _arg_0) 26))",
      "(str.substr _arg_0 27 (- (str.len _arg_0) 27))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 26 (- (str.len _arg_0) 26))",
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31))",
      "(str.substr _arg_0 35 (- (str.len _arg_0) 35))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 28 (- (str.len _arg_0) 28))",
      "(str.substr _arg_0 36 (- (str.len _arg_0) 36))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 25 (str.indexof _arg_0 \"=\" 0))",
      "(str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 31 (str.len _arg_0))"
    ],
    "time_diff_ms": 205.275,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 32 (- (str.len _arg_0) 32)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 32 (- (str.len _arg_0) 32)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 26 (- (str.len _arg_0) 26)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 27 (- (str.len _arg_0) 27)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 26 (- (str.len _arg_0) 26)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 35 (- (str.len _arg_0) 35)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 28 (- (str.len _arg_0) 28)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 36 (- (str.len _arg_0) 36)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 25 (str.indexof _arg_0 \"=\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 31)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (str.len _arg_0)))"
    ]
  },
  "univ_4-long.sl": {
    "completions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (- (str.len col1) (+ (str.indexof col1 \",\") 2))) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"New \" \"\") 0 2) \", \" (str.substr (str.replace (str.replace col2 \"University of\" \"\") \"University\" \"\") 0 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.++ \n        (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"College Park\" \"College Park,\") \"Santa Barbara\" \"Santa Barbara,\") \n        \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.substr col2 3 (- (str.indexof col2 \",\" 0) 3))\n    \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 1) (str.substr (str.++ col1 \", \" col2 \", USA\") (+ (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 2) (- (str.len (str.++ col1 \", \" col2 \", USA\")) (+ (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 2))))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") col2 \"USA\" \"PA\" \"CT\" \"CA\" \"MD\" \"NY\" \"New York\"))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"Connecticut\" \"CT\") \"Maryland\" \"MD\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"USA\" \"\") \"USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \"New York\" \"NY\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col1 \",\" \"\") \",\" \"\") \",\" \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"University of \" \"\") \"University\" \"\"))"
    ],
    "time_diff_ms": 697.486,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (- (str.len col1) (+ (str.indexof col1 \",\") 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.++ col1 \", \" col2) \"New York\" \"NY\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"New \" \"\") 0 2) \", \" (str.substr (str.replace (str.replace col2 \"University of\" \"\") \"University\" \"\") 0 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 1 (- (str.len col2) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Philadelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"College Park\" \"College Park,\") \"Santa Barbara\" \"Santa Barbara,\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 3 (- (str.indexof col2 \",\" 0) 3)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"New Haven\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 1) (str.substr (str.++ col1 \", \" col2 \", USA\") (+ (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 2) (- (str.len (str.++ col1 \", \" col2 \", USA\")) (+ (str.indexof (str.++ col1 \", \" col2 \", USA\") \",\") 2))))))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"UC Berkeley\" \"Berkeley\") \"MIT\" \"Cambridge\") \"Rice University\" \"Houston\") \"Yale University\" \"New Haven\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \"UIUC\" \"Urbana\") \"Temple University\" \"Philadelphia\") \"Harvard University\" \"Cambridge\") \"University of Connecticut\" \"Storrs\") \"Drexel University\" \"Philadelphia\") \"New Haven University\" \"New Haven\") \"University of California, Santa Barbara\" \"Santa Barbara\") col2 \"USA\" \"PA\" \"CT\" \"CA\" \"MD\" \"NY\" \"New York\"))))))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.replace (str.replace col2 \"New York\" \"NY\") \"New Haven\" \"CT\") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"California\" \"CA\") \"Connecticut\" \"CT\") \"Maryland\" \"MD\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (- (str.indexof col2 \",\" 0) 2) (- (str.len col2) (str.indexof col2 \",\" 0))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of\" \"\") \"University\" \"\") \"College\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\") \"University\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"USA\" \"\") \"USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"University of \" \"\") \"University \" \"\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col1 \",\" \"\") \",\" \"\") \",\" \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"University of \" \"\") \"University\" \"\"))"
    ]
  },
  "phone-5-long.sl": {
    "completions": [
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.substr name 1 3))\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.at name 1)\"",
      "(define-fun f (name String) String\n    (str.at name 1))",
      "\"(str.at name 1)\"",
      "\"(str.at name 1)\"",
      "\"(str.substr name 1 3))\"",
      "\"(ite (= (str.len name) 4) (str.substr name 1 3) (ite (= (str.len name) 5) (str.substr name 1 2) (str.substr name 1 1)))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(str.at name 1)",
      "(define-fun f (name String) String\n  (str.at name 1))"
    ],
    "time_diff_ms": 446.485,
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.at name 1)\")",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(ite (= (str.len name) 4) (str.substr name 1 3) (ite (= (str.len name) 5) (str.substr name 1 2) (str.substr name 1 1)))\")",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))"
    ]
  },
  "phone-5-short.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n    (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "\"(str.substr name 1 (str.indexof name \\\" \\\")))\"",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.at name 1))",
      "(define-fun f (name String) String\n  (str.at name 1))"
    ],
    "time_diff_ms": 28.602,
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String \"(str.substr name 1 (str.indexof name \\\" \\\")))\")",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.at name 1))",
      "(define-fun f (name String) String (str.at name 1))"
    ]
  },
  "11604909.sl": {
    "completions": [
      "(define-fun f ((s String)) String\n  (str.substr s\n              (+ (str.indexof s \" \" 0) 1)\n              (str.indexof s \" \" (+ (str.indexof s \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (ite (str.contains _arg_0 \".\") (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f ((s String)) String\n  (str.++ \" \"\n          (str.substr s (+ 1 (str.indexof s \" \")) (- (str.indexof s \" \") 1)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) 0))",
      "(ite (str.contains _arg_0 \"Linux\")\n     (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"Linux\")) (+ 3 (str.indexof _arg_0 \"Linux\")))\n     (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (+ 3 (str.indexof _arg_0 \" \"))))",
      "(define-fun f ((s String)) String\n  (str.substr s\n              (+ (str.indexof s \" \" 0) 1)\n              (str.indexof s \" \" (str.indexof s \" \" 0))))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\"",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f ((s String)) String\n  (str.substr s \n              (+ (str.indexof s \" \" 0) 1) \n              (- (str.indexof s \" \" 0) 1)))",
      "\"(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\"",
      "(str.substr _arg_0 \n             (+ (str.indexof _arg_0 \" \" 0) 1) \n             (- \n               (str.indexof _arg_0 \" \" 0) \n               (+ (str.indexof (str.substr _arg_0 \n                                         (+ (str.indexof _arg_0 \" \" 0) 1) \n                                         (str.len _arg_0)) \n                                  \" \" 0) 1)))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \")\n            (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (- (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1)))\""
    ],
    "time_diff_ms": 870.573,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (str.indexof s \" \" (+ (str.indexof s \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (ite (str.contains _arg_0 \".\") (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \")) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))))",
      "(define-fun f (_arg_0 String) String (str.++ \" \" (str.substr s (+ 1 (str.indexof s \" \")) (- (str.indexof s \" \") 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) 0)))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Linux\") (str.substr _arg_0 (+ 6 (str.indexof _arg_0 \"Linux\")) (+ 3 (str.indexof _arg_0 \"Linux\"))) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (+ 3 (str.indexof _arg_0 \" \")))))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (str.indexof s \" \" (str.indexof s \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \".\") (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 2))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 (str.at _arg_0 (- (str.len _arg_0) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" 0) 1) (- (str.indexof s \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String \"(str.to.int (str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\")))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (- (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1)))\")"
    ]
  },
  "phone-9-long.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\") \"\") \"-\")",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\") \".\") \"+\") \"0\") \"0\") \"1\") \"1\") \"2\") \"2\") \"3\") \"3\") \"4\") \"4\") \"5\") \"5\") \"6\") \"6\") \"7\") \"7\") \"8\") \"8\") \"9\") \"9\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\"))\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "\"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\"))\""
    ],
    "time_diff_ms": 33.99,
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      null,
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\"\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\" \\\" \\\".\\\"))\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\".\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \"-\" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")"
    ]
  },
  "univ_4_short.sl": {
    "completions": [
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\",\\\" \\\", USA\\\") \\\", PA\\\" \\\", USA\\\") \\\", CT\\\" \\\", USA\\\") \\\", CA\\\" \\\", USA\\\") \\\", MD\\\" \\\", USA\\\") \\\", NY\\\" \\\", USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Phialdelphia\\\" \\\", PA\\\") 0 (str.len col1))\"",
      "(define-fun f (col1 String col2 String) String\n  (str.substr \n    (str.replace \n      (str.++ col1 \", \" col2 \", USA\") \n      \"Phialdelphia\" \"Philadelphia\") \n    0 25))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\") \\\"MD\\\" \\\"MD\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"NY\\\" \\\"NY\\\")\"",
      "\"(str.substr (str.substr (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0) 1) (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1))\"",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"New York\\\" \\\"New York\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\")\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", NY\" \", NY, USA\") \"New York, NY\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\"))",
      "\"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (str.len col2)) \\\", USA\\\")\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CT\\\" \\\"CT\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") 0 100)\"",
      "(define-fun f (col1 String col2 String) String\n  (str.++ \n    (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1))\n    (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)))\n    \", USA\"))",
      "\"(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \\\",\\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\" \\\", USA\\\") 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1)) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1)\"",
      "(define-fun f (col1 String col2 String) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\")\n               \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\"\n               \"Los Angeles, CA\" \"Los Angeles, CA, USA\"\n               \"Ithaca, New York, USA\" \"Ithaca, NY, USA\"\n               \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\"\n               \"College Park, MD\" \"College Park, MD, USA\"\n               \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\"\n               \"New York, NY, USA\" \"New York, NY, USA\"\n               \"New York, New York, USA\" \"New York, NY, USA\"))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca, New York\\\" \\\"Ithaca, NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\")\"",
      "\"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") 0 8)\"",
      "\"(str.substr (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" 0) 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of \" \"\") \"University \" \"\") \" of \" \"\") \" , \" \"\") \" , \" \"\") \", \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \"\") \" , \" \") 0 (- (str.indexof col2 \",\") 1) col2) 0 (- (str.indexof (str.replace col2 \", USA\" \"\") \",\") 1) col2))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 100))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"College Park\" \"MD\")\n    0 999))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 (- (str.len \"Phialdelphia, PA, USA\") 4)))"
    ],
    "time_diff_ms": 279.629,
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of Pennsylvania\\\" \\\"Phialdelphia\\\") \\\"UCLA\\\" \\\"Los Angeles\\\") \\\"Cornell University\\\" \\\"Ithaca\\\") \\\"Penn\\\" \\\"Philadelphia\\\") \\\"University of Maryland College Park\\\" \\\"College Park\\\") \\\"University of Michigan\\\" \\\"Ann Arbor\\\") \\\"Columbia University\\\" \\\"New York\\\") \\\"NYU\\\" \\\"New York\\\") \\\",\\\" \\\", USA\\\") \\\", PA\\\" \\\", USA\\\") \\\", CT\\\" \\\", USA\\\") \\\", CA\\\" \\\", USA\\\") \\\", MD\\\" \\\", USA\\\") \\\", NY\\\" \\\", USA\\\") \\\", New York\\\" \\\", NY\\\") \\\", Ithaca\\\" \\\", NY\\\") \\\", Philadelphia\\\" \\\", PA\\\") \\\", College Park\\\" \\\", MD\\\") \\\", Ann Arbor\\\" \\\", MI\\\") \\\", Los Angeles\\\" \\\", CA\\\") \\\", Phialdelphia\\\" \\\", PA\\\") 0 (str.len col1))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 0 25))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\") \\\"MD\\\" \\\"MD\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"NY\\\" \\\"NY\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.substr (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0) 1) (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1)) 2 (- (str.len (str.indexof (str.++ col1 \\\",\\\" col2) \\\",\\\" 0)) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"New York\\\" \\\"New York\\\") \\\"New York\\\" \\\"New York\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"PA\\\" \\\"PA\\\") \\\"MI\\\" \\\"MI\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\" ) \\\",\\\" \\\"\\\") \\\"USA\\\" \\\"USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \"University of Pennsylvania\" \"Phialdelphia\") \"UCLA\" \"Los Angeles\") \"Cornell University\" \"Ithaca\") \"Penn\" \"Philadelphia\") \"University of Maryland College Park\" \"College Park\") \"University of Michigan\" \"Ann Arbor\") \"Columbia University\" \"New York\") \"NYU\" \"New York\") \", PA\" \", PA, USA\") \", CA\" \", CA, USA\") \", MD\" \", MD, USA\") \", NY\" \", NY, USA\") \"New York, NY\" \"New York, NY, USA\") \"New York, New York\" \"New York, NY, USA\"))))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (str.len col2)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\") \\\"Los Angeles\\\" \\\"Los Angeles\\\") \\\"Ithaca\\\" \\\"Ithaca\\\") \\\"Ann Arbor\\\" \\\"Ann Arbor\\\") \\\"College Park\\\" \\\"College Park\\\") \\\"New York\\\" \\\"New York\\\") \\\"PA\\\" \\\"PA\\\") \\\"CT\\\" \\\"CT\\\") \\\"CA\\\" \\\"CA\\\") \\\"MD\\\" \\\"MD\\\") \\\"NY\\\" \\\"NY\\\") \\\"MI\\\" \\\"MI\\\") 0 100)\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.substr (str.replace (str.replace (str.++ col1 \\\",\\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\" \\\", USA\\\") 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1)) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1) 0 (- (str.indexof (str.replace col1 \\\",\\\" \\\",\\\") \\\",\\\" 1) 1) col1)\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\" \"Los Angeles, CA\" \"Los Angeles, CA, USA\" \"Ithaca, New York, USA\" \"Ithaca, NY, USA\" \"Philadelphia, PA, USA\" \"Philadelphia, PA, USA\" \"College Park, MD\" \"College Park, MD, USA\" \"Ann Arbor, MI, USA\" \"Ann Arbor, MI, USA\" \"New York, NY, USA\" \"New York, NY, USA\" \"New York, New York, USA\" \"New York, NY, USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col1 \\\"University of \\\" \\\"\\\") \\\"University \\\" \\\"\\\") \\\" of \\\" \\\"\\\") \\\",\\\" \\\"\\\") \\\"Michigan\\\" \\\"Ann Arbor\\\") \\\"Ithaca, New York\\\" \\\"Ithaca, NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"Phialdelphia\\\" \\\"Philadelphia\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") \\\"New York\\\" \\\"NY\\\") 0 8)\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.replace (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" \\\"\\\") 0 (- (str.indexof (str.++ col1 \\\",\\\" col2 \\\", USA\\\") \\\", USA\\\" 0) 1))\")",
      null,
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 100))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Los Angeles\" \"CA\") \"Ithaca\" \"NY\") \"College Park\" \"MD\") 0 999))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, PA, USA\" \"Phialdelphia, PA, USA\") 0 (- (str.len \"Phialdelphia, PA, USA\") 4)))"
    ]
  },
  "phone-10-long.sl": {
    "completions": [
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 7 3)\"",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3))",
      "\"(str.++ (str.substr name 0 5) \\\" (\\\" (str.substr name 5 3) \\\") \\\" (str.substr name 8 3))\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3)\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\"",
      "\"(str.replace (str.replace (str.replace name \" \" \"\") \"-\" \") (\" \") \") -> (str.++ (str.++ (str.++ \"+(\" (str.substr name 0 3)) \") \" (str.substr name 3 3)) \"-\" (str.substr name 7 3))\"",
      "\"(str.++ \"+\" (str.substr name 0 3) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3))\""
    ],
    "time_diff_ms": 97.265,
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 5) \\\" (\\\" (str.substr name 5 3) \\\") \\\" (str.substr name 8 3))\")",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 4) \\\" (\\\" (str.substr name 4 3) \\\") \\\" (str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String \"(str.++ \")"
    ]
  },
  "phone-9.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"\n    (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\")))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 1 3) \".\"\n    (str.substr name 5 3) \".\"\n    (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \"\") \"([0-9]{3})([0-9]{3})([0-9]{3})\" \"\\\\1.\\\\2.\\\\3\"))"
    ],
    "time_diff_ms": 521.132,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace name \" \" \".\" (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\"\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"+\" \".\")))",
      "(define-fun f (name String) String (str.++ (str.substr name 1 3) \".\" (str.substr name 5 3) \".\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \"\") \"+\" \"\") \"([0-9]{3})([0-9]{3})([0-9]{3})\" \"\\\\1.\\\\2.\\\\3\"))"
    ]
  },
  "clean-and-reformat-telephone-numbers.sl": {
    "completions": [
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \".\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\")"
    ],
    "time_diff_ms": 902.975,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \".\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\"))"
    ]
  },
  "stackoverflow7.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.++ _arg_0 \" -> \" (str.replace _arg_1 _arg_0 \"\"))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(ite (str.contains _arg_0 _arg_1)\n     (str.replace _arg_0 _arg_1 \"\")\n     _arg_0)",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.replace _arg_0 _arg_1 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.++ \"Item \" (ite (str.contains _arg_0 _arg_1) (str.replace _arg_0 _arg_1 \"\") _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))"
    ],
    "time_diff_ms": 393.966,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.++ _arg_0 \" -> \" (str.replace _arg_1 _arg_0 \"\")))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (ite (str.contains _arg_0 _arg_1) (str.replace _arg_0 _arg_1 \"\") _arg_0))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.++ \"Item \" (ite (str.contains _arg_0 _arg_1) (str.replace _arg_0 _arg_1 \"\") _arg_0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))"
    ]
  },
  "univ_4-long-repeat.sl": {
    "completions": [
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.++ col1 \\\", \\\" col2) \\\", USA\\\")\"",
      "\"(str.++ (str.replace col2 col1 \\\"USA\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\"))\"",
      "\"(str.++ (str.replace (str.replace col1 \\\", \\\" \\\",\\\") col2 \\\",\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\")\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\"",
      "\"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\"",
      "\"(str.++ col2 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "\"(str.++ col2 \\\", \\\" col1 \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "\"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\""
    ],
    "time_diff_ms": 955.602,
    "solutions": [
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.++ col1 \\\", \\\" col2) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace col2 col1 \\\"USA\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") \\\",\\\" \\\", USA\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\",\\\" col2) \\\", USA\\\" \\\"\\\"))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col1 \\\", \\\" \\\",\\\") col2 \\\",\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2 \\\", USA\\\") \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col1 0 (- (str.indexof col1 \\\",\\\" 0) 1)) \\\", \\\" (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) \\\", USA)\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 \\\", \\\" col2) \\\"New York\\\" \\\"NY\\\") \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (str.++ col1 \", \" \"USA\")))",
      "(define-fun f (col1 String col2 String) String \"(str.++ col2 \\\", \\\" col1 \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.replace (str.++ col1 col2) \\\", USA\\\" \\\"\\\") \\\", USA\\\")\")"
    ]
  },
  "strip-numeric-characters-from-cell.sl": {
    "completions": [
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 1) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\") )",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 1) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 (int.to.str 0) \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "(str.replace _arg_0 \"0123456789\" \"\")",
      "\"(str.replace _arg_0 (int.to.str 0) \\\"\\\")\""
    ],
    "time_diff_ms": 918.367,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str 0) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0123456789\" \"\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 (int.to.str 0) \\\"\\\")\")"
    ]
  },
  "36462127.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) (+ (str.indexof _arg_0 \"/\") 1)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))"
    ],
    "time_diff_ms": 58.368,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) (+ (str.indexof _arg_0 \"/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))"
    ]
  },
  "stackoverflow3.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.len _arg_0) 1)) 1)) 1) 1))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.rindexof _arg_0 \"1\" (+ 1 (str.rindexof _arg_0 \"2\" (+ 1 (str.rindexof _arg_0 \"3\" (+ 1 (str.rindexof _arg_0 \"4\" (+ 1 (str.rindexof _arg_0 \"5\" (+ 1 (str.rindexof _arg_0 \"6\" (+ 1 (str.rindexof _arg_0 \"7\" (+ 1 (str.rindexof _arg_0 \"8\" (+ 1 (str.rindexof _arg_0 \"9\" 0))))))))))))))))))) (str.len _arg_0))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.len (str.replace _arg_0 \" \" \"\")))) 1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.to.int 0) -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"\"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) 1))",
      "(str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.replace (str.replace (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") -1) 1))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.len _arg_0) 1)) 1)))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1))))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"X\"))) 0) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \"1\" \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0))) (str.len \"0\")) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)) 1) 1))",
      "(str.substr _arg_0 (+ (str.rindexof _arg_0 \"1\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0))"
    ],
    "time_diff_ms": 291.003,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.len _arg_0) 1)) 1)) 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 10)) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.rindexof _arg_0 \"1\" (+ 1 (str.rindexof _arg_0 \"2\" (+ 1 (str.rindexof _arg_0 \"3\" (+ 1 (str.rindexof _arg_0 \"4\" (+ 1 (str.rindexof _arg_0 \"5\" (+ 1 (str.rindexof _arg_0 \"6\" (+ 1 (str.rindexof _arg_0 \"7\" (+ 1 (str.rindexof _arg_0 \"8\" (+ 1 (str.rindexof _arg_0 \"9\" 0))))))))))))))))))) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- 1 (str.len (str.replace _arg_0 \" \" \"\")))) 1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.to.int 0) -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) (- (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.to.int 9) (str.replace (str.replace (str.replace _arg_0 \"0\" \"\") \"1\" \"\") \"2\" \"\") -1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.len _arg_0) 1)) 1))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"1\" (- (str.len _arg_0) 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0123456789\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \" \" \"X\"))) 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.len (str.replace _arg_0 \"1\" \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.len _arg_0))) (str.len \"0\")) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1)) 1)) 1) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.rindexof _arg_0 \"1\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 (int.to.str (str.to.int (str.substr _arg_0 (- (str.len _arg_0) 1) 1))) 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 (int.to.str (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1)))) 0) (str.len _arg_0)))"
    ]
  },
  "univ_5-long.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 col1 \"\") \", \" \",\") \", USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "\"(str.replace col1 col2 \"\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 col1 \"\") \" \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "\"(str.substr col2 0 (- (str.len col2) 5))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \", USA\") 0 (- (str.len col2) 5)))",
      "\"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "\"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\"",
      "\"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace col1 \"University of \" \"\"))"
    ],
    "time_diff_ms": 808.053,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \", \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 col1 \"\") \", \" \",\") \", USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String \"(str.replace col1 col2 \")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 col1 \"\") \" \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.len col2) 5))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \", USA\" \"\") \", \" \",\") \", USA\") 0 (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (- (str.len col2) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \", USA\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \") \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))"
    ]
  },
  "exceljet2.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))"
    ],
    "time_diff_ms": 22.748,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))))"
    ]
  },
  "univ_6.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (- (str.indexof col2 \", \" 0) 3) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col2 0 (str.indexof col2 \",\" 0)) col2) (ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\")) \"New York\" \"NY\")",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 0) (str.at col1 1) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\"))))",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))) )",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (- (str.len col2) 4)))))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.++ \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr (str.replace col2 \" \" \"\") 0 2)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))"
    ],
    "time_diff_ms": 33.101,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr col2 (- (str.indexof col2 \", \" 0) 3) 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \" , \" \", \"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col2 0 (str.indexof col2 \",\" 0)) col2) (ite (str.contains col2 \",\") (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)) \"USA\")) \"New York\" \"NY\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 0) (str.at col1 1) \", \" (str.at col2 0) (str.at col2 1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2)) \", USA\")))",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", USA\\\" \\\"\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 1 (str.indexof col2 \",\"))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.at col2 (- (str.len col2) 4)))))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.at col1 1) (str.at col1 2) \", \" (str.at col2 1) (str.at col2 2) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\") 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\") 1)) (str.substr col1 (+ (str.indexof col1 \",\") 2) (str.len col1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) (str.++ \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (str.indexof col1 \",\")) \", \" (str.substr col2 0 (str.indexof col2 \",\")) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\")) \", \" (ite (str.contains col2 \"New York\") \"NY\" (str.substr (str.replace col2 \" \" \"\") 0 2)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))"
    ]
  },
  "stackoverflow2.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \" korea\" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \"korea\" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \" korea\" \"\")",
      "(str.replace _arg_0 \" \" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.replace _arg_0 \" \" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "time_diff_ms": 207.233,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" korea\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ]
  },
  "phone-6-long-repeat.sl": {
    "completions": [
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "(str.substr name 4 3))",
      "(str.at name 4))",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "\"(str.at name 4)\"",
      "(str.at name 4))",
      "(define-fun f (name String) String\n  (str.at name 5))",
      "\"(str.at name 5)\"",
      "(ite (str.contains name \" \")\n     (str.substr name 5 3)\n     (str.substr name 3 3))",
      "\"(str.at name 5)\"",
      "(str.at name 4)",
      "(str.at name 5))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "time_diff_ms": 129.515,
    "solutions": [
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String \"(str.at name 4)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 5 3) (str.substr name 3 3)))",
      "(define-fun f (name String) String \"(str.at name 5)\")",
      "(define-fun f (name String) String (str.at name 4))",
      "(define-fun f (name String) String (str.at name 5))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ]
  },
  "25239569.sl": {
    "completions": [
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(str.replace _arg_0 \"BRD\" \"Branding\")"
    ],
    "time_diff_ms": 41.494,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))"
    ]
  },
  "univ_5_short.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace col1 \"University of \" \"\") \" , \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (str.len col2)))",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 1))",
      "(str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 5))",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (str.len col2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.substr \n        (str.replace \n            (str.++ col1 \", \" col2 \", USA\") \n            \", New York\" \", NY\") \n        2 \n        (- (str.len col1) 2)\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col1 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col1 \",\" 0)))))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\")\n    0 (- (str.len col2) 5)\n  )\n)",
      "(define-fun f ((col1 String) (col2 String)) String (str.replace (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") \",\" \"\"))",
      "\"(str.substr col2 (+ 2 (str.indexof col2 \\\", \\\")) (- (str.len col2) 4))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr col2\n              (+ 1 (str.indexof col2 \",\"))\n              (- (str.len col2) (+ 1 (str.indexof col2 \",\")))))",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, \" \"\")\n                0\n                (- (str.len col1) 2)))",
      "(define-fun f ((col1 String) (col2 String)) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))))"
    ],
    "time_diff_ms": 121.642,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col1 \"University of \" \"\") \" , \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4)))",
      "(define-fun f (col1 String col2 String) String (str.replace col1 \"University of \" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \" 0)) (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (str.len col2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 0 (- (str.indexof col2 \",\") 1)))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \", New York\" \", NY\") 2 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col1 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col1 \",\" 0)))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\") \"University \" \"\") 0 (- (str.len col2) 5)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 col1 \"\") \"USA\" \"\") \",\" \"\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 2 (str.indexof col2 \\\", \\\")) (- (str.len col2) 4))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 1 (str.indexof col2 \",\")) (- (str.len col2) (+ 1 (str.indexof col2 \",\")))))",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, \" \"\") 0 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) (+ (str.indexof col2 \",\") 2))))"
    ]
  },
  "remove-text-by-position.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))"
    ],
    "time_diff_ms": 743.221,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))"
    ]
  },
  "univ_6-long-repeat.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (ite (str.contains col2 \",\") \"USA\" \"\")))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col1 0 (str.indexof col1 \",\" 0)) col1) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))"
    ],
    "time_diff_ms": 861.978,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (ite (str.contains col2 \",\") \"USA\" \"\")))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" (ite (str.contains col2 \",\") (str.substr col1 0 (str.indexof col1 \",\" 0)) col1) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.++ col1 \", \" col2 \", \") \"USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))"
    ]
  },
  "univ_4.sl": {
    "completions": [
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ col2 \", USA\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))",
      "\"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (str.len col2)) \\\", USA\\\")\"",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia, PA\" \"Philadelphia, PA, USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, Pennsylvania\" \"Phialdelphia, PA\"\n              \"Los Angeles, California\" \"Los Angeles, CA\"\n              \"New York, New York\" \"New York, NY\"\n              \"College Park, Maryland\" \"College Park, MD\"\n              \"Ann Arbor, Michigan\" \"Ann Arbor, MI\"\n              \"New York, New York\" \"New York, NY\"))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.substr col2 0 (+ (str.indexof col2 \\\",\\\" 0) 2))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)))\"",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.substr \n        (str.replace \n            (str.++ col1 \", \" col2 \", USA\") \n            \"New York\" \"NY\") \n        0 \n        (- (str.len col1) 2)\n    )\n)",
      "(define-fun f ((col1 String) (col2 String)) String\n    (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.++ \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    (str.replace \n                                                                      (str.replace \n                                                                        (str.replace \n                                                                          (str.replace \n                                                                            (str.replace \n                                                                              (str.replace \n                                                                                (str.replace \n                                                                                  (str.replace \n                                                                                    (str.replace \n                                                                                      (str.replace \n                                                                                        (str.replace \n                                                                                          (str.replace \n                                                                                            (str.replace \n                                                                                              (str.replace \n                                                                                                (str.replace \n                                                                                                  (str.replace \n                                                                                                    (str.replace \n                                                                                                      (str.replace \n                                                                                                        (str.replace \n                                                                                                          (str.replace \n                                                                                                            (str.replace \n                                                                                                              (str.replace \n                                                                                                                (str.replace \n                                                                                                                  (str.replace \n                                                                                                                    (str.replace \n                                                                                                                      (str.replace \n                                                                                                                        (str.replace \n                                                                                                                          (str.replace \n                                                                                                                            (str.replace \n                                                                                                                              (str.replace \n                                                                                                                                (str.replace \n                                                                                                                                  (str.replace \n                                                                                                                                    (str.replace \n                                                                                                                                      (str.replace \n                                                                                                                                        (str.replace \n                                                                                                                                          (str.replace \n                                                                                                                                            (str.replace \n                                                                                                                                              (str.replace \n                                                                                                                                                (str.replace \n                                                                                                                                                  (str.replace \n                                                                                                                                                    (str.replace \n                                                                                                                                                      (str.replace \n                                                                                                                                                        (str.replace \n                                                                                                                                                          (str.replace \n                                                                                                                                                            (str.replace \n                                                                                                                                                              (str.replace \n                                                                                                                                                                (str.replace \n                                                                                                                                                                  (str.replace \n                                                                                                                                                                    (str.replace \n                                                                                                                                                                      (str.replace \n                                                                                                                                                                        (str.replace \n                                                                                                                                                                          (str.replace \n                                                                                                                                                                            (str.replace \n                                                                                                                                                                              (str.replace \n                                                                                                                                                                                (str.replace \n                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                                                                                (str.replace \n                                                                                                                                                                                                                                                                                                                                  (str.replace \n                                                                                                                                                                                                                                                                                                                                    (str.replace \n                                                                                                                                                                                                                                                                                                                                      (str.replace \n                                                                                                                                                                                                                                                                                                                                        (str.replace \n                                                                                                                                                                                                                                                                                                                                          (str.replace \n                                                                                                                                                                                                                                                                                                                                            (str.replace \n                                                                                                                                                                                                                                                                                                                                              (str.replace \n                                                                                                                                                                                                                                                                                col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\")",
      "(define-fun f ((col1 String) (col2 String)) String\n  (str.substr \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace \n            (str.replace \n              (str.replace \n                (str.replace \n                  (str.replace \n                    (str.replace \n                      (str.replace \n                        (str.replace \n                          (str.replace \n                            (str.replace \n                              (str.replace \n                                (str.replace \n                                  (str.replace \n                                    (str.replace \n                                      (str.replace \n                                        (str.replace \n                                          (str.replace \n                                            (str.replace \n                                              (str.replace \n                                                (str.replace \n                                                  (str.replace \n                                                    (str.replace \n                                                      (str.replace \n                                                        (str.replace \n                                                          (str.replace \n                                                            (str.replace \n                                                              (str.replace \n                                                                (str.replace \n                                                                  (str.replace \n                                                                    col2 \"New York\" \"NY\") \n                                                                  \"New York\" \"NY\") \n                                                                \"New York\" \"NY\") \n                                                              \"New York\" \"NY\") \n                                                            \"New York\" \"NY\") \n                                                          \"New York\" \"NY\") \n                                                        \"New York\" \"NY\") \n                                                      \"New York\" \"NY\") \n                                                    \"New York\" \"NY\") \n                                                  \"New York\" \"NY\") \n                                                \"New York\" \"NY\") \n                                              \"New York\" \"NY\") \n                                            \"New York\" \"NY\") \n                                          \"New York\" \"NY\") \n                                        \"New York\" \"NY\") \n                                      \"New York\" \"NY\") \n                                    \"New York\" \"NY\") \n                                  \"New York\" \"NY\") \n                                \"New York\" \"NY\") \n                              \"New York\" \"NY\") \n                            \"New York\" \"NY\") \n                          \"New York\" \"NY\") \n                        \"New York\" \"NY\") \n                      \"New York\" \"NY\") \n                    \"New York\" \"NY\") \n                  \"New York\" \"NY\") \n                \"New York\" \"NY\") \n              \"New York\" \"NY\") \n            \"New York\" \"NY\") \n          \"New York\" \"NY\") \n        \"New York\" \"NY\") \n      \"New York\" \"NY\") \n    \"New York\" \"NY\" 0 (- (str.len col2) 4)))"
    ],
    "time_diff_ms": 527.731,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", \" col1 \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ col2 \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (- (str.len col2) (+ (str.indexof col2 \",\" 0) 2))) \", USA\"))",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\") 2) (str.len col2)) \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"Phialdelphia\" \"Philadelphia\") \"Phialdelphia, PA\" \"Philadelphia, PA, USA\"))",
      "(define-fun f (col1 String col2 String) String (str.++ (str.substr col1 0 (- (str.indexof col1 \",\" 0) 1)) \", \" (str.substr col2 0 (- (str.indexof col2 \",\" 0) 1)) \", USA\"))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia, Pennsylvania\" \"Phialdelphia, PA\" \"Los Angeles, California\" \"Los Angeles, CA\" \"New York, New York\" \"New York, NY\" \"College Park, Maryland\" \"College Park, MD\" \"Ann Arbor, Michigan\" \"Ann Arbor, MI\" \"New York, New York\" \"New York, NY\"))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (+ (str.indexof col2 \\\",\\\" 0) 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.++ (str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1)) (str.substr col2 (+ (str.indexof col2 \\\",\\\" 0) 2) (str.len col2)))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"New York\" \"NY\") 0 (- (str.len col1) 2)))",
      "(define-fun f (col1 String col2 String) String (str.replace (str.replace col2 \"New York\" \"NY\") \"University of \" \"\"))",
      null,
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace col2 \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\") \"New York\" \"NY\" 0 (- (str.len col2) 4)))"
    ]
  },
  "phone-10-long-repeat.sl": {
    "completions": [
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\"\n         (str.substr name 0 2)\n         \" (\"\n         (str.substr name 2 3)\n         \") \"\n         (str.substr name 5 3)\n         \"-\"\n         (str.substr name 9 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 6 3)\n         \"-\"\n         (str.substr name 10 3))",
      "(str.++ \"+\"\n  (str.substr name 0 3)\n  \" (\"\n  (str.substr name 3 3)\n  \") \"\n  (str.substr name 6 3)\n  \"-\"\n  (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\"\n(str.substr name 0 3)\n\" (\"\n(str.substr name 3 3)\n\") \"\n(str.substr name 6 3)\n\"-\"\n(str.substr name 10 3))",
      "(str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3))",
      "\"(str.++ \"+\" (str.at name 1) (str.at name 2) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3))\"",
      "(str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" \"(\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3) \"-\" (str.substr name 9 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))",
      "(str.++ \"+\"\n         (str.substr name 1 2)\n         \" (\"\n         (str.substr name 4 3)\n         \") \"\n         (str.substr name 8 3))",
      "(str.++ \"+\"\n         (str.substr name 0 3)\n         \" (\"\n         (str.substr name 3 3)\n         \") \"\n         (str.substr name 7 3)\n         \"-\"\n         (str.substr name 11 3)\n         )",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3))"
    ],
    "time_diff_ms": 271.048,
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 2) \" (\" (str.substr name 2 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String \"(str.++ \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" \"(\" (str.at name 0) (str.at name 1) (str.at name 2) \") \" (str.substr name 3 3) \"-\" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 1 2) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))"
    ]
  },
  "univ_5.sl": {
    "completions": [
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\"",
      "\"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\"",
      "\"(str.substr col2 (+ 1 (str.indexof col2 \\\",\\\" 0)) (str.len col2))\"",
      "\"(str.substr col2 2 (- (str.indexof col2 \\\",\\\") 2))\"",
      "\"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\"",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "\"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\"",
      "(str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 2 (- (str.len col2) 2))",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\"",
      "\"(str.substr (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) 2 (str.len (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))))\"",
      "\"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\"",
      "\"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", \\\" \\\", USA\\\")\"",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))",
      "(str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2))",
      "(str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4))",
      "\"(str.replace col1 col2 \"\")\"",
      "(str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2))"
    ],
    "time_diff_ms": 71.888,
    "solutions": [
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\" 0) 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ 1 (str.indexof col2 \\\",\\\" 0)) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 2 (- (str.indexof col2 \\\",\\\") 2))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 (+ (str.indexof col2 col1 0) (str.len col1)) (str.len col2))\")",
      "(define-fun f (col1 String col2 String) String (str.substr (str.replace (str.++ col1 \", \" col2 \", USA\") \"Phialdelphia\" \"Philadelphia\") 2 (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") \\\", USA\\\" \\\"\\\") \\\",\\\" \\\",\\\")\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1)) 2 (str.len (str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))))\")",
      "(define-fun f (col1 String col2 String) String \"(str.substr col2 0 (- (str.indexof col2 \\\",\\\") 1))\")",
      "(define-fun f (col1 String col2 String) String \"(str.replace (str.replace (str.replace col2 col1 \\\"\\\") col1 \\\"\\\") \\\", \\\" \\\", USA\\\")\")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \", \") 2) (- (str.len col2) 2)))",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ 2 (str.indexof col2 \", \")) (- (str.len col2) 4)))",
      "(define-fun f (col1 String col2 String) String \"(str.replace col1 col2 \")",
      "(define-fun f (col1 String col2 String) String (str.substr col2 (+ (str.indexof col2 \",\") 2) (- (str.len col2) 2)))"
    ]
  },
  "stackoverflow1.sl": {
    "completions": [
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\"))))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\"))))"
    ],
    "time_diff_ms": 113.733,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc.\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc.\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" Inc\")))"
    ]
  },
  "exceljet1.sl": {
    "completions": [
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "(str.substr (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))) 0 (str.len (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr (str.substr _arg_1 0 (- (str.indexof _arg_1 \"_\") 1)) (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\")))"
    ],
    "time_diff_ms": 649.205,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))) 0 (str.len (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr (str.substr _arg_1 0 (- (str.indexof _arg_1 \"_\") 1)) (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (- (str.len _arg_1) (str.indexof _arg_1 \".\"))))"
    ]
  },
  "initials-long-repeat.sl": {
    "completions": [
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 7 100) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\")",
      "(str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0))"
    ],
    "time_diff_ms": 916.913,
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (- (str.indexof name \" \" 0) 1)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 7 100) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \")) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name 1 (str.indexof name \" \" 0)) 0) \".\"))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0)))"
    ]
  },
  "find-nth-occurrence-of-character.sl": {
    "completions": [
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(+ (str.indexof _arg_0 \", \" 0) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" (- _arg_1 1) 0) 1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 2)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \"_\") 1) 1) 1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" 0) 0) 0) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" 0) 1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10)",
      "(str.indexof _arg_0 \", \" (- _arg_1 1) 0)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1)",
      "(+ (str.indexof _arg_0 \", \" _arg_1) 1)",
      "(str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" _arg_1)))))",
      "(+ (str.indexof _arg_0 \", \" 0) 1) 10) 2) 15) 3) 30))",
      "(+ (str.indexof _arg_0 \", \" 0) 6)"
    ],
    "time_diff_ms": 895.573,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (- _arg_1 1) 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 2))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \"_\") 1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" 0) 0) 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 10))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (- _arg_1 1) 0))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" -1) -1) 1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" _arg_1) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" _arg_1))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" 0) 6))"
    ]
  },
  "extract-word-containing-specific-text.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1))) ) )",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))"
    ],
    "time_diff_ms": 83.924,
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))"
    ]
  },
  "extract-nth-word-from-text-string.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.at _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \".\")))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (int.to.str _arg_1)) (+ (str.indexof _arg_0 \" \" (int.to.str _arg_1)) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1)))",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 \n            (+ (str.indexof _arg_0 \" \" 0) 1) \n            (-\n                (str.indexof \n                    (str.substr _arg_0 \n                        (+ (str.indexof _arg_0 \" \" 0) 1) \n                        (str.len _arg_0)) \n                    \" \" 0) \n                (+ (str.indexof _arg_0 \" \" 0) 1)\n            )\n)",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 _arg_1)",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 _arg_1)",
      "(str.at _arg_0 (str.indexof (str.++ _arg_0 \" \") _arg_0 _arg_1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0))"
    ],
    "time_diff_ms": 798.399,
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \".\"))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (int.to.str _arg_1)) (+ (str.indexof _arg_0 \" \" (int.to.str _arg_1)) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1)))) (str.indexof _arg_0 \" \" (+ (str.len (str.substr _arg_0 0 (str.indexof _arg_0 \" \" _arg_1))) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (- (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0) (+ (str.indexof _arg_0 \" \" 0) 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (str.indexof (str.++ _arg_0 \" \") _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))"
    ]
  }
}