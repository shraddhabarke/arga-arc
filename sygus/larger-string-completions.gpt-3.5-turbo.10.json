{
  "exceljet2modified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\".\\\") 1) (str.len _arg_0))\"",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 \n              (+ (str.indexof _arg_0 \".\" 0) 1) \n              (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0 0))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 \n              (+ (str.indexof _arg_0 \".\" 0) 1) \n              (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\".\\\") 1) (str.len _arg_0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \".\" 0 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "."
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0))"
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        0,
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ]
    ],
    "all_constants": [
      ".",
      1,
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \".\") 1) (str.len _arg_0))",
      0
    ],
    "time_diff_ms": 1049.252
  },
  "31753108modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 11 8))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 11 8))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        8,
        11
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      8,
      11,
      " "
    ],
    "time_diff_ms": 2450.65
  },
  "find-nth-occurrence-of-charactermodified.sl": {
    "completions": [
      "(str.indexof _arg_0 \", \" _arg_1)",
      "(ite (= (_arg_1 1) 1) (str.indexof _arg_0 \",\" 0) (ite (= (_arg_1 2) 1) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" 0))))",
      "(str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" _arg_1))))))",
      "(str.indexof _arg_0 \",\" _arg_1))",
      "(ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33))",
      "(str.indexof _arg_0 \", \" (+ (str.indexof _arg_0 \", \" (+ (str.indexof _arg_0 \", \" -1) 1)) 1))",
      "(+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" 0) 0) 0) 1)",
      "(ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33))",
      "(ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33))",
      "(str.indexof _arg_0 \", _\" _arg_1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (ite (= (_arg_1 1) 1) (str.indexof _arg_0 \",\" 0) (ite (= (_arg_1 2) 1) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) 1)) (str.indexof _arg_0 \",\" (+ (str.indexof _arg_0 \",\" 0) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) \",\" 0))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" (+ 1 (str.indexof _arg_0 \", \" _arg_1))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \",\" _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", \" (+ (str.indexof _arg_0 \", \" (+ (str.indexof _arg_0 \", \" -1) 1)) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (+ (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" (str.indexof _arg_0 \", \" 0) 0) 0) 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (ite (= (_arg_1 1) 1) 12 (ite (= (_arg_1 2) 2) 18 33)))",
      "(define-fun f (_arg_0 String _arg_1 Int) Int (str.indexof _arg_0 \", _\" _arg_1))"
    ],
    "constants": [
      [
        ", "
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        1,
        ", "
      ],
      [
        ","
      ],
      [
        1,
        2,
        33,
        12,
        18
      ],
      [
        1,
        -1,
        ", "
      ],
      [
        0,
        1,
        ", "
      ],
      [
        1,
        2,
        33,
        12,
        18
      ],
      [
        1,
        2,
        33,
        12,
        18
      ],
      [
        ", _"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ",",
      33,
      12,
      18,
      ", ",
      ", _",
      -1
    ],
    "time_diff_ms": 1765.326
  },
  "clean-and-reformat-telephone-numbersmodified.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\"",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\"<\\\" \\\"\\\") \\\".\\\" \\\"\\\")\"",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\")",
      "(define-fun f ((phone String)) String\n  (str.replace (str.replace (str.replace phone \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\".\\\" \\\"\\\") \\\" \\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"-\\\" \\\"\\\") \\\"<\\\" \\\"\\\") \\\".\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace phone \"-\" \"\") \".\" \"\") \"<\" \"\"))"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")"
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \".\" \"\")"
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ],
      [
        "",
        "-",
        "<",
        "."
      ]
    ],
    "all_constants": [
      "",
      ".",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\")",
      "-",
      "(str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"<\" \"\") \".\" \"\")",
      "<"
    ],
    "time_diff_ms": 501.62500000000006
  },
  "17212077modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 6)",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 6)",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4))",
      "(str.substr _arg_0 0 6))",
      "(str.substr _arg_0 0 6)",
      "(str.substr _arg_0 0 6))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"/\") 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 6))"
    ],
    "constants": [
      [
        0,
        6
      ],
      [
        0,
        6
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        6
      ],
      [
        0,
        6
      ],
      [
        0,
        6
      ],
      [
        0,
        "/",
        4
      ],
      [
        0,
        6
      ],
      [
        0,
        6
      ],
      [
        0,
        6
      ]
    ],
    "all_constants": [
      0,
      "/",
      4,
      6
    ],
    "time_diff_ms": 1672.7999999999997
  },
  "11604909modified.sl": {
    "completions": [
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ 1 (str.indexof _arg_0 \\\" \\\")))\"",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.len \" \") 3)) 1))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\" 0) (str.indexof _arg_0 \\\" \\\" (+ 1 (str.indexof _arg_0 \\\" \\\" 0))))\"",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (- (str.indexof (str.++ _arg_0 \\\" \\\") \\\" \\\") (str.indexof _arg_0 \\\" \\\")))\"",
      "(ite (str.contains _arg_0 \"Windows\")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \"Windows\") 8) 3)\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \" 0)\n            (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0\n            (+ (str.indexof _arg_0 \" \") 1)\n            (str.indexof _arg_0 \" \"))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 1) (- (str.indexof _arg_0 \\\".\\\") 1))\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ 1 (str.indexof _arg_0 \\\" \\\")))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.len \" \") 3)) 1)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\" 0) (str.indexof _arg_0 \\\" \\\" (+ 1 (str.indexof _arg_0 \\\" \\\" 0))))\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\" \\\") 1) (- (str.indexof (str.++ _arg_0 \\\" \\\") \\\" \\\") (str.indexof _arg_0 \\\" \\\")))\")",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Windows\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"Windows\") 8) 3) (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\" \\\") (+ (str.indexof _arg_0 \\\".\\\") 1) (- (str.indexof _arg_0 \\\".\\\") 1))\")"
    ],
    "constants": [
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ 1 (str.indexof _arg_0 \" \")))"
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " ",
        3
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof (str.++ _arg_0 \" \") \" \") (str.indexof _arg_0 \" \")))"
      ],
      [
        1,
        3,
        "Windows",
        8,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 1) (- (str.indexof _arg_0 \".\") 1))"
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))",
      8,
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof (str.++ _arg_0 \" \") \" \") (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \".\") 1) (- (str.indexof _arg_0 \".\") 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ 1 (str.indexof _arg_0 \" \")))",
      " ",
      "Windows"
    ],
    "time_diff_ms": 1682.911
  },
  "stackoverflow4modified.sl": {
    "completions": [
      "(str.replace _arg_0 \",\" \" \")",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 (str.indexof _arg_0 \",\" 1)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 1) 1) (str.indexof _arg_0 \",\" 2)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 2) 1) (str.len _arg_0)))))",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \") \" \")",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 5 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 13 2))))",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\",\\\" \\\" \\\") \\\"<\\\" \\\"\\\") \\\">\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\",\\\" \\\" \\\") \\\"<\\\" \\\"\\\") \\\">\\\" \\\"\\\")\"",
      "\"(str.replace (str.replace (str.replace _arg_0 \"R\" \"R \") \",\" \" \") \">\" \"\")\"",
      "(str.++ \"R/\" (str.replace _arg_0 \",\" \" \"))",
      "(str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \"))",
      "(str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 5 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 13 2))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \" \"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 1 (str.indexof _arg_0 \",\" 1)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 1) 1) (str.indexof _arg_0 \",\" 2)))) \" \" (int.to.str (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 2) 1) (str.len _arg_0))))))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \") \" \"))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 5 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 13 2)))))",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\",\\\" \\\" \\\") \\\"<\\\" \\\"\\\") \\\">\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\",\\\" \\\" \\\") \\\"<\\\" \\\"\\\") \\\">\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \")",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace _arg_0 \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (str.replace (str.replace (str.replace _arg_0 \",\" \" \") \",\" \" \") \",\" \" \")))",
      "(define-fun f (_arg_0 String) String (str.++ \"R/\" (int.to.str (str.to.int (str.substr _arg_0 5 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 9 3))) \" \" (int.to.str (str.to.int (str.substr _arg_0 13 2)))))"
    ],
    "constants": [
      [
        " ",
        ","
      ],
      [
        1,
        2,
        " ",
        ",",
        "R/"
      ],
      [
        "R/",
        " ",
        ","
      ],
      [
        2,
        3,
        5,
        9,
        " ",
        13,
        "R/"
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")"
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 "
      ],
      [
        "R/",
        " ",
        ","
      ],
      [
        "R/",
        " ",
        ","
      ],
      [
        2,
        3,
        5,
        9,
        " ",
        13,
        "R/"
      ]
    ],
    "all_constants": [
      ",",
      2,
      1,
      3,
      5,
      9,
      13,
      "(str.replace (str.replace (str.replace _arg_0 \",\" \" \") \"<\" \"\") \">\" \"\")",
      "R/",
      " ",
      "(str.replace (str.replace (str.replace _arg_0 "
    ],
    "time_diff_ms": 1840.866
  },
  "remove-text-by-positionmodified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"/\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.len \"/users/\") 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/",
        "/users/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "/users/"
    ],
    "time_diff_ms": 1975.219
  },
  "44789427modified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (+ (str.indexof _arg_0 \"-\" _arg_1) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) 10))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.len (str.at _arg_0 0)) 1)) (str.indexof _arg_0 \"-\" (- (str.len _arg_0) _arg_1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" (_arg_1))))",
      "(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) (str.indexof _arg_0 \"-\" (+ _arg_1 1)))\"",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (+ (str.indexof _arg_0 \"-\" _arg_1) 1))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (+ (str.indexof _arg_0 \"-\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) 10))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ (str.len (str.at _arg_0 0)) 1)) (str.indexof _arg_0 \"-\" (- (str.len _arg_0) _arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" (_arg_1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String \"(str.substr _arg_0 (str.indexof _arg_0 \")",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (str.indexof _arg_0 \"-\" (+ _arg_1 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" _arg_1) (+ (str.indexof _arg_0 \"-\" _arg_1) 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" 0) (ite (= _arg_1 1) (str.indexof _arg_0 \"-\" 0) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (str.indexof _arg_0 \"-\" (+ _arg_1 1)) 0))"
    ],
    "constants": [
      [
        "-",
        1
      ],
      [
        "-",
        10,
        1
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 "
      ],
      [
        "-",
        1
      ],
      [
        "-",
        1
      ],
      [
        0,
        "-",
        1
      ],
      [
        0,
        "-",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      "-",
      10,
      "(str.substr _arg_0 (str.indexof _arg_0 "
    ],
    "time_diff_ms": 2353.1639999999998
  },
  "stackoverflow11modified.sl": {
    "completions": [
      "(str.substr _arg_0\n            (str.indexof _arg_0 \" \" 0)\n            (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" (str.indexof _arg_0 (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1))) 0)))\"",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 ntInt (str.to.int (str.replace _arg_0 ntString \"\"))) (str.len _arg_0))\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.len _arg_0) (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" (str.indexof _arg_0 (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1))) 0)))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 ntInt (str.to.int (str.replace _arg_0 ntString \")"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1))) 0)))"
      ],
      [
        0,
        " "
      ],
      [
        0,
        "_"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 ntInt (str.to.int (str.replace _arg_0 ntString "
      ]
    ],
    "all_constants": [
      0,
      1,
      "(str.substr _arg_0 (str.indexof _arg_0 ntInt (str.to.int (str.replace _arg_0 ntString ",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" (str.indexof _arg_0 (str.to.int (str.at _arg_0 (- (str.len _arg_0) 1))) 0)))",
      " ",
      "_"
    ],
    "time_diff_ms": 1872.8870000000002
  },
  "stackoverflow3modified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.to.int 9) (str.replace _arg_0 \" \" \"9\") 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.rindexof _arg_0 \"1\" (+ 1 (str.rindexof _arg_0 \"2\" (+ 1 (str.rindexof _arg_0 \"3\" (+ 1 (str.rindexof _arg_0 \"4\" (+ 1 (str.rindexof _arg_0 \"5\" (+ 1 (str.rindexof _arg_0 \"6\" (+ 1 (str.rindexof _arg_0 \"7\" (+ 1 (str.rindexof _arg_0 \"8\" (+ 1 (str.rindexof _arg_0 \"9\" 0)))))))))))))))))))))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) (str.len _arg_0))) 1)))))",
      "(ite (str.contains _arg_0 \" \")\n     (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0))\n     \"\")",
      "(str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"1\" (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"1\" 0))) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.to.int 9) (str.replace _arg_0 \" \" \"9\") 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \"0\" (+ 1 (str.rindexof _arg_0 \"1\" (+ 1 (str.rindexof _arg_0 \"2\" (+ 1 (str.rindexof _arg_0 \"3\" (+ 1 (str.rindexof _arg_0 \"4\" (+ 1 (str.rindexof _arg_0 \"5\" (+ 1 (str.rindexof _arg_0 \"6\" (+ 1 (str.rindexof _arg_0 \"7\" (+ 1 (str.rindexof _arg_0 \"8\" (+ 1 (str.rindexof _arg_0 \"9\" 0))))))))))))))))))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"\") (int.to.str (- (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) (str.len _arg_0))) 1))))))",
      "(define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \" \") (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.rindexof _arg_0 \" \" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"1\" (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"1\" 0))) (str.len _arg_0))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "/n"
      ],
      [
        0,
        1,
        "9",
        9,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "0",
        1,
        "8",
        0,
        "6",
        "9",
        "5",
        "2",
        "7",
        "3",
        "4",
        "1"
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        ""
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "/n"
      ],
      [
        0,
        1,
        " ",
        "/n",
        "1"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "/n",
      9,
      "8",
      "7",
      "0",
      "3",
      "2",
      "4",
      "1",
      " ",
      "9",
      "6",
      "5"
    ],
    "time_diff_ms": 1881.4250000000002
  },
  "initials-longmodified.sl": {
    "completions": [
      "\"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 2) 0 1) \".\"))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1) \".\"))",
      "(ite (str.contains name \" \") (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) 0 1)) name)",
      "\"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\"",
      "\"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\"",
      "\"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 2) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) (str.len name)) 0 1)) name))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\")",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\" (str.substr name (- (str.indexof name \\\" \\\" 0) 1) 1))\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))"
    ],
    "constants": [
      [
        "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
      ],
      [
        "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
      ],
      [
        "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ".",
      " ",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
    ],
    "time_diff_ms": 1199.975
  },
  "phone-7modified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "\"(str.substr name 6 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        "(str.substr name 6 3))"
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      "(str.substr name 6 3))"
    ],
    "time_diff_ms": 1305.557
  },
  "43606446modified.sl": {
    "completions": [
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\") 14) (- (str.indexof _arg_0 \\\">\\\" (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\")) (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\") 14)))\"",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1))))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\") 14) (- (str.indexof _arg_0 \\\">\\\" (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\")) (str.indexof _arg_0 \\\"<IDEALPRO,CASH,\\\") 14)))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \",\" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \",\") (str.indexof _arg_0 \"<\") 1)))"
    ],
    "constants": [
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 14) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<IDEALPRO,CASH,\")) (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 14)))"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        ">",
        "<"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        1,
        ",",
        ">"
      ],
      [
        1,
        ",",
        "<"
      ],
      [
        1,
        ",",
        "<"
      ]
    ],
    "all_constants": [
      0,
      1,
      ",",
      ">",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 14) (- (str.indexof _arg_0 \">\" (str.indexof _arg_0 \"<IDEALPRO,CASH,\")) (str.indexof _arg_0 \"<IDEALPRO,CASH,\") 14)))",
      "<"
    ],
    "time_diff_ms": 960.7749999999999
  },
  "extract-nth-word-from-text-stringmodified.sl": {
    "completions": [
      "(str.substr _arg_0 (ite (= _arg_1 1) 0 (str.indexof (+ \" \" _arg_0) \" \" (+ (int.to.str _arg_1) 1))) (ite (= _arg_1 1) (str.indexof _arg_0 \" \") (str.indexof (+ \" \" _arg_0) \" \" (+ (int.to.str _arg_1) 1))))))",
      "(str.substr _arg_0 (ite (= _arg_1 1) 0 (str.indexof (str.++ \" \" _arg_0) \" \" (+ _arg_1 -1))) (ite (= _arg_1 1) (str.indexof _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0) \" \" (+ _arg_1 -1))))))",
      "(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \" \"))\n      (ite (= _arg_1 2) (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) 0 (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \"))\n            (ite (= _arg_1 3) (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))\n                  (ite (= _arg_1 4) (str.substr (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))))))))))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \" \" 0))",
      "(str.substr _arg_0 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) (str.indexof _arg_0 \" \" 0) (ite (= _arg_1 3) (+ (str.indexof _arg_0 \" \" 0) 1) (+ (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))))) (ite (= _arg_1 1) (str.indexof _arg_0 \" \" 0) (ite (= _arg_1 2) (+ (str.indexof _arg_0 \" \" 0) 1) (+ (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0))",
      "(str.at _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.at _arg_0 _arg_1)",
      "(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \" \"))\n      (ite (= _arg_1 2) (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) 0 (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \"))\n            (ite (= _arg_1 3) (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))\n                  (ite (= _arg_1 4) (str.substr (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))))))))))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (ite (= _arg_1 1) 0 (str.indexof (+ \" \" _arg_0) \" \" (+ (int.to.str _arg_1) 1))) (ite (= _arg_1 1) (str.indexof _arg_0 \" \") (str.indexof (+ \" \" _arg_0) \" \" (+ (int.to.str _arg_1) 1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (ite (= _arg_1 1) 0 (str.indexof (str.++ \" \" _arg_0) \" \" (+ _arg_1 -1))) (ite (= _arg_1 1) (str.indexof _arg_0 \" \") (str.indexof (str.++ \" \" _arg_0) \" \" (+ _arg_1 -1)))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) (ite (= _arg_1 2) (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) 0 (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) (ite (= _arg_1 3) (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (ite (= _arg_1 4) (str.substr (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))))))))))))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (ite (= _arg_1 1) 0 (ite (= _arg_1 2) (str.indexof _arg_0 \" \" 0) (ite (= _arg_1 3) (+ (str.indexof _arg_0 \" \" 0) 1) (+ (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)) \" \" 0)))))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.indexof (str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \" 0) 1)) \" \" 0)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 _arg_1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) (ite (= _arg_1 2) (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) 0 (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) (ite (= _arg_1 3) (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (ite (= _arg_1 4) (str.substr (str.substr (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)) (+ (str.indexof (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0) \" \")) 1) (str.len (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))))))))))))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        -1
      ],
      [
        0,
        1,
        2,
        3,
        4,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        2,
        3,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [],
      [
        0,
        1,
        2,
        3,
        4,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      4,
      " ",
      -1
    ],
    "time_diff_ms": 1587.798
  },
  "remove-leading-and-trailing-spaces-from-textmodified.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(define-fun f ((_arg_0 String)) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))",
      "(str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0)))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.prefixof \" \" _arg_0) \"\" (str.at _arg_0 0)) (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") (str.++ \" \" \" \") \" \") 1 (str.len _arg_0))))"
    ],
    "constants": [
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ]
    ],
    "all_constants": [
      "",
      0,
      " ",
      1
    ],
    "time_diff_ms": 1766.4679999999998
  },
  "phone-5-long-repeatmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(str.substr name 1 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))"
    ],
    "constants": [
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ]
    ],
    "all_constants": [
      1,
      2,
      3,
      "(str.substr name 1 3))"
    ],
    "time_diff_ms": 2331.52
  },
  "count-total-words-in-a-cellmodified.sl": {
    "completions": [
      "(ite (str.contains _arg_0 \" \") (+ 1 (int.to.str (str.len _arg_0))) 1)",
      "(str.len _arg_0)",
      "(ite (= (_arg_0 \"\") true) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \" \"))))",
      "(str.len _arg_0)",
      "(ite (= (str.len _arg_0) 0) 0 (+ 1 (str.to.int (ite (str.contains \" \" _arg_0) (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) _arg_0))))",
      "(str.len (str.replace _arg_0 \" \" \"BRD\"))",
      "(str.len _arg_0)",
      "(define-fun f (_arg_0 String) Int\n  (str.len _arg_0))",
      "(ite (= (_arg_0 \"\") \"\") 0 (str.len (_arg_0)))",
      "\"(str.len _arg_0)\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (ite (str.contains _arg_0 \" \") (+ 1 (int.to.str (str.len _arg_0))) 1))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (ite (= (_arg_0 \"\") true) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \" \")))))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (ite (= (str.len _arg_0) 0) 0 (+ 1 (str.to.int (ite (str.contains \" \" _arg_0) (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) _arg_0)))))",
      "(define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"BRD\")))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (str.len _arg_0))",
      "(define-fun f (_arg_0 String) Int (ite (= (_arg_0 \"\") \"\") 0 (str.len (_arg_0))))",
      "(define-fun f (_arg_0 String) Int \"(str.len _arg_0)\")"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [],
      [
        "",
        0,
        " ",
        1
      ],
      [],
      [
        0,
        1,
        " "
      ],
      [
        "BRD",
        " "
      ],
      [],
      [],
      [
        "",
        0
      ],
      [
        "(str.len _arg_0)"
      ]
    ],
    "all_constants": [
      "",
      1,
      0,
      "(str.len _arg_0)",
      " ",
      "BRD"
    ],
    "time_diff_ms": 1158.603
  },
  "stackoverflow8modified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (str.len _arg_0)))) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" ))) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1)) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" (str.len _arg_0)))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\" 0))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" (+ (str.len \"home/\") 1)) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/",
        "home/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "home/",
      "/"
    ],
    "time_diff_ms": 1063.079
  },
  "strip-numeric-characters-from-cellmodified.sl": {
    "completions": [
      "\"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\"",
      "\"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\"",
      "(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" (str.replace _arg_0 \"9\" \"\")))))))))))",
      "(str.replace _arg_0 \"0\" \" \" \"1\" \" \" \"2\" \" \" \"3\" \" \" \"4\" \" \" \"5\" \" \" \"6\" \" \" \"7\" \" \" \"8\" \" \" \"9\" \" \" \"+\" \"name\" \",\" \"apple\" \" \" \"bananas\" \" \" \"strawberries\" \" \" \"oranges\" \" \" \"LLC\" \" \" \"Inc\" \" \" \"Corporation\" \" \" \"Enterprises\" \" \" \"Company\" \" \" \"(\" \" \" \")\" \" \" \"microsoft\" \" \" \"windows\" \" \" \"apple\" \" \" \"mac\" \" \" \"-\" \" \" \"1\" \" \" \"2\" \" \" \"3\" \" \" \"4\" \" \" \"5\" \" \" \"6\" \" \" \"7\" \" \" \"8\" \" \" \"0\" \" \" \",\" \" \" \"<\" \" \" \">\" \" \" \"/n\" \" \" \"%\" \" \" \"b\" \" \" \"in\" \" \" \"_\" \" \") )",
      "\"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\"",
      "(str.replace _arg_0 \"9\" \"\"))",
      "(str.replace _arg_0 \"0\" \"\")",
      "(str.replace _arg_0 \"0\" \"\")",
      "(str.replace _arg_0 \"0\" \"1\")))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \")",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" (str.replace _arg_0 \"1\" (str.replace _arg_0 \"2\" (str.replace _arg_0 \"3\" (str.replace _arg_0 \"4\" (str.replace _arg_0 \"5\" (str.replace _arg_0 \"6\" (str.replace _arg_0 \"7\" (str.replace _arg_0 \"8\" (str.replace _arg_0 \"9\" \"\")))))))))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \" \" \"1\" \" \" \"2\" \" \" \"3\" \" \" \"4\" \" \" \"5\" \" \" \"6\" \" \" \"7\" \" \" \"8\" \" \" \"9\" \" \" \"+\" \"name\" \",\" \"apple\" \" \" \"bananas\" \" \" \"strawberries\" \" \" \"oranges\" \" \" \"LLC\" \" \" \"Inc\" \" \" \"Corporation\" \" \" \"Enterprises\" \" \" \"Company\" \" \" \"(\" \" \" \")\" \" \" \"microsoft\" \" \" \"windows\" \" \" \"apple\" \" \" \"mac\" \" \" \"-\" \" \" \"1\" \" \" \"2\" \" \" \"3\" \" \" \"4\" \" \" \"5\" \" \" \"6\" \" \" \"7\" \" \" \"8\" \" \" \"0\" \" \" \",\" \" \" \"<\" \" \" \">\" \" \" \"/n\" \" \" \"%\" \" \" \"b\" \" \" \"in\" \" \" \"_\" \" \"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"9\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"1\"))"
    ],
    "constants": [
      [
        "(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) "
      ],
      [
        "(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) "
      ],
      [
        ""
      ],
      [
        "0",
        "",
        "8",
        "6",
        "9",
        "5",
        "2",
        "7",
        "3",
        "4",
        "1"
      ],
      [
        "Corporation",
        " ",
        "2",
        "4",
        "b",
        "Enterprises",
        "bananas",
        "8",
        "-",
        "/n",
        "7",
        ",",
        "microsoft",
        "Company",
        ")",
        "apple",
        "6",
        "9",
        "5",
        "name",
        "3",
        "oranges",
        "1",
        "%",
        "0",
        "Inc",
        "windows",
        "<",
        "strawberries",
        "+",
        "in",
        "_",
        "(",
        ">",
        "mac",
        "LLC"
      ],
      [
        "(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) "
      ],
      [
        "9",
        ""
      ],
      [
        "0",
        ""
      ],
      [
        "0",
        ""
      ],
      [
        "0",
        "1"
      ]
    ],
    "all_constants": [
      "",
      "/n",
      "8",
      "7",
      "6",
      "(",
      "+",
      "<",
      "mac",
      ",",
      "Enterprises",
      ">",
      "3",
      "1",
      "Company",
      "LLC",
      "_",
      "oranges",
      "Inc",
      "4",
      "windows",
      "(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) ",
      "9",
      " ",
      "microsoft",
      "5",
      "in",
      "b",
      "apple",
      "-",
      "Corporation",
      "0",
      "%",
      "2",
      "bananas",
      ")",
      "strawberries",
      "name"
    ],
    "time_diff_ms": 2375.434
  },
  "phone-9modified.sl": {
    "completions": [
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.replace name \" \" \"\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.replace\n    (str.replace\n      (str.replace name \" \" \"\")\n      \"-\"\n      \".\")\n    \" \"\n    \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\")))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \"\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \"\")))",
      "(define-fun f (name String) String (str.replace name \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))"
    ],
    "constants": [
      [
        " ",
        "."
      ],
      [
        "",
        " "
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        "."
      ],
      [
        " ",
        "."
      ]
    ],
    "all_constants": [
      ".",
      "",
      0,
      3,
      4,
      "-",
      8,
      " "
    ],
    "time_diff_ms": 2334.737
  },
  "initialsmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "\"(str.++ (str.substr name 0 1) \\\".\\\")\"",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "\"(str.++ (str.substr name 0 1) \\\".\\\")\"",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) (+ (str.indexof name \" \" 0) 2)) 0 1) \".\"))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)\n    \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1) \".\"))",
      "\"(str.++ (str.substr name 0 1) \\\".\\\")\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) (+ (str.indexof name \" \" 0) 2)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1) \".\"))",
      "(define-fun f (name String) String \"(str.++ (str.substr name 0 1) \\\".\\\")\")"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        "(str.++ (str.substr name 0 1) \".\")"
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        "(str.++ (str.substr name 0 1) \".\")"
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        "(str.++ (str.substr name 0 1) \".\")"
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      2,
      " ",
      "(str.++ (str.substr name 0 1) \".\")"
    ],
    "time_diff_ms": 1641.9699999999998
  },
  "phone-10-long-repeatmodified.sl": {
    "completions": [
      "(str.++ \"+106 \" \"(769) 858-438\" \" +83 \" \"(973) 757-831\" \" +62 \" \"(647) 787-775\" \" +172 \" \"(027) 507-632\" \" +72 \" \"(001) 050-856\" \" +95 \" \"(310) 537-401\" \" +6 \" \"(775) 969-238\" \" +174 \" \"(594) 539-946\" \" +155 \" \"(927) 275-860\" \" +167 \" \"(405) 461-331\" \" +10 \" \"(538) 347-401\" \" +60 \" \"(971) 986-103\" \" +13 \" \"(258) 276-941\" \" +2 \" \"(604) 746-137\" \" +25 \" \"(998) 898-180\" \" +151 \" \"(862) 946-541\" \" +118 \" \"(165) 041-038\" \" +144 \" \"(170) 592-272\" \" +94 \" \"(462) 008-482\" \" +82 \" \"(685) 122-086\" \" +82 \" \"(675) 366-472\" \" +80 \" \"(066) 433-096\" \" +163 \" \"(039) 436-166\" \" +138 \" \"(808) 083-074\" \" +42 \" \"(643) 245-738\" \" +169 \" \"(822) 542-726\" \" +176 \" \"(767) 782-369\" \" +47 \" \"(414) 369-343\" \" +138 \" \"(885) 618-512\" \" +104 \" \"(158) 671-355\" \" +188 \" \"(280) 087-526\" \" +50 \" \"(268) 571-336\" \" +183 \" \"(225) 960-024\" \" +58 \" \"(191) 982-491\" \" +9 \" \"(507) 092-535\" \" +64 \" \"(061) 601-398\" \" +189 \" \"(831) 591-877\" \" +129 \" \"(425) 765-844\" \" +94 \" \"(856) 734-046\" \" +35 \" \"(082) 845-261\" \" +185 \" \"(394) 622-272\" \" +163 \" \"(905) 707-740\" \" +23 \" \"(448) 213-807\" \" +42 \" \"(634) 077-089\" \" +18 \" \"(051) 287-382\" \" +29 \" \"(773) 545-520\" \" +43 \" \"(249) 097-743\" \" +158 \" \"(674) 736-891\" \" +45 \" \"(124) 771-454\" \" +180 \" \"(029) 457-654\" \" +75 \" \"(227) 250-652\" \" +5 \" \"(528) 317-854\" \" +81 \" \"(849) 629-290\" \" +46 \" \"(005) 119-176\" \" +108 \" \"(150) 380-705\" \" +40 \" \"(122) 224-247\" \" +68 \" \"(890) 680-027\" \" +169 \" \"(060) 204-504\" \" +95 \" \"(620) 820-945\" \" +43 \" \"(592) 938-846\" \" +7 \" \"(023) 296-647\" \" +20 \" \"(541) 401-396\" \" +64 \" \"(751) 365-934\" \" +163 \" \"(546) 119-476\" \" +198 \" \"(557) 666-779\" \" +14 \" \"(673) 759-017\" \" +161 \" \"(086) 020-168\" \" +65 \" \"(970) 575-488\" \" +2 \" \"(455) 126-377\" \" +196 \" \"(728) 585-376\" \" +33 \" \"(117) 430-125\" \" +195 \" \"(488) 831-768\" \" +86 \" \"(468) 718-108\" \" +194 \" \"(278) 716-950\" \" +43 \" \"(730) 685-847\" \" +140 \" \"(794) 289-551\" \" +21 \" \"(679) 740-834\" \" +98 \" \"(717) 997-323\" \" +47 \" \"(401) 100-231\" \" +143 \" \"(726) 462-368\" \" +147 \" \"(864) 005-968\" \" +130 \" \"(590) 757-665\" \" +197 \" \"(700) 858-976\" \" +158 \" \"(344) 541-946\" \" +56 \" \"(242) 901-234\" \" +132 \" \"(313) 075-754\" \" +130 \" \"(517) 953-149\" \" +158 \" \"(684) 878-743\" \" +52 \" \"(836) 582-035\" \" +138 \" \"(117) 484-671\" \" +50 \" \"(012) 148-873\" \" +105 \" \"(048) 919-483\" \" +18 \" \"(209) 851-997\" \" +176 \" \"(938) 056-084\" \" +141 \" \"(018) 132-973\" \" +199 \" \"(936) 162-415\" \" +33 \" \"(547) 051-264\" \" +161 \" \"(233) 981-513\" \" +115 \" \"(101) 728-328\" \" +45 \" \"(095) 746-635\" \" +106 \" \"(769) 858-438\" \" +83 \" \"(973) 757-831\" \" +62 \" \"(647) 787-775\" \" +172 \" \"(027) 507-632\" \" +72 \" \"(001) 050-856\" \" +95 \" \"(310) 537-401\" \" +6 \" \"(775) 969-238\" \" +174 \" \"(594) 539-946\" \" +155 \" \"(927) 275-860\" \" +167 \" \"(405) 461-331\" \" +10 \" \"(538) 347-401\" \" +60 \" \"(971) 986-103\" \" +13 \" \"(258) 276-941\" \" +2 \" \"(604) 746-137\" \" +25 \" \"(998) 898-180\" \" +151 \" \"(862) 946-541\" \" +118 \" \"(165) 041-038\" \" +144 \" \"(170) 592-272\" \" +94 \" \"(462) 008-482\" \" +82 \" \"(685) 122-086\" \" +82 \" \"(675) 366-472\" \" +80 \" \"(066) 433-096\" \" +163 \" \"(039) 436-166\" \" +138 \" \"(808) 083-074\" \" +42 \" \"(643) 245-738\" \" +169 \" \"(822) 542-726\" \" +176 \" \"(767) 782-369\" \" +47 \" \"(414) 369-343\" \" +138 \" \"(885) 618-512\" \" +104 \" \"(158) 671-355\" \" +188 \" \"(280) 087-526\" \" +50 \" \"(268) 571-336\" \" +183 \" \"(225) 960-024\" \" +58 \" \"(191) 982-491\" \" +9 \" \"(507) 092-535\" \" +64 \" \"(061) 601-398\" \" +189 \" \"(831) 591-877\" \" +129 \" \"(425) 765-844\" \" +94 \" \"(856) 734-046\" \" +35 \" \"(082) 845-261\" \" +185 \" \"(394) 622-272\" \" +163 \" \"(905) 707-740\" \" +23 \" \"(448) 213-807\" \" +42 \" \"(634) 077-089\" \" +18 \" \"(051) 287-382\" \" +29 \" \"(773) 545-520\" \" +43 \" \"(249) 097-743\" \" +158 \" \"(674) 736-891\" \" +45 \" \"(124) 771-454\" \" +180 \" \"(029) 457-654\" \" +75 \" \"(227) 250-652\" \" +5 \" \"(528) 317-854\" \" +81 \" \"(849) 629-290\" \" +46 \" \"(005) 119-176\" \" +108 \" \"(150) 380-705\" \" +40 \" \"(122) 224-247\" \" +68 \" \"(890) 680-027\" \" +169 \" \"(060) 204-504\" \" +95 \" \"(620) 820-945\" \" +43 \" \"(592) 938-846\" \" +7 \" \"(023) 296-647\" \" +20 \" \"(541) 401-396\" \" +64 \" \"(751) 365-934\" \" +163 \" \"(546) 119-476\" \" +198 \" \"(557) 666-779\" \" +14 \" \"(673) 759-017\" \" +161 \" \"(086) 020-168\" \" +65 \" \"(970) 575-488\" \" +2 \" \"(455) 126-377\" \" +196 \" \"(728) 585-376\" \" +33 \" \"(117) 430-125\" \" +195 \" \"(488) 831-768\" \" +86 \" \"(468) 718-108\" \" +194 \" \"(278) 716-950\" \" +43 \" \"(730) 685-847\" \" +140 \" \"(794) 289-551\" \" +21 \" \"(679) 740-834\" \" +98 \" \"(717) 997-323\" \" +47 \" \"(401) 100-231\" \" +143 \" \"(726) 462-368\" \" +147 \" \"(864) 005-968\" \" +130 \" \"(590) 757-665\" \" +197 \" \"(700) 858-976\" \" +158 \" \"(344) 541-946\" \" +56 \" \"(242) 901-234\" \" +132 \" \"(313) 075-754\" \" +130 \" \"(517) 953-149\" \" +158 \" \"(684) 878-743\" \" +52 \" \"(836) 582-035\" \" +138 \" \"(117) 484-671\" \" +50 \" \"(012) 148-873\" \" +105 \" \"(048) 919-483\" \" +18 \" \"(209) 851-997\" \" +176 \" \"(938) 056-084\" \" +141 \" \"(018) 132-973\" \" +199 \" \"(936) 162-415\" \" +33 \" \"(547) 051-264\" \" +161 \" \"(233) 981-513\" \" +115 \" \"(101) 728-328\" \" +45 \" \"(095) 746-635\")",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\")",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\")",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\")",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\")",
      "(str.++ \"+106 \" \"(769) 858-438\"))",
      "\"(str.++ \\\"+\\\" (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 11 3))\"",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\")",
      "(str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\" \" \" \"+106 (769) 858-438\" \" \" \"+83 (973) 757-831\" \" \" \"+83 973-757-831\" \" \" \"+83 (973) 757-831\" \" \" \"+62 (647) 787-775\" \" \" \"+62 647-787-775\" \" \" \"+62 (647) 787-775\" \" \" \"+172 (027) 507-632\" \" \" \"+172 027-507-632\" \" \" \"+172 (027) 507-632\" \" \" \"+72 (001) 050-856\" \" \" \"+72 001-050-856\" \" \" \"+72 (001) 050-856\" \" \" \"+95 (310) 537-401\" \" \" \"+95 310-537-401\" \" \" \"+95 (310) 537-401\" \" \" \"+6 (775) 969-238\" \" \" \"+6 775-969-238\" \" \" \"+6 (775) 969-238\" \" \" \"+174 (594) 539-946\" \" \" \"+174 594-539-946\" \" \" \"+174 (594) 539-946\" \" \" \"+155 (927) 275-860\" \" \" \"+155 927-275-860\" \" \" \"+155 (927) 275-860\" \" \" \"+167 (405) 461-331\" \" \" \"+167 405-461-331\" \" \" \"+167 (405) 461-331\" \" \" \"+10 (538) 347-401\" \" \" \"+10 538-347-401\" \" \" \"+10 (538) 347-401\" \" \" \"+60 (971) 986-103\" \" \" \"+60 971-986-103\" \" \" \"+60 (971) 986-103\" \" \" \"+13 (258) 276-941\" \" \" \"+13 258-276-941\" \" \" \"+13 (258) 276-941\" \" \" \"+2 (604) 746-137\" \" \" \"+2 604-746-137\" \" \" \"+2 (604) 746-137\" \" \" \"+25 (998) 898-180\" \" \" \"+25 998-898-180\" \" \" \"+25 (998) 898-180\" \" \" \"+151 (862) 946-541\" \" \" \"+151 862-946-541\" \" \" \"+151 (862) 946-541\" \" \" \"+118 (165) 041-038\" \" \" \"+118 165-041-038\" \" \" \"+118 (165) 041-038\" \" \" \"+144 (170) 592-272\" \" \" \"+144 170-592-272\" \" \" \"+144 (170) 592-272\" \" \" \"+94 (462) 008-482\" \" \" \"+94 462-008-482\" \" \" \"+94 (462) 008-482\" \" \" \"+82 (685) 122-086\" \" \" \"+82 685-122-086\" \" \" \"+82 (685) 122-086\" \" \" \"+82 (675) 366-472\" \" \" \"+82 675-366-472\" \" \" \"+82 (675) 366-472\" \" \" \"+80 (066) 433-096\" \" \" \"+80 066-433-096\" \" \" \"+80 (066) 433-096\" \" \" \"+163 (039) 436-166\" \" \" \"+163 039-436-166\" \" \" \"+163 (039) 436-166\" \" \" \"+138 (808) 083-074\" \" \" \"+138 808-083-074\" \" \" \"+138 (808) 083-074\" \" \" \"+42 (643) 245-738\" \" \" \"+42 643-245-738\" \" \" \"+42 (643) 245-738\" \" \" \"+169 (822) 542-726\" \" \" \"+169 822-542-726\" \" \" \"+169 (822) 542-726\" \" \" \"+176 (767) 782-369\" \" \" \"+176 767-782-369\" \" \" \"+176 (767) 782-369\" \" \" \"+47 (414) 369-343\" \" \" \"+47 414-369-343\" \" \" \"+47 (414) 369-343\" \" \" \"+138 (885) 618-512\" \" \" \"+138 885-618-512\" \" \" \"+138 (885) 618-512\" \" \" \"+104 (158) 671-355\" \" \" \"+104 158-671-355\" \" \" \"+104 (158) 671-355\" \" \" \"+188 (280) 087-526\" \" \" \"+188 280-087-526\" \" \" \"+188 (280) 087-526\" \" \" \"+50 (268) 571-336\" \" \" \"+50 268-571-336\" \" \" \"+50 (268) 571-336\" \" \" \"+183 (225) 960-024\" \" \" \"+183 225-960-024\" \" \" \"+183 (225) 960-024\" \" \"",
      "(define-fun f (name String) String (str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+106 \" \"(769) 858-438\" \" +83 \" \"(973) 757-831\" \" +62 \" \"(647) 787-775\" \" +172 \" \"(027) 507-632\" \" +72 \" \"(001) 050-856\" \" +95 \" \"(310) 537-401\" \" +6 \" \"(775) 969-238\" \" +174 \" \"(594) 539-946\" \" +155 \" \"(927) 275-860\" \" +167 \" \"(405) 461-331\" \" +10 \" \"(538) 347-401\" \" +60 \" \"(971) 986-103\" \" +13 \" \"(258) 276-941\" \" +2 \" \"(604) 746-137\" \" +25 \" \"(998) 898-180\" \" +151 \" \"(862) 946-541\" \" +118 \" \"(165) 041-038\" \" +144 \" \"(170) 592-272\" \" +94 \" \"(462) 008-482\" \" +82 \" \"(685) 122-086\" \" +82 \" \"(675) 366-472\" \" +80 \" \"(066) 433-096\" \" +163 \" \"(039) 436-166\" \" +138 \" \"(808) 083-074\" \" +42 \" \"(643) 245-738\" \" +169 \" \"(822) 542-726\" \" +176 \" \"(767) 782-369\" \" +47 \" \"(414) 369-343\" \" +138 \" \"(885) 618-512\" \" +104 \" \"(158) 671-355\" \" +188 \" \"(280) 087-526\" \" +50 \" \"(268) 571-336\" \" +183 \" \"(225) 960-024\" \" +58 \" \"(191) 982-491\" \" +9 \" \"(507) 092-535\" \" +64 \" \"(061) 601-398\" \" +189 \" \"(831) 591-877\" \" +129 \" \"(425) 765-844\" \" +94 \" \"(856) 734-046\" \" +35 \" \"(082) 845-261\" \" +185 \" \"(394) 622-272\" \" +163 \" \"(905) 707-740\" \" +23 \" \"(448) 213-807\" \" +42 \" \"(634) 077-089\" \" +18 \" \"(051) 287-382\" \" +29 \" \"(773) 545-520\" \" +43 \" \"(249) 097-743\" \" +158 \" \"(674) 736-891\" \" +45 \" \"(124) 771-454\" \" +180 \" \"(029) 457-654\" \" +75 \" \"(227) 250-652\" \" +5 \" \"(528) 317-854\" \" +81 \" \"(849) 629-290\" \" +46 \" \"(005) 119-176\" \" +108 \" \"(150) 380-705\" \" +40 \" \"(122) 224-247\" \" +68 \" \"(890) 680-027\" \" +169 \" \"(060) 204-504\" \" +95 \" \"(620) 820-945\" \" +43 \" \"(592) 938-846\" \" +7 \" \"(023) 296-647\" \" +20 \" \"(541) 401-396\" \" +64 \" \"(751) 365-934\" \" +163 \" \"(546) 119-476\" \" +198 \" \"(557) 666-779\" \" +14 \" \"(673) 759-017\" \" +161 \" \"(086) 020-168\" \" +65 \" \"(970) 575-488\" \" +2 \" \"(455) 126-377\" \" +196 \" \"(728) 585-376\" \" +33 \" \"(117) 430-125\" \" +195 \" \"(488) 831-768\" \" +86 \" \"(468) 718-108\" \" +194 \" \"(278) 716-950\" \" +43 \" \"(730) 685-847\" \" +140 \" \"(794) 289-551\" \" +21 \" \"(679) 740-834\" \" +98 \" \"(717) 997-323\" \" +47 \" \"(401) 100-231\" \" +143 \" \"(726) 462-368\" \" +147 \" \"(864) 005-968\" \" +130 \" \"(590) 757-665\" \" +197 \" \"(700) 858-976\" \" +158 \" \"(344) 541-946\" \" +56 \" \"(242) 901-234\" \" +132 \" \"(313) 075-754\" \" +130 \" \"(517) 953-149\" \" +158 \" \"(684) 878-743\" \" +52 \" \"(836) 582-035\" \" +138 \" \"(117) 484-671\" \" +50 \" \"(012) 148-873\" \" +105 \" \"(048) 919-483\" \" +18 \" \"(209) 851-997\" \" +176 \" \"(938) 056-084\" \" +141 \" \"(018) 132-973\" \" +199 \" \"(936) 162-415\" \" +33 \" \"(547) 051-264\" \" +161 \" \"(233) 981-513\" \" +115 \" \"(101) 728-328\" \" +45 \" \"(095) 746-635\" \" +106 \" \"(769) 858-438\" \" +83 \" \"(973) 757-831\" \" +62 \" \"(647) 787-775\" \" +172 \" \"(027) 507-632\" \" +72 \" \"(001) 050-856\" \" +95 \" \"(310) 537-401\" \" +6 \" \"(775) 969-238\" \" +174 \" \"(594) 539-946\" \" +155 \" \"(927) 275-860\" \" +167 \" \"(405) 461-331\" \" +10 \" \"(538) 347-401\" \" +60 \" \"(971) 986-103\" \" +13 \" \"(258) 276-941\" \" +2 \" \"(604) 746-137\" \" +25 \" \"(998) 898-180\" \" +151 \" \"(862) 946-541\" \" +118 \" \"(165) 041-038\" \" +144 \" \"(170) 592-272\" \" +94 \" \"(462) 008-482\" \" +82 \" \"(685) 122-086\" \" +82 \" \"(675) 366-472\" \" +80 \" \"(066) 433-096\" \" +163 \" \"(039) 436-166\" \" +138 \" \"(808) 083-074\" \" +42 \" \"(643) 245-738\" \" +169 \" \"(822) 542-726\" \" +176 \" \"(767) 782-369\" \" +47 \" \"(414) 369-343\" \" +138 \" \"(885) 618-512\" \" +104 \" \"(158) 671-355\" \" +188 \" \"(280) 087-526\" \" +50 \" \"(268) 571-336\" \" +183 \" \"(225) 960-024\" \" +58 \" \"(191) 982-491\" \" +9 \" \"(507) 092-535\" \" +64 \" \"(061) 601-398\" \" +189 \" \"(831) 591-877\" \" +129 \" \"(425) 765-844\" \" +94 \" \"(856) 734-046\" \" +35 \" \"(082) 845-261\" \" +185 \" \"(394) 622-272\" \" +163 \" \"(905) 707-740\" \" +23 \" \"(448) 213-807\" \" +42 \" \"(634) 077-089\" \" +18 \" \"(051) 287-382\" \" +29 \" \"(773) 545-520\" \" +43 \" \"(249) 097-743\" \" +158 \" \"(674) 736-891\" \" +45 \" \"(124) 771-454\" \" +180 \" \"(029) 457-654\" \" +75 \" \"(227) 250-652\" \" +5 \" \"(528) 317-854\" \" +81 \" \"(849) 629-290\" \" +46 \" \"(005) 119-176\" \" +108 \" \"(150) 380-705\" \" +40 \" \"(122) 224-247\" \" +68 \" \"(890) 680-027\" \" +169 \" \"(060) 204-504\" \" +95 \" \"(620) 820-945\" \" +43 \" \"(592) 938-846\" \" +7 \" \"(023) 296-647\" \" +20 \" \"(541) 401-396\" \" +64 \" \"(751) 365-934\" \" +163 \" \"(546) 119-476\" \" +198 \" \"(557) 666-779\" \" +14 \" \"(673) 759-017\" \" +161 \" \"(086) 020-168\" \" +65 \" \"(970) 575-488\" \" +2 \" \"(455) 126-377\" \" +196 \" \"(728) 585-376\" \" +33 \" \"(117) 430-125\" \" +195 \" \"(488) 831-768\" \" +86 \" \"(468) 718-108\" \" +194 \" \"(278) 716-950\" \" +43 \" \"(730) 685-847\" \" +140 \" \"(794) 289-551\" \" +21 \" \"(679) 740-834\" \" +98 \" \"(717) 997-323\" \" +47 \" \"(401) 100-231\" \" +143 \" \"(726) 462-368\" \" +147 \" \"(864) 005-968\" \" +130 \" \"(590) 757-665\" \" +197 \" \"(700) 858-976\" \" +158 \" \"(344) 541-946\" \" +56 \" \"(242) 901-234\" \" +132 \" \"(313) 075-754\" \" +130 \" \"(517) 953-149\" \" +158 \" \"(684) 878-743\" \" +52 \" \"(836) 582-035\" \" +138 \" \"(117) 484-671\" \" +50 \" \"(012) 148-873\" \" +105 \" \"(048) 919-483\" \" +18 \" \"(209) 851-997\" \" +176 \" \"(938) 056-084\" \" +141 \" \"(018) 132-973\" \" +199 \" \"(936) 162-415\" \" +33 \" \"(547) 051-264\" \" +161 \" \"(233) 981-513\" \" +115 \" \"(101) 728-328\" \" +45 \" \"(095) 746-635\"))",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\"))",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\"))",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\"))",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\"))",
      "(define-fun f (name String) String (str.++ \"+106 \" \"(769) 858-438\"))",
      "(define-fun f (name String) String \"(str.++ \\\"+\\\" (str.substr name 0 3) \\\" (\\\" (str.substr name 3 3) \\\") \\\" (str.substr name 7 3) \\\"-\\\" (str.substr name 11 3))\")",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\"))",
      "(define-fun f (name String) String (str.++ \"+106 (769) 858-438\" \" \" \"+106 769-858-438\" \" \" \"+106 (769) 858-438\" \" \" \"+83 (973) 757-831\" \" \" \"+83 973-757-831\" \" \" \"+83 (973) 757-831\" \" \" \"+62 (647) 787-775\" \" \" \"+62 647-787-775\" \" \" \"+62 (647) 787-775\" \" \" \"+172 (027) 507-632\" \" \" \"+172 027-507-632\" \" \" \"+172 (027) 507-632\" \" \" \"+72 (001) 050-856\" \" \" \"+72 001-050-856\" \" \" \"+72 (001) 050-856\" \" \" \"+95 (310) 537-401\" \" \" \"+95 310-537-401\" \" \" \"+95 (310) 537-401\" \" \" \"+6 (775) 969-238\" \" \" \"+6 775-969-238\" \" \" \"+6 (775) 969-238\" \" \" \"+174 (594) 539-946\" \" \" \"+174 594-539-946\" \" \" \"+174 (594) 539-946\" \" \" \"+155 (927) 275-860\" \" \" \"+155 927-275-860\" \" \" \"+155 (927) 275-860\" \" \" \"+167 (405) 461-331\" \" \" \"+167 405-461-331\" \" \" \"+167 (405) 461-331\" \" \" \"+10 (538) 347-401\" \" \" \"+10 538-347-401\" \" \" \"+10 (538) 347-401\" \" \" \"+60 (971) 986-103\" \" \" \"+60 971-986-103\" \" \" \"+60 (971) 986-103\" \" \" \"+13 (258) 276-941\" \" \" \"+13 258-276-941\" \" \" \"+13 (258) 276-941\" \" \" \"+2 (604) 746-137\" \" \" \"+2 604-746-137\" \" \" \"+2 (604) 746-137\" \" \" \"+25 (998) 898-180\" \" \" \"+25 998-898-180\" \" \" \"+25 (998) 898-180\" \" \" \"+151 (862) 946-541\" \" \" \"+151 862-946-541\" \" \" \"+151 (862) 946-541\" \" \" \"+118 (165) 041-038\" \" \" \"+118 165-041-038\" \" \" \"+118 (165) 041-038\" \" \" \"+144 (170) 592-272\" \" \" \"+144 170-592-272\" \" \" \"+144 (170) 592-272\" \" \" \"+94 (462) 008-482\" \" \" \"+94 462-008-482\" \" \" \"+94 (462) 008-482\" \" \" \"+82 (685) 122-086\" \" \" \"+82 685-122-086\" \" \" \"+82 (685) 122-086\" \" \" \"+82 (675) 366-472\" \" \" \"+82 675-366-472\" \" \" \"+82 (675) 366-472\" \" \" \"+80 (066) 433-096\" \" \" \"+80 066-433-096\" \" \" \"+80 (066) 433-096\" \" \" \"+163 (039) 436-166\" \" \" \"+163 039-436-166\" \" \" \"+163 (039) 436-166\" \" \" \"+138 (808) 083-074\" \" \" \"+138 808-083-074\" \" \" \"+138 (808) 083-074\" \" \" \"+42 (643) 245-738\" \" \" \"+42 643-245-738\" \" \" \"+42 (643) 245-738\" \" \" \"+169 (822) 542-726\" \" \" \"+169 822-542-726\" \" \" \"+169 (822) 542-726\" \" \" \"+176 (767) 782-369\" \" \" \"+176 767-782-369\" \" \" \"+176 (767) 782-369\" \" \" \"+47 (414) 369-343\" \" \" \"+47 414-369-343\" \" \" \"+47 (414) 369-343\" \" \" \"+138 (885) 618-512\" \" \" \"+138 885-618-512\" \" \" \"+138 (885) 618-512\" \" \" \"+104 (158) 671-355\" \" \" \"+104 158-671-355\" \" \" \"+104 (158) 671-355\" \" \" \"+188 (280) 087-526\" \" \" \"+188 280-087-526\" \" \" \"+188 (280) 087-526\" \" \" \"+50 (268) 571-336\" \" \" \"+50 268-571-336\" \" \" \"+50 (268) 571-336\" \" \" \"+183 (225) 960-024\" \" \" \"+183 225-960-024\" \" \" \"+183 (225) 960-024\" \" \"))",
      "(define-fun f (name String) String (str.++ \"+106 (\" (str.substr name 0 3) \") \" (str.substr name 4 3) \"-\" (str.substr name 8 3)))"
    ],
    "constants": [
      [
        "(647) 787-775",
        " +104 ",
        " +106 ",
        " +75 ",
        " +158 ",
        "(674) 736-891",
        " +98 ",
        "(769) 858-438",
        "(541) 401-396",
        " +176 ",
        " +197 ",
        " +167 ",
        " +5 ",
        "(538) 347-401",
        " +23 ",
        " +65 ",
        "(936) 162-415",
        "(547) 051-264",
        " +33 ",
        "(885) 618-512",
        "(278) 716-950",
        " +6 ",
        "(414) 369-343",
        "(170) 592-272",
        "(280) 087-526",
        " +25 ",
        " +196 ",
        "(590) 757-665",
        " +138 ",
        " +180 ",
        " +9 ",
        "(773) 545-520",
        "(425) 765-844",
        "(233) 981-513",
        "(973) 757-831",
        "(557) 666-779",
        " +172 ",
        " +35 ",
        "(592) 938-846",
        "(700) 858-976",
        " +132 ",
        "(401) 100-231",
        "(039) 436-166",
        "(082) 845-261",
        "(258) 276-941",
        "(027) 507-632",
        "(191) 982-491",
        "(905) 707-740",
        "(970) 575-488",
        " +62 ",
        "(268) 571-336",
        "(124) 771-454",
        " +81 ",
        " +58 ",
        " +169 ",
        "(448) 213-807",
        "(066) 433-096",
        "(029) 457-654",
        "(684) 878-743",
        " +60 ",
        " +50 ",
        "(751) 365-934",
        " +118 ",
        " +80 ",
        "(455) 126-377",
        "(150) 380-705",
        "(864) 005-968",
        " +183 ",
        " +189 ",
        "(685) 122-086",
        "(726) 462-368",
        "(249) 097-743",
        "(001) 050-856",
        "(117) 430-125",
        " +46 ",
        " +43 ",
        " +82 ",
        "(938) 056-084",
        "(242) 901-234",
        "(604) 746-137",
        " +72 ",
        " +40 ",
        "(310) 537-401",
        "(808) 083-074",
        "(971) 986-103",
        " +199 ",
        " +105 ",
        " +29 ",
        "(023) 296-647",
        " +140 ",
        "(048) 919-483",
        " +161 ",
        "(462) 008-482",
        "(862) 946-541",
        "(394) 622-272",
        "(849) 629-290",
        "(209) 851-997",
        "(594) 539-946",
        " +143 ",
        "+106 ",
        " +95 ",
        " +151 ",
        "(822) 542-726",
        " +144 ",
        " +13 ",
        " +94 ",
        " +163 ",
        "(061) 601-398",
        " +195 ",
        " +188 ",
        "(122) 224-247",
        "(517) 953-149",
        "(086) 020-168",
        "(546) 119-476",
        "(794) 289-551",
        " +115 ",
        " +2 ",
        " +18 ",
        " +10 ",
        "(775) 969-238",
        " +68 ",
        "(620) 820-945",
        "(679) 740-834",
        "(767) 782-369",
        "(095) 746-635",
        "(728) 585-376",
        "(060) 204-504",
        " +185 ",
        "(927) 275-860",
        "(856) 734-046",
        "(507) 092-535",
        "(634) 077-089",
        " +83 ",
        "(018) 132-973",
        "(405) 461-331",
        " +130 ",
        " +64 ",
        "(675) 366-472",
        "(051) 287-382",
        " +7 ",
        "(528) 317-854",
        " +194 ",
        " +47 ",
        "(005) 119-176",
        " +155 ",
        "(225) 960-024",
        "(836) 582-035",
        "(165) 041-038",
        " +52 ",
        "(890) 680-027",
        " +147 ",
        " +56 ",
        "(012) 148-873",
        "(831) 591-877",
        "(717) 997-323",
        "(643) 245-738",
        " +129 ",
        " +14 ",
        "(117) 484-671",
        " +198 ",
        " +108 ",
        " +45 ",
        "(344) 541-946",
        " +20 ",
        " +174 ",
        "(730) 685-847",
        " +141 ",
        "(158) 671-355",
        " +86 ",
        "(227) 250-652",
        "(313) 075-754",
        "(673) 759-017",
        " +21 ",
        "(488) 831-768",
        " +42 ",
        "(998) 898-180",
        "(101) 728-328",
        "(468) 718-108"
      ],
      [
        "+106 (769) 858-438",
        " ",
        "+106 769-858-438"
      ],
      [
        "+106 (769) 858-438",
        " ",
        "+106 769-858-438"
      ],
      [
        "+106 (769) 858-438",
        " ",
        "+106 769-858-438"
      ],
      [
        "+106 (769) 858-438",
        " ",
        "+106 769-858-438"
      ],
      [
        "+106 ",
        "(769) 858-438"
      ],
      [
        "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))"
      ],
      [
        "+106 (769) 858-438",
        " ",
        "+106 769-858-438"
      ],
      [
        "+60 971-986-103",
        "+80 (066) 433-096",
        "+82 685-122-086",
        "+50 268-571-336",
        " ",
        "+60 (971) 986-103",
        "+183 225-960-024",
        "+172 (027) 507-632",
        "+174 594-539-946",
        "+83 973-757-831",
        "+42 (643) 245-738",
        "+95 (310) 537-401",
        "+13 258-276-941",
        "+155 927-275-860",
        "+151 862-946-541",
        "+151 (862) 946-541",
        "+94 462-008-482",
        "+106 769-858-438",
        "+80 066-433-096",
        "+138 808-083-074",
        "+50 (268) 571-336",
        "+138 (808) 083-074",
        "+118 165-041-038",
        "+2 604-746-137",
        "+13 (258) 276-941",
        "+6 (775) 969-238",
        "+174 (594) 539-946",
        "+167 (405) 461-331",
        "+118 (165) 041-038",
        "+188 280-087-526",
        "+183 (225) 960-024",
        "+106 (769) 858-438",
        "+62 (647) 787-775",
        "+138 (885) 618-512",
        "+163 039-436-166",
        "+155 (927) 275-860",
        "+72 (001) 050-856",
        "+163 (039) 436-166",
        "+144 (170) 592-272",
        "+167 405-461-331",
        "+169 (822) 542-726",
        "+2 (604) 746-137",
        "+176 767-782-369",
        "+72 001-050-856",
        "+6 775-969-238",
        "+138 885-618-512",
        "+82 (685) 122-086",
        "+10 538-347-401",
        "+83 (973) 757-831",
        "+47 (414) 369-343",
        "+62 647-787-775",
        "+144 170-592-272",
        "+176 (767) 782-369",
        "+25 998-898-180",
        "+169 822-542-726",
        "+47 414-369-343",
        "+42 643-245-738",
        "+104 158-671-355",
        "+104 (158) 671-355",
        "+188 (280) 087-526",
        "+10 (538) 347-401",
        "+94 (462) 008-482",
        "+82 (675) 366-472",
        "+82 675-366-472",
        "+172 027-507-632",
        "+25 (998) 898-180",
        "+95 310-537-401"
      ],
      [
        0,
        3,
        4,
        8,
        "-",
        "+106 (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      "(280) 087-526",
      3,
      4,
      "(927) 275-860",
      8,
      "(268) 571-336",
      "+106 ",
      "+25 998-898-180",
      "(547) 051-264",
      "+42 (643) 245-738",
      "(674) 736-891",
      "(973) 757-831",
      "(124) 771-454",
      "+94 (462) 008-482",
      "(488) 831-768",
      "(998) 898-180",
      "+167 (405) 461-331",
      "(970) 575-488",
      " +42 ",
      "+25 (998) 898-180",
      "+155 927-275-860",
      "(675) 366-472",
      "(191) 982-491",
      "(557) 666-779",
      " +62 ",
      " +2 ",
      "(538) 347-401",
      "(095) 746-635",
      " +106 ",
      " +140 ",
      " +81 ",
      " +180 ",
      "+94 462-008-482",
      "(394) 622-272",
      "(401) 100-231",
      " +108 ",
      "(507) 092-535",
      "+72 001-050-856",
      " +14 ",
      " +75 ",
      "+106 769-858-438",
      "+188 (280) 087-526",
      "+82 675-366-472",
      " +167 ",
      "+72 (001) 050-856",
      "+172 (027) 507-632",
      "(066) 433-096",
      "(836) 582-035",
      " +65 ",
      "(767) 782-369",
      "(344) 541-946",
      " +45 ",
      "+138 885-618-512",
      " +58 ",
      " +118 ",
      "(726) 462-368",
      "(775) 969-238",
      "-",
      "(278) 716-950",
      "+138 (808) 083-074",
      "+50 268-571-336",
      "+42 643-245-738",
      "(468) 718-108",
      " +144 ",
      " +130 ",
      " +98 ",
      " +56 ",
      "(936) 162-415",
      " +68 ",
      "+169 (822) 542-726",
      " +29 ",
      "+10 (538) 347-401",
      "(546) 119-476",
      "(086) 020-168",
      "+118 (165) 041-038",
      "(101) 728-328",
      "(048) 919-483",
      "+163 (039) 436-166",
      " +10 ",
      "+188 280-087-526",
      "(685) 122-086",
      " +21 ",
      "(831) 591-877",
      "(158) 671-355",
      " +194 ",
      "+83 (973) 757-831",
      " +197 ",
      " +60 ",
      " +13 ",
      "+183 (225) 960-024",
      "+95 310-537-401",
      " +155 ",
      "(227) 250-652",
      " +151 ",
      " +161 ",
      " +141 ",
      " +72 ",
      " +169 ",
      "(233) 981-513",
      "(209) 851-997",
      "(862) 946-541",
      "(730) 685-847",
      "(594) 539-946",
      " +6 ",
      " +198 ",
      "(122) 224-247",
      " +129 ",
      "(634) 077-089",
      "(700) 858-976",
      "(728) 585-376",
      "(313) 075-754",
      "(001) 050-856",
      "(082) 845-261",
      "(751) 365-934",
      " +158 ",
      "(885) 618-512",
      "+82 (685) 122-086",
      " +105 ",
      " +174 ",
      "(242) 901-234",
      "(517) 953-149",
      "+2 604-746-137",
      " +82 ",
      " +176 ",
      "(647) 787-775",
      "+95 (310) 537-401",
      " +196 ",
      " +47 ",
      " +147 ",
      "(773) 545-520",
      " +23 ",
      "+50 (268) 571-336",
      "+151 862-946-541",
      "+60 (971) 986-103",
      "(769) 858-438",
      "(905) 707-740",
      "(029) 457-654",
      " +143 ",
      "+83 973-757-831",
      "+6 (775) 969-238",
      "(012) 148-873",
      " +40 ",
      "(679) 740-834",
      "(856) 734-046",
      "(051) 287-382",
      "(117) 484-671",
      "(225) 960-024",
      "+118 165-041-038",
      "(005) 119-176",
      "+62 647-787-775",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))",
      "+80 066-433-096",
      "+13 (258) 276-941",
      " +104 ",
      " +9 ",
      " +189 ",
      "+183 225-960-024",
      "+6 775-969-238",
      "(061) 601-398",
      "(249) 097-743",
      "+138 (885) 618-512",
      "(604) 746-137",
      "+2 (604) 746-137",
      "(455) 126-377",
      "+176 767-782-369",
      "(794) 289-551",
      "+176 (767) 782-369",
      " +33 ",
      "+104 (158) 671-355",
      " +43 ",
      " +86 ",
      "(027) 507-632",
      "+174 594-539-946",
      " ",
      " +138 ",
      "+10 538-347-401",
      " +46 ",
      "(528) 317-854",
      ") ",
      "+144 170-592-272",
      "(405) 461-331",
      "(590) 757-665",
      "+144 (170) 592-272",
      "+174 (594) 539-946",
      " +18 ",
      " +199 ",
      "+82 685-122-086",
      " +185 ",
      "(541) 401-396",
      "(620) 820-945",
      "+151 (862) 946-541",
      "(170) 592-272",
      "(822) 542-726",
      "+106 (769) 858-438",
      " +35 ",
      " +25 ",
      "+60 971-986-103",
      " +132 ",
      "(462) 008-482",
      "(808) 083-074",
      " +183 ",
      " +50 ",
      " +188 ",
      " +80 ",
      " +7 ",
      "(717) 997-323",
      "+172 027-507-632",
      "+13 258-276-941",
      "(864) 005-968",
      "(684) 878-743",
      " +52 ",
      " +64 ",
      "(592) 938-846",
      " +94 ",
      " +172 ",
      "+104 158-671-355",
      "(018) 132-973",
      "+163 039-436-166",
      "+82 (675) 366-472",
      "(150) 380-705",
      "+47 414-369-343",
      " +163 ",
      "(643) 245-738",
      "+62 (647) 787-775",
      "(023) 296-647",
      "(165) 041-038",
      "(890) 680-027",
      "(310) 537-401",
      "+167 405-461-331",
      "(448) 213-807",
      " +20 ",
      " +83 ",
      "(971) 986-103",
      "(673) 759-017",
      " +5 ",
      "(117) 430-125",
      "+138 808-083-074",
      "(425) 765-844",
      " +115 ",
      "+80 (066) 433-096",
      "(060) 204-504",
      "+106 (",
      " +95 ",
      "+169 822-542-726",
      "+155 (927) 275-860",
      "(849) 629-290",
      " +195 ",
      "+47 (414) 369-343",
      "(938) 056-084",
      "(258) 276-941",
      "(414) 369-343",
      "(039) 436-166"
    ],
    "time_diff_ms": 1091.771
  },
  "39060015modified.sl": {
    "completions": [
      "(str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\"))",
      "(str.replace _arg_0 \"/delete words in the area /\" \"\")",
      "(str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\"))",
      "(str.replace _arg_0 \"/delete words in the area /\" \"\")",
      "(str.replace _arg_0 \" /delete words in the area /\" \"\")",
      "(str.replace _arg_0 \"delete words in the area\" \"\")",
      "(str.replace _arg_0 \"/delete words in the area\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.replace _arg_0 \" /delete words in the area /\" \"\") \"keep this part\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\")))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" /delete words in the area /\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"delete words in the area\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/delete words in the area\" \"\"))"
    ],
    "constants": [
      [
        "",
        " /delete words in the area /",
        "keep this part"
      ],
      [
        0,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        " /delete words in the area /",
        "keep this part"
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        0,
        "/"
      ],
      [
        "",
        "/delete words in the area /"
      ],
      [
        "",
        " /delete words in the area /"
      ],
      [
        "",
        "delete words in the area"
      ],
      [
        "",
        "/delete words in the area"
      ]
    ],
    "all_constants": [
      "",
      0,
      "/",
      " /delete words in the area /",
      "keep this part",
      "/delete words in the area",
      "/delete words in the area /",
      "delete words in the area"
    ],
    "time_diff_ms": 1758.177
  },
  "phone-7-long-repeatmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "\"(str.substr name 7 3))\"",
      "\"(str.substr name 7 3))\"",
      "(str.substr name 7 3))",
      "(str.substr name 5 3))",
      "(str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String \"(str.substr name 7 3))\")",
      "(define-fun f (name String) String \"(str.substr name 7 3))\")",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        "(str.substr name 7 3))"
      ],
      [
        "(str.substr name 7 3))"
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      "(str.substr name 7 3))"
    ],
    "time_diff_ms": 1679.3360000000002
  },
  "stackoverflow6modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 31 (- (str.len _arg_0) 32))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))",
      "(str.substr _arg_0 30 (str.len _arg_0))",
      "(str.substr _arg_0 26 (- (str.len _arg_0) 26))",
      "(str.substr _arg_0 30 (- (str.len _arg_0) 30))",
      "(str.substr _arg_0 27 (- (str.len _arg_0) 27))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 31 (- (str.len _arg_0) 32)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 30 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 26 (- (str.len _arg_0) 26)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 30 (- (str.len _arg_0) 30)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 27 (- (str.len _arg_0) 27)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\" 0) 1)))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        32,
        31
      ],
      [
        0,
        "=",
        1
      ],
      [
        30
      ],
      [
        26
      ],
      [
        30
      ],
      [
        27
      ],
      [
        0,
        "=",
        1
      ]
    ],
    "all_constants": [
      0,
      1,
      32,
      "=",
      26,
      27,
      30,
      31
    ],
    "time_diff_ms": 1667.419
  },
  "strip-non-numeric-charactersmodified.sl": {
    "completions": [
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f ((s String)) String\n  (str.to.int (str.replace s \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(str.to.int (str.replace _arg_0 \"%\" \"\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace s \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.to.int (str.replace _arg_0 \"%\" \"\")))"
    ],
    "constants": [
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ],
      [
        "",
        "%"
      ]
    ],
    "all_constants": [
      "",
      "%"
    ],
    "time_diff_ms": 2514.9480000000003
  },
  "stackoverflow1modified.sl": {
    "completions": [
      "(str.replace _arg_0 \" Inc.\" \"\")",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.replace _arg_0 \", LLC\" \"\")",
      "(str.replace _arg_0 \" Inc.\" \"\") )",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" Inc\" \"\"))",
      "(str.replace _arg_0 \", Inc.\" \"\")",
      "(str.replace _arg_0 \" Inc.\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \", LLC\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 \" Inc\" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \", Inc.\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc.\" \"\"))"
    ],
    "constants": [
      [
        "",
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        "",
        ", LLC"
      ],
      [
        "",
        " Inc."
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        0,
        1,
        " Inc"
      ],
      [
        " Inc",
        ""
      ],
      [
        "",
        ", Inc."
      ],
      [
        "",
        " Inc."
      ]
    ],
    "all_constants": [
      "",
      0,
      " Inc.",
      1,
      ", LLC",
      ", Inc.",
      " Inc"
    ],
    "time_diff_ms": 1715.6570000000002
  },
  "get-last-wordmodified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(define-fun f ((s String)) String (str.substr s (+ 1 (str.indexof s \" \" -1)) (str.len s)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\")))) (str.len _arg_0)))",
      "\"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (str.len _arg_0))\"",
      "(str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0))",
      "(define-fun f ((s String)) String (str.substr s (+ (str.indexof s \" \" (- (str.len s) 1)) 1) (str.len s)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f ((x String)) String (str.substr x (+ 1 (str.indexof x \" \" -1)) (str.len x)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ 1 (str.indexof s \" \" -1)) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\" (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/\") \"/\")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (+ (str.indexof _arg_0 \\\" \\\") 1) (str.len _arg_0))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof (str.replace _arg_0 \" \" \"/n\") \"/n\" 0)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (- (str.len _arg_0) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr s (+ (str.indexof s \" \" (- (str.len s) 1)) 1) (str.len s)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" -1) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr x (+ 1 (str.indexof x \" \" -1)) (str.len x)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "/n"
      ],
      [
        1,
        " ",
        -1
      ],
      [
        "/",
        1,
        " ",
        0
      ],
      [
        "/",
        1,
        " "
      ],
      [
        "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))"
      ],
      [
        0,
        1,
        " ",
        "/n"
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " ",
        -1
      ],
      [
        1,
        " ",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      "/n",
      " ",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0))",
      -1
    ],
    "time_diff_ms": 1249.008
  },
  "phone-5modified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \" \" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 (str.indexof name \"-\" 0))\n)",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0)))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 (str.indexof name \"-\" 0)))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        "-"
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      "-",
      " "
    ],
    "time_diff_ms": 1483.769
  },
  "phone-6-long-repeatmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 4 3))",
      "(define-fun f ((name String)) String name)",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 4 3))",
      "(define-fun f (name String) String name)",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ],
    "time_diff_ms": 2409.6349999999998
  },
  "get-last-line-in-cellmodified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 3))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 2 (str.len \"/n\")))) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\") 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\") 2))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 1 (str.len \"/n\")))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\"))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 2))) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 1 (str.len \"/n\")))) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 3))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 2 (str.len \"/n\")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\") 2) (- (str.len _arg_0) (str.indexof _arg_0 \"/n\" (+ (str.indexof _arg_0 \"/n\") 2)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 1 (str.len \"/n\"))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ 1 (str.indexof _arg_0 \"/n\" 0))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) -1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 2))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (+ (str.len _arg_0) (- 1 (str.len \"/n\")))) (str.len _arg_0)))"
    ],
    "constants": [
      [
        3,
        "/n"
      ],
      [
        2,
        "/n"
      ],
      [
        2,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        0,
        1,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        "/n",
        -1
      ],
      [
        2,
        "/n"
      ],
      [
        1,
        "/n"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "/n",
      3,
      -1
    ],
    "time_diff_ms": 898.0
  },
  "phone-9-shortmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace\n    (str.replace\n      (str.replace\n        (str.replace\n          (str.replace\n            (str.replace\n              (str.replace\n                (str.replace\n                  (str.replace\n                    (str.replace\n                      (str.replace\n                        (str.replace\n                          (str.replace\n                            (str.replace\n                              (str.replace\n                                (str.replace\n                                  (str.replace\n                                    (str.replace\n                                      (str.replace\n                                        (str.replace\n                                          (str.replace\n                                            (str.replace\n                                              (str.replace\n                                                (str.replace\n                                                  (str.replace\n                                                    (str.replace\n                                                      (str.replace\n                                                        (str.replace\n                                                          (str.replace\n                                                            (str.replace\n                                                              (str.replace\n                                                                (str.replace\n                                                                  (str.replace\n                                                                    (str.replace\n                                                                      (str.replace\n                                                                        (str.replace\n                                                                          (str.replace\n                                                                            (str.replace\n                                                                              (str.replace\n                                                                                (str.replace\n                                                                                  (str.replace\n                                                                                    (str.replace\n                                                                                      (str.replace\n                                                                                        (str.replace\n                                                                                          (str.replace\n                                                                                            (str.replace\n                                                                                              (str.replace\n                                                                                                (str.replace\n                                                                                                  (str.replace\n                                                                                                    (str.replace\n                                                                                                      (str.replace\n                                                                                                        (str.replace\n                                                                                                          (str.replace\n                                                                                                            (str.replace\n                                                                                                              (str.replace\n                                                                                                                (str.replace\n                                                                                                                  (str.replace\n                                                                                                                    (str.replace\n                                                                                                                      (str.replace\n                                                                                                                        (str.replace\n                                                                                                                          (str.replace\n                                                                                                                            (str.replace\n                                                                                                                              (str.replace\n                                                                                                                                (str.replace\n                                                                                                                                  (str.replace\n                                                                                                                                    (str.replace\n                                                                                                                                      (str.replace\n                                                                                                                                        (str.replace\n                                                                                                                                          (str.replace\n                                                                                                                                            (str.replace\n                                                                                                                                              (str.replace\n                                                                                                                                                (str.replace\n                                                                                                                                                  (str.replace\n                                                                                                                                                    (str.replace\n                                                                                                                                                      (str.replace\n                                                                                                                                                        (str.replace\n                                                                                                                                                          (str.replace\n                                                                                                                                                            (str.replace\n                                                                                                                                                              (str.replace\n                                                                                                                                                                (str.replace\n                                                                                                                                                                  (str.replace\n                                                                                                                                                                    (str.replace\n                                                                                                                                                                      (str.replace\n                                                                                                                                                                        (str.replace\n                                                                                                                                                                          (str.replace\n                                                                                                                                                                            (str.replace\n                                                                                                                                                                              (str.replace\n                                                                                                                                                                                (str.replace\n                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                              (str.replace\n                                                                                                                                                                                                (str.replace\n                                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                                              (str.replace\n                                                                                                                                                name\n                                                                                                                                                \"BRD\"\n                                                                                                                                                \"Branding\")\n                                                                                                                                              \"DRS\"\n                                                                                                                                              \"Direct Response\")\n                                                                            \"LDS\"\n                                                                            \"Leads\")\n                                                                          \"=\"\n                                                                          \"/\")\n                                                                        \"in\"\n                                                                        \"_\")\n                                                                      \"9\"\n                                                                      \"nine\")\n                                                                    \".\"\n                                                                    \"dot\")\n                                                                  \"microsoft\"\n                                                                  \"Windows\")\n                                                                \"apple\"\n                                                                \"Mac\")\n                                                              \"-\"\n                                                              \"minus\")\n                                                            \"1\"\n                                                            \"one\")\n                                                          \"2\"\n                                                          \"two\")\n                                                        \"3\"\n                                                        \"three\")\n                                                      \"4\"\n                                                      \"four\")\n                                                    \"5\"\n                                                    \"five\")\n                                                  \"6\"\n                                                  \"six\")\n                                                \"7\"\n                                                \"seven\")\n                                              \"8\"\n                                              \"eight\")\n                                            \"0\"\n                                            \"zero\")\n                                          \",\"\n                                          \"comma\")\n                                        \"<\"\n                                        \"less than\")\n                                      \">\"\n                                      \"greater than\")\n                                    \"/n\"\n                                    \"new line\")\n                                  \"%\"\n                                  \"percent\")\n                                \"b\"\n                                \"banana\")\n                              \"apple\"\n                              \"apple\")\n                            \"bananas\"\n                            \"bananas\")\n                          \"strawberries\"\n                          \"strawberries\")\n                        \"oranges\"\n                        \"oranges\")\n                      \"LLC\"\n                      \"LLC\")\n                    \"Inc\"\n                    \"Inc\")\n                  \"Corporation\"\n                  \"Corporation\")\n                \"Enterprises\"\n                \"Enterprises\")\n              \"Company\"\n              \"Company\")\n            \"(\"\n            \"open parenthesis\")\n          \")\"\n          \"close parenthesis\")\n        \"+\"\n        \"plus\")\n      \",\"\n      \"comma\")\n    (int.to.str\n      (str.indexof\n        (str.indexof\n          (str.indexof\n            (str.indexof\n              (str.indexof\n                (str.indexof\n                  (str.indexof\n                    (str.indexof\n                      (str.indexof\n                        (str.indexof\n                          (str.indexof\n                            (str.indexof\n                              (str.indexof\n                                (str.indexof\n                                  (str.indexof\n                                    (str.indexof\n                                      (str.indexof\n                                        (str.indexof\n                                          (str.indexof\n                                            (str.indexof\n                                              (str.indexof\n                                                (str.indexof\n                                                  (str.indexof\n                                                    (str.indexof\n                                                      (str.indexof\n                                                        (str.indexof\n                                                          (str.indexof\n                                                            (str.indexof\n                                                              (str.indexof\n                                                                (str.indexof\n                                                                  (str.indexof\n                                                                    (str.indexof\n                                                                      (str.indexof\n                                                                        (str.indexof\n                                                                          (str.indexof\n                                                                            (str.indexof\n                                                                              (str.indexof\n                                                                                (str.indexof\n                                                                                  (str.indexof\n                                                                                    (str.indexof\n                                                                                      (str.indexof\n                                                                                        (str.indexof\n                                                                                          (str.indexof\n                                                                                            (str.indexof\n                                                                                              (str.indexof\n                                                                                                (str.indexof\n                                                                                                  (str.indexof\n                                                                                                    (str.indexof\n                                                                                                      (str.indexof\n                                                                                                        (str.indexof\n                                                                                                          (str.indexof\n                                                                                                            (str.indexof\n                                                                                                              (str.indexof\n                                                                                                                (str.indexof\n                                                                                                                  (str.indexof\n                                                                                                                    (str.indexof\n                                                                                                                      (str.indexof\n                                                                                                                        (str.indexof\n                                                                                                                          (str.indexof\n                                                                                                                            (str.indexof\n                                                                                                                              (str.indexof\n                                                                                                                                (str.indexof\n                                                                                                                                  (str.indexof\n                                                                                                                                    (str.indexof\n                                                                                                                                      (str.indexof\n                                                                                                                                        (str.indexof\n                                                                                                                                          (str.indexof\n                                                                                                                                            (str.indexof\n                                                                                                                                              (str.indexof\n                                                                                                                                                (str.indexof\n                                                                                                                                                  name\n                                                                                                                                                \" \")\n                                                                                                                                              \"+\")\n                                                                            \"-\")\n                                                                            \"-\")\n                                                                          \".\")\n                                                                        \".\")\n                                                                        \".\")\n                                                                      \".\")\n                                                                    \".\")\n                                                                    \".\")\n                                                                  \".\")\n                                                                \".\")\n                                                                \".\")\n                                                              \".\")\n                                                            \".\")\n                                                            \".\")\n                                                          \".\")\n                                                        \".\")\n                                                        \".\")\n                                                      \".\")\n                                                    \".\")\n                                                    \".\")\n                                                  \".\")\n                                                \".\")\n                                                \".\")\n                                              \".\")\n                                            \".\")\n                                            \".\")\n                                          \".\")\n                                        \".\")\n                                        \".\")\n                                      \".\")\n                                    \".\")\n                                    \".\")\n                                  \".\")\n                                \".\")\n                                \".\")\n                              \".\")\n                            \".\")\n                            \".\")\n                          \".\")\n                        \".\")\n                        \".\")\n                      \".\")\n                    \".\")\n                    \".\")\n                  \".\")\n                \".\")\n                \".\")\n              \".\")\n            \".\")\n            \".\")\n          \".\")\n        \".\")\n        \".\")\n      \".\")\n      \".\")\n      \".\")\n    3)\n  3))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n   (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(str.replace name \" \" \".\")",
      "(define-fun f (name String) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\") \"-\" \".\")\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\") \"=\" \"/\") \"in\" \"_\") \"9\" \"nine\") \".\" \"dot\") \"microsoft\" \"Windows\") \"apple\" \"Mac\") \"-\" \"minus\") \"1\" \"one\") \"2\" \"two\") \"3\" \"three\") \"4\" \"four\") \"5\" \"five\") \"6\" \"six\") \"7\" \"seven\") \"8\" \"eight\") \"0\" \"zero\") \",\" \"comma\") \"<\" \"less than\") \">\" \"greater than\") \"/n\" \"new line\") \"%\" \"percent\") \"b\" \"banana\") \"apple\" \"apple\") \"bananas\" \"bananas\") \"strawberries\" \"strawberries\") \"oranges\" \"oranges\") \"LLC\" \"LLC\") \"Inc\" \"Inc\") \"Corporation\" \"Corporation\") \"Enterprises\" \"Enterprises\") \"Company\" \"Company\") \"(\" \"open parenthesis\") \")\" \"close parenthesis\") \"+\" \"plus\") \",\" \"comma\") (int.to.str (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof (str.indexof name \" \") \"+\") \"-\") \"-\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") \".\") 3) 3))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace name \" \" \"\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \")"
    ],
    "constants": [
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "Corporation",
        "seven",
        3,
        " ",
        "2",
        "open parenthesis",
        "minus",
        "4",
        "b",
        "Enterprises",
        "greater than",
        "bananas",
        "/",
        "8",
        "Direct Response",
        "nine",
        "Windows",
        "Branding",
        "-",
        "four",
        "six",
        "LDS",
        "microsoft",
        "7",
        ",",
        "comma",
        "/n",
        "dot",
        "percent",
        "Leads",
        "Company",
        ")",
        "apple",
        "6",
        "9",
        "one",
        "5",
        "zero",
        "3",
        "close parenthesis",
        "less than",
        "1",
        "new line",
        "%",
        "oranges",
        "two",
        "0",
        "=",
        "Mac",
        "Inc",
        "<",
        "five",
        "BRD",
        "strawberries",
        "+",
        "banana",
        ".",
        "three",
        "DRS",
        "eight",
        "in",
        "_",
        "plus",
        "(",
        ">",
        "LLC"
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        0,
        3,
        4,
        8,
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name "
      ]
    ],
    "all_constants": [
      0,
      ".",
      "comma",
      3,
      4,
      "/n",
      "",
      "plus",
      8,
      "Direct Response",
      "8",
      "LDS",
      "7",
      "Leads",
      "percent",
      "DRS",
      "seven",
      "6",
      "(",
      "banana",
      "new line",
      "Mac",
      "+",
      "<",
      ",",
      "close parenthesis",
      "greater than",
      "Enterprises",
      "less than",
      "nine",
      ">",
      "dot",
      "3",
      "1",
      "=",
      "Company",
      "one",
      "five",
      "BRD",
      "_",
      "LLC",
      "six",
      "/",
      "oranges",
      "eight",
      "Inc",
      "two",
      "4",
      " ",
      "9",
      "microsoft",
      "minus",
      "5",
      "in",
      "open parenthesis",
      "b",
      "apple",
      "-",
      "Corporation",
      "zero",
      "Branding",
      "%",
      "0",
      "2",
      "three",
      "(str.replace (str.replace (str.replace (str.replace name ",
      "bananas",
      ")",
      "strawberries",
      "four",
      "Windows"
    ],
    "time_diff_ms": 1362.116
  },
  "38871714modified.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\"))",
      "(str.replace _arg_0 \"<\" \"\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\"))",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"<\" \"\") (str.replace _arg_0 \">\" \"\"))",
      "(str.replace _arg_0 \"<\" \"\")",
      "(define-fun f ((s String)) String\n  (str.replace s \"<\" \"\")\n  )",
      "(str.replace _arg_0 \"<\" \"\")",
      "(str.replace _arg_0 \"<\" \"\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\"))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      "<"
    ],
    "time_diff_ms": 1132.452
  },
  "phone-5-shortmodified.sl": {
    "completions": [
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(define-fun f (name String) String\n  (str.substr name 1 2))",
      "(ite (str.contains name \" \")\n     (str.substr name 1 (str.indexof name \" \" 0))\n     (str.substr name 1 (str.indexof name \"-\" 0)))",
      "(define-fun f ((name String)) String (str.substr name 1 2))",
      "(str.substr name 1 2))",
      "(str.substr name 1 2))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name 1 (str.indexof name \" \" 0)) (str.substr name 1 (str.indexof name \"-\" 0))))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))",
      "(define-fun f (name String) String (str.substr name 1 2))"
    ],
    "constants": [
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        0,
        1,
        " ",
        "-"
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "-",
      " "
    ],
    "time_diff_ms": 2106.547
  },
  "initials_smallmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \n    \".\"\n    (str.substr \n      (str.replace name \" \" \"\") \n      0 \n      1\n    )\n  )\n)",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1)\n    \".\"\n    (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1)\n    \".\"))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 1) \".\"\n    (str.substr (str.substr name (str.indexof name \" \" 0) 2) 1 1)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) (+ (str.indexof name \" \" 0) 2)) 0 1) \".\"))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 2) 0 1) \".\"))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.replace name \" \" \"\") 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 1) 0 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 2) 1 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) (+ (str.indexof name \" \" 0) 2)) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (str.indexof name \" \" 0) 2) 0 1) \".\"))"
    ],
    "constants": [
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        "",
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ],
      [
        0,
        1,
        2,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      ".",
      "",
      2,
      " "
    ],
    "time_diff_ms": 1817.668
  },
  "get-domain-name-from-urlmodified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (str.len _arg_0)))\"",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.len \"http://\"))))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\")))))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (+ 8 (str.indexof _arg_0 \\\"/\\\")))))\"",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (+ 1 (str.indexof _arg_0 \\\"/\\\"))))\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (str.len _arg_0)))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"//\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.len \"http://\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (+ 8 (str.indexof _arg_0 \\\"/\\\")))))\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"/\\\" (+ 1 (str.indexof _arg_0 \\\"/\\\"))))\")"
    ],
    "constants": [
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.len _arg_0)))"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/",
        "//"
      ],
      [
        0,
        8,
        "/",
        "http://"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))"
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))))"
      ]
    ],
    "all_constants": [
      0,
      "/",
      1,
      8,
      "//",
      "http://",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 8 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"/\" (str.len _arg_0)))"
    ],
    "time_diff_ms": 1189.268
  },
  "get-middle-name-from-full-namemodified.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 2)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \")))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f ((_arg_0 String)) String (str.at _arg_0 0 (+ 1 (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)) (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 2))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \")) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0) 1)))",
      "(define-fun f (_arg_0 String) String (str.at _arg_0 0 (+ 1 (str.indexof _arg_0 \" \" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)) (+ (str.indexof _arg_0 \" \") 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \") 1)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (- (str.indexof _arg_0 \" \" 0 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        1,
        " ",
        2
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      " "
    ],
    "time_diff_ms": 670.847
  },
  "35744094modified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0)) 1))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 9 (- (str.indexof _arg_0 \"/\" 9) 9)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (str.indexof _arg_0 \"/\" 0 3))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0 7) (+ 7 (str.indexof _arg_0 \"://www.\" 0 7))))",
      "(define-fun f ((x String)) String (str.substr x 7 100))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8)))",
      "(define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"/\"))) (- (str.indexof _arg_0 \"/\") (+ 2 (str.indexof _arg_0 \"/\")))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0 7) (str.indexof _arg_0 \"/\" 0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0)) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 9 (- (str.indexof _arg_0 \"/\" 9) 9)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://\" 0 3) (str.indexof _arg_0 \"/\" 0 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0 7) (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"://www.\" 0 7) (+ 7 (str.indexof _arg_0 \"://www.\" 0 7)))))",
      "(define-fun f (_arg_0 String) String (str.substr x 7 100))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"://www.\") 8))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ 2 (str.indexof _arg_0 \"/\"))) (- (str.indexof _arg_0 \"/\") (+ 2 (str.indexof _arg_0 \"/\")))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"://www.\" 0 7) (str.indexof _arg_0 \"/\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://www.\") 8) (str.indexof _arg_0 \"/\")))"
    ],
    "constants": [
      [
        0,
        1,
        "/",
        "://www."
      ],
      [
        9,
        "/"
      ],
      [
        0,
        "/",
        "://www."
      ],
      [
        0,
        "/",
        3,
        "://"
      ],
      [
        0,
        "/",
        "://www.",
        7
      ],
      [
        100,
        7
      ],
      [
        8,
        "/",
        "://www."
      ],
      [
        "/",
        2
      ],
      [
        0,
        "/",
        "://www.",
        7
      ],
      [
        8,
        "/",
        "://www."
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      3,
      100,
      "://www.",
      2,
      7,
      8,
      9,
      "://"
    ],
    "time_diff_ms": 1750.638
  },
  "extract-text-between-parenthesesmodified.sl": {
    "completions": [
      "(str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0)))",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(ite (str.contains _arg_0 \"<\")\n     (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))\n     -1)",
      "(str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0)))",
      "(ite (str.contains _arg_0 \"<\")\n     (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))\n     -1)",
      "(define-fun f (_arg_0 String) Int\n    (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) 1)))",
      "(ite (str.contains _arg_0 \"<\")\n     (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1))))\n     -1)",
      "(str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0)))",
      "(ite (str.contains _arg_0 \"<\") (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1)))) -1)",
      "(str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0))))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))",
      "(define-fun f (_arg_0 String) Int (ite (str.contains _arg_0 \"<\") (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))) -1))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0))))",
      "(define-fun f (_arg_0 String) Int (ite (str.contains _arg_0 \"<\") (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))) -1))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) 1)))",
      "(define-fun f (_arg_0 String) Int (ite (str.contains _arg_0 \"<\") (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"<\" 0) 1)))) -1))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (str.indexof _arg_0 \"<\" 0) (str.indexof _arg_0 \">\" 0))))",
      "(define-fun f (_arg_0 String) Int (ite (str.contains _arg_0 \"<\") (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (+ (str.indexof _arg_0 \"<\") 1)))) -1))",
      "(define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ (str.indexof _arg_0 \"<\") 1) (- (str.indexof _arg_0 \">\") (str.indexof _arg_0 \"<\")))))"
    ],
    "constants": [
      [
        0,
        ">",
        "<"
      ],
      [
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">",
        -1
      ],
      [
        0,
        ">",
        "<"
      ],
      [
        0,
        1,
        "<",
        ">",
        -1
      ],
      [
        0,
        1,
        "<"
      ],
      [
        0,
        1,
        "<",
        ">",
        -1
      ],
      [
        0,
        ">",
        "<"
      ],
      [
        1,
        "<",
        ">",
        -1
      ],
      [
        1,
        "<",
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      ">",
      -1,
      "<"
    ],
    "time_diff_ms": 553.31
  },
  "phone-5-longmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "\"(str.substr name 1 3)\"",
      "\"(str.substr name 1 2))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))",
      "\"(str.substr name 1 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 1 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String \"(str.substr name 1 3)\")",
      "(define-fun f (name String) String \"(str.substr name 1 2))\")",
      "(define-fun f (name String) String (str.substr name 1 3))",
      "(define-fun f (name String) String \"(str.substr name 1 3))\")",
      "(define-fun f (name String) String (str.substr name 1 3))"
    ],
    "constants": [
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        "(str.substr name 1 3)"
      ],
      [
        "(str.substr name 1 2))"
      ],
      [
        1,
        3
      ],
      [
        "(str.substr name 1 3))"
      ],
      [
        1,
        3
      ]
    ],
    "all_constants": [
      1,
      3,
      "(str.substr name 1 3)",
      "(str.substr name 1 3))",
      "(str.substr name 1 2))"
    ],
    "time_diff_ms": 976.3030000000001
  },
  "phone-9-long-repeatmodified.sl": {
    "completions": [
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.++ \n    (str.substr name 0 3) \".\"\n    (str.substr name 4 3) \".\"\n    (str.substr name 8 3) \".\"\n    (str.substr name 12 3)))",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\"",
      "(ite (str.prefixof name \"+\")\n     (str.replace name \" \" \".\")\n     (str.replace name \"-\" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\")\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\"",
      "\"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\")))"
    ],
    "solutions": [
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \".\" (str.substr name 4 3) \".\" (str.substr name 8 3) \".\" (str.substr name 12 3)))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"-\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (ite (str.prefixof name \"+\") (str.replace name \" \" \".\") (str.replace name \"-\" \".\")))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\"+\\\" \\\".\\\")\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\"\\\"))\")",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace name \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\" \\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\") \"-\" \".\")"
      ],
      [
        0,
        3,
        4,
        8,
        12,
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")"
      ],
      [
        "-",
        " ",
        "+",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\") \" \" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \".\")"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\"))"
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\") \" \" \".\")"
      ],
      [
        "",
        "-",
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      ".",
      "(str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\") \"-\" \".\")",
      3,
      4,
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\") \" \" \".\")",
      "",
      8,
      "-",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \".\") \" \" \".\")",
      12,
      "(str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"+\" \".\")",
      " ",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \" \" \".\") \"-\" \".\")",
      "(str.replace (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\") \"+\" \"\"))",
      "+"
    ],
    "time_diff_ms": 1438.385
  },
  "exceljet1modified.sl": {
    "completions": [
      "\"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\") 1) (str.len _arg_1))\"",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "\"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\" (+ (str.indexof _arg_1 \\\".\\\" 0) 1)) 1) (str.len _arg_1))\"",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1))",
      "\"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\" 0) 1) (str.len _arg_1))\"",
      "\"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\") 1) (str.len _arg_1))\""
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String \"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\") 1) (str.len _arg_1))\")",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String \"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\" (+ (str.indexof _arg_1 \\\".\\\" 0) 1)) 1) (str.len _arg_1))\")",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \".\") 1) (str.len _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String \"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\" 0) 1) (str.len _arg_1))\")",
      "(define-fun f (_arg_0 String _arg_1 String) String \"(str.substr _arg_1 (+ (str.indexof _arg_1 \\\"_\\\") 1) (str.len _arg_1))\")"
    ],
    "constants": [
      [
        "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))"
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        1,
        "."
      ],
      [
        "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" (+ (str.indexof _arg_1 \".\" 0) 1)) 1) (str.len _arg_1))"
      ],
      [
        1,
        "."
      ],
      [
        "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))"
      ],
      [
        "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))"
      ]
    ],
    "all_constants": [
      ".",
      1,
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" (+ (str.indexof _arg_1 \".\" 0) 1)) 1) (str.len _arg_1))",
      "(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\") 1) (str.len _arg_1))"
    ],
    "time_diff_ms": 1047.104
  },
  "phone-7-shortmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3)\n)",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 7 3))"
    ],
    "constants": [
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      3,
      6,
      7
    ],
    "time_diff_ms": 1550.725
  },
  "extract-word-containing-specific-textmodified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" (str.len _arg_0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \") (+ (str.indexof _arg_0 \" \") 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (str.indexof _arg_0 \" \" (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (- (str.indexof _arg_0 \" \"))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \") 1) (str.indexof _arg_0 \" \")))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1968.7230000000002
  },
  "stackoverflow7modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_0 0 (- (str.indexof _arg_0 _arg_1 0) 1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.replace _arg_1 _arg_0 \"\"))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(str.replace _arg_1 _arg_0 \"\")",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.replace _arg_1 _arg_0 \"\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 _arg_1))",
      "(ite (str.contains _arg_1 _arg_0) _arg_1 _arg_0)",
      "(define-fun f ((_arg_0 String) (_arg_1 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1 0)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (- (str.indexof _arg_0 _arg_1 0) 1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_1 _arg_0 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_1 _arg_0 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_1 _arg_0 \"\"))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 String) String (ite (str.contains _arg_1 _arg_0) _arg_1 _arg_0))",
      "(define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_0 0 (str.indexof _arg_0 _arg_1)))"
    ],
    "constants": [
      [
        0
      ],
      [
        0,
        1
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [
        ""
      ],
      [
        0
      ],
      [],
      [
        0
      ]
    ],
    "all_constants": [
      0,
      1,
      ""
    ],
    "time_diff_ms": 1105.577
  },
  "phone-6-shortmodified.sl": {
    "completions": [
      "(str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(ite (= (str.indexof name \" \") -1) name (str.substr name (+ (str.indexof name \" \") 1) 3))",
      "(str.substr name 5 3))",
      "\"(str.substr name 5 3))\"",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 1 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.indexof name \" \") -1) name (str.substr name (+ (str.indexof name \" \") 1) 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3))\")",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 1 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3,
        -1
      ],
      [
        3,
        5
      ],
      [
        "(str.substr name 5 3))"
      ],
      [
        1,
        " ",
        3
      ]
    ],
    "all_constants": [
      1,
      3,
      5,
      "(str.substr name 5 3))",
      " ",
      -1
    ],
    "time_diff_ms": 1444.228
  },
  "43120683modified.sl": {
    "completions": [
      "(str.replace _arg_0 \"1\" \"apple\")",
      "\"(str.++ _arg_0 (ite (= _arg_0 \\\"one\\\") \\\" apple\\\" (ite (= _arg_0 \\\"two\\\") \\\" bananas\\\" (ite (= _arg_0 \\\"three\\\") \\\" strawberries\\\" (ite (= _arg_0 \\\"four\\\") \\\" oranges\\\" \\\"\\\")))))\"",
      "(str.replace _arg_0 \"one\" \"apple\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(str.replace _arg_0 \"one\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(str.replace _arg_0 \"1\" \"apple\")",
      "(ite (= _arg_0 \"one\") \"one apple\" (ite (= _arg_0 \"two\") \"two bananas\" (ite (= _arg_0 \"three\") \"three strawberries\" (ite (= _arg_0 \"four\") \"four oranges\" \"\"))))",
      "(str.replace _arg_0 \"one\" \"apple\")",
      "(str.replace _arg_0 \"one\" \"apple\")"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String \"(str.++ _arg_0 (ite (= _arg_0 \\\"one\\\") \\\" apple\\\" (ite (= _arg_0 \\\"two\\\") \\\" bananas\\\" (ite (= _arg_0 \\\"three\\\") \\\" strawberries\\\" (ite (= _arg_0 \\\"four\\\") \\\" oranges\\\" \\\"\\\")))))\")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"one\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"one\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"1\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (ite (= _arg_0 \"one\") \"one apple\" (ite (= _arg_0 \"two\") \"two bananas\" (ite (= _arg_0 \"three\") \"three strawberries\" (ite (= _arg_0 \"four\") \"four oranges\" \"\")))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"one\" \"apple\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"one\" \"apple\"))"
    ],
    "constants": [
      [
        "1",
        "apple"
      ],
      [
        "(str.++ _arg_0 (ite (= _arg_0 \"one\") \" apple\" (ite (= _arg_0 \"two\") \" bananas\" (ite (= _arg_0 \"three\") \" strawberries\" (ite (= _arg_0 \"four\") \" oranges\" \"\")))))"
      ],
      [
        "one",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "one",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "1",
        "apple"
      ],
      [
        "",
        "three strawberries",
        "one",
        "one apple",
        "four",
        "three",
        "four oranges",
        "two bananas",
        "two"
      ],
      [
        "one",
        "apple"
      ],
      [
        "one",
        "apple"
      ]
    ],
    "all_constants": [
      "",
      "apple",
      "1",
      "two",
      "three",
      "two bananas",
      "four",
      "one",
      "one apple",
      "three strawberries",
      "(str.++ _arg_0 (ite (= _arg_0 \"one\") \" apple\" (ite (= _arg_0 \"two\") \" bananas\" (ite (= _arg_0 \"three\") \" strawberries\" (ite (= _arg_0 \"four\") \" oranges\" \"\")))))",
      "four oranges"
    ],
    "time_diff_ms": 1424.2169999999999
  },
  "split-text-string-at-specific-charactermodified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.len _arg_0)))",
      "(str.substr _arg_0 0 (_arg_1))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(str.substr _arg_0 0 (_arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1))",
      "(define-fun f ((s String) (n Int)) String\n  (str.substr s 0 (str.indexof s \"_\" n)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" _arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr s 0 (str.indexof s \"_\" n)))"
    ],
    "constants": [
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      ",",
      "_"
    ],
    "time_diff_ms": 2067.919
  },
  "phone-7-longmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 7 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 6 3))",
      "\"(str.substr name 6 3))\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 7 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(str.substr name 6 3))\")"
    ],
    "constants": [
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        "(str.substr name 6 3))"
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      7,
      "(str.substr name 6 3))"
    ],
    "time_diff_ms": 1767.4479999999999
  },
  "phone-6modified.sl": {
    "completions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3)\n)",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(ite (= (str.substr name 6 3) \" \") (str.substr name 7 3) (str.substr name 6 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(str.substr name 5 3))",
      "(ite (str.contains name \" \")\n     (str.substr name (+ (str.indexof name \" \") 1) 3)\n     (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (= (str.substr name 6 3) \" \") (str.substr name 7 3) (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (ite (str.contains name \" \") (str.substr name (+ (str.indexof name \" \") 1) 3) (str.substr name 5 3)))",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        " ",
        3,
        6,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        1,
        " ",
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      1,
      3,
      5,
      6,
      7,
      " "
    ],
    "time_diff_ms": 1419.6399999999999
  },
  "phone-10-longmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3))",
      "\"(str.++ \\\"+\\\" \\\"(\\\" (str.substr name 0 3) \\\")\\\" (str.substr name 4 3) \\\"-\\\" (str.substr name 8 3))\"",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n           (str.substr name 0 3)\n           \" (\"\n           (str.substr name 3 3)\n           \") \"\n           (str.substr name 6 3)\n           \"-\"\n           (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n           (str.substr name 0 3)\n           \" (\"\n           (str.substr name 3 3)\n           \") \"\n           (str.substr name 7 3)\n           \"-\"\n           (str.substr name 11 3)))",
      "(define-fun f (name String) String\n  (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n           (str.substr name 0 3)\n           \" (\"\n           (str.substr name 3 3)\n           \") \"\n           (str.substr name 6 3)\n           \"-\"\n           (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ \"+\"\n    (str.substr name 0 3)\n    \" (\"\n    (str.substr name 3 3)\n    \") \"\n    (str.substr name 6 3)\n    \"-\"\n    (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String\n  (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String \"(str.++ \\\"+\\\" \\\"(\\\" (str.substr name 0 3) \\\")\\\" (str.substr name 4 3) \\\"-\\\" (str.substr name 8 3))\")",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 4 3) \") \" (str.substr name 8 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))"
    ],
    "constants": [
      [
        0,
        3,
        6,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        "(str.++ \"+\" \"(\" (str.substr name 0 3) \")\" (str.substr name 4 3) \"-\" (str.substr name 8 3))"
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        8,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        "+",
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      3,
      4,
      6,
      7,
      "-",
      9,
      8,
      11,
      " (",
      "(str.++ \"+\" \"(\" (str.substr name 0 3) \")\" (str.substr name 4 3) \"-\" (str.substr name 8 3))",
      "+"
    ],
    "time_diff_ms": 2022.983
  },
  "stackoverflow2modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\" \\\") 1))\"",
      "(define-fun f ((s String)) String\n    (str.++ \n        (ite (str.contains s \"china\") \"china\" \"\")\n        (ite (str.contains s \"india\") \"india\" \"\")\n        (ite (str.contains s \"japan\") \"japan\" \"\")\n        (ite (str.contains s \"indonesia\") \"indonesia\" \"\")\n        (ite (str.contains s \"korea\") \"korea\" \"\")\n    )\n)",
      "(str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \") 1))",
      "(str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.len _arg_0)))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\"",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\" \\\") 1))\"",
      "(str.++ \"india\" \" \" \"china\")",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\"))",
      "(str.replace _arg_0 \" \" \"\\n\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\" \\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.++ (ite (str.contains s \"china\") \"china\" \"\") (ite (str.contains s \"india\") \"india\" \"\") (ite (str.contains s \"japan\") \"japan\" \"\") (ite (str.contains s \"indonesia\") \"indonesia\" \"\") (ite (str.contains s \"korea\") \"korea\" \"\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (+ (str.indexof _arg_0 \" \") 1)))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \" \")) \" \" (str.substr _arg_0 (str.indexof _arg_0 \" \") (str.len _arg_0))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\" \\\" 0))\")",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\" \\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.++ \"india\" \" \" \"china\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" \" \"\\n\"))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \") 1))"
      ],
      [
        "",
        "china",
        "indonesia",
        "korea",
        "japan",
        "india"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \") 1))"
      ],
      [
        " ",
        "india",
        "china"
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "\n"
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "\n",
      "japan",
      " ",
      "china",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "indonesia",
      "india",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \" \") 1))",
      "korea"
    ],
    "time_diff_ms": 1222.101
  },
  "stackoverflow9modified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" 0)))))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" 0))))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \"))) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \")))) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \" \" 0) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \" \" 0)))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ],
    "time_diff_ms": 1479.019
  },
  "strip-html-from-text-or-numbersmodified.sl": {
    "completions": [
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.substr _arg_0 3 (- (str.len _arg_0) 7))",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.substr _arg_0 3 (- (str.len _arg_0) 7))",
      "(str.replace _arg_0 \"<b>\" \"\")",
      "(str.substr _arg_0 3 (- (str.len _arg_0) 3))",
      "(str.substr _arg_0 3 (- (str.len _arg_0) 7))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 3 (- (str.len _arg_0) 7)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 3 (- (str.len _arg_0) 7)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 3 (- (str.len _arg_0) 3)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 3 (- (str.len _arg_0) 7)))"
    ],
    "constants": [
      [
        "",
        "<b>"
      ],
      [
        3,
        7
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        "",
        "<b>"
      ],
      [
        3,
        7
      ],
      [
        "",
        "<b>"
      ],
      [
        3
      ],
      [
        3,
        7
      ]
    ],
    "all_constants": [
      "",
      3,
      "<b>",
      7
    ],
    "time_diff_ms": 968.925
  },
  "phone-10modified.sl": {
    "completions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "\"(str.replace (str.replace (str.replace name
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.at name 0) \" (\" (str.substr name 1 3) \") \" (str.substr name 5 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        1,
        3,
        5,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        " (",
        ") "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        " (",
        ") "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      1,
      3,
      4,
      5,
      6,
      7,
      "-",
      9,
      11,
      13,
      " (",
      "+",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 1380.069
  },
  "phone-9-longmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String\n  (str.replace\n    (str.replace\n      (str.replace\n        (str.replace\n          (str.replace\n            (str.replace\n              (str.replace\n                (str.replace\n                  (str.replace\n                    (str.replace\n                      (str.replace\n                        (str.replace\n                          (str.replace\n                            (str.replace\n                              (str.replace\n                                (str.replace\n                                  (str.replace\n                                    (str.replace\n                                      (str.replace\n                                        (str.replace\n                                          (str.replace\n                                            (str.replace\n                                              (str.replace\n                                                (str.replace\n                                                  (str.replace\n                                                    (str.replace\n                                                      (str.replace\n                                                        (str.replace\n                                                          (str.replace\n                                                            (str.replace\n                                                              (str.replace\n                                                                (str.replace\n                                                                  (str.replace\n                                                                    (str.replace\n                                                                      (str.replace\n                                                                        (str.replace\n                                                                          (str.replace\n                                                                            (str.replace\n                                                                              (str.replace\n                                                                                (str.replace\n                                                                                  (str.replace\n                                                                                    (str.replace\n                                                                                      (str.replace\n                                                                                        (str.replace\n                                                                                          (str.replace\n                                                                                            (str.replace\n                                                                                              (str.replace\n                                                                                                (str.replace\n                                                                                                  (str.replace\n                                                                                                    (str.replace\n                                                                                                      (str.replace\n                                                                                                        (str.replace\n                                                                                                          (str.replace\n                                                                                                            (str.replace\n                                                                                                              (str.replace\n                                                                                                                (str.replace\n                                                                                                                  (str.replace\n                                                                                                                    (str.replace\n                                                                                                                      (str.replace\n                                                                                                                        (str.replace\n                                                                                                                          (str.replace\n                                                                                                                            (str.replace\n                                                                                                                              (str.replace\n                                                                                                                                (str.replace\n                                                                                                                                  (str.replace\n                                                                                                                                    (str.replace\n                                                                                                                                      (str.replace\n                                                                                                                                        (str.replace\n                                                                                                                                          (str.replace\n                                                                                                                                            (str.replace\n                                                                                                                                              (str.replace\n                                                                                                                                                (str.replace\n                                                                                                                                                  (str.replace\n                                                                                                                                                    (str.replace\n                                                                                                                                                      (str.replace\n                                                                                                                                                        (str.replace\n                                                                                                                                                          (str.replace\n                                                                                                                                                            (str.replace\n                                                                                                                                                              (str.replace\n                                                                                                                                                                (str.replace\n                                                                                                                                                                  (str.replace\n                                                                                                                                                                    (str.replace\n                                                                                                                                                                      (str.replace\n                                                                                                                                                                        (str.replace\n                                                                                                                                                                          (str.replace\n                                                                                                                                                                            (str.replace\n                                                                                                                                                                              (str.replace\n                                                                                                                                                                                (str.replace\n                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                              (str.replace\n                                                                                                                                                                                                (str.replace\n                                                                                                                                                                                                  (str.replace\n                                                                                                                                                                                                    (str.replace\n                                                                                                                                                                                                      (str.replace\n                                                                                                                                                                                                        (str.replace\n                                                                                                                                                                                                          (str.replace\n                                                                                                                                                                                                            (str.replace\n                                                                                                                                                                                                              (str.replace\n                                                                                                                                                name\n                                                                                                                                                \" \"\n                                                                                                                                                \".\")\n                                                                                                                                              \"+\"\n                                                                                                                                              \".\")\n                                                                            \"-\"\n                                                                            \".\")\n                                                                        \"+\"\n                                                                        \".\")\n                                                                    \"-\"\n                                                                    \".\")\n                                                                \"+\"\n                                                                \".\")\n                                                            \"-\"\n                                                            \".\")\n                                                        \"+\"\n                                                        \".\")\n                                                    \"-\"\n                                                    \".\")\n                                                \"+\"\n                                                \".\")\n                                            \"-\"\n                                            \".\")\n                                        \"+\"\n                                        \".\")\n                                    \"-\"\n                                    \".\")\n                                \"+\"\n                                \".\")\n                            \"-\"\n                            \".\")\n                        \"+\"\n                        \".\")\n                    \"-\"\n                    \".\")\n                \"+\"\n                \".\")\n            \"-\"\n            \".\")\n        \"+\"\n        \".\")\n    \"-\"\n    \".\")\n  \"+\"\n  \".\"))",
      "(define-fun f (name String) String\n  (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "\"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"BRD\\\" \\\"\\\") \\\"DRS\\\" \\\"\\\") \\\"LDS\\\" \\\"\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\")\"",
      "(define-fun f (name String) String\n  (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \"\"))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \" \" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \"\") \"-\" \".\") \" \" \".\"))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \" \" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\") \"-\" \".\") \"+\" \".\")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "(define-fun f (name String) String (str.replace (str.replace (str.replace name \" \" \".\") \"-\" \".\") \"-\" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \\\"+\\\" \\\"\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"BRD\\\" \\\"\\\") \\\"DRS\\\" \\\"\\\") \\\"LDS\\\" \\\"\\\") \\\" \\\" \\\".\\\") \\\"+\\\" \\\".\\\") \\\"-\\\" \\\".\\\") \\\" \\\" \\\".\\\") \\\"-\\\" \\\".\\\")\")",
      "(define-fun f (name String) String (str.replace name \" \" \".\"))",
      "(define-fun f (name String) String (str.replace name \" \" \"\"))"
    ],
    "constants": [
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "",
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        "-",
        " ",
        "+",
        "."
      ],
      [
        "-",
        " ",
        "."
      ],
      [
        " ",
        "."
      ],
      [
        "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\") \" \" \".\") \"BRD\" \"\") \"DRS\" \"\") \"LDS\" \"\") \" \" \".\") \"+\" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\")"
      ],
      [
        " ",
        "."
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      "",
      ".",
      "(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace name \"+\" \"\") \"-\" \".\") \" \" \".\") \"BRD\" \"\") \"DRS\" \"\") \"LDS\" \"\") \" \" \".\") \"+\" \".\") \"-\" \".\") \" \" \".\") \"-\" \".\")",
      "-",
      " ",
      "+"
    ],
    "time_diff_ms": 1131.774
  },
  "exceljet4modified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.replace _arg_0 \"^(https?|ftp|sftp)://([^/]+)(/?.*)$\" \"$2$3\")",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"//\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"^(https?|ftp|sftp)://([^/]+)(/?.*)$\" \"$2$3\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"://\") 3) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\") 2) (str.len _arg_0)))"
    ],
    "constants": [
      [
        0,
        "//"
      ],
      [
        2,
        "//"
      ],
      [
        2,
        "//"
      ],
      [
        3,
        "://"
      ],
      [
        0,
        "//"
      ],
      [
        3,
        "://"
      ],
      [
        3,
        "://"
      ],
      [
        "^(https?|ftp|sftp)://([^/]+)(/?.*)$",
        "$2$3"
      ],
      [
        3,
        "://"
      ],
      [
        2,
        "//"
      ]
    ],
    "all_constants": [
      0,
      2,
      3,
      "://",
      "//",
      "^(https?|ftp|sftp)://([^/]+)(/?.*)$",
      "$2$3"
    ],
    "time_diff_ms": 2162.4919999999997
  },
  "33619752modified.sl": {
    "completions": [
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "\"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"Inc\\\"))\"",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (str.indexof _arg_0 \\\"Inc\\\"))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)))"
    ],
    "constants": [
      [
        0,
        " "
      ],
      [
        "(str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\"))"
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      " ",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"Inc\"))"
    ],
    "time_diff_ms": 2248.824
  },
  "phone-6-longmodified.sl": {
    "completions": [
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "\"(str.substr name 5 3)\"",
      "(define-fun f (name String) String\n    (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n  (str.substr name 5 3))",
      "(define-fun f (name String) String\n    (str.substr name 6 3))",
      "\"(lambda (name) (str.substr name 5 3))\"",
      "(define-fun f (name String) String\n  (str.substr name 5 3))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String \"(str.substr name 5 3)\")",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 5 3))",
      "(define-fun f (name String) String (str.substr name 6 3))",
      "(define-fun f (name String) String \"(lambda (name) (str.substr name 5 3))\")",
      "(define-fun f (name String) String (str.substr name 5 3))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        "(str.substr name 5 3)"
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        "(lambda (name) (str.substr name 5 3))"
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      "(lambda (name) (str.substr name 5 3))",
      3,
      5,
      6,
      "(str.substr name 5 3)"
    ],
    "time_diff_ms": 2348.232
  },
  "get-last-name-from-name-with-commamodified.sl": {
    "completions": [
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) \"\")",
      "(str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.len _arg_0) (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(str.replace _arg_0 \",\" \"\")(\",\"))",
      "(str.replace _arg_0 \",\" \"\")(\",\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 1))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.len _arg_0) (+ (str.len _arg_0) (str.indexof _arg_0 \",\") 2))) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \",\" \"\"))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        "",
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ",",
        ""
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        0,
        2,
        ","
      ],
      [
        "",
        ","
      ],
      [
        "",
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      ","
    ],
    "time_diff_ms": 1892.649
  },
  "initials-long-repeatmodified.sl": {
    "completions": [
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\")",
      "(define-fun f ((name String)) String (str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1)))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1))",
      "(str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1))"
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr (str.substr name (+ (str.indexof name \" \" 0) 1) 1) 0 1) \".\"))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (+ (str.indexof name \" \" 0) 1) 1)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 1) \".\" (str.substr name (- (str.indexof name \" \" 0) 1) 1)))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ],
    "time_diff_ms": 1603.8110000000001
  },
  "exceljet3modified.sl": {
    "completions": [
      "(str.substr _arg_0 6 (str.indexof _arg_0 \"/\" 0))",
      "(str.substr _arg_0 6 (- (str.indexof _arg_0 \"/\") 6)))",
      "(str.replace (str.replace (str.replace _arg_0 \"year= \" \"\") \"make= \" \"\") \"model= \" \"\")",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"/\\\" \\\"\\\") \\\">\\\" \\\"\\\") \\\"<\\\" \\\"\\\")\"",
      "(str.replace _arg_0 \"/\" \"\")",
      "(str.replace _arg_0 \"/\" \"\")",
      "(str.substr _arg_0 6 (str.indexof _arg_0 \"/\" 0))",
      "\"(str.replace (str.replace (str.replace _arg_0 \\\"/\\\" \\\"\\\") \\\" \\\" \\\"\\\") \\\"=\\\" \\\"\\\")\"",
      "(define-fun f ((year String) (make String) (model String) (fuel-economy String)) String\n  make)",
      "(str.++ (str.substr _arg_0 5 4) \" \" (str.substr _arg_0 10 (- (str.indexof _arg_0 \"/\" 0) 10)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 6 (str.indexof _arg_0 \"/\" 0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 6 (- (str.indexof _arg_0 \"/\") 6)))",
      "(define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"year= \" \"\") \"make= \" \"\") \"model= \" \"\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"/\\\" \\\"\\\") \\\">\\\" \\\"\\\") \\\"<\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"/\" \"\"))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 6 (str.indexof _arg_0 \"/\" 0)))",
      "(define-fun f (_arg_0 String) String \"(str.replace (str.replace (str.replace _arg_0 \\\"/\\\" \\\"\\\") \\\" \\\" \\\"\\\") \\\"=\\\" \\\"\\\")\")",
      "(define-fun f (_arg_0 String) String make)",
      "(define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 5 4) \" \" (str.substr _arg_0 10 (- (str.indexof _arg_0 \"/\" 0) 10))))"
    ],
    "constants": [
      [
        0,
        "/",
        6
      ],
      [
        "/",
        6
      ],
      [
        "",
        "make= ",
        "year= ",
        "model= "
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \"/\" \"\") \">\" \"\") \"<\" \"\")"
      ],
      [
        "",
        "/"
      ],
      [
        "",
        "/"
      ],
      [
        0,
        "/",
        6
      ],
      [
        "(str.replace (str.replace (str.replace _arg_0 \"/\" \"\") \" \" \"\") \"=\" \"\")"
      ],
      [],
      [
        0,
        "/",
        4,
        5,
        " ",
        10
      ]
    ],
    "all_constants": [
      0,
      "/",
      "",
      "(str.replace (str.replace (str.replace _arg_0 \"/\" \"\") \">\" \"\") \"<\" \"\")",
      4,
      5,
      6,
      "(str.replace (str.replace (str.replace _arg_0 \"/\" \"\") \" \" \"\") \"=\" \"\")",
      "year= ",
      10,
      " ",
      "make= ",
      "model= "
    ],
    "time_diff_ms": 2063.1710000000003
  },
  "phone-10_shortmodified.sl": {
    "completions": [
      "(define-fun f (name String) String (str.++ \" \" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 2) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String\n  (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "\"(str.replace (str.replace (str.replace name \" \" \"(\") \")\" \") \") \"-\" \" \" \")\""
    ],
    "solutions": [
      "(define-fun f (name String) String (str.++ \" \" (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 10 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ \"+\" (str.substr name 0 2) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 7 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 3) \" (\" (str.substr name 3 3) \") \" (str.substr name 6 3) \"-\" (str.substr name 9 3)))",
      "(define-fun f (name String) String (str.++ (str.substr name 0 4) \" (\" (str.substr name 5 3) \") \" (str.substr name 9 3) \"-\" (str.substr name 13 3)))",
      "(define-fun f (name String) String \"(str.replace (str.replace (str.replace name \")"
    ],
    "constants": [
      [
        0,
        3,
        7,
        "-",
        " ",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        10,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        "-",
        11,
        " (",
        ") "
      ],
      [
        0,
        2,
        3,
        7,
        "-",
        "+",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        7,
        "-",
        11,
        " (",
        ") "
      ],
      [
        0,
        3,
        7,
        " (",
        ") "
      ],
      [
        0,
        3,
        6,
        "-",
        9,
        " (",
        ") "
      ],
      [
        0,
        3,
        4,
        5,
        9,
        "-",
        13,
        " (",
        ") "
      ],
      [
        "(str.replace (str.replace (str.replace name "
      ]
    ],
    "all_constants": [
      0,
      ") ",
      2,
      3,
      4,
      5,
      6,
      7,
      "-",
      9,
      10,
      11,
      13,
      " (",
      " ",
      "+",
      "(str.replace (str.replace (str.replace name "
    ],
    "time_diff_ms": 2080.444
  },
  "get-first-name-from-name-with-commamodified.sl": {
    "completions": [
      "(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \" \") (str.indexof _arg_0 \",\") 1)) (ite (= _arg_1 2) (str.substr _arg_0 0 (str.indexof _arg_0 \",\") ) \"\"))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.at _arg_0 (str.indexof _arg_0 \",\" 0) (_arg_1)))",
      "(ite (= _arg_1 1) (str.at _arg_0 (+ (str.indexof _arg_0 \",\") 2)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\")))",
      "(define-fun f ((name String) (index Int)) String\n  (str.substr name\n              (ite (= index 1) 0\n                   (str.indexof name \",\" 0))\n              (ite (= index 1) (str.indexof name \",\" 0)\n                   (str.len name))))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.at (str.replace _arg_0 \",\" \"\") _arg_1 1))",
      "(ite (= _arg_1 1) (str.at _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 2) (str.len _arg_0))))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String   (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \",\")))",
      "(define-fun f ((_arg_0 String) (_arg_1 Int)) String (str.at (str.replace _arg_0 \",\" \"\") _arg_1 1))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 1) (- (str.indexof _arg_0 \" \") (str.indexof _arg_0 \",\") 1)) (ite (= _arg_1 2) (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \"\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at _arg_0 (str.indexof _arg_0 \",\" 0) (_arg_1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.at _arg_0 (+ (str.indexof _arg_0 \",\") 2)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\"))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr name (ite (= index 1) 0 (str.indexof name \",\" 0)) (ite (= index 1) (str.indexof name \",\" 0) (str.len name))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (- (str.indexof _arg_0 \",\") 1)))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \",\" \"\") _arg_1 1))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.at _arg_0 (str.indexof _arg_0 \",\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\") 2) (ite (= _arg_1 1) (- (str.indexof _arg_0 \",\") 2) (str.len _arg_0))))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.substr (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) 0 (str.indexof (str.substr _arg_0 0 (str.indexof _arg_0 \",\")) \",\")))",
      "(define-fun f (_arg_0 String _arg_1 Int) String (str.at (str.replace _arg_0 \",\" \"\") _arg_1 1))"
    ],
    "constants": [
      [
        0,
        1,
        2,
        "",
        " ",
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        1,
        2,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        "",
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        1,
        2,
        ","
      ],
      [
        0,
        ","
      ],
      [
        "",
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      ",",
      " "
    ],
    "time_diff_ms": 1688.84
  },
  "stackoverflow10modified.sl": {
    "completions": [
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof _arg_0 \" \" 0) 4)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" (+ (str.len \"February\") 1)) 1) (+ (str.len _arg_0) 1))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) (+ (str.indexof _arg_0 \" \" 0) 4)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 1) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" (+ (str.len \"February\") 1)) 1) (+ (str.len _arg_0) 1)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \" \" 0) 3) 4))"
    ],
    "constants": [
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        1,
        " ",
        4
      ],
      [
        1,
        " ",
        "February"
      ],
      [
        0,
        " ",
        3,
        4
      ],
      [
        0,
        " ",
        3,
        4
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      4,
      "February",
      " "
    ],
    "time_diff_ms": 1709.292
  },
  "25239569modified.sl": {
    "completions": [
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "\"(str.replace _arg_0 \\\"_BRD\\\" \\\"_Branding\\\")\"",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" _BRD \" \" _Branding \"))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" _BRD \" \" _Branding \") )",
      "(define-fun f ((s String)) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f ((x String)) String (str.replace x \" _BRD \" \" _Branding \"))",
      "(define-fun f ((s String)) String (str.replace s \" _BRD \" \" _Branding \"))",
      "(str.replace _arg_0 \"BRD\" \"Branding\")",
      "(define-fun f ((s String)) String\n    (str.replace s \"BRD\" \"Branding\"))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String \"(str.replace _arg_0 \\\"_BRD\\\" \\\"_Branding\\\")\")",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace x \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace s \" _BRD \" \" _Branding \"))",
      "(define-fun f (_arg_0 String) String (str.replace _arg_0 \"BRD\" \"Branding\"))",
      "(define-fun f (_arg_0 String) String (str.replace s \"BRD\" \"Branding\"))"
    ],
    "constants": [
      [
        "BRD",
        "Branding"
      ],
      [
        "(str.replace _arg_0 \"_BRD\" \"_Branding\")"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        " _Branding ",
        " _BRD "
      ],
      [
        "BRD",
        "Branding"
      ],
      [
        "BRD",
        "Branding"
      ]
    ],
    "all_constants": [
      " _Branding ",
      "(str.replace _arg_0 \"_BRD\" \"_Branding\")",
      " _BRD ",
      "Branding",
      "BRD"
    ],
    "time_diff_ms": 935.469
  },
  "36462127modified.sl": {
    "completions": [
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 14 (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 14 (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\") 1)) 1)) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\") 1) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (- (str.indexof _arg_0 \"/\" (+ 1 (str.indexof _arg_0 \"/\"))) 1) (str.len _arg_0)))"
    ],
    "constants": [
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        14
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ],
      [
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      14
    ],
    "time_diff_ms": 1204.2930000000001
  },
  "stackoverflow5modified.sl": {
    "completions": [
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "\"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1))\"",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\"))",
      "(str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 0 (- (str.indexof _arg_0 \\\"=\\\") 1))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\")))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1))"
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      "=",
      "(str.substr _arg_0 0 (- (str.indexof _arg_0 \"=\") 1))"
    ],
    "time_diff_ms": 1216.35
  },
  "extract-word-that-begins-with-specific-charactermodified.sl": {
    "completions": [
      "(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "\"(str.substr _arg_0 (str.indexof _arg_0 \\\"_\\\" 0) (str.indexof _arg_0 \\\" \\\" (str.indexof _arg_0 \\\"_\\\" 0)))\"",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0))))",
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))"
    ],
    "solutions": [
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))",
      "(define-fun f (_arg_0 String) String \"(str.substr _arg_0 (str.indexof _arg_0 \\\"_\\\" 0) (str.indexof _arg_0 \\\" \\\" (str.indexof _arg_0 \\\"_\\\" 0)))\")",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (+ (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (- (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)) (str.indexof _arg_0 \"_\" 0)))))",
      "(define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))"
      ],
      [
        0,
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof _arg_0 \" \" (str.indexof _arg_0 \"_\" 0)))",
      " ",
      "_"
    ],
    "time_diff_ms": 1467.281
  }
}