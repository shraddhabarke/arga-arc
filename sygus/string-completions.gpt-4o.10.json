{
  "get-first-name-from-name-with-comma.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) \n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) \n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)))\n    (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1))\n    (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```"
    ],
    "time_diff_ms": 28.817,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.trim (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0))) (str.trim (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \",\" 0) 1))) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      ","
    ]
  },
  "strip-html-from-text-or-numbers.sl": {
    "completions": [
      "```scheme\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" (str.replace (str.replace _arg_0 \"</b>\" \"\") \"<b>\" \"\"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<b>\" \"\")\n```"
    ],
    "time_diff_ms": 780.253,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" (str.replace (str.replace _arg_0 \"</b>\" \"\") \"<b>\" \"\"))))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"<b>\" \"\") \"</b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<b>\" \"\")))"
    ],
    "constants": [
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "</b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        "",
        "</b>"
      ],
      [
        "<b>",
        ""
      ],
      [
        "<b>",
        ""
      ]
    ],
    "all_constants": [
      "<b>",
      "",
      "</b>"
    ]
  },
  "count-total-words-in-a-cell.sl": {
    "completions": [
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\"))\n)\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len trimmed) 0)\n        0\n        (+ 1 (str.len (str.replace _arg_0 \" \" \"\"))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (let ((trimmed (str.replace _arg_0 \" \" \"\")))\n    (if (= (str.len _arg_0) 0)\n        0\n        (+ 1 (str.len (str.replace _arg_0 \" \" \"\"))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\")))\n```",
      "```lisp\n  (str.len (str.replace _arg_0 \" \" \"a\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.len (str.replace _arg_0 \" \" \"\")))\n```"
    ],
    "time_diff_ms": 224.662,
    "solutions": [
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace (str.replace _arg_0 \" \" \"\") \"\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len trimmed) 0) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\")))))))",
      "((define-fun f ((_arg_0 String)) Int (let ((trimmed (str.replace _arg_0 \" \" \"\"))) (if (= (str.len _arg_0) 0) 0 (+ 1 (str.len (str.replace _arg_0 \" \" \"\")))))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f (_arg_0 String) Int (str.len (str.replace _arg_0 \" \" \"a\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.len (str.replace _arg_0 \" \" \"\"))))"
    ],
    "constants": [
      [
        " ",
        "a"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        0,
        " ",
        1
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        " ",
        "a"
      ],
      [
        " ",
        "a"
      ],
      [
        "",
        " "
      ]
    ],
    "all_constants": [
      "",
      0,
      " ",
      1,
      "a"
    ]
  },
  "stackoverflow8.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100))\n```"
    ],
    "time_diff_ms": 190.393,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ 1 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"/\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" 0) 1))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) 100)))"
    ],
    "constants": [
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        "/"
      ],
      [
        0,
        100,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      "/",
      100
    ]
  },
  "phone-6-long.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```"
    ],
    "time_diff_ms": 632.384,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5
    ]
  },
  "phone-10.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))\n```",
      "```scheme\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))\n```",
      "```scheme\n(str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 979.654,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) (str.substr name 11 4))))",
      "((define-fun f (name String) String (str.++ (str.++ (str.substr name 0 4) \"(\") (str.++ (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      "(",
      8,
      10,
      11,
      "-",
      12,
      ")",
      ") "
    ]
  },
  "phone-6.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 4 3)\n```"
    ],
    "time_diff_ms": 392.059,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ]
  },
  "phone-7-short.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```scheme\n(str.substr name 5 3)\n```"
    ],
    "time_diff_ms": 683.083,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5
    ]
  },
  "phone-7.sl": {
    "completions": [
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 7 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 588.509,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 7 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        8,
        3
      ],
      [
        3,
        5
      ],
      [
        8,
        3
      ],
      [
        3,
        7
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ],
      [
        8,
        3
      ],
      [
        9,
        3
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      7,
      8,
      9
    ]
  },
  "univ_6_short.sl": {
    "completions": [
      "```lisp\n(ite (str.contains col2 \"New York\")\n     (str.replace col2 \"New York\" \"NY\")\n     col2)\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```"
    ],
    "time_diff_ms": 960.638,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"New York\") (str.replace col2 \"New York\" \"NY\") col2)))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))"
    ],
    "constants": [
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ]
    ],
    "all_constants": [
      "New York",
      "NY"
    ]
  },
  "stackoverflow9.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0))))\n    (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1))))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0))\n        (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1)))\n    (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((first-space (str.indexof _arg_0 \" \" 0)))\n    (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1))))\n      (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))\n```"
    ],
    "time_diff_ms": 727.442,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0)))) (ite (= second-space -1) \"\" (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) second-space 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0)) (second-space (str.indexof _arg_0 \" \" (str.indexof _arg_0 \" \" 0 1) 1))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((first-space (str.indexof _arg_0 \" \" 0))) (let ((second-space (str.indexof _arg_0 \" \" (+ first-space 1)))) (str.substr _arg_0 (+ second-space 1) (- (str.len _arg_0) (+ second-space 1)))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        "",
        " ",
        1,
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      -1
    ]
  },
  "phone-9-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace name \"+\" \"\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```"
    ],
    "time_diff_ms": 558.31,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"+\" \"\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        "+",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "-",
      ".",
      "+"
    ]
  },
  "get-last-word.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- (str.len words) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (str.substr (str.replace rev \"\\n\" \" \") (- (str.len rev) (str.indexof (str.reverse rev) \"\\n\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0\n              (+ (str.lastIndexOf _arg_0 \" \") 1)\n              (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (let ((lastSpace (str.indexof rev \"\\n\" 0)))\n      (if (= lastSpace -1)\n        _arg_0\n        (str.substr _arg_0 (+ lastSpace 1) (- (str.len _arg_0) (+ lastSpace 1)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\n\")))\n    (str.at (str.substr rev (str.indexof rev \"\\n\" (- (str.len rev) 1)) (str.len rev)) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"\\0\")))\n    (str.substr rev (str.indexof rev \"\\0\" 0) (str.len rev))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" (str.++ \" \"))))\n    (str.at (str.substr rev 0 (str.indexof rev \" \" 0)) (- (str.len rev) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.replace _arg_0 \" \" \"  \")))\n    (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((rev (str.++ (str.substr _arg_0 0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0))) \" \")))\n    (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0)))))\n```"
    ],
    "time_diff_ms": 676.506,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- (str.len words) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (str.substr (str.replace rev \"\\n\" \" \") (- (str.len rev) (str.indexof (str.reverse rev) \"\\n\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.lastIndexOf _arg_0 \" \") 1) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (let ((lastSpace (str.indexof rev \"\\n\" 0))) (if (= lastSpace -1) _arg_0 (str.substr _arg_0 (+ lastSpace 1) (- (str.len _arg_0) (+ lastSpace 1))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\n\"))) (str.at (str.substr rev (str.indexof rev \"\\n\" (- (str.len rev) 1)) (str.len rev)) 1))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"\\\\0\"))) (str.substr rev (str.indexof rev \"\\\\0\" 0) (str.len rev)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" (str.++ \" \")))) (str.at (str.substr rev 0 (str.indexof rev \" \" 0)) (- (str.len rev) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.replace _arg_0 \" \" \"  \"))) (str.substr rev (str.indexof rev \" \" 0) (- (str.len rev) (str.indexof rev \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((rev (str.++ (str.substr _arg_0 0 (- (str.len _arg_0) (str.indexof (str.reverse _arg_0) \" \" 0))) \" \"))) (str.reverse (str.substr rev 0 (str.indexof rev \" \" 0))))))"
    ],
    "constants": [
      [
        0,
        " ",
        "  "
      ],
      [
        1,
        " "
      ],
      [
        "\n",
        0,
        " "
      ],
      [
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "\n",
        -1
      ],
      [
        "\n",
        1,
        " "
      ],
      [
        "\\0",
        0,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        " ",
        "  "
      ],
      [
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "\\0",
      "  ",
      "\n",
      -1
    ]
  },
  "phone-10_short.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))\n```"
    ],
    "time_diff_ms": 266.688,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 4) \"-\" (str.substr name 11 3) \"-\" (str.substr name 15 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        15,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      7,
      "(",
      10,
      11,
      "-",
      15,
      ")",
      ") "
    ]
  },
  "17212077.sl": {
    "completions": [
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4)))\n```"
    ],
    "time_diff_ms": 189.114,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) (str.substr _arg_0 2 5))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 2) \"/\" (str.substr _arg_0 6 4))))"
    ],
    "constants": [
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        5
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ],
      [
        0,
        2,
        4,
        6,
        "/"
      ]
    ],
    "all_constants": [
      0,
      2,
      4,
      5,
      6,
      "/"
    ]
  },
  "phone-5.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (let ((plus-pos (str.indexof name \"+\" 0))\n        (space-pos (str.indexof name \" \" 0)))\n    (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1))))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 112.381,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (let ((plus-pos (str.indexof name \"+\" 0)) (space-pos (str.indexof name \" \" 0))) (str.substr name (+ plus-pos 1) (- space-pos plus-pos 1)))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "+"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "+"
    ]
  },
  "39060015.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.indexof _arg_0 \"/\" 1) 2)) \"/\") \"\")\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\"))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")\n```"
    ],
    "time_diff_ms": 696.621,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0)) 1)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 1))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.at _arg_0 1) (str.substr _arg_0 2 (- (str.indexof _arg_0 \"/\" 1) 2)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" 0 1)) (str.indexof _arg_0 \"/\" 0)))) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (- (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.indexof _arg_0 \"/\" 0) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.++ \"/\" (str.substr _arg_0 1 (- (str.indexof _arg_0 \"/\" 1) 1)) \"/\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) \"\")))"
    ],
    "constants": [
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        2,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        0,
        1,
        "/",
        ""
      ],
      [
        "",
        1,
        "/"
      ],
      [
        0,
        1,
        "/",
        ""
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "",
      "/"
    ]
  },
  "phone-7-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 6 3)\n```",
      "```lisp\n(str.substr name 8 3)\n```"
    ],
    "time_diff_ms": 548.883,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 6 3)))",
      "((define-fun f (name String) String (str.substr name 8 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        8,
        3
      ]
    ],
    "all_constants": [
      3,
      5,
      6,
      8,
      9
    ]
  },
  "38871714.sl": {
    "completions": [
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \">\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"<\" \"\")\n```"
    ],
    "time_diff_ms": 499.964,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<",
        ">"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        "<"
      ],
      [
        "",
        ">"
      ],
      [
        "",
        "<"
      ]
    ],
    "all_constants": [
      "",
      "<",
      ">"
    ]
  },
  "43120683.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") \n  (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") \n    (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") \n      (str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"1\") \"one apple\"\n  (ite (str.contains _arg_0 \"2\") \"two bananas\"\n  (ite (str.contains _arg_0 \"3\") \"three strawberries\"\n  (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\")))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(str.replace _arg_0 \"4\" \" oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\")\n(str.replace _arg_0 \"4\" \"oranges\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n(ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n(ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") \"one apple\"\n(ite (str.contains _arg_0 \"2\") \"two bananas\"\n(ite (str.contains _arg_0 \"3\") \"three strawberries\"\n\"four oranges\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\")\n(ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\")\n(ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\")\n(ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\")\n(str.replace _arg_0 \"4\" \"oranges\"))))\n```"
    ],
    "time_diff_ms": 304.79,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (str.replace _arg_0 \"4\" \" oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\") (str.replace _arg_0 \"4\" \"oranges\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" (ite (str.contains _arg_0 \"4\") \"four oranges\" \"\"))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") \"one apple\" (ite (str.contains _arg_0 \"2\") \"two bananas\" (ite (str.contains _arg_0 \"3\") \"three strawberries\" \"four oranges\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \" apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \" bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \" strawberries\") (ite (str.contains _arg_0 \"4\") (str.replace _arg_0 \"4\" \" oranges\") _arg_0))))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"1\") (str.replace _arg_0 \"1\" \"apple\") (ite (str.contains _arg_0 \"2\") (str.replace _arg_0 \"2\" \"bananas\") (ite (str.contains _arg_0 \"3\") (str.replace _arg_0 \"3\" \"strawberries\") (str.replace _arg_0 \"4\" \"oranges\"))))))"
    ],
    "constants": [
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "apple",
        "3",
        "4",
        "strawberries",
        "bananas",
        "1",
        "2",
        "oranges"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "",
        "3",
        "one apple",
        "two bananas",
        "4",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "one apple",
        "two bananas",
        "four oranges",
        "three strawberries",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "3",
        "4",
        " bananas",
        " apple",
        " strawberries",
        " oranges",
        "1",
        "2"
      ],
      [
        "apple",
        "3",
        "4",
        "strawberries",
        "bananas",
        "1",
        "2",
        "oranges"
      ]
    ],
    "all_constants": [
      "",
      "apple",
      "3",
      "4",
      "one apple",
      "two bananas",
      " bananas",
      "four oranges",
      "strawberries",
      " strawberries",
      " apple",
      "bananas",
      "three strawberries",
      " oranges",
      "1",
      "2",
      "oranges"
    ]
  },
  "stackoverflow11.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"PAX\" 0)))\n    (str.substr _arg_0 start (str.len _arg_0))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 224.154,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) (- (str.len _arg_0) (str.indexof _arg_0 \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"PAX\" 0))) (str.substr _arg_0 start (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"PAX\" 0) (str.len _arg_0))))"
    ],
    "constants": [
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        0,
        " "
      ],
      [
        0,
        " "
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ],
      [
        "PAX",
        0
      ]
    ],
    "all_constants": [
      "PAX",
      0,
      " "
    ]
  },
  "split-text-string-at-specific-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0))\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0))))\n```"
    ],
    "time_diff_ms": 709.098,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"_\" 0) 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"_\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"_\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"_\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"_\" 0) 1) (str.len _arg_0)))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ]
  },
  "get-domain-name-from-url.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1) _arg_0 (str.substr _arg_0 0 start))))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\"))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"/\") \n     (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") \n     _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (str.substr _arg_0 0 start)))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"/\" 8)))\n    (ite (= start -1)\n         _arg_0\n         (str.substr _arg_0 0 (+ start 1)))))\n```"
    ],
    "time_diff_ms": 368.673,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 (ite (= start -1) (str.len _arg_0) (+ start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 start)))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\")))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"/\") (str.++ (str.substr _arg_0 0 (str.indexof _arg_0 \"/\" 8)) \"/\") _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"/\" 8))) (str.substr _arg_0 0 start))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"/\" 8))) (ite (= start -1) _arg_0 (str.substr _arg_0 0 (+ start 1))))))"
    ],
    "constants": [
      [
        0,
        8,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ],
      [
        8,
        0,
        "/",
        -1
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        0,
        8,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        8,
        0,
        "/"
      ],
      [
        0,
        1,
        8,
        "/",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      8,
      "/",
      -1
    ]
  },
  "get-last-name-from-name-with-comma.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```",
      "```lisp\n(str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0))))\n```"
    ],
    "time_diff_ms": 608.987,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f (_arg_0 String) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (str.len _arg_0)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.++ (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \",\" 0) 1)) \",\" (str.substr _arg_0 0 (str.indexof _arg_0 \",\" 0)))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      ","
    ]
  },
  "initials.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```"
    ],
    "time_diff_ms": 584.973,
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "univ_5-long-repeat.sl": {
    "completions": [
      "```scheme\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\ncol2\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```(str.replace col2 \",\" \", USA\")```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```(str.++ col2 \", USA\")```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```"
    ],
    "time_diff_ms": 758.433,
    "solutions": [
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \",\" \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [],
      [
        ", USA"
      ],
      [],
      [
        ", USA"
      ],
      [
        ", USA",
        ","
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      ", USA",
      ","
    ]
  },
  "stackoverflow10.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n  (str.substr _arg_0 0 4)\n)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 10 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 0 4)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)\n```"
    ],
    "time_diff_ms": 794.632,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 10 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 4)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \" \" 0) 5)))"
    ],
    "constants": [
      [
        0,
        " ",
        5
      ],
      [
        0,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        10,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        4
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ],
      [
        0,
        " ",
        5
      ]
    ],
    "all_constants": [
      0,
      " ",
      4,
      5,
      10
    ]
  },
  "phone-9-short.sl": {
    "completions": [
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace name \"-\" \".\") \"+ \" \"\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```scheme\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```",
      "```lisp\n(str.replace name \"-\" \".\")\n```"
    ],
    "time_diff_ms": 554.317,
    "solutions": [
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \"+ \" \"\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace name \"-\" \".\")))"
    ],
    "constants": [
      [
        ".",
        "-"
      ],
      [
        ".",
        " ",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "",
        "+ ",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ],
      [
        ".",
        "-"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "+ ",
      "-",
      "."
    ]
  },
  "phone-6-short.sl": {
    "completions": [
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 5 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 4 3))\n```"
    ],
    "time_diff_ms": 709.309,
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 5 3)))",
      "((define-fun f ((name String)) String (str.substr name 4 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ]
    ],
    "all_constants": [
      3,
      4,
      5
    ]
  },
  "43606446.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2))))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))\n```"
    ],
    "time_diff_ms": 265.354,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \">\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \">\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \",\" 0) 1) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \",\" 0) 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) 3)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \">\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \">\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"CASH,\" 0) 5) (- (str.indexof _arg_0 \">\" 0) (+ (str.indexof _arg_0 \"CASH,\" 0) 5)))))"
    ],
    "constants": [
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        3,
        ","
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">"
      ],
      [
        0,
        1,
        ">",
        ","
      ],
      [
        0,
        1,
        ">",
        3
      ],
      [
        0,
        1,
        ">",
        2
      ],
      [
        0,
        ">",
        5,
        "CASH,"
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      3,
      5,
      ">",
      ",",
      "CASH,"
    ]
  },
  "initials-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```"
    ],
    "time_diff_ms": 73.782,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "phone-5-long-repeat.sl": {
    "completions": [
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 (str.indexof name \" \" 0)))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```s-expression\n(str.substr name 1 (str.indexof name \" \" 0))\n```"
    ],
    "time_diff_ms": 796.48,
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f ((name String)) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "phone-7-long.sl": {
    "completions": [
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```",
      "```lisp\n(str.substr name 9 3)\n```"
    ],
    "time_diff_ms": 560.421,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))",
      "((define-fun f (name String) String (str.substr name 9 3)))"
    ],
    "constants": [
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ],
      [
        9,
        3
      ]
    ],
    "all_constants": [
      9,
      3
    ]
  },
  "univ_6-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```"
    ],
    "time_diff_ms": 699.15,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))"
    ],
    "constants": [
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ]
    ],
    "all_constants": [
      ", USA",
      "New York",
      "NY"
    ]
  },
  "33619752.sl": {
    "completions": [
      "```scheme\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0))\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0))\n        _arg_0))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.replace _arg_0 \" Enterprises\" \"\")\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.replace _arg_0 \" Corporation\" \"\")\n        _arg_0))\n```",
      "```lisp\n(ite (or (str.contains _arg_0 \"Inc\") (str.contains _arg_0 \"Company\") (str.contains _arg_0 \"Corporation\") (str.contains _arg_0 \"Enterprises\"))\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n(ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n_arg_0))\n```",
      "```scheme\n(ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0))\n     (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0))\n     _arg_0)\n```",
      "```lisp\n(ite (str.contains _arg_0 \"Enterprises\")\n    (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0))\n    (ite (str.contains _arg_0 \"Corporation\")\n        (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0))\n        _arg_0))\n```",
      "```scheme\n(ite (or (str.contains _arg_0 \"Enterprises\") (str.contains _arg_0 \"Corporation\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)\n```",
      "```scheme\n(ite (str.suffixof \"Enterprises\" _arg_0)\n     (str.replace _arg_0 \" Enterprises\" \"\")\n     (ite (str.suffixof \"Corporation\" _arg_0)\n          (str.replace _arg_0 \" Corporation\" \"\")\n          _arg_0))\n```",
      "```lisp\n(ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (- (str.len _arg_0) (ite (str.suffixof \"Inc\" _arg_0) 3 (ite (str.suffixof \"Company\" _arg_0) 7 (ite (str.suffixof \"Corporation\" _arg_0) 11 10))))) _arg_0)\n```",
      "```lisp\n(ite (str.suffixof \"Corporation\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n(ite (str.suffixof \"Enterprises\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 11))\n_arg_0))\n```"
    ],
    "time_diff_ms": 540.872,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.contains _arg_0 \"Corporation\") (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.contains _arg_0 \"Inc\") (str.contains _arg_0 \"Company\") (str.contains _arg_0 \"Corporation\") (str.contains _arg_0 \"Enterprises\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"Enterprises\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Enterprises\" 0)) (ite (str.contains _arg_0 \"Corporation\") (str.substr _arg_0 0 (str.indexof _arg_0 \"Corporation\" 0)) _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.contains _arg_0 \"Enterprises\") (str.contains _arg_0 \"Corporation\")) (str.substr _arg_0 0 (str.indexof _arg_0 \" \" 0)) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Enterprises\" _arg_0) (str.replace _arg_0 \" Enterprises\" \"\") (ite (str.suffixof \"Corporation\" _arg_0) (str.replace _arg_0 \" Corporation\" \"\") _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (or (str.suffixof \"Inc\" _arg_0) (str.suffixof \"Company\" _arg_0) (str.suffixof \"Corporation\" _arg_0) (str.suffixof \"Enterprises\" _arg_0)) (str.substr _arg_0 0 (- (str.len _arg_0) (ite (str.suffixof \"Inc\" _arg_0) 3 (ite (str.suffixof \"Company\" _arg_0) 7 (ite (str.suffixof \"Corporation\" _arg_0) 11 10))))) _arg_0)))",
      "((define-fun f (_arg_0 String) String (ite (str.suffixof \"Corporation\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) (ite (str.suffixof \"Enterprises\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 11)) _arg_0))))"
    ],
    "constants": [
      [
        0,
        "Corporation",
        "Enterprises"
      ],
      [
        "",
        " Corporation",
        "Enterprises",
        " Enterprises",
        "Corporation"
      ],
      [
        0,
        " ",
        "Enterprises",
        "Inc",
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        " ",
        "Enterprises"
      ],
      [
        0,
        " ",
        "Enterprises",
        "Inc",
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        "Enterprises"
      ],
      [
        0,
        "Corporation",
        " ",
        "Enterprises"
      ],
      [
        "",
        " Corporation",
        "Enterprises",
        " Enterprises",
        "Corporation"
      ],
      [
        0,
        3,
        "Enterprises",
        "Inc",
        7,
        10,
        11,
        "Company",
        "Corporation"
      ],
      [
        0,
        "Corporation",
        11,
        "Enterprises"
      ]
    ],
    "all_constants": [
      0,
      "",
      " ",
      3,
      " Corporation",
      "Enterprises",
      "Inc",
      7,
      10,
      11,
      "Company",
      " Enterprises",
      "Corporation"
    ]
  },
  "extract-text-between-parentheses.sl": {
    "completions": [
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```",
      "```lisp\n  (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\")))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0))))))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) Int\n  (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \" \" \"\")))\n```",
      "```lisp\n  (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))\n```"
    ],
    "time_diff_ms": 400.228,
    "solutions": [
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.replace (str.replace _arg_0 \">\" \"\") \"<\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.replace _arg_0 \"Jones <\" \"\") \">\" \"\"))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (str.indexof _arg_0 \"<\" 0) 1)))))",
      "((define-fun f ((_arg_0 String)) Int (str.to.int (str.replace (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))) \" \" \"\"))))",
      "((define-fun f (_arg_0 String) Int (str.to.int (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"<\" 0)) (- (str.indexof _arg_0 \">\" 0) (+ 1 (str.indexof _arg_0 \"<\" 0)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        "",
        ">",
        "<"
      ],
      [
        "",
        ">",
        "Jones <"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        "<",
        ">"
      ],
      [
        0,
        1,
        " ",
        "",
        ">",
        "<"
      ],
      [
        0,
        1,
        "<",
        ">"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      ">",
      "<",
      "Jones <"
    ]
  },
  "remove-leading-and-trailing-spaces-from-text.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.trim _arg_0)\n```",
      "```\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace \n        (str.replace \n          (str.replace _arg_0 \"  \" \" \") \n        \"  \" \" \") \n      \"  \" \" \") \n    \"  \" \" \") \n  \"  \" \" \"))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n  (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.trim _arg_0))\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")\n```"
    ],
    "time_diff_ms": 459.934,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.trim _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f ((_arg_0 String)) String (str.trim _arg_0)))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \" \" \"\") \" \" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace (str.replace _arg_0 \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \") \"  \" \" \")))"
    ],
    "constants": [
      [],
      [],
      [],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [],
      [
        "",
        " "
      ],
      [
        " ",
        "  "
      ]
    ],
    "all_constants": [
      "",
      " ",
      "  "
    ]
  },
  "strip-non-numeric-characters.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \" \"\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\") \"i\" \"\") \"j\" \"\") \"k\" \"\") \"l\" \"\") \"m\" \"\") \"n\" \"\") \"o\" \"\") \"p\" \"\") \"q\" \"\") \"r\" \"\") \"s\" \"\") \"t\" \"\") \"u\" \"\") \"v\" \"\") \"w\" \"\") \"x\" \"\") \"y\" \"\") \"z\" \"\")",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 \"%\" \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")\n```"
    ],
    "time_diff_ms": 424.712,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") (str.replace \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ \" \"\" \"\"))))",
      null,
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"a\" \"\") \"b\" \"\") \"c\" \"\") \"d\" \"\") \"e\" \"\") \"f\" \"\") \"g\" \"\") \"h\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \" \" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"%\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.replace _arg_0 \"%\" \"\") \"\")))"
    ],
    "constants": [
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ "
      ],
      null,
      [
        "",
        "d",
        "h",
        "g",
        "e",
        "f",
        "a",
        "b",
        "c"
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        "",
        " "
      ],
      [
        "%",
        ""
      ],
      [
        "%",
        ""
      ],
      [
        "%",
        ""
      ]
    ],
    "all_constants": [
      "",
      "d",
      " ",
      "h",
      "g",
      "e",
      "f",
      "a",
      "b",
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ",
      "%",
      "c"
    ]
  },
  "get-middle-name-from-full-name.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \" \" 0))\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))\n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.substr _arg_0\n    (+ 1 (str.indexof _arg_0 \" \" 0))\n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))\n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((space1 (str.indexof _arg_0 \" \" 0))\n        (space2 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (ite (= space1 -1) \"\"\n         (ite (= space2 -1) \"\"\n              (str.substr _arg_0 (+ 1 space1) (- space2 space1 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (ite (= start -1) \"\"\n      (ite (= end -1) \"\"\n        (str.substr _arg_0 (+ start 1) (- end start 1))))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (str.at parts 1)) 1) \"\" (str.at parts 1))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len (str.at parts 1)) 0)\n        \"\"\n        (str.at parts 1))))\n```",
      "```lisp\n  (str.substr _arg_0 \n    (+ 1 (str.indexof _arg_0 \" \" 0)) \n    (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) \n       (+ 1 (str.indexof _arg_0 \" \" 0))))\n```",
      "```lisp\n  (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((parts (str.split _arg_0 \" \")))\n    (if (<= (str.len _arg_0) 2) \"\"\n      (str.at parts 1))))\n```"
    ],
    "time_diff_ms": 0.901,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((space1 (str.indexof _arg_0 \" \" 0)) (space2 (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (ite (= space1 -1) \"\" (ite (= space2 -1) \"\" (str.substr _arg_0 (+ 1 space1) (- space2 space1 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (ite (= start -1) \"\" (ite (= end -1) \"\" (str.substr _arg_0 (+ start 1) (- end start 1)))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (str.at parts 1)) 1) \"\" (str.at parts 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len (str.at parts 1)) 0) \"\" (str.at parts 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0))))))",
      "((define-fun f (_arg_0 String) String (str.trim (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \" \" 0)) (- (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))) (+ 1 (str.indexof _arg_0 \" \" 0)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((parts (str.split _arg_0 \" \"))) (if (<= (str.len _arg_0) 2) \"\" (str.at parts 1)))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " ",
        "",
        -1
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        ""
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        1,
        " ",
        2
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      2,
      -1
    ]
  },
  "initials_small.sl": {
    "completions": [
      "```s-expression\n(ite (str.contains name \" \")\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n  \"\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```s-expression\n(ite true (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")\n```",
      "```s-expression\n(ite (str.contains name \" \")\n     (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n     name)\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```"
    ],
    "time_diff_ms": 854.554,
    "solutions": [
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (ite true (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") \"\")))",
      "((define-fun f (name String) String (ite (str.contains name \" \") (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\") name)))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0 1)) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      "."
    ]
  },
  "stackoverflow5.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```",
      "```s\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0)))\n```"
    ],
    "time_diff_ms": 91.962,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"=\" 0))))"
    ],
    "constants": [
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ],
      [
        0,
        "="
      ]
    ],
    "all_constants": [
      0,
      "="
    ]
  },
  "extract-word-that-begins-with-specific-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (ite (= start -1)\n         \"\"\n         (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1)\n                (str.substr _arg_0 start (str.len _arg_0))\n                (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0)))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start end))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"_\" 0)))\n    (if (= idx -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" idx)))\n          (if (= end -1)\n              (str.substr _arg_0 idx (str.len _arg_0))\n              (str.substr _arg_0 idx (- end idx)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"_\" 0)))\n    (ite (= pos -1) \"\" \n         (let ((end (str.indexof (str.substr _arg_0 pos (str.len _arg_0)) \" \" 0)))\n           (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0))\n                (str.substr _arg_0 pos end))))))\n```"
    ],
    "time_diff_ms": 553.657,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (ite (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (= (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0) -1) (str.len _arg_0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.++ (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") \" \" 0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (ite (str.contains (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \") (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.len _arg_0)) \" \" 0) (str.len _arg_0)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start end)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"_\" 0))) (if (= idx -1) \"\" (let ((end (str.indexof _arg_0 \" \" idx))) (if (= end -1) (str.substr _arg_0 idx (str.len _arg_0)) (str.substr _arg_0 idx (- end idx))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"_\" 0))) (ite (= pos -1) \"\" (let ((end (str.indexof (str.substr _arg_0 pos (str.len _arg_0)) \" \" 0))) (ite (= end -1) (str.substr _arg_0 pos (str.len _arg_0)) (str.substr _arg_0 pos end)))))))"
    ],
    "constants": [
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        1,
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      " ",
      1,
      "_",
      -1
    ]
  },
  "35744094.sl": {
    "completions": [
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\"\n(ite (str.contains _arg_0 \"windows\") \"windows\"\n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n(ite (str.contains _arg_0 \"windows\") \"windows\" \n(ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```lisp\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```",
      "```scheme\n(ite (str.contains _arg_0 \"mac\") \"mac\" \n  (ite (str.contains _arg_0 \"windows\") \"windows\" \n    (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))\n```"
    ],
    "time_diff_ms": 286.14,
    "solutions": [
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" \"microsoft\"))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"mac\") \"mac\" (ite (str.contains _arg_0 \"windows\") \"windows\" (ite (str.contains _arg_0 \"microsoft\") \"microsoft\" \"\")))))"
    ],
    "constants": [
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ],
      [
        "microsoft",
        "",
        "mac",
        "windows"
      ]
    ],
    "all_constants": [
      "microsoft",
      "",
      "mac",
      "windows"
    ]
  },
  "get-last-line-in-cell.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (ite (str.contains _arg_0 \"/n\")\n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" 0) 1)))\n    _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= idx -1)\n      _arg_0\n      (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-nl (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-nl -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0))))\n    (ite (str.contains _arg_0 \"/n\") last-line _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((pos (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= pos -1)\n         _arg_0\n         (str.substr _arg_0 (+ pos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-index (str.indexof _arg_0 \"/n\" 0)))\n    (if (= last-index -1)\n        _arg_0\n        (str.substr _arg_0 (+ last-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line-index (str.indexof _arg_0 \"/n\" 0)))\n    (ite (= last-line-index -1)\n         _arg_0\n         (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0)))))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (str.len _arg_0)) (str.len _arg_0))))\n    (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line)))))\n```"
    ],
    "time_diff_ms": 735.953,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (ite (str.contains _arg_0 \"/n\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"/n\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"/n\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"/n\" 0))) (ite (= idx -1) _arg_0 (str.substr _arg_0 (+ idx 1) (- (str.len _arg_0) (+ idx 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-nl (str.indexof _arg_0 \"/n\" 0))) (ite (= last-nl -1) _arg_0 (str.substr _arg_0 (+ last-nl 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1))) (str.len _arg_0)))) (ite (str.contains _arg_0 \"/n\") last-line _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((pos (str.indexof _arg_0 \"/n\" 0))) (ite (= pos -1) _arg_0 (str.substr _arg_0 (+ pos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-index (str.indexof _arg_0 \"/n\" 0))) (if (= last-index -1) _arg_0 (str.substr _arg_0 (+ last-index 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line-index (str.indexof _arg_0 \"/n\" 0))) (ite (= last-line-index -1) _arg_0 (str.substr _arg_0 (+ last-line-index 1) (str.len _arg_0))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" 0) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (- (str.len _arg_0) 1)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-line (str.substr _arg_0 (str.indexof _arg_0 \"/n\" (str.len _arg_0)) (str.len _arg_0)))) (ite (= last-line \"\") _arg_0 (str.substr last-line 1 (str.len last-line))))))"
    ],
    "constants": [
      [
        0,
        1,
        "/n"
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        1,
        "/n"
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        1,
        "/n",
        -1
      ],
      [
        0,
        "/n"
      ],
      [
        1,
        "/n"
      ],
      [
        "",
        1,
        "/n"
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      "/n",
      -1
    ]
  },
  "31753108.sl": {
    "completions": [
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n  (str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14)))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```scheme\n(str.substr _arg_0 14 9)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n  (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0)))))\n    (str.substr _arg_0 (+ 1 start) (- end start 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n  (str.at (str.replace _arg_0 \" \" \"\") 0)\n```"
    ],
    "time_diff_ms": 735.528,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 9)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 14 (- (str.indexof _arg_0 \" \" 14) 14))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ 1 (str.indexof _arg_0 \" \" 0))))) (str.substr _arg_0 (+ 1 start) (- end start 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (str.at (str.replace _arg_0 \" \" \"\") 0)))"
    ],
    "constants": [
      [
        " ",
        14
      ],
      [
        9,
        14
      ],
      [
        " ",
        14
      ],
      [
        " ",
        14
      ],
      [
        9,
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        " ",
        14
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        "",
        0,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "",
      9,
      14
    ]
  },
  "exceljet4.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\")))\n    (let ((url (str.replace (str.replace url \"ftp://\" \"\") \"sftp://\" \"\")))\n      (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2)))))\n    (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0))\n        (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2))))\n    (str.substr _arg_0\n      (+ start 2)\n      (ite (= end -1) (str.len _arg_0) (- end (+ start 2))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))\n        (noSlash (str.replace url \"/\" \"\")))\n    noSlash))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (if (= end -1)\n          (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n          (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"//\" 0)))\n    (let ((end (str.indexof _arg_0 \"/\" (+ start 2))))\n      (ite (= end -1)\n        (str.substr _arg_0 (+ start 2) (str.len _arg_0))\n        (str.substr _arg_0 (+ start 2) (- end (+ start 2)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")))\n    (ite (str.suffixof \"/\" no_protocol)\n         (str.substr no_protocol 0 (- (str.len no_protocol) 1))\n         no_protocol)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((url (str.replace _arg_0 \"/\" \"=\")))\n    (let ((start (str.indexof url \"=\" 0)))\n      (let ((end (str.indexof url \"=\" (+ start 2))))\n        (str.substr url (+ start 2) (- end (+ start 2)))))))\n```"
    ],
    "time_diff_ms": 973.42,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace (str.replace _arg_0 \"https://\" \"\") \"http://\" \"\"))) (let ((url (str.replace (str.replace url \"ftp://\" \"\") \"sftp://\" \"\"))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url)))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.substr _arg_0 (+ (str.indexof _arg_0 \"//\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"//\" 0) 2))))) (ite (str.suffixof \"/\" url) (str.substr url 0 (- (str.len url) 1)) url))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"=\" 0) 3)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0)) (end (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"//\" 0) 2)))) (str.substr _arg_0 (+ start 2) (ite (= end -1) (str.len _arg_0) (- end (+ start 2)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\")) (noSlash (str.replace url \"/\" \"\"))) noSlash)))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (if (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"//\" 0))) (let ((end (str.indexof _arg_0 \"/\" (+ start 2)))) (ite (= end -1) (str.substr _arg_0 (+ start 2) (str.len _arg_0)) (str.substr _arg_0 (+ start 2) (- end (+ start 2))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((no_protocol (str.replace _arg_0 (str.substr _arg_0 0 (+ (str.indexof _arg_0 \"//\" 0) 2)) \"\"))) (ite (str.suffixof \"/\" no_protocol) (str.substr no_protocol 0 (- (str.len no_protocol) 1)) no_protocol))))",
      "((define-fun f ((_arg_0 String)) String (let ((url (str.replace _arg_0 \"/\" \"=\"))) (let ((start (str.indexof url \"=\" 0))) (let ((end (str.indexof url \"=\" (+ start 2)))) (str.substr url (+ start 2) (- end (+ start 2))))))))"
    ],
    "constants": [
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        "",
        0,
        1,
        "http://",
        "ftp://",
        "sftp://",
        "/",
        "https://"
      ],
      [
        0,
        1,
        2,
        "//",
        "/"
      ],
      [
        0,
        "",
        1,
        3,
        "/",
        "="
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        "",
        2,
        "//",
        "/"
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        2,
        "//",
        "/",
        -1
      ],
      [
        0,
        "",
        2,
        1,
        "//",
        "/"
      ],
      [
        0,
        "=",
        2,
        "/"
      ]
    ],
    "all_constants": [
      0,
      "",
      2,
      1,
      3,
      "http://",
      "//",
      "ftp://",
      "sftp://",
      "/",
      "https://",
      "=",
      -1
    ]
  },
  "44789427.sl": {
    "completions": [
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0))))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n  (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f (_arg_0 String _arg_1 Int) String\n  (ite (= _arg_1 1)\n       (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0))\n       (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) \n    (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) \n    (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))\n```",
      "```lisp\n(ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))\n```"
    ],
    "time_diff_ms": 89.625,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (str.indexof _arg_0 \"-\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (str.len _arg_0)))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ (str.indexof _arg_0 \"-\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"-\" 0) 1))))))",
      "((define-fun f (_arg_0 String _arg_1 Int) String (ite (= _arg_1 1) (str.substr _arg_0 0 (str.indexof _arg_0 \"-\" 0)) (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"-\" 0)) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \"-\" 0)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ],
      [
        0,
        1,
        "-"
      ]
    ],
    "all_constants": [
      0,
      1,
      "-"
    ]
  },
  "stackoverflow4.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```scheme\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")\n```",
      "```(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")\n```"
    ],
    "time_diff_ms": 863.622,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \",\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"<\" \" \") \">\" \"\") \",\" \" \")))"
    ],
    "constants": [
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        ">",
        " ",
        "<",
        ""
      ],
      [
        "",
        " ",
        ">",
        ",",
        "<"
      ]
    ],
    "all_constants": [
      "",
      " ",
      ">",
      ",",
      "<"
    ]
  },
  "stackoverflow6.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2))))\n```",
      "```s\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((msg_start (+ (str.indexof _arg_0 \"= \" 0) 2)))\n    (str.substr _arg_0 msg_start (- (str.len _arg_0) msg_start))))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"=\" (+ (str.indexof _arg_0 \"=\" 0) 1)) (+ (str.indexof _arg_0 \"=\" 0) 2)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 478.915,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \"=\" 0) 2)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \"=\" 0)) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((msg_start (+ (str.indexof _arg_0 \"= \" 0) 2))) (str.substr _arg_0 msg_start (- (str.len _arg_0) msg_start)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (- (str.indexof _arg_0 \"=\" (+ (str.indexof _arg_0 \"=\" 0) 1)) (+ (str.indexof _arg_0 \"=\" 0) 2)))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        " ",
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        2,
        "= "
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        2,
        "= "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      " ",
      "= ",
      "="
    ]
  },
  "univ_4-long.sl": {
    "completions": [
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```",
      "```lisp\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))\n```"
    ],
    "time_diff_ms": 848.401,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.suffixof \", USA\" col2) col2 (str.++ col2 \", USA\"))))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      "USA",
      ", USA"
    ]
  },
  "phone-5-long.sl": {
    "completions": [
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```lisp\n(str.substr name 1 3)\n```",
      "```scheme\n(str.substr name 1 3)\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.substr name 1 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.substr name 1 (- (str.indexof name \" \" 0) 1)))\n```"
    ],
    "time_diff_ms": 874.214,
    "solutions": [
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f (name String) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 3)))",
      "((define-fun f ((name String)) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))"
    ],
    "constants": [
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        3
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      3
    ]
  },
  "phone-5-short.sl": {
    "completions": [
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```(str.substr name 1 (- (str.indexof name \" \" 0) 1))```",
      "```(str.substr name 1 (str.indexof name \" \" 0))```",
      "```lisp\n(str.substr name 1 (str.indexof name \" \" 0))\n```",
      "```lisp\n(str.substr name 1 (- (str.indexof name \" \" 0) 1))\n```"
    ],
    "time_diff_ms": 627.139,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (str.indexof name \" \" 0))))",
      "((define-fun f (name String) String (str.substr name 1 (- (str.indexof name \" \" 0) 1))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " "
    ]
  },
  "11604909.sl": {
    "completions": [
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 (+ start 1) (- end start 1))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1))))\n    (str.substr _arg_0 start (- end start))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((verStart (str.indexof _arg_0 \" \" (+ start 1))))\n      (let ((verEnd (str.indexof _arg_0 \" \" (+ verStart 1))))\n        (str.substr _arg_0 (+ verStart 1) (- verEnd verStart 1))))))\n```",
      "```s-expression\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \" \" 0))\n        (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \".\" (+ start 1)))))\n    (str.substr _arg_0 (+ start 1) (- end start))))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \"2\" 0)))\n    (str.substr _arg_0 start (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 start (- end start)))))\n```",
      "```lisp\n(define-fun f (_arg_0 String) String\n  (let ((start (str.indexof _arg_0 \" \" 0)))\n    (let ((end (str.indexof _arg_0 \" \" (+ start 1))))\n      (str.substr _arg_0 (+ start 1) (- end start 1)))))\n```"
    ],
    "time_diff_ms": 328.748,
    "solutions": [
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 (+ start 1) (- end start 1)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \" \" (+ (str.indexof _arg_0 \" \" 0) 1)))) (str.substr _arg_0 start (- end start)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((verStart (str.indexof _arg_0 \" \" (+ start 1)))) (let ((verEnd (str.indexof _arg_0 \" \" (+ verStart 1)))) (str.substr _arg_0 (+ verStart 1) (- verEnd verStart 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \" \" 0)) (end (str.indexof _arg_0 \".\" (str.indexof _arg_0 \".\" (+ start 1))))) (str.substr _arg_0 (+ start 1) (- end start)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \"2\" 0))) (str.substr _arg_0 start (str.indexof (str.substr _arg_0 start (str.len _arg_0)) \" \" 0)))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 start (- end start))))))",
      "((define-fun f (_arg_0 String) String (let ((start (str.indexof _arg_0 \" \" 0))) (let ((end (str.indexof _arg_0 \" \" (+ start 1)))) (str.substr _arg_0 (+ start 1) (- end start 1))))))"
    ],
    "constants": [
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        " ",
        "2"
      ],
      [
        0,
        1,
        " "
      ],
      [
        0,
        1,
        " "
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      ".",
      "2"
    ]
  },
  "phone-9-long.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))\n)\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(str.++ (str.substr name 1 (- (str.indexof name \" \" 0) 1)) \".\" (str.replace (str.replace (str.substr name (+ (str.indexof name \" \" 0) 1) (- (str.len name) (+ (str.indexof name \" \" 0) 1))) \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace\n    (str.replace\n      (str.replace\n        (str.substr name 1 (- (str.len name) 1))\n        \" \" \".\")\n      \"-\" \".\")\n    \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```"
    ],
    "time_diff_ms": 697.39,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\"))))",
      null,
      null,
      null,
      null,
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \" \" \".\") \"-\" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      null,
      [
        ".",
        1,
        " ",
        "-"
      ],
      null,
      null,
      null,
      null,
      [
        ".",
        1,
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      "-",
      ".",
      "+"
    ]
  },
  "univ_4_short.sl": {
    "completions": [
      "```scheme\n(str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \", USA\" col2) \"\" \", USA\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \", New York, New York\" \", New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \"USA\" col2) \"\" \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.contains col2 \"USA\") \"\" \", USA\")))\n```",
      "```lisp\n(str.replace col2 \", New York\" \", NY, USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\")))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.replace col2 \"New York, New York\" \"New York, NY\"))\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```"
    ],
    "time_diff_ms": 242.245,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \", USA\" col2) \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", New York, New York\" \", New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.suffixof \"USA\" col2) \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York, New York\" \"New York, NY\") (ite (str.contains col2 \"USA\") \"\" \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \", New York\" \", NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (ite (str.contains col2 \"USA\") col2 (str.++ col2 \", USA\"))))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York, New York\" \"New York, NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))"
    ],
    "constants": [
      [
        "New York, New York",
        "",
        ", USA",
        "New York, NY"
      ],
      [
        ", New York, New York",
        ", New York, NY"
      ],
      [
        "",
        "New York, New York",
        "USA",
        "New York, NY",
        ", USA"
      ],
      [
        "",
        "New York, New York",
        "USA",
        "New York, NY",
        ", USA"
      ],
      [
        ", New York",
        ", NY, USA"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        "USA",
        ", USA"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        "New York, New York",
        "New York, NY"
      ],
      [
        0,
        ", USA",
        ","
      ]
    ],
    "all_constants": [
      "",
      ", New York, New York",
      0,
      "New York, New York",
      "USA",
      "New York, NY",
      ", New York, NY",
      ",",
      ", New York",
      ", USA",
      ", NY, USA"
    ]
  },
  "phone-10-long.sl": {
    "completions": [
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```lisp\n(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \")\" (str.substr name 8 (- (str.len name) 8)))\n```",
      "```scheme\n(str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4)\n          \"(\"\n          (str.substr name 4 3)\n          \") \"\n          (str.substr name 7 3)\n          \"-\"\n          (str.substr name 10 3)))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```scheme\n(str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) (- (str.len name) (+ (str.indexof name \" \" 0) 5))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name))))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9)))\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7))))\n```",
      "```lisp\n(define-fun f ((name String)) String\n  (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9)))\n```"
    ],
    "time_diff_ms": 599.952,
    "solutions": [
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \")\" (str.substr name 8 (- (str.len name) 8)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 5) \"(\" (str.substr name 5 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 11 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 (str.indexof name \" \" 0)) \" (\" (str.substr name (+ (str.indexof name \" \" 0) 1) 3) \") \" (str.substr name (+ (str.indexof name \" \" 0) 5) (- (str.len name) (+ (str.indexof name \" \" 0) 5))))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (str.len name)))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 (- (str.len name) 7)))))",
      "((define-fun f ((name String)) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \")\" (str.substr name 7 9))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        5,
        "(",
        8,
        ")"
      ],
      [
        0,
        3,
        5,
        "(",
        8,
        11,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        1,
        " ",
        3,
        5,
        ") ",
        " ("
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        9,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        ")"
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        9,
        ")"
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      3,
      4,
      5,
      7,
      "(",
      8,
      10,
      11,
      "-",
      9,
      ")",
      ") ",
      " ("
    ]
  },
  "phone-9.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace name \" \" \".\") \"-\" \".\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace name \" \" \"\") \"-\" \".\"))\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace \n    (str.replace \n      (str.substr name 1 (- (str.len name) 1)) \n      \"-\" \".\") \n    \" \" \"\"))\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace name \"-\" \".\") \" \" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")\n```",
      "```scheme\n(define-fun f ((name String)) String\n  (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\"))\n```"
    ],
    "time_diff_ms": 165.638,
    "solutions": [
      "((define-fun f (name String) String (str.replace (str.replace name \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace name \" \" \"\") \"-\" \".\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.substr name 1 (- (str.len name) 1)) \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace name \"-\" \".\") \" \" \"\")))",
      "((define-fun f (name String) String (str.replace (str.replace (str.replace name \"-\" \".\") \"+ \" \"\") \" \" \"\")))",
      "((define-fun f ((name String)) String (str.replace (str.replace (str.replace name \"+\" \"\") \" \" \".\") \"-\" \".\")))"
    ],
    "constants": [
      [
        ".",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        " ",
        "-",
        "."
      ],
      [
        "",
        1,
        " ",
        "-",
        "."
      ],
      [
        ".",
        "",
        " ",
        "-"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ],
      [
        "",
        "+ ",
        " ",
        "-",
        "."
      ],
      [
        ".",
        "",
        " ",
        "-"
      ],
      [
        "",
        "+ ",
        " ",
        "-",
        "."
      ],
      [
        "",
        " ",
        "-",
        ".",
        "+"
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      "+ ",
      "-",
      ".",
      "+"
    ]
  },
  "clean-and-reformat-telephone-numbers.sl": {
    "completions": [
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```s-expression\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")\n```",
      "```lisp\n(str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")\n```"
    ],
    "time_diff_ms": 747.848,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \" \" \"\") \"<\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \"(\" \"\") \")\" \"\") \".\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \".\" \"\") \"<\" \"\") \">\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace (str.replace _arg_0 \"-\" \"\") \" \" \"\") \".\" \"\") \"<\" \"\")))"
    ],
    "constants": [
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ],
      [
        "",
        "(",
        "-",
        ".",
        ")"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        ">",
        "-",
        ".",
        "<"
      ],
      [
        "",
        " ",
        "-",
        ".",
        "<"
      ]
    ],
    "all_constants": [
      "",
      " ",
      "(",
      ">",
      "-",
      ".",
      ")",
      "<"
    ]
  },
  "stackoverflow7.sl": {
    "completions": [
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 String)) String\n  (str.replace _arg_0 _arg_1 \"\"))\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```scheme\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```",
      "```lisp\n(str.replace _arg_0 _arg_1 \"\")\n```"
    ],
    "time_diff_ms": 914.569,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f ((_arg_0 String) (_arg_1 String)) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.replace _arg_0 _arg_1 \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      ""
    ]
  },
  "univ_4-long-repeat.sl": {
    "completions": [
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```"
    ],
    "time_diff_ms": 20.01,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      ", USA"
    ]
  },
  "strip-numeric-characters-from-cell.sl": {
    "completions": [
      "```lisp\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\"))\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace _arg_0 (str.at \"0123456789\" 0) \"\")\n```",
      "```lisp\n(str.replace_re _arg_0 \"[0-9]\" \"\")\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```scheme\n  (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n)\n```",
      "```lisp\n(str.replace _arg_0 \"0\" \"\")\n(str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\")\n(str.replace (str.replace _arg_0 \"3\" \"\") \"4\" \"\")\n(str.replace (str.replace _arg_0 \"5\" \"\") \"6\" \"\")\n(str.replace (str.replace _arg_0 \"7\" \"\") \"8\" \"\")\n(str.replace (str.replace _arg_0 \"9\" \"\") \"\")\n```",
      "```lisp\n(str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")\n```"
    ],
    "time_diff_ms": 619.246,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 (str.at \"0123456789\" (str.indexof \"0123456789\" _arg_0 0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (str.at \"0123456789\" 0) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace_re _arg_0 \"[0-9]\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \"0\" \"\") (str.replace (str.replace _arg_0 \"1\" \"\") \"2\" \"\") (str.replace (str.replace _arg_0 \"3\" \"\") \"4\" \"\") (str.replace (str.replace _arg_0 \"5\" \"\") \"6\" \"\") (str.replace (str.replace _arg_0 \"7\" \"\") \"8\" \"\") (str.replace (str.replace _arg_0 \"9\" \"\") \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 (int.to.str (str.to.int _arg_0)) \"\")))"
    ],
    "constants": [
      [
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        "0123456789",
        0,
        ""
      ],
      [
        "",
        "[0-9]"
      ],
      [
        ""
      ],
      [
        ""
      ],
      [
        "",
        "3",
        "0",
        "4",
        "7",
        "5",
        "6",
        "9",
        "1",
        "8",
        "2"
      ],
      [
        ""
      ]
    ],
    "all_constants": [
      "",
      0,
      "3",
      "0123456789",
      "0",
      "4",
      "7",
      "[0-9]",
      "5",
      "6",
      "9",
      "1",
      "8",
      "2"
    ]
  },
  "36462127.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 11 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 6)\n```",
      "```lisp\n  (str.substr _arg_0 12 (str.len _arg_0))\n)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```",
      "```lisp\n  (str.substr _arg_0 12 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))\n```",
      "```lisp\n  (str.substr _arg_0 13 6)\n```",
      "```lisp\n  (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))\n```"
    ],
    "time_diff_ms": 781.605,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 11 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1))) 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1)) (- (str.len _arg_0) (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 13 6)))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0) (+ (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 0) 1)) 1))))"
    ],
    "constants": [
      [
        11,
        6
      ],
      [
        0,
        1,
        "/",
        6
      ],
      [
        12
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        12,
        6
      ],
      [
        0,
        1,
        "/"
      ],
      [
        0,
        1,
        "/"
      ],
      [
        13,
        6
      ],
      [
        0,
        1,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      6,
      11,
      12,
      13,
      "/"
    ]
  },
  "exceljet3.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```s-expression\n(ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```lisp\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0)))\n```",
      "```synth\n(str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 377.501,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (ite (str.contains _arg_0 \"=\") (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 1) (- (str.len _arg_0) (+ (str.indexof _arg_0 \"=\" 0) 1))) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"=\" 0) 2) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ (str.indexof _arg_0 \"= \" 0) 2) (str.len _arg_0))))"
    ],
    "constants": [
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        1,
        "="
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        "=",
        2
      ],
      [
        0,
        2,
        "= "
      ]
    ],
    "all_constants": [
      0,
      1,
      2,
      "= ",
      "="
    ]
  },
  "stackoverflow3.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((idx (str.indexof _arg_0 \"9\" 0)))\n    (if (= idx -1) \"\"\n      (str.substr _arg_0 (+ idx 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1) \"\"\n      (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))\n    )\n  )\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitPos -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0)))\n    (if (= lastDigitIndex -1)\n        \"\"\n        (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1))))))\n```"
    ],
    "time_diff_ms": 775.594,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((idx (str.indexof _arg_0 \"9\" 0))) (if (= idx -1) \"\" (str.substr _arg_0 (+ idx 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (str.len _arg_0))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitPos (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitPos -1) \"\" (str.substr _arg_0 (+ lastDigitPos 1) (- (str.len _arg_0) (+ lastDigitPos 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((lastDigitIndex (str.indexof _arg_0 \"9\" 0))) (if (= lastDigitIndex -1) \"\" (str.substr _arg_0 (+ lastDigitIndex 1) (- (str.len _arg_0) (+ lastDigitIndex 1)))))))"
    ],
    "constants": [
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ],
      [
        0,
        "",
        1,
        "9",
        -1
      ]
    ],
    "all_constants": [
      0,
      "",
      1,
      "9",
      -1
    ]
  },
  "univ_5-long.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))\n```",
      "```s-expression\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```"
    ],
    "time_diff_ms": 507.129,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.len col2) (+ 2 (str.indexof col2 \",\" 0)))))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) (str.len col2)))))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) (str.substr col2 (str.indexof col2 \",\" 0) (str.len col2)))))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        0,
        ", USA",
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ","
      ],
      [
        0,
        ","
      ],
      [
        ", USA"
      ],
      [
        0,
        ", USA",
        ","
      ],
      [
        0,
        ", USA",
        ","
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      0,
      ", ",
      2,
      ",",
      ", USA"
    ]
  },
  "exceljet2.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \".\" 0))\n        (end (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1))))\n    (if (= end -1)\n        (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1)))\n        (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" 0)))\n    (if (= dot-pos -1)\n        _arg_0\n        (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1))))\n          (if (= last-dot-pos -1)\n              (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0))\n              (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1))))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1)))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))))\n    (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1))))\n```",
      "```lisp\n  (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))\n```"
    ],
    "time_diff_ms": 95.273,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1))) (str.len _arg_0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \".\" 0)) (end (str.indexof _arg_0 \".\" (+ (str.indexof _arg_0 \".\" 0) 1)))) (if (= end -1) (str.substr _arg_0 (+ start 1) (- (str.len _arg_0) (+ start 1))) (str.substr _arg_0 (+ end 1) (- (str.len _arg_0) (+ end 1)))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" 0))) (if (= dot-pos -1) _arg_0 (let ((last-dot-pos (str.indexof _arg_0 \".\" (+ dot-pos 1)))) (if (= last-dot-pos -1) (str.substr _arg_0 (+ dot-pos 1) (str.len _arg_0)) (str.substr _arg_0 (+ last-dot-pos 1) (str.len _arg_0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dotPos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dotPos 1) (- (str.len _arg_0) dotPos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (- (str.len _arg_0) (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((last-dot (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ last-dot 1) (- (str.len _arg_0) (+ last-dot 1))))))",
      "((define-fun f ((_arg_0 String)) String (let ((dot-pos (str.indexof _arg_0 \".\" (- (str.len _arg_0) 1)))) (str.substr _arg_0 (+ dot-pos 1) (- (str.len _arg_0) dot-pos 1)))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.indexof _arg_0 \".\" (+ 1 (str.indexof _arg_0 \".\" 0)))) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (+ 1 (str.lastindexof _arg_0 \".\")) (str.len _arg_0))))"
    ],
    "constants": [
      [
        ".",
        0,
        -1,
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        0,
        1,
        -1
      ],
      [
        ".",
        0,
        -1,
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1,
        0
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1
      ],
      [
        ".",
        1,
        0
      ],
      [
        ".",
        1
      ]
    ],
    "all_constants": [
      ".",
      0,
      -1,
      1
    ]
  },
  "univ_6.sl": {
    "completions": [
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```"
    ],
    "time_diff_ms": 545.467,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      ", USA"
    ]
  },
  "stackoverflow2.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \" \" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace _arg_0 \"japan\" \"\"))\n```"
    ],
    "time_diff_ms": 95.363,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 0 (str.indexof _arg_0 \"japan\" 0))))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \" \" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace _arg_0 \"japan\" \"\")))"
    ],
    "constants": [
      [
        "",
        "japan"
      ],
      [
        0,
        "japan"
      ],
      [
        "",
        " japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        " "
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ],
      [
        "",
        "japan"
      ]
    ],
    "all_constants": [
      "",
      0,
      " ",
      " japan",
      "japan"
    ]
  },
  "phone-6-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```",
      "```lisp\n(str.substr name 5 3)\n```"
    ],
    "time_diff_ms": 724.551,
    "solutions": [
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))",
      "((define-fun f (name String) String (str.substr name 5 3)))"
    ],
    "constants": [
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        5
      ]
    ],
    "all_constants": [
      3,
      5
    ]
  },
  "25239569.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")\n)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"BRD\" \"Branding\")\n      \"DRS\" \"Direct Response\")\n    \"LDS\" \"Leads\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace \n    (str.replace \n      (str.replace _arg_0 \"BRD\" \"Branding\") \n      \"DRS\" \"Direct Response\") \n    \"LDS\" \"Leads\"))\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```scheme\n(define-fun f (_arg_0 String) String\n  (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace\n    (str.replace\n      (str.replace _arg_0 \"_BRD\" \"_Branding\")\n      \"_DRS\" \"_Direct Response\")\n    \"_LDS\" \"_Leads\"))\n```"
    ],
    "time_diff_ms": 586.924,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"DRS\" \"Direct Response\") \"LDS\" \"Leads\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f (_arg_0 String) String (str.replace (str.replace (str.replace _arg_0 \"BRD\" \"Branding\") \"LDS\" \"Leads\") \"DRS\" \"Direct Response\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace (str.replace _arg_0 \"_BRD\" \"_Branding\") \"_DRS\" \"_Direct Response\") \"_LDS\" \"_Leads\")))"
    ],
    "constants": [
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "Branding",
        "Leads",
        "BRD",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Direct Response",
        "Branding",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Branding",
        "Direct Response",
        "Leads",
        "LDS"
      ],
      [
        "DRS",
        "BRD",
        "Branding",
        "Direct Response",
        "Leads",
        "LDS"
      ],
      [
        "_Leads",
        "_LDS",
        "_Direct Response",
        "_BRD",
        "_DRS",
        "_Branding"
      ]
    ],
    "all_constants": [
      "DRS",
      "BRD",
      "Direct Response",
      "Branding",
      "_Leads",
      "_LDS",
      "_Direct Response",
      "_BRD",
      "Leads",
      "LDS",
      "_DRS",
      "_Branding"
    ]
  },
  "univ_5_short.sl": {
    "completions": [
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\")\n```",
      "```lisp\n(str.replace col2 \"New York\" \"NY\")\n```"
    ],
    "time_diff_ms": 73.113,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", NY, USA\")))",
      "((define-fun f (col1 String col2 String) String (str.replace col2 \"New York\" \"NY\")))"
    ],
    "constants": [
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        "New York",
        "NY"
      ],
      [
        0,
        ", NY, USA",
        ","
      ],
      [
        "New York",
        "NY"
      ]
    ],
    "all_constants": [
      0,
      "New York",
      ",",
      ", USA",
      ", NY, USA",
      "NY"
    ]
  },
  "remove-text-by-position.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n  (str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (- (str.len _arg_0) 12))\n```",
      "```lisp\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```scheme\n(str.substr _arg_0 12 (str.len _arg_0))\n```",
      "```lisp\n(str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3))\n```"
    ],
    "time_diff_ms": 269.415,
    "solutions": [
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" (+ (str.indexof _arg_0 \"/\" 1) 1)) (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (- (str.len _arg_0) 12))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 12 (str.len _arg_0))))",
      "((define-fun f (_arg_0 String) String (str.substr _arg_0 (str.indexof _arg_0 \"/\" 0 3))))"
    ],
    "constants": [
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        1,
        "/"
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        12
      ],
      [
        0,
        3,
        "/"
      ]
    ],
    "all_constants": [
      0,
      1,
      3,
      12,
      "/"
    ]
  },
  "univ_6-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.indexof col2 \",\" (+ 2 (str.indexof col2 \",\" 0))) (+ 2 (str.indexof col2 \",\" 0)))) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```lisp\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (str.indexof col2 \",\" 0) 3) \" USA\")\n```",
      "```lisp\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```",
      "```scheme\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")\n```",
      "```s-expression\n(str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")\n```",
      "```scheme\n(str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")\n```"
    ],
    "time_diff_ms": 393.581,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) (- (str.indexof col2 \",\" (+ 2 (str.indexof col2 \",\" 0))) (+ 2 (str.indexof col2 \",\" 0)))) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (str.indexof col2 \",\" 0) 3) \" USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ (str.indexof col2 \",\" 0) 2) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.substr col2 0 (str.indexof col2 \",\" 0)) \", \" (str.substr col2 (+ 2 (str.indexof col2 \",\" 0)) 2) \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ (str.replace col2 \"New York\" \"NY\") \", USA\")))"
    ],
    "constants": [
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        0,
        ", ",
        3,
        " USA",
        ","
      ],
      [
        ", USA",
        "New York",
        "NY"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        0,
        ", ",
        2,
        ",",
        ", USA"
      ],
      [
        ", USA",
        "New York",
        "NY"
      ]
    ],
    "all_constants": [
      0,
      ", ",
      2,
      3,
      " USA",
      "New York",
      ",",
      ", USA",
      "NY"
    ]
  },
  "univ_4.sl": {
    "completions": [
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(define-fun f (col1 String col2 String) String\n  (str.++ col2 \", USA\"))\n```",
      "```lisp\n(str.++ col2 \", USA\")\n```",
      "```scheme\n(str.++ col2 \", USA\")\n```"
    ],
    "time_diff_ms": 295.129,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))",
      "((define-fun f (col1 String col2 String) String (str.++ col2 \", USA\")))"
    ],
    "constants": [
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ],
      [
        ", USA"
      ]
    ],
    "all_constants": [
      ", USA"
    ]
  },
  "phone-10-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))\n```",
      "```lisp\n(str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 11)) \"-\" (str.substr name (- (str.len name) 4) 4))\n```"
    ],
    "time_diff_ms": 786.25,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 8 3) \"-\" (str.substr name 12 3) \"-\" (str.substr name 16 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 3) \"-\" (str.substr name 10 3) \"-\" (str.substr name 13 3))))",
      "((define-fun f (name String) String (str.++ (str.substr name 0 4) \"(\" (str.substr name 4 3) \") \" (str.substr name 7 (- (str.len name) 11)) \"-\" (str.substr name (- (str.len name) 4) 4))))"
    ],
    "constants": [
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        16,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        8,
        "-",
        12,
        16,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        10,
        "-",
        13,
        ") "
      ],
      [
        0,
        3,
        4,
        "(",
        7,
        11,
        "-",
        ") "
      ]
    ],
    "all_constants": [
      0,
      3,
      4,
      "(",
      8,
      7,
      10,
      11,
      "-",
      12,
      13,
      16,
      ") "
    ]
  },
  "univ_5.sl": {
    "completions": [
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\ncol2\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```",
      "```scheme\n(str.substr col2 0 (str.indexof col2 \",\" 0))\n```"
    ],
    "time_diff_ms": 678.613,
    "solutions": [
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) Stringcol2))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))",
      "((define-fun f (col1 String col2 String) String (str.substr col2 0 (str.indexof col2 \",\" 0))))"
    ],
    "constants": [
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ],
      [
        0,
        ","
      ]
    ],
    "all_constants": [
      0,
      ","
    ]
  },
  "stackoverflow1.sl": {
    "completions": [
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(str.replace _arg_0 \" Inc\" \"\")\n```",
      "```scheme\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```",
      "```lisp\n(if (str.suffixof \" Inc\" _arg_0)\n    (str.substr _arg_0 0 (- (str.len _arg_0) 4))\n    _arg_0)\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\"))\n```"
    ],
    "time_diff_ms": 172.153,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc\" \"\") \" LLC\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (str.replace _arg_0 \" Inc\" \"\")))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))",
      "((define-fun f (_arg_0 String) String (if (str.suffixof \" Inc\" _arg_0) (str.substr _arg_0 0 (- (str.len _arg_0) 4)) _arg_0)))",
      "((define-fun f ((_arg_0 String)) String (str.replace (str.replace _arg_0 \" Inc.\" \"\") \" Inc\" \"\")))"
    ],
    "constants": [
      [
        "",
        " LLC",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        "",
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ],
      [
        0,
        4,
        " Inc"
      ],
      [
        "",
        " Inc.",
        " Inc"
      ]
    ],
    "all_constants": [
      "",
      0,
      " LLC",
      4,
      " Inc",
      " Inc."
    ]
  },
  "exceljet1.sl": {
    "completions": [
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))\n```",
      "```lisp\n(str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))\n```"
    ],
    "time_diff_ms": 184.671,
    "solutions": [
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ 1 (str.indexof _arg_1 \"_\" 0)) (- (str.len _arg_1) (+ 1 (str.indexof _arg_1 \"_\" 0))))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (- (str.len _arg_1) (+ (str.indexof _arg_1 \"_\" 0) 1)))))",
      "((define-fun f (_arg_0 String _arg_1 String) String (str.substr _arg_1 (+ (str.indexof _arg_1 \"_\" 0) 1) (str.len _arg_1))))"
    ],
    "constants": [
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ],
      [
        0,
        1,
        "_"
      ]
    ],
    "all_constants": [
      0,
      1,
      "_"
    ]
  },
  "initials-long-repeat.sl": {
    "completions": [
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```lisp\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (let ((firstInitial (str.at name 0))\n        (lastInitial (str.at name (+ 1 (str.indexof name \" \" 0)))))\n    (str.++ firstInitial \".\" lastInitial \".\")))\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0)) ) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\"\n          (str.at name (+ 1 (str.indexof name \" \" 0))) \".\"))\n```",
      "```scheme\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\"))\n```",
      "```s-expression\n(str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")\n```",
      "```s-expression\n(define-fun f ((name String)) String\n  (str.++ \n    (str.at name 0) \n    \".\" \n    (str.at name \n      (+ 1 (str.indexof name \" \" 0))) \n    \".\"))\n```"
    ],
    "time_diff_ms": 360.22,
    "solutions": [
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (let ((firstInitial (str.at name 0)) (lastInitial (str.at name (+ 1 (str.indexof name \" \" 0))))) (str.++ firstInitial \".\" lastInitial \".\"))))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (str.indexof name \" \" 0)) \".\")))",
      "((define-fun f (name String) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))",
      "((define-fun f ((name String)) String (str.++ (str.at name 0) \".\" (str.at name (+ 1 (str.indexof name \" \" 0))) \".\")))"
    ],
    "constants": [
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ],
      [
        0,
        1,
        " ",
        "."
      ]
    ],
    "all_constants": [
      0,
      1,
      " ",
      "."
    ]
  },
  "find-nth-occurrence-of-character.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((n (str.indexof _arg_0 \",\" 0)))\n    (if (<= _arg_1 1)\n      n\n      (f (str.substr _arg_0 (+ n 1) (- (str.len _arg_0) (+ n 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0) \n    (+ 1 (str.indexof _arg_0 \",\" 0)) \n    (+ 1 (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0))))\n  (+ 1 (str.indexof _arg_0 \",\" \n    (str.indexof _arg_0 \",\" \n      (str.indexof _arg_0 \",\" 0))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (let ((pos (str.indexof _arg_0 \",\" 0)))\n    (if (= _arg_1 1)\n        pos\n        (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) Int\n  (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))\n)\n```"
    ],
    "time_diff_ms": 423.564,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((n (str.indexof _arg_0 \",\" 0))) (if (<= _arg_1 1) n (f (str.substr _arg_0 (+ n 1) (- (str.len _arg_0) (+ n 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0) (+ 1 (str.indexof _arg_0 \",\" 0)) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))) (+ 1 (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" 0)))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (let ((pos (str.indexof _arg_0 \",\" 0))) (if (= _arg_1 1) pos (f (str.substr _arg_0 (+ pos 1) (- (str.len _arg_0) (+ pos 1))) (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) Int (str.indexof _arg_0 \",\" (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" (+ 1 (str.indexof _arg_0 \",\" 0))))))))"
    ],
    "constants": [
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ],
      [
        0,
        1,
        ","
      ]
    ],
    "all_constants": [
      0,
      1,
      ","
    ]
  },
  "extract-word-containing-specific-text.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ 1 (- end start)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String \n  (let ((start (str.indexof _arg_0 \"_\" 0)) \n        (end (str.indexof _arg_0 \".\" start))) \n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) \n    (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"@\" 0)))\n    (if (= start -1)\n        \"\"\n        (let ((end (str.indexof _arg_0 \" \" start)))\n          (if (= end -1)\n              (str.substr _arg_0 start (str.len _arg_0))\n              (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0))\n        (end (str.indexof _arg_0 \".\" 0)))\n    (str.substr _arg_0 start (+ (- end start) 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((start (str.indexof _arg_0 \"_\" 0)))\n    (if (= start -1)\n      \"\"\n      (let ((end (str.indexof _arg_0 \" \" start)))\n        (if (= end -1)\n          (str.substr _arg_0 start (str.len _arg_0))\n          (str.substr _arg_0 start (- end start)))))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String)) String\n  (let ((at (str.indexof _arg_0 \".com\" 0)))\n    (if (= at -1)\n      \"\"\n      (let ((start (str.lastindexof (str.substr _arg_0 0 at) \" \")))\n        (str.substr _arg_0 (+ start 1) (- (+ at 4) start 1))))))\n```"
    ],
    "time_diff_ms": 908.069,
    "solutions": [
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ 1 (- end start))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" start))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0) (str.indexof (str.substr _arg_0 (str.indexof _arg_0 \"_\" 0)) \" \" 0))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"@\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0)) (end (str.indexof _arg_0 \".\" 0))) (str.substr _arg_0 start (+ (- end start) 1)))))",
      "((define-fun f ((_arg_0 String)) String (let ((start (str.indexof _arg_0 \"_\" 0))) (if (= start -1) \"\" (let ((end (str.indexof _arg_0 \" \" start))) (if (= end -1) (str.substr _arg_0 start (str.len _arg_0)) (str.substr _arg_0 start (- end start))))))))",
      "((define-fun f ((_arg_0 String)) String (let ((at (str.indexof _arg_0 \".com\" 0))) (if (= at -1) \"\" (let ((start (str.lastindexof (str.substr _arg_0 0 at) \" \"))) (str.substr _arg_0 (+ start 1) (- (+ at 4) start 1)))))))"
    ],
    "constants": [
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        " ",
        "_"
      ],
      [
        0,
        "",
        " ",
        "@",
        -1
      ],
      [
        0,
        1,
        "_",
        "."
      ],
      [
        0,
        "",
        " ",
        "_",
        -1
      ],
      [
        0,
        "",
        " ",
        1,
        4,
        ".com",
        -1
      ]
    ],
    "all_constants": [
      0,
      1,
      "",
      " ",
      4,
      ".com",
      "@",
      "_",
      ".",
      -1
    ]
  },
  "extract-nth-word-from-text-string.sl": {
    "completions": [
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (nth words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"  \")) \" \") \" \") _arg_1)))\n```",
      "```scheme\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at (str.++ words \" \") _arg_1)))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\"\n         (str.at words (- _arg_1 1)))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (str.at words (- _arg_1 1))))\n```",
      "```lisp\n(define-fun f ((_arg_0 String) (_arg_1 Int)) String\n  (let ((words (str.split _arg_0 \" \")))\n    (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\"\n         (str.at words (- _arg_1 1)))))\n```"
    ],
    "time_diff_ms": 520.872,
    "solutions": [
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (nth words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ (str.++ (str.++ \" \" (str.replace _arg_0 \" \" \"  \")) \" \") \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at (str.++ words \" \") _arg_1))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (>= _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (str.at words (- _arg_1 1)))))",
      "((define-fun f ((_arg_0 String) (_arg_1 Int)) String (let ((words (str.split _arg_0 \" \"))) (ite (or (< _arg_1 1) (> _arg_1 (str.len words))) \"\" (str.at words (- _arg_1 1))))))"
    ],
    "constants": [
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        " ",
        "  "
      ],
      [
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ],
      [
        1,
        " "
      ],
      [
        "",
        1,
        " "
      ]
    ],
    "all_constants": [
      "",
      1,
      " ",
      "  "
    ]
  }
}