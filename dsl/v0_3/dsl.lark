library: "(" program* ")"

// Rules are executed one after another, in the order they appear.
// There could be no rules, in which case the program does nothing.
program: "(" "do" rule* ")"

// First, it declares the variables that will be used in the filter and transform expressions.
// Second, it defines a filter expression that an object must satisfy in order to be transformed.
// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.
rule: "(" "rule" decl filter xform_list ")"

// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.
// The `this` variable is always declared, and it refers to the object that is being transformed.
// There could also be an additional optional variable `other` that refers to another object in the grid,
// which is not being transformed, but is used in the filter expression.
decl: "(" "vars" "(" VAR_THIS VAR_OTHER? ")" ")"

// A filter is a predicate over the objects in the grid.
// If no filter is given, then all the objects are selected.
filter: "(" "filter" filter_expr? ")"

// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.
// The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction of more than two expressions,
// the binary connectives must be nested.
// The objects that are transformed are the ones that satisfy the filter expression.
filter_expr: filter_prim
           | "(" OP_AND filter_expr filter_expr ")"   
           | "(" OP_OR filter_expr filter_expr ")"
           | "(" OP_NOT filter_expr ")"

filter_prim: "(" COLOR_EQ fcolor_expr fcolor_expr ")"           
           | "(" SIZE_EQ size_expr size_expr ")"                
           | "(" HEIGHT_EQ height_expr height_expr ")"          
           | "(" WIDTH_EQ width_expr width_expr ")"             
           | "(" DEGREE_EQ degree_expr degree_expr ")"          
           | "(" SHAPE_EQ shape_expr shape_expr ")"             
           | "(" COLUMN_EQ column_expr column_expr ")"         
           | "(" NEIGHBOR_OF VAR VAR ")"      // true if the two objects are neighbors


// Transforms are applied one after another, in the order they appear.
xform_list: "(" "apply" xform+ ")"

// A single transform is applied to all the objects that are bound to the `this` variable. 
// The transform is applied to each such object independently and simultaneously.
xform:     "(" TR_UPDATE_COLOR color_expr ")"                          // change this object color to the given color 
         | "(" TR_MOVE_NODE direction_expr ")"                         // move this object in the given direction
         | "(" TR_EXTEND_NODE direction_expr OVERLAP ")"               // extend (move while leaving a trail) this object in the given direction
                                                                  // if overlap is false, then the object is extended until it hits another object,
                                                                  // otherwise it is extended until the edge of the grid.
         | "(" TR_MOVE_NODE_MAX direction_expr ")"                     // move this object until it hits another object, in the given direction
         | "(" TR_ROTATE_NODE ROT_ANGLE ")"                       // rotate this object by the given angle
         | "(" TR_ADD_BORDER color_expr ")"                            // color this exterior pixels of the object with the given color
         | "(" TR_FILL_RECTANGLE color_expr OVERLAP ")"                // color this interior of a hollow rectangle with the given color
         | "(" TR_HOLLOW_RECTANGLE color_expr ")"                      // color this interior of a solid rectangle with the given color
         | "(" TR_MIRROR mirror_expr ")"
         | "(" TR_FLIP SYMMETRY_AXIS ")"                          // flip this object with respect to the given axis
         | "(" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION ")" // insert a copy of this object at the position of the given object
         | "(" TR_NOOP ")"                                        // do nothing

fcolor_expr: FCOLOR
           | "(" COLOR_OF VAR ")"

color_expr: COLOR
          | "(" COLOR_OF VAR ")"

size_expr: SIZE
         | "(" SIZE_OF VAR ")"

height_expr: HEIGHT
           | "(" HEIGHT_OF VAR ")"

width_expr: WIDTH
          | "(" WIDTH_OF VAR ")"

degree_expr: DEGREE
           | "(" DEGREE_OF VAR ")" 

shape_expr: SHAPE
          | "(" SHAPE_OF VAR ")"

column_expr: COLUMN
           | "(" COLUMN_OF VAR ")"

direction_expr: DIRECTION
              | "(" DIRECTION_OF VAR ")"

img_pts_expr: IMAGE_POINTS
            | "(" IMAGE_POINTS_OF VAR ")"

mirror_expr: "(" MIRROR_AXIS_OF VAR ")"

OBJECT_ID: /[0-9]+/
FCOLOR: "O" // black
      | "B" // blue
      | "R" // red
      | "G" // green
      | "Y" // yellow
      | "X" // grey
      | "F" // fuchsia
      | "A" // orange
      | "C" // cyan  
      | "W" // brown

SIZE: "min" | "max" | "odd" | /[0-9]+/  // size of objects
DEGREE: "min" | "max" | "odd" | /[0-9]+/  // degree of objects
HEIGHT: "min" | "max" | "odd" | /[0-9]+/  // height of objects
WIDTH: "min" | "max" | "odd" | /[0-9]+/  // width of objects
COLUMN: "center" | "even" | /[0-9]+/  // column of objects
SHAPE: "square" | "enclosed"  // shape of objects

DIRECTION: "up"
         | "down"
         | "left"
         | "right"
         | "up_left"
         | "up_right"
         | "down_left"
         | "down_right"

SYMMETRY_AXIS: "vertical" | "horizontal" | "diagonal_left" | "diagonal_right"

// The angle of clockwise rotation, in degrees.
ROT_ANGLE: "0" 
         | "90" 
         | "180" 
         | "270"

COLOR: "O" // black
      | "B" // blue
      | "R" // red
      | "G" // green
      | "Y" // yellow
      | "X" // grey
      | "F" // fuchsia
      | "A" // orange
      | "C" // cyan  
      | "W" // brown

OVERLAP: BOOL

BOOL: "true" | "false"

IMAGE_POINTS: "top" | "bottom" | "left" | "right" | "top_left" | "top_right" | "bottom_left" | "bottom_right" 

RELATIVE_POSITION: "source"
                 | "target"
                 | "middle"

VAR: VAR_THIS | VAR_OTHER
VAR_THIS: "this"
VAR_OTHER: "other"

OP_AND: "and"
OP_OR: "or"
OP_NOT: "not"

COLOR_OF: "color_of"
SIZE_OF: "size_of"
HEIGHT_OF: "height_of"
WIDTH_OF: "width_of"
DEGREE_OF: "degree_of"
SHAPE_OF: "shape_of"
COLUMN_OF: "column_of"
DIRECTION_OF: "direction_of"
IMAGE_POINTS_OF: "img_pts_of"
MIRROR_AXIS_OF: "mirror_axis_of"

COLOR_EQ: "color_equals"
SIZE_EQ: "size_equals"
DEGREE_EQ: "degree_equals"
HEIGHT_EQ: "height_equals"
WIDTH_EQ: "width_equals"
SHAPE_EQ: "shape_equals"
COLUMN_EQ: "column_equals"
NEIGHBOR_OF: "neighbor_of"

TR_UPDATE_COLOR: "update_color"
TR_MOVE_NODE: "move_node"
TR_EXTEND_NODE: "extend_node"
TR_MOVE_NODE_MAX: "move_node_max"
TR_ROTATE_NODE: "rotate_node"
TR_ADD_BORDER: "add_border"
TR_FILL_RECTANGLE: "fill_rectangle"
TR_HOLLOW_RECTANGLE: "hollow_rectangle"
TR_MIRROR: "mirror"
TR_FLIP: "flip"
TR_INSERT: "insert"
TR_NOOP: "noop"

COMMENT: /\s*/ ";;" /[^\n]/*

%import common.WS
%import common.LCASE_LETTER
%import common.INT
%ignore WS
%ignore COMMENT