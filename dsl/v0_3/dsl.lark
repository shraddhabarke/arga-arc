library: "(" program* ")"

// Rules are executed one after another, in the order they appear.
// There could be no rules, in which case the program does nothing.
program: "(" "do" rule* ")"

// A rule first defines a the object variables which are used in the filter and transform expressions.
// Then, it defines a filter that refers to the object variables, and which selects the objects to which the transform will be applied.
// Finally, it defines a list of transforms that will be applied to the selected objects.
rule: "(" "rule" params filter transform_list ")"

// The object variables are used to refer to the objects in the grid.
// There is a special variable `this` which refers to the object to which the transforms are applied.
// The `this` variable is always defined.
// There can be an optional additional variable, which can be also used in the filter and transform expressions,
// but is not affected by the transforms.
params: "(" "with" "this" VAR? ")"

VAR: LCASE_LETTER+

// A filter is a predicate over the objects in the grid.
// If no filter is given, then all the objects are selected.
filter: "(" "filter" filter_expr? ")"

// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives
// The objects to which the transform will be applied are the ones that can be bound to the `this` variable
// such that the filter expression is true.
filter_expr: filter_prim
           | "(" OP_AND filter_expr filter_expr ")"   
           | "(" OP_OR filter_expr filter_expr ")"
           | "(" OP_NOT filter_expr ")"
           | "(" OP_VARAND filter_relation filter_expr ")"

filter_prim: "(" FL_BY_COLOR COLOR ")"           // select objects of the given color
           | "(" FL_BY_SIZE SIZE ")"             // select the objects that have the given size
           | "(" FL_BY_HEIGHT HEIGHT ")"
           | "(" FL_BY_WIDTH WIDTH ")"
           | "(" FL_BY_DEGREE DEGREE ")"         // select all objects that have a given number of neighbors i.e degree
           | "(" FL_BY_SHAPE SHAPE ")"
           | "(" FL_BY_COLUMNS COLUMN ")"
           | "(" FL_BY_NEIGHBOR_SIZE SIZE ")"    // select all objects that have a neighbor of the given size
           | "(" FL_BY_NEIGHBOR_COLOR COLOR ")"  // select all objects that have a neighbor of the given color
           | "(" FL_BY_NEIGHBOR_DEGREE DEGREE ")"// select all objects that have a neighbor of the given degree

filter_relation: "(" REL_ANY_NEIGHBOR ")"
               | "(" REL_DIRECT_NEIGHBOR ")"
               | "(" REL_DIAGONAL_NEIGHBOR ")"

// Transforms are applied one after another, in the order they appear.
transform_list: "(" "apply" transform+ ")"

// A single transform is applied to all the objects that are bound to the `this` variable. 
// The transform is applied to each such object independently and simultaneously.
transform: "(" TR_UPDATE_COLOR COLOR ")"                          // change this object color to the given color 
         | "(" TR_UPDATE_COLOR VAR ")"                            // or the color of the given object
         | "(" TR_MOVE_NODE DIRECTION ")"                         // move this object in the given direction
         | "(" TR_MOVE_NODE VAR ")"                               // or the direction of the given object
         | "(" TR_EXTEND_NODE DIRECTION OVERLAP ")"               // extend (move while leaving a trail) this object in the given direction
         | "(" TR_EXTEND_NODE VAR OVERLAP ")"                     // or the direction of the given object 
                                                                  // if overlap is false, then the object is extended until it hits another object,
                                                                  // otherwise it is extended until the edge of the grid.
         | "(" TR_MOVE_NODE_MAX DIRECTION ")"                     // move this object until it hits another object, in the given direction
         | "(" TR_MOVE_NODE_MAX VAR ")"                           // or this direction of the given object
         | "(" TR_ROTATE_NODE ROT_ANGLE ")"                       // rotate this object by the given angle
         | "(" TR_ADD_BORDER COLOR ")"                            // color this exterior pixels of the object with the given color
         | "(" TR_FILL_RECTANGLE COLOR OVERLAP ")"                // color this interior of a hollow rectangle with the given color
         | "(" TR_HOLLOW_RECTANGLE COLOR ")"                      // color this interior of a solid rectangle with the given color
         | "(" TR_MIRROR VAR ")"                                  // mirror this object with respect to the given object
         | "(" TR_FLIP SYMMETRY_AXIS ")"                          // flip this object with respect to the given axis
         | "(" TR_INSERT VAR IMAGE_POINTS RELATIVE_POSITION ")"   // insert a copy of this object at the position of the given object

SIZE: "MIN" | "MAX" | "ODD" | /[0-9]+/
DEGREE: "MIN" | "MAX" | "ODD" | /[0-9]+/
HEIGHT: "MIN" | "MAX" | "ODD" | /[0-9]+/
WIDTH: "MIN" | "MAX" | "ODD" | /[0-9]+/
COLUMN: "CENTER" | "EVEN" | /[0-9]+/
SHAPE: "square" | "enclosed"

DIRECTION: "U"
         | "D"
         | "L"
         | "R"
         | "UL"
         | "UR"
         | "DL"
         | "DR"

SYMMETRY_AXIS: "VERTICAL" | "HORIZONTAL" | "DIAGONAL_LEFT" | "DIAGONAL_RIGHT"

// The angle of clockwise rotation, in degrees.
ROT_ANGLE: "0" 
         | "90" 
         | "180" 
         | "270"

COLOR: "O" // black
      | "B" // blue
      | "R" // red
      | "G" // green
      | "Y" // yellow
      | "X" // grey
      | "F" // fuchsia
      | "A" // orange
      | "C" // cyan  
      | "W" // brown

OVERLAP: BOOL

BOOL: "true" | "false"

IMAGE_POINTS: "TOP"
            | "BOTTOM"
            | "LEFT"
            | "RIGHT"
            | "TOP_LEFT"
            | "TOP_RIGHT"
            | "BOTTOM_LEFT"
            | "BOTTOM_RIGHT"

RELATIVE_POSITION: "SOURCE"
                 | "TARGET"
                 | "MIDDLE"

OP_AND: "and"
OP_OR: "or"
OP_NOT: "not"
OP_VARAND: "varand"

FL_BY_COLOR: "filter_by_color" 
FL_BY_SIZE: "filter_by_size"
FL_BY_DEGREE: "filter_by_degree"
FL_BY_HEIGHT: "filter_by_height"
FL_BY_WIDTH: "filter_by_width"
FL_BY_SHAPE: "filter_by_shape"
FL_BY_COLUMNS: "filter_by_columns"
FL_BY_NEIGHBOR_SIZE: "filter_by_neighbor_size"
FL_BY_NEIGHBOR_COLOR: "filter_by_neighbor_color"
FL_BY_NEIGHBOR_DEGREE: "filter_by_neighbor_degree"

REL_ANY_NEIGHBOR: "is_any_neighbor"
REL_DIRECT_NEIGHBOR: "is_direct_neighbor"
REL_DIAGONAL_NEIGHBOR: "is_diagonal_neighbor"

TR_UPDATE_COLOR: "update_color"
TR_MOVE_NODE: "move_node"
TR_EXTEND_NODE: "extend_node"
TR_MOVE_NODE_MAX: "move_node_max"
TR_ROTATE_NODE: "rotate_node"
TR_ADD_BORDER: "add_border"
TR_FILL_RECTANGLE: "fill_rectangle"
TR_HOLLOW_RECTANGLE: "hollow_rectangle"
TR_MIRROR: "mirror"
TR_FLIP: "flip"
TR_INSERT: "insert"

COMMENT: /\s*/ ";;" /[^\n]/*

%import common.WS
%import common.LCASE_LETTER
%import common.INT
%ignore WS
%ignore COMMENT