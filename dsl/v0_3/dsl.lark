library: "(" program* ")"

// Rules are executed one after another, in the order they appear.
// There could be no rules, in which case the program does nothing.
program: "(" "do" rule* ")"

// First, it defines a filter expression that an object must satisfy in order to be transformed.
// This filter expression can also refer to one additional object, which is not transformed,
// but whose properties can be used by the transform expressions.
// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.
rule: "(" "rule" filter xform_list ")"

// A filter is a predicate over the objects in the grid.
// If no filter is given, then all the objects are selected.
filter: "(" "filter" filter_expr? ")"

// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives
// and the `varand` connective, which is used to constrain the optional additional object.
// The objects that are transformed are the ones that satisfy the filter expression.
filter_expr: filter_prim
           | "(" OP_AND filter_expr filter_expr ")"   
           | "(" OP_OR filter_expr filter_expr ")"
           | "(" OP_NOT filter_expr ")"

filter_prim: "(" FL_BY_COLOR FCOLOR FCOLOR ")"           // select objects of the given color
           | "(" FL_BY_SIZE SIZE SIZE ")"                // select the objects that have the given size
           | "(" FL_BY_HEIGHT HEIGHT HEIGHT ")"          // select all objects that have a given height
           | "(" FL_BY_WIDTH WIDTH WIDTH ")"             // select all objects that have a given width
           | "(" FL_BY_DEGREE DEGREE DEGREE ")"          // select all objects that have a given number of neighbors i.e degree
           | "(" FL_BY_SHAPE SHAPE SHAPE ")"             // select all objects that have the given shape
           | "(" FL_BY_COLUMNS COLUMN COLUMN ")"         // select all objects that are in the given column
           | "(" FL_BY_NEIGHBOR_SIZE SIZE SIZE ")"       // select all objects that have a neighbor of the given size
           | "(" FL_BY_NEIGHBOR_COLOR FCOLOR FCOLOR ")"  // select all objects that have a neighbor of the given color
           | "(" FL_BY_NEIGHBOR_DEGREE DEGREE DEGREE ")" // select all objects that have a neighbor of the given degree
           | "(" FL_BY_OBJ OBJ ")" // 

// Transforms are applied one after another, in the order they appear.
xform_list: "(" "apply" xform+ ")"

// A single transform is applied to all the objects that are bound to the `this` variable. 
// The transform is applied to each such object independently and simultaneously.
xform:     "(" TR_UPDATE_COLOR COLOR ")"                          // change this object color to the given color 
         | "(" TR_MOVE_NODE DIRECTION ")"                         // move this object in the given direction
         | "(" TR_EXTEND_NODE DIRECTION OVERLAP ")"               // extend (move while leaving a trail) this object in the given direction
                                                                  // if overlap is false, then the object is extended until it hits another object,
                                                                  // otherwise it is extended until the edge of the grid.
         | "(" TR_MOVE_NODE_MAX DIRECTION ")"                     // move this object until it hits another object, in the given direction
         | "(" TR_ROTATE_NODE ROT_ANGLE ")"                       // rotate this object by the given angle
         | "(" TR_ADD_BORDER COLOR ")"                            // color this exterior pixels of the object with the given color
         | "(" TR_FILL_RECTANGLE COLOR OVERLAP ")"                // color this interior of a hollow rectangle with the given color
         | "(" TR_HOLLOW_RECTANGLE COLOR ")"                      // color this interior of a solid rectangle with the given color
         | "(" TR_MIRROR MIRROR_AXIS ")"
         | "(" TR_FLIP SYMMETRY_AXIS ")"                          // flip this object with respect to the given axis
         | "(" TR_INSERT OBJECT_ID IMAGE_POINTS RELATIVE_POSITION ")" // insert a copy of this object at the position of the given object
         | "(" TR_NOOP ")"                                        // do nothing

OBJECT_ID: /[0-9]+/
FCOLOR: "O" // black
      | "B" // blue
      | "R" // red
      | "G" // green
      | "Y" // yellow
      | "X" // grey
      | "F" // fuchsia
      | "A" // orange
      | "C" // cyan  
      | "W" // brown
      | "obj_color" // color of objects
SIZE: "min" | "max" | "odd" | /[0-9]+/ | "obj_size" // size of objects
DEGREE: "min" | "max" | "odd" | /[0-9]+/ | "obj_degree" // degree of objects
HEIGHT: "min" | "max" | "odd" | /[0-9]+/ | "obj_height" // height of objects
WIDTH: "min" | "max" | "odd" | /[0-9]+/ | "obj_width" // width of objects
COLUMN: "center" | "even" | /[0-9]+/ | "obj_col" // column of objects
SHAPE: "square" | "enclosed" | "obj_shape" // shape of objects

DIRECTION: "up"
         | "down"
         | "left"
         | "right"
         | "up_left"
         | "up_right"
         | "down_left"
         | "down_right"
         | "vardirection"
OBJ: "obj"
SYMMETRY_AXIS: "vertical" | "horizontal" | "diagonal_left" | "diagonal_right"
MIRROR_AXIS: "varmirror"
// The angle of clockwise rotation, in degrees.
ROT_ANGLE: "0" 
         | "90" 
         | "180" 
         | "270"

COLOR: "O" // black
      | "B" // blue
      | "R" // red
      | "G" // green
      | "Y" // yellow
      | "X" // grey
      | "F" // fuchsia
      | "A" // orange
      | "C" // cyan  
      | "W" // brown
      | "varcolor" // variable color

OVERLAP: BOOL

BOOL: "true" | "false"

IMAGE_POINTS: "top" | "bottom" | "left" | "right" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "varimagepoints"

RELATIVE_POSITION: "source"
                 | "target"
                 | "middle"

OP_AND: "and"
OP_OR: "or"
OP_NOT: "not"

FL_BY_COLOR: "color_equals"
FL_BY_SIZE: "size_equals"
FL_BY_DEGREE: "degree_equals"
FL_BY_HEIGHT: "height_equals"
FL_BY_WIDTH: "width_equals"
FL_BY_SHAPE: "shape_equals"
FL_BY_COLUMNS: "column_equals"
FL_BY_NEIGHBOR_SIZE: "neighbor_size"
FL_BY_NEIGHBOR_COLOR: "neighbor_color"
FL_BY_NEIGHBOR_DEGREE: "neighbor_degree"
FL_BY_OBJ: "neighbor_of"

TR_UPDATE_COLOR: "update_color"
TR_MOVE_NODE: "move_node"
TR_EXTEND_NODE: "extend_node"
TR_MOVE_NODE_MAX: "move_node_max"
TR_ROTATE_NODE: "rotate_node"
TR_ADD_BORDER: "add_border"
TR_FILL_RECTANGLE: "fill_rectangle"
TR_HOLLOW_RECTANGLE: "hollow_rectangle"
TR_MIRROR: "mirror"
TR_FLIP: "flip"
TR_INSERT: "insert"
TR_NOOP: "noop"

COMMENT: /\s*/ ";;" /[^\n]/*

%import common.WS
%import common.LCASE_LETTER
%import common.INT
%ignore WS
%ignore COMMENT