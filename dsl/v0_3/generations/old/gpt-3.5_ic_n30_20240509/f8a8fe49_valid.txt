{
    "nl_description": "Move all objects colored differently than X towards the object of color X, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )    \n    )\n)"
}

{
    "nl_description": "Extend all objects toward the object of maximum size, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )    \n    )\n)"
}

{
    "nl_description": "Extend all the objects of color R towards the object of color X without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of size 2 to the right towards the object of maximum width.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node_max right)\n        )\n    )\n)"
}

{
    "nl_description": "For every object that is adjacent to the object of color X, rotate the object clockwise by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Move all the objects of color X towards the object of color O, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) X)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "For each object that is not colored X, extend it in the direction of the nearest X object without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (not (color_equals (color_of this) X))\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects in the grid to the right until they hit the edge of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node right true)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects of color blue by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Extend objects of color R one step up only if they can be extended without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of size 1 toward the object of maximum size, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (size_equals (size_of x) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move each object one step towards the bottom-right direction if their size is odd and they are neighbors of an object of color X.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) odd)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (move_node down_right)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects with color R toward the object with color X without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of size 1 one step in the given direction and change their color to black.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node (direction_of this) false)\n            (update_color O)\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects with color R by 180 degrees.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (rotate_node 180)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of size 2 toward the object of color R, if they are neighbors of each other.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 2)\n                (and\n                    (neighbor_of this x)\n                    (and\n                        (neighbor_of this x)\n                        (color_equals (color_of x) R)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of color different than X or R one step up, then recolor them to color X.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (update_color X)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) X)\n        )\n        (apply\n            (move_node up)\n            (update_color X)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color R to the leftmost position in the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than X, toward the object of color X, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Extend objects of color different than X toward the objects of color X, if they are neighbors of X.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) X))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) X)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects towards the left edge of the grid until they hit another object, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max left)\n        )\n    )\n)"
}