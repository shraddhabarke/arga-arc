{
    "nl_description": "Recolor all objects that are not of color B to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) B))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects of size 1 toward the object of color B, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all blue objects one step towards the object of color B and extend them until they hit another object.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than B toward the object of color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects of color G to color C and extend them towards the top until they hit another object.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (update_color C)\n            (move_node_max up)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects that are enclosed objects towards their left side.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (extend_node left false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects towards the object of color B, without overlapping, and recolor them to color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Color all the objects of color other than B to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) B))\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects one step left.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node left)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects to maximum size but not beyond the object of color B without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (size_equals (size_of this) min)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Fill the objects B and G with color B, and objects A and C with color C.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) B)\n                (color_equals (color_of this) G)\n            )\n        )\n        (apply\n            (update_color B)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (update_color C)\n        )\n    )\n)"
}

{
    "nl_description": "Extend each object until it hits another object, diagonally.",
    "code": "(do\n    (rule\n        (vars(this))\n        (filter)\n        (apply\n            (extend_node up_right false)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of color B towards the object of color G.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects that have a neighbor of color B to color B.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (neighbor_of this x)\n        )\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of color different than B, toward the object of color B, if they are neighbors of it.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) B))\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Rotate all objects in the image grid 90 degrees clockwise.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of color B until they hit another object.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (extend_node (direction_of this) false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all the objects to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all enclosed objects towards the right edge of the grid.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
}

{
    "nl_description": "Recolor all objects to color B.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color B)\n        )\n    )\n)"
}

{
    "nl_description": "Extend all objects to the right without overlapping.",
    "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (extend_node right false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all objects of size 1 toward the object of color B, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this x)\n                    (color_equals (color_of x) B)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}

{
    "nl_description": "Extend all the objects of color different than G, towards the objects of maximum size, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (neighbor_of this x)\n                    (size_equals (size_of x) max)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of x) false)\n        )\n    )\n)"
}

{
    "nl_description": "Move all blue objects towards the blue object on the grid, without overlapping.",
    "code": "(do\n    (rule\n        (vars (this x))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max (direction_of x))\n        )\n    )\n)"
}