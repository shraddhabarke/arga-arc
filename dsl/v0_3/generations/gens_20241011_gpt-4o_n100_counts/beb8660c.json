{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 8590,
        "prompt_tokens": 5368,
        "total_tokens": 13958,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 12.539304256439209,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO R R O O O O\nO O O O G O O\nB B B O O O O\nO O O O O O O\nO X X X X X X\nO O O O O O O\nF F F F F O O\nO O O Y Y Y Y\nO O O O O O O\nC C C C C C C\nOUTPUT GRID:\nO O O O O O O\nO O O O O O O\nO O O O O O O\nO O O O O O G\nO O O O O R R\nO O O O B B B\nO O O Y Y Y Y\nO O F F F F F\nO X X X X X X\nC C C C C C C\n\nPAIR 2\nINPUT GRID:\nO O O B\nO O O O\nR R R O\nO O O O\nO G G O\nO O O O\nC C C C\nOUTPUT GRID:\nO O O O\nO O O O\nO O O O\nO O O B\nO O G G\nO R R R\nC C C C\n\nPAIR 3\nINPUT GRID:\nR R O\nO Y O\nC C C\nOUTPUT GRID:\nO O Y\nO R R\nC C C\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 91,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects present on the grid one step down, and change their positions based on the initial locations of the other objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "other": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down if they are neighbors of an object with a different color, and swap their colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node down)\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except C and X one step down in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) C))\n                (not (color_equals (color_of this) X))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "not": 2,
                "color_equals": 2,
                "color_of": 2,
                "C": 1,
                "X": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects starting from the bottom row up diagonally right",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 270)\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "270": 1,
                "move_node": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Cyclically shift the rows of the grid by 1, top to bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects to 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects closer to the top-right corner while maintaining their relative order",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 2,
                "filter": 2,
                "apply": 2,
                "move_node": 2,
                "up": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the center column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max center)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 6 col 28\n\n            (move_node_max center)\n                           ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "center": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects of size 1 by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each row in the grid up until it intersects with the next row with objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter (and (neighbor_of this other) (not (color_equals (color_of this) O))))\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 2,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the bottom of the grid until they reach another object or the edge of the grid, while preserving their initial horizontal order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Shift each diagonal to the right and move it one step down, wrapping around if necessary.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the bottom-right corner by one step.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except those with color C down by one position",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in a cyclic pattern clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the next position of the object below them if it exists.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 to a location such that they appear in the reverse order of their initial appearance.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n            (move_node up)\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "move_node": 3,
                "up": 3
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down in descending order based on their position within the grid and maintaining the order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects of size greater than 1 by 90 degrees",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) (5))\n        )\n        (apply\n            (move_node up)\n            (update_color B)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '5' in the current parser context, at line 5 col 42\n\n           (size_equals (size_of this) (5))\n                                        ^\nExpected one of: \n\t* SIZE_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "5": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "B": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the bottom edge exactly the number of steps equal to their row position.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects one step down in a circular manner, without changing their position if there is already an object of a different type in that place.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 270 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 270)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "270": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all horizontal objects 90 degrees clockwise",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (degree_equals (degree_of this) 1)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "degree_equals": 1,
                "degree_of": 1,
                "1": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one row down in the order they appear.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the diagonal of objects to the top-right in column-major order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node up_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "up_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down, preserving their original ordering.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down, changing their order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the rows of objects one step down, starting from the second topmost row, in order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (and (not (row_equals (row_of this) 0)) (not (row_equals (row_of this) max))))\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 4 col 28\n\n        (filter (and (not (row_equals (row_of this) 0)) (not (row_e\n                           ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "not": 2,
                "row_equals": 2,
                "row_of": 2,
                "0": 1,
                "max": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 to positions occupied by other objects of size 3, while shifting those objects one step up.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step to the right without changing their relative order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate objects one step counterclockwise in a specific order from the bottom-right.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (column_equals (column_of other) 0)\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "column_equals": 1,
                "column_of": 1,
                "0": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-square objects towards the nearest square object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (shape_equals (shape_of this) square))\n                (and\n                    (neighbor_of this other)\n                    (shape_equals (shape_of other) square)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "shape_equals": 2,
                "shape_of": 2,
                "square": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Shift all rows by one cell up cyclically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects of size 6 by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 6)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "6": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 2 one step to the right, then move all objects of size 3 one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "size_equals": 2,
                "size_of": 2,
                "2": 1,
                "apply": 2,
                "move_node": 2,
                "right": 1,
                "3": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the position of the closest object horizontally or vertically that appears in the input only after the current object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of other this)\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all rows of objects clockwise by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R, B, and G to the position of the object of maximum size, then remove the target objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (or\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) G)\n                )\n            )\n        )\n        (apply\n            (insert target top_left)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter (or (color_equals (color_of this) R) (or (color_equals (color_of this) B) (color_equals (color_of this) G))))\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 14 col 21\n\n            (insert target top_left)\n                    ^\nExpected one of: \n\t* OBJECT_ID\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "other": 2,
                "filter": 2,
                "or": 4,
                "color_equals": 6,
                "color_of": 6,
                "R": 2,
                "B": 2,
                "G": 2,
                "apply": 2,
                "insert": 1,
                "target": 1,
                "top_left": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Shift all objects downwards in the order they appear.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows one step down",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reorganize each object in reverse relative position order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (add_border O)\n            (rotate_node 270)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "add_border": 1,
                "O": 1,
                "rotate_node": 1,
                "270": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 3 one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows containing an object from the last row to the first row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects of size greater than 1 by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) greater_than_1)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'g' in the current parser context, at line 5 col 41\n\n            (size_equals (size_of this) greater_than_1)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* SIZE\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "greater_than_1": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects with unique colors clockwise by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (or\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) Y)\n                )\n            )\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "or": 2,
                "color_equals": 3,
                "color_of": 3,
                "R": 1,
                "G": 1,
                "Y": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate each object in the grid by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Shift each object to the position of the next object's initial position as per their row-wise sequence in reverse order.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows to the right by their row index amount.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 7,
                "right": 7
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate the spiral of colors by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the last row by direction.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards the first empty row directly below them.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects except 'C' objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects in a diagonal pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate objects of color R by 90 degrees",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move color bands diagonally in the upper-left direction in a specific order to form a diagonal pattern.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up_left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "up_left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects except C to the place of the previous object, shifting them one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) C))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transpose all objects of size 2 and recolor them in the order they appeared in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "2": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the bottom row, keeping their relative sequence from left to right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects except the bottom object by 270 degrees.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (rotate_node 270)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "apply": 1,
                "rotate_node": 1,
                "270": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the right without overlapping. The objects of original color G will be moved to the left instead.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) G)))\n        (apply\n            (move_node right)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply\n            (move_node left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "G": 2,
                "apply": 2,
                "move_node": 2,
                "right": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object toward the next object to its bottom, and recolor it with the color of the next object.",
            "code": "(do \n    (rule \n        (vars (this other)) \n        (filter \n            (and \n                (neighbor_of this other) \n                (color_equals (color_of this) O) \n            ) \n        ) \n        (apply \n            (move_node (direction_of other)) \n            (update_color (color_of other)) \n        ) \n    ) \n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the lowest position until they hit another object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step down.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects clockwise by 90 degrees.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects by 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects clockwise by 90 degrees in the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects diagonally down-right to their positions in the bottom-most row, wrapping around the grid boundaries.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down_right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects down to the row that the nearest object below with a different color originating from the same column resides in.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "column_equals": 1,
                "column_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to a new row such that all rows have at most one object.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each diagonal to the correct diagonal relative position, maintaining their original order.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node (relative_position (shape_diagonal diagonal)))\n        )\n        (apply\n            (move_node (relative_position (width_diagonal natural)))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 6 col 25\n\n            (move_node (relative_position (shape_diagonal diagon\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 2,
                "move_node": 2,
                "relative_position": 2,
                "shape_diagonal": 1,
                "diagonal": 1,
                "width_diagonal": 1,
                "natural": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all the objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate anti-clockwise all the rows that contain multiple blocks of the same color",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) G)\n                    (color_equals (color_of this) B)\n                    (color_equals (color_of this) Y)\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) F)\n                    (color_equals (color_of this) X)\n                )\n                (or\n                    (size_equals (size_of this) 2)\n                    (size_equals (size_of this) 3)\n                    (size_equals (size_of this) 4)\n                    (size_equals (size_of this) 5)\n                    (size_equals (size_of this) 6)\n                    (size_equals (size_of this) 7)\n                    (size_equals (size_of this) 9)\n                )\n            )\n        )\n        (apply\n            (rotate_node 270)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 9 col 21\n\n                    (color_equals (color_of this) B)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 15,
                "filter": 1,
                "and": 1,
                "or": 2,
                "color_equals": 7,
                "color_of": 7,
                "R": 1,
                "G": 1,
                "B": 1,
                "Y": 1,
                "C": 1,
                "F": 1,
                "X": 1,
                "size_equals": 7,
                "size_of": 7,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "9": 1,
                "apply": 1,
                "rotate_node": 1,
                "270": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects 90 degrees clockwise.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (rotate_node 90)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all rows of objects one step up except the row at the bottom, and then move the bottom row to the top.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (neighbor_of this (column_equals this 6)))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 5 col 36\n\n            (not (neighbor_of this (column_equals this 6)))\n                                   ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "not": 1,
                "neighbor_of": 1,
                "column_equals": 1,
                "6": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one row down, except those in the last row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (column_equals (column_of this) max))\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 5 col 50\n\n   (not (column_equals (column_of this) max))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "column_equals": 1,
                "column_of": 1,
                "max": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects downward.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color except O upward",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Reorder all the objects vertically to achieve reverse alphabetical order based on their color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) Y))\n        (apply (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) G))\n        (apply (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) B))\n        (apply (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) F))\n        (apply (move_node down))\n    )\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) X))\n        (apply (move_node down))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 12,
                "filter": 6,
                "color_equals": 6,
                "color_of": 6,
                "Y": 1,
                "apply": 6,
                "move_node": 6,
                "down": 6,
                "R": 1,
                "G": 1,
                "B": 1,
                "F": 1,
                "X": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects to form vertical stripes according to their colors.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) G)\n        )\n        (apply\n            (move_node_max up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "filter": 3,
                "color_equals": 3,
                "color_of": 3,
                "R": 1,
                "apply": 3,
                "move_node_max": 3,
                "down": 2,
                "B": 1,
                "G": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects one step downwards in reverse order of size.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 2)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 4)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 5)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 7)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 10)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 6,
                "vars": 6,
                "this": 12,
                "filter": 6,
                "size_equals": 6,
                "size_of": 6,
                "2": 1,
                "apply": 6,
                "move_node": 6,
                "down": 6,
                "3": 1,
                "4": 1,
                "5": 1,
                "7": 1,
                "10": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one row down cyclically.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        }
    ],
    "task_id": "beb8660c"
}