{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 14230,
        "prompt_tokens": 5728,
        "total_tokens": 19958,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 11.698967933654785,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nO O A O O O O O O O O O\nO A R A O O O O O O O O\nO O A O O O O O O O O O\nO O O O O O O O O O O O\nO O O O O O O O A O O O\nO O O O O O O A R A O O\nO O O O O O O O A O O O\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O\nR O A O R O O O O O O O\nO R A R O O O O O O O O\nA A R A A O O O O O O O\nO R A R O O O O O O O O\nR O A O R O R O A O R O\nO O O O O O O R A R O O\nO O O O O O A A R A A O\nO O O O O O O R A R O O\nO O O O O O R O A O R O\nO O O O O O O O O O O O\nO O O O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nO O O C O O O O O O O O\nO O C F C O O O O O O O\nO O O C O O O O O O O O\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nO O O O O O O O O O O O\nO O O O O O O O C O O O\nO O O O O O O C F C O O\nO O O O O O O O C O O O\nO O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O\nO F O C O F O O O O O O\nO O F C F O O O O O O O\nO C C F C C O O O O O O\nO O F C F O O O O O O O\nO F O C O F O O O O O O\nO O O O O O O O O O O O\nO O O O O O F O C O F O\nO O O O O O O F C F O O\nO O O O O O C C F C C O\nO O O O O O O F C F O O\nO O O O O O F O C O F O\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 75,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move every R object one step toward the neighboring A object, then recolor the objects of size 1 with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) A)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "neighbor_of": 1,
                "A": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects that are neighbors of objects of color different than 'O' to color 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of other) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Fill in the color R in between alternating neighboring objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (and (color_equals (color_of this) A) (color_equals (color_of other) A))\n                    (and (color_equals (color_of this) C) (color_equals (color_of other) C))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 5,
                "filter": 1,
                "and": 3,
                "neighbor_of": 1,
                "or": 1,
                "color_equals": 4,
                "color_of": 4,
                "A": 2,
                "C": 2,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Surround certain objects with objects of a different color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (neighbor_of this other)\n                (and\n                    (size_equals (size_of this) 1)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "or": 1,
                "neighbor_of": 1,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "5": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects that contain 'R' or 'F' to 'R' or 'F' respectively, and then add borders of the same color around each of these objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (add_border (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 1,
                "filter": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 3,
                "R": 1,
                "F": 1,
                "apply": 1,
                "add_border": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Insert red color in every possible cell around every non-red object.",
            "code": "(do\n     (rule\n         (vars (this other))\n         (filter\n             (not (color_equals (color_of this) R))\n         )\n         (apply\n             (insert 0 top_left this)\n             (insert 0 top this)\n             (insert 0 top_right this)\n             (insert 0 left this)\n             (insert 0 right this)\n             (insert 0 bottom_left this)\n             (insert 0 bottom this)\n             (insert 0 bottom_right this))\n     )\n )",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 8 col 33\n\n             (insert 0 top_left this)\n                                ^\nExpected one of: \n\t* RELATIVE_POSITION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 10,
                "other": 1,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "insert": 8,
                "0": 8,
                "top_left": 1,
                "top": 1,
                "top_right": 1,
                "left": 1,
                "right": 1,
                "bottom_left": 1,
                "bottom": 1,
                "bottom_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all non-black objects in the 1-cell-border towards the center and update their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of this) A)\n                    (color_equals (color_of this) C)\n                    (color_equals (color_of this) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of this) F)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "or": 1,
                "color_equals": 3,
                "color_of": 3,
                "A": 1,
                "C": 1,
                "F": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the objects that share color with their neighboring objects, in all directions, overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) (color_of other))\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend each A node towards its neighboring R node, or (if applicable) extend each C node towards its neighboring F node, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 8,
                "filter": 2,
                "and": 2,
                "color_equals": 4,
                "color_of": 4,
                "A": 1,
                "neighbor_of": 2,
                "R": 1,
                "apply": 2,
                "extend_node": 2,
                "direction_of": 2,
                "false": 2,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the neighboring cells of A and C to R and F respectively, then extend vertically towards the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 3,
                "filter": 2,
                "or": 2,
                "color_equals": 4,
                "color_of": 5,
                "A": 1,
                "C": 1,
                "apply": 2,
                "update_color": 1,
                "R": 1,
                "F": 1,
                "extend_node": 1,
                "down": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of maximum size to all four sides (up, down, left, and right) and recolor them to R, then do the same for cyan and recolor them to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) max)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (neighbor_of this other)\n                (size_equals (size_of other) max)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 18 col 17\n\n                (size_equals (size_of other) max)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 5,
                "filter": 2,
                "size_equals": 2,
                "size_of": 2,
                "max": 2,
                "apply": 2,
                "move_node": 1,
                "up": 1,
                "update_color": 2,
                "R": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "C": 1,
                "neighbor_of": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each A or C object, move the surrounding objects diagonally towards it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) C)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 5,
                "filter": 1,
                "and": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "C": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that have a different color than the one beside them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) (color_of other)))\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the neighboring positions of every R object with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of other this)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 2,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects and their neighbors with alternating colors R and F starting with the current color of each object.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter)\n        (apply\n            (update_color (color_of this))\n            (move_node_max (direction_of other))\n            (update_color R)\n            (move_node_max (direction_of this))\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 2,
                "filter": 1,
                "apply": 1,
                "update_color": 3,
                "color_of": 1,
                "move_node_max": 2,
                "direction_of": 2,
                "R": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color other than 'O' one step to a neighboring location currently occupied by color 'O' and then recolor all neighbors of 'R' to red and all neighbors of 'F' to fuchsia.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) F)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 8,
                "filter": 3,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "apply": 3,
                "move_node_max": 1,
                "direction_of": 1,
                "and": 2,
                "R": 2,
                "neighbor_of": 2,
                "update_color": 2,
                "F": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 towards the neighboring object of size 5 and recolor them to color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 5)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "5": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different from 'O', toward neighboring objects of color 'O', if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    ) \n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) O)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all 'R' or 'F' colored objects until they hit another object, add 'R' or 'F' border to their neighbors, and update neighbor color to 'R' or 'F'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (color_equals (color_of this) F)\n            )\n        )\n        (apply\n            (extend_node (direction_of this) true)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (add_border (color_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 7,
                "filter": 2,
                "or": 2,
                "color_equals": 4,
                "color_of": 6,
                "R": 2,
                "F": 2,
                "apply": 2,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1,
                "and": 1,
                "neighbor_of": 1,
                "add_border": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the nearest object of size 3, and then recolor the moved object to R or F depending on the nearest object's original color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 3)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 5,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "3": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the neighbor cells around cells of color A to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "A": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are neighbors of the objects of colors A or C, making them alternate between the two colors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                )\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 7,
                "filter": 1,
                "or": 1,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 2,
                "color_of": 3,
                "A": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O towards R, and recolor all objects of color C to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "neighbor_of": 1,
                "R": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "C": 1,
                "update_color": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects towards their neighboring object of size 3.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 3)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all cells adjacent to objects of color other.",
            "code": "(library (program (do (rule (vars (this other)) (filter (neighbor_of this other)) (apply (update_color (color_of other)))))))",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'l' in the current parser context, at line 1 col 2\n\n(library (program (do (rule (vars (this o\n ^\nExpected one of: \n\t* DO\n",
            "token_counts": {
                "library": 1,
                "program": 1,
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move diagonal neighbors of objects of size 1 to the size 1 object next to them, then color the objects red.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of other) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (size_equals (size_of this) 1))\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "neighbor_of": 1,
                "not": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object which is its neighbor, until they hit another object, then recolor them to R or F alternatively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of shape enclosed and recolor them to color F.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (shape_equals (shape_of this) enclosed)\n        )\n        (apply\n            (move_node_next open) \n            (update_color F)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '_' in the current parser context, at line 8 col 23\n\n            (move_node_next open) \n                      ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "enclosed": 1,
                "apply": 1,
                "move_node_next": 1,
                "open": 1,
                "update_color": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1, where the neighboring object is of a different color, towards that neighboring object and update the color to R. Extend other larger objects covering the newly current position of the object of size 1 without overlap.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (not (color_equals (color_of this) (color_of other)))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (size_equals (size_of this) 1))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (neighbor_of this other)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 7,
                "other": 7,
                "filter": 2,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "not": 2,
                "color_equals": 1,
                "color_of": 2,
                "neighbor_of": 2,
                "apply": 2,
                "move_node": 1,
                "direction_of": 2,
                "update_color": 1,
                "R": 1,
                "extend_node": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are neighbors of objects of size 1 in the direction of those objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (size_equals (size_of other) 1)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all 'A' objects and their neighboring 'R' objects to red, and all 'C' objects and their neighboring 'F' objects to fuchsia.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of this) R)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (or\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) C)\n                    (color_equals (color_of this) F)\n                )\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of this) R)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "other": 6,
                "filter": 2,
                "or": 2,
                "color_equals": 6,
                "color_of": 6,
                "A": 2,
                "and": 2,
                "neighbor_of": 2,
                "R": 2,
                "apply": 2,
                "update_color": 2,
                "C": 2,
                "F": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color A horizontally towards the color R, and move all objects of color C horizontally towards the color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 8,
                "filter": 2,
                "and": 4,
                "color_equals": 4,
                "color_of": 4,
                "A": 1,
                "neighbor_of": 2,
                "R": 1,
                "apply": 2,
                "move_node": 2,
                "direction_of": 2,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to another object of a different color, with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 (single cells) to the opposite direction from the center of the grid according to their neighboring object's type, and then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color R if they are neighbors to an object of color A, and then extend the objects of color F horizontally or vertically.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (extend_node down false)\n            (extend_node right false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "apply": 2,
                "update_color": 1,
                "R": 1,
                "F": 1,
                "extend_node": 2,
                "down": 1,
                "false": 2,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it, then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend red colored objects towards blue ones without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) B)\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    ))\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 14 col 1\n\n)\n^\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "B": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For objects of size 1 and color other than R, recolor them to R if they are neighbors of an object of size 5.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (and\n                        (size_equals (size_of other) 5)\n                        (not (color_equals (color_of this) R))\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 3,
                "filter": 1,
                "and": 3,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "5": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend objects of size 1 towards their neighboring objects of a different color, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of this) (color_of other)))\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward objects of color O (empty spaces), if they are neighbors of them, and then recolor them to color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 3 to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to the nearest object of color 'A' if they are neighbors of 'A'. After moving, recolor the object to color 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "A": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all \u2018R\u2019 objects next to 'A' neighbors and all \u2018F\u2019 objects next to 'C' neighbors left and right diagonal respectively. Replace those objects to respective colors ",
            "code": "(do (rule (vars (this other)) (filter (and (color_equals (color_of this) R) (neighbor_of this other) (color_equals (color_of other) A))) (apply (move_node_max left))) (rule (vars (this other)) (filter (and (color_equals (color_of this) F) (neighbor_of this other) (color_equals (color_of other) C))) (apply (move_node_max right))) (rule (vars (this other)) (filter (and (color_equals (color_of this) R) (neighbor_of this other) (color_equals (color_of other) A))) (apply (update_color R))) (rule (vars (this other)) (filter (and (color_equals (color_of this) F) (neighbor_of this other) (color_equals (color_of other) C))) (apply (update_color F))))",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 1 col 102\n\nor_of this) R) (neighbor_of this other) (color_equals (color_of other) A))) (app\n                                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 4,
                "vars": 4,
                "this": 12,
                "other": 12,
                "filter": 4,
                "and": 4,
                "color_equals": 8,
                "color_of": 8,
                "R": 3,
                "neighbor_of": 4,
                "A": 2,
                "apply": 4,
                "move_node_max": 2,
                "left": 1,
                "F": 3,
                "C": 2,
                "right": 1,
                "update_color": 2
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all neighbors of color A to color R and neighbors of color C to color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (if (color_equals (color_of other) A)\n                (update_color R)\n                (if (color_equals (color_of other) C)\n                    (update_color F)\n                    (noop)\n                )\n            )\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'i' in the current parser context, at line 8 col 14\n\n            (if (color_equals (color_of other) A)\n             ^\nExpected one of: \n\t* TR_MIRROR\n\t* TR_MOVE_NODE\n\t* TR_NOOP\n\t* TR_MOVE_NODE_MAX\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_FILL_RECTANGLE\n\t* TR_ROTATE_NODE\n\t* TR_EXTEND_NODE\n\t* TR_ADD_BORDER\n\t* TR_FLIP\n\t* TR_INSERT\n\t* TR_UPDATE_COLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "if": 2,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "update_color": 2,
                "R": 1,
                "C": 1,
                "F": 1,
                "noop": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color A and C one step in all four cardinal directions and then recolor them to colors R and F respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (move_node down)\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "apply": 2,
                "move_node": 2,
                "up": 1,
                "update_color": 2,
                "R": 1,
                "C": 1,
                "down": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Fill all hollow rectangles with R, if they are neighbors of an object of color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (shape_equals (shape_of this) hollow_rectangle)\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'h' in the current parser context, at line 6 col 47\n\n          (shape_equals (shape_of this) hollow_rectangle)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* SHAPE\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "hollow_rectangle": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "fill_rectangle": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O and of size 1 toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (not (color_equals (color_of this) O))\n                    (and\n                        (neighbor_of this other)\n                        (color_equals (color_of other) O)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 3,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move objects of size 1 toward objects of size 3 if they are neighbors of each other.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) 3)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 2,
                "size_of": 2,
                "1": 1,
                "neighbor_of": 1,
                "3": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O one step towards the nearest object of color O, and then recolor them to different colors alternately.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 3,
                "filter": 2,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "O": 1,
                "neighbor_of": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O one step towards their nearest neighboring object, then recolor them to R if they are A and to F if they are C.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) C)\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 3,
                "vars": 3,
                "this": 6,
                "other": 2,
                "filter": 3,
                "not": 1,
                "color_equals": 3,
                "color_of": 3,
                "O": 1,
                "apply": 3,
                "move_node": 1,
                "direction_of": 1,
                "A": 1,
                "update_color": 2,
                "R": 1,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of size 3 towards the closest R or F in the same row or column, overlapping allowed.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (extend_node (direction_of other) true)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "F": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "true": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 one step to all 8 directions and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n            (move_node up_left)\n            (move_node up_right)\n            (move_node down_left)\n            (move_node down_right)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 8,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "up_left": 1,
                "up_right": 1,
                "down_left": 1,
                "down_right": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it. Then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) O)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change all objects that are neighbors of another object to R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Relocate adjacent objects of color different than their adjacent color to the empty positions around them if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it, and then recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) O)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all objects of color other than O and R to the maximum in all directions, without overlapping, and then color them F",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (not (color_equals (color_of this) R))\n            )\n        )\n        (apply\n            (extend_node up false)\n            (extend_node down false)\n            (extend_node left false)\n            (extend_node right false)\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 1,
                "filter": 1,
                "and": 1,
                "not": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "R": 1,
                "apply": 1,
                "extend_node": 4,
                "up": 1,
                "false": 4,
                "down": 1,
                "left": 1,
                "right": 1,
                "update_color": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the red objects to the neighbors of the largest object, and extend them right until the edge.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (size_equals (size_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_node right)\n            (extend_node right false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "neighbor_of": 1,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "apply": 1,
                "move_node": 1,
                "right": 2,
                "extend_node": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Extend all the objects towards the closest object of color A without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) A)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "A": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object of color A or C one step diagonally outward and update their colors to R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) A)\n                (color_equals (color_of this) C)\n            )\n        )\n        (apply\n            (move_node up_left)\n            (update_color (color_equals (color_of this) A) (if (color_of this) A R F))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 12 col 28\n\n            (update_color (color_equals (color_of this) A) (if (col\n                           ^\nExpected one of: \n\t* COLOR_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "filter": 1,
                "or": 1,
                "color_equals": 3,
                "color_of": 4,
                "A": 3,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "up_left": 1,
                "update_color": 1,
                "if": 1,
                "R": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it, and recolor them to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) O)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor any object neighboring an object R with color R, and any object neighboring an object C with color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are neighbors of objects of detail R towards them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transform all isolated objects so that each object and its diagonal neighbors resemble a cross or 'plus' pattern.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 one step in all available directions, excluding the size 1 objects themselves, and then recolor them to color R or F.",
            "code": "(do\n  (rule\n    (vars (this other))\n    (filter\n      (and\n        (size_equals (size_of this) 1)\n        (not (size_equals (size_of other) 1))\n        (neighbor_of this other)\n      )\n    )\n    (apply\n      (move_node (direction_of other))\n      (update_color (color_of other))\n    )\n  )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 9\n\n        (neighbor_of this other)\n        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 5,
                "filter": 1,
                "and": 1,
                "size_equals": 2,
                "size_of": 2,
                "1": 2,
                "not": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward F, if they are neighbors. Then, recolor all objects to red.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of this) F)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (color_equals (color_of this) O)))\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 3,
                "filter": 2,
                "and": 2,
                "not": 2,
                "color_equals": 3,
                "color_of": 3,
                "O": 2,
                "neighbor_of": 1,
                "F": 1,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 towards objects with color different from O, which is their neighbor. Then update the color of all objects to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 2,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O, which are neighbors of objects of color A, R, or C, one step away from them, then recolor them to color R or F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (or\n                    (neighbor_of this other)\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 10 col 21\n\n                    (color_equals (color_of other) R)\n                    ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 7,
                "filter": 1,
                "and": 1,
                "color_equals": 4,
                "color_of": 5,
                "O": 1,
                "or": 1,
                "neighbor_of": 1,
                "A": 1,
                "R": 1,
                "C": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Replace neighbors of objects with a different color with objects of the color of the neighboring objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) (color_of other)))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 3,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step toward each of its neighboring objects and recolor to R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Update the color of all objects to R if they are neighbors of the color A, otherwise update their color to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) R))\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 2,
                "filter": 2,
                "neighbor_of": 1,
                "apply": 2,
                "update_color": 2,
                "R": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color F and R one step to their right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or (color_equals (color_of this) F) (color_equals (color_of this) R)))\n        (apply\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 2,
                "F": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the border objects to R and the non-border objects of the same color to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or \n                    (shape_equals (shape_of this) enclosed) \n                    (shape_equals (shape_of this) enclosed)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) F)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 2,
                "filter": 2,
                "and": 1,
                "neighbor_of": 1,
                "or": 1,
                "shape_equals": 2,
                "shape_of": 2,
                "enclosed": 2,
                "apply": 2,
                "update_color": 2,
                "R": 2,
                "color_equals": 1,
                "color_of": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all cells that are neighbors to other cells of different color to color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) (color_of other)))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move each object of color A (in PAIR 1) and of color C (in PAIR 2) one step toward each of its neighboring R (in PAIR 1) and F (in PAIR 2).",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) A)\n                    (color_equals (color_of this) C)\n                )\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 11 col 17\n\n                (or\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 5,
                "filter": 1,
                "and": 1,
                "or": 2,
                "color_equals": 4,
                "color_of": 4,
                "A": 1,
                "C": 1,
                "neighbor_of": 1,
                "R": 1,
                "F": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects to their neighboring 'A' or 'C' objects, and recolor them to 'R' or 'F' respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (or\n                    (color_equals (color_of other) A)\n                    (color_equals (color_of other) C)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 6,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 3,
                "A": 1,
                "C": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O to the nearest neighboring location with an object of color O, and then color those objects R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all neighbors of R to R, and all neighbors of C to F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (or (and (color_equals (color_of other) R) (update_color R)) (and (color_equals (color_of other) C) (update_color F)))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'o' in the current parser context, at line 8 col 14\n\n            (or (and (color_equals (color_of other) R\n             ^\nExpected one of: \n\t* TR_MIRROR\n\t* TR_MOVE_NODE\n\t* TR_NOOP\n\t* TR_MOVE_NODE_MAX\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_FILL_RECTANGLE\n\t* TR_ROTATE_NODE\n\t* TR_EXTEND_NODE\n\t* TR_ADD_BORDER\n\t* TR_FLIP\n\t* TR_INSERT\n\t* TR_UPDATE_COLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 4,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "or": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "update_color": 2,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different than O, toward the object of color O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color O, towards the object of color different than O, if they are neighbors of it.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) O)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 2,
                "neighbor_of": 1,
                "not": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of any color, except the specified central color, towards the objects of the central color, as long as they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of this) (color_of other)))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all adjacent objects to R if they're next to objects of color A or F if they're next to objects of color C.",
            "code": "(do\n    (rule \n        (vars (this other)) \n        (filter \n            (and \n                (neighbor_of this other) \n                (color_equals (color_of other) A) \n            ) \n        ) \n        (apply \n            (update_color R) \n        ) \n    ) \n    (rule \n        (vars (this other)) \n        (filter \n            (and \n                (neighbor_of this other) \n                (color_equals (color_of other) C) \n            ) \n        ) \n        (apply \n            (update_color F) \n        ) \n    ) \n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 6,
                "filter": 2,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "apply": 2,
                "update_color": 2,
                "R": 1,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color F and move nodes alternately to nearest neighbors",
            "code": "(do\n  (rule\n    (vars (this))\n    (filter (or\n      (not (color_equals (color_of this) O))\n      (not (color_equals (color_of this) this))))\n    (apply\n      (update_color F)))\n  (rule\n    (vars (this other))\n    (filter\n      (neighbor_of this other))\n    (apply\n     (move_node (direction_of other)))))\n",
            "can_parse": false,
            "parse_error_message": "No terminal matches 't' in the current parser context, at line 6 col 42\n\n     (not (color_equals (color_of this) this))))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* FCOLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "or": 1,
                "not": 2,
                "color_equals": 2,
                "color_of": 2,
                "O": 1,
                "apply": 2,
                "update_color": 1,
                "F": 1,
                "other": 3,
                "neighbor_of": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move and recolor objects with neighbors of different color to make them in a symmetric pattern around the original objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (not (color_equals (color_of this) (color_of other)))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the neighboring objects of objects A and C to R and F respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) A)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) C)\n            )\n        )\n        (apply\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 6,
                "filter": 2,
                "and": 2,
                "neighbor_of": 2,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "apply": 2,
                "update_color": 2,
                "R": 1,
                "C": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Rotate all objects of size 1 by 90 degrees, and then recolor them to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (rotate_node 90)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "rotate_node": 1,
                "90": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all R and F colored objects towards diagonally neighbor A or C colored objects respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) F)\n                )\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) A)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 5,
                "filter": 1,
                "and": 2,
                "or": 2,
                "color_equals": 4,
                "color_of": 4,
                "R": 1,
                "F": 1,
                "neighbor_of": 1,
                "A": 1,
                "C": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 toward the object of maximum size, without overlapping.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (extend_node (direction_of other) false)\n        ) \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "extend_node": 1,
                "direction_of": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color A or C to the nearest cell with color R or F respectively, if they are neighbors.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) A)\n                    (color_equals (color_of this) C)\n                )\n                (and\n                    (neighbor_of this other)\n                    (or\n                        (color_equals (color_of other) R)\n                        (color_equals (color_of other) F)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "other": 5,
                "filter": 1,
                "and": 2,
                "or": 2,
                "color_equals": 4,
                "color_of": 4,
                "A": 1,
                "C": 1,
                "neighbor_of": 1,
                "R": 1,
                "F": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects such that neighboring objects have the same color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of this) R)\n            )\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "R": 1,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R or F to all its neighboring A or C color objects, respectively.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of this) R)\n                    (color_equals (color_of this) F)\n                )\n                (or\n                    (and\n                        (color_equals (color_of this) R)\n                        (neighbor_of this other)\n                        (color_equals (color_of other) A)\n                    )\n                    (and\n                        (color_equals (color_of this) F)\n                        (neighbor_of this other)\n                        (color_equals (color_of other) C)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 14 col 25\n\n                        (color_equals (color_of other) A)\n                        ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 7,
                "other": 6,
                "filter": 1,
                "and": 3,
                "or": 2,
                "color_equals": 6,
                "color_of": 6,
                "R": 2,
                "F": 2,
                "neighbor_of": 2,
                "A": 1,
                "C": 1,
                "apply": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects by changing each neighbor's color to the neighbor's current color.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (update_color (color_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 3,
                "filter": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "color_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects adjacent to 'A' to color 'R', and then move all 'R' objects one step in all directions.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n            (color_equals (color_of other) A)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n            (move_node down)\n            (move_node left)\n            (move_node right)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 6 col 13\n\n            (color_equals (color_of other) A)\n            ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "neighbor_of": 1,
                "color_equals": 2,
                "color_of": 2,
                "A": 1,
                "apply": 2,
                "update_color": 1,
                "R": 2,
                "move_node": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all 'A' and 'C' objects to the nearest 'R' and 'F' respectively, then alternate states at each movement.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and (or (color_equals (color_of this) A) (color_equals (color_of this) C)) (neighbor_of this other))\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and (or (color_equals (color_of this) A) (color_equals (color_of this) C)) (neighbor_of this other))\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "other": 6,
                "filter": 2,
                "and": 2,
                "or": 2,
                "color_equals": 4,
                "color_of": 4,
                "A": 2,
                "C": 2,
                "neighbor_of": 2,
                "apply": 2,
                "move_node": 2,
                "direction_of": 2,
                "update_color": 2,
                "R": 1,
                "F": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects one step in all eight directions",
            "code": "(do (rule (vars (this)) (filter) (apply (move_node up) (move_node down) (move_node left) (move_node right) (move_node up_left) (move_node up_right) (move_node down_left) (move_node down_right))))",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 8,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "up_left": 1,
                "up_right": 1,
                "down_left": 1,
                "down_right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1 in any direction until they hit another object or the border. Recolor all resulting objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (size_equals (size_of this) 1))\n        (apply (move_node_max up) (move_node_max down) (move_node_max left) (move_node_max right) (update_color R))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node_max": 4,
                "up": 1,
                "down": 1,
                "left": 1,
                "right": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects with neighbors of color R or F one step in the direction towards them.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (or\n                    (color_equals (color_of other) R)\n                    (color_equals (color_of other) F)\n                )\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 5,
                "filter": 1,
                "and": 1,
                "or": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "F": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of size 1, which are neighbors to objects of color different from O, in the direction of those objects.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (and\n                    (neighbor_of this other)\n                    (not (color_equals (color_of other) O))\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Add borders of color R around objects of color A and move them in place of color R. Similarly, add borders of color F around objects of color C and move them in place of color F.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) A)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (add_border R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) C)\n                (color_equals (color_of other) F)\n            )\n        )\n        (apply\n            (add_border F)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 4,
                "filter": 2,
                "and": 2,
                "color_equals": 4,
                "color_of": 4,
                "A": 1,
                "R": 2,
                "apply": 2,
                "add_border": 2,
                "C": 1,
                "F": 2
            }
        }
    ],
    "task_id": "0962bcdd"
}