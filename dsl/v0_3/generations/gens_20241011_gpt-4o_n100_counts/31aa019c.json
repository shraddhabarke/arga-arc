{
    "model": "gpt-4o-2024-05-13",
    "usage": {
        "completion_tokens": 11758,
        "prompt_tokens": 5774,
        "total_tokens": 17532,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "request_time": 8.657222032546997,
    "n_requested": 100,
    "prompt_messages": [
        {
            "role": "system",
            "content": "You are an assistant chatbot with human-like perception, reasoning and learning capabilities.\nYou can solve tasks concisely, efficiently, and moreover, correctly.\nLet's engage in perception- and logic-based tasks.\nYou only output source code.\nNo explanations or any other text.\nOnly code."
        },
        {
            "role": "user",
            "content": "You are an efficient assistant for logical reasoning and code generation.\nYou will help me solve a visual perception and reasoning task.\nI will first provide you with the definition of a Domain Specific Language you will use for writing a solution for the task.\nI will then present you with the description of the task that you will be tested in.\nYou will then respond the queries I make regarding the solution of the task.\n\n\nThis is the definition of the DSL you will use to solve the task.\nIt is given as a context-free grammar in the EBNF format used by the Lark parser generator, with some informative comments about the semantics.\nYou will return a string that is parseable by the `program` non-terminal of the grammar.\n\n```\nlibrary: \"(\" program* \")\"\n\n// Rules are executed one after another, in the order they appear.\n// There could be no rules, in which case the program does nothing.\nprogram: \"(\" \"do\" rule* \")\"\n\n// First, it declares the variables that will be used in the filter and transform expressions.\n// Second, it defines a filter expression that an object must satisfy in order to be transformed.\n// Then, it defines a list of transforms that will be applied objects that satisfy the filter expression.\nrule: \"(\" \"rule\" decl filter xform_list \")\"\n\n// The `vars` declaration specifies the names of the variables that will be used in the filter and transform expressions.\n// The `this` variable is always declared, and it refers to the object that is being transformed.\n// There could also be an additional optional variable `other` that refers to another object in the grid,\n// which is not being transformed, but is used in the filter expression.\ndecl: \"(\" \"vars\" \"(\" VAR_THIS VAR_OTHER? \")\" \")\"\n\n// A filter is a predicate over the objects in the grid.\n// If no filter is given, then all the objects are selected.\nfilter: \"(\" \"filter\" filter_expr? \")\"\n\n// It can be a primitive filter operation, or a boolean expression using the `and`, `or`, and `not` connectives.\n// IMPORTANT: The `and` and `or` connectives are strictly binary, so to take the conjunction or disjunction \n// of more than two expressions, the binary connectives must be nested.\n// AGAIN, the `and` and `or` connectives are not variadic, so the following is not allowed:\n// (and true true false)\n// Instead, the following must be used:\n// (and true (and true false))\n// The `not` connective is unary as expected.\n// The objects that are transformed are the ones that satisfy the filter expression.\nfilter_expr: filter_prim\n           | \"(\" OP_AND filter_expr filter_expr \")\"   \n           | \"(\" OP_OR filter_expr filter_expr \")\"\n           | \"(\" OP_NOT filter_expr \")\"\n\nfilter_prim: \"(\" COLOR_EQ fcolor_expr fcolor_expr \")\"           \n           | \"(\" SIZE_EQ size_expr size_expr \")\"                \n           | \"(\" HEIGHT_EQ height_expr height_expr \")\"          \n           | \"(\" WIDTH_EQ width_expr width_expr \")\"             \n           | \"(\" DEGREE_EQ degree_expr degree_expr \")\"          \n           | \"(\" SHAPE_EQ shape_expr shape_expr \")\"             \n           | \"(\" COLUMN_EQ column_expr column_expr \")\"         \n           | \"(\" NEIGHBOR_OF VAR VAR \")\"      // true if the two objects are neighbors\n\n\n// Transforms are applied one after another, in the order they appear.\nxform_list: \"(\" \"apply\" xform+ \")\"\n\n// A single transform is applied to all the objects that are bound to the `this` variable. \n// The transform is applied to each such object independently and simultaneously.\nxform:     \"(\" TR_UPDATE_COLOR color_expr \")\"                          // change this object color to the given color \n         | \"(\" TR_MOVE_NODE direction_expr \")\"                         // move this object in the given direction\n         | \"(\" TR_EXTEND_NODE direction_expr OVERLAP \")\"               // extend (move while leaving a trail) this object in the given direction\n                                                                  // if overlap is false, then the object is extended until it hits another object,\n                                                                  // otherwise it is extended until the edge of the grid.\n         | \"(\" TR_MOVE_NODE_MAX direction_expr \")\"                     // move this object until it hits another object, in the given direction\n         | \"(\" TR_ROTATE_NODE ROT_ANGLE \")\"                       // rotate this object by the given angle\n         | \"(\" TR_ADD_BORDER color_expr \")\"                            // color this exterior pixels of the object with the given color\n         | \"(\" TR_FILL_RECTANGLE color_expr OVERLAP \")\"                // color this interior of a hollow rectangle with the given color\n         | \"(\" TR_HOLLOW_RECTANGLE color_expr \")\"                      // color this interior of a solid rectangle with the given color\n         | \"(\" TR_MIRROR mirror_expr \")\"\n         | \"(\" TR_FLIP SYMMETRY_AXIS \")\"                          // flip this object with respect to the given axis\n         | \"(\" TR_INSERT OBJECT_ID img_pts_expr RELATIVE_POSITION \")\" // insert a copy of this object at the position of the given object\n         | \"(\" TR_NOOP \")\"                                        // do nothing\n\nfcolor_expr: FCOLOR\n           | \"(\" COLOR_OF VAR \")\"\n\ncolor_expr: COLOR\n          | \"(\" COLOR_OF VAR \")\"\n\nsize_expr: SIZE\n         | \"(\" SIZE_OF VAR \")\"\n\nheight_expr: HEIGHT\n           | \"(\" HEIGHT_OF VAR \")\"\n\nwidth_expr: WIDTH\n          | \"(\" WIDTH_OF VAR \")\"\n\ndegree_expr: DEGREE\n           | \"(\" DEGREE_OF VAR \")\" \n\nshape_expr: SHAPE\n          | \"(\" SHAPE_OF VAR \")\"\n\ncolumn_expr: COLUMN\n           | \"(\" COLUMN_OF VAR \")\"\n\ndirection_expr: DIRECTION\n              | \"(\" DIRECTION_OF VAR \")\"\n\nimg_pts_expr: IMAGE_POINTS\n            | \"(\" IMAGE_POINTS_OF VAR \")\"\n\nmirror_expr: \"(\" MIRROR_AXIS_OF VAR \")\"\n\nOBJECT_ID: /[0-9]+/\nFCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nSIZE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // size of objects\nDEGREE: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // degree of objects\nHEIGHT: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // height of objects\nWIDTH: \"min\" | \"max\" | \"even\" | \"odd\" | /[0-9]+/  // width of objects\nCOLUMN: \"center\" | \"even\" | \"odd\" | /[0-9]+/  // column of objects\nSHAPE: \"square\" | \"enclosed\"  // shape of objects\n\nDIRECTION: \"up\"\n         | \"down\"\n         | \"left\"\n         | \"right\"\n         | \"up_left\"\n         | \"up_right\"\n         | \"down_left\"\n         | \"down_right\"\n\nSYMMETRY_AXIS: \"vertical\" | \"horizontal\" | \"diagonal_left\" | \"diagonal_right\"\n\n// The angle of clockwise rotation, in degrees.\nROT_ANGLE: \"0\" \n         | \"90\" \n         | \"180\" \n         | \"270\"\n\nCOLOR: \"O\" // black\n      | \"B\" // blue\n      | \"R\" // red\n      | \"G\" // green\n      | \"Y\" // yellow\n      | \"X\" // grey\n      | \"F\" // fuchsia\n      | \"A\" // orange\n      | \"C\" // cyan  \n      | \"W\" // brown\n\nOVERLAP: BOOL\n\nBOOL: \"true\" | \"false\"\n\nIMAGE_POINTS: \"top\" | \"bottom\" | \"left\" | \"right\" | \"top_left\" | \"top_right\" | \"bottom_left\" | \"bottom_right\" \n\nRELATIVE_POSITION: \"source\"\n                 | \"target\"\n                 | \"middle\"\n\nVAR: VAR_THIS | VAR_OTHER\nVAR_THIS: \"this\"\nVAR_OTHER: \"other\"\n\nOP_AND: \"and\"\nOP_OR: \"or\"\nOP_NOT: \"not\"\n\nCOLOR_OF: \"color_of\"\nSIZE_OF: \"size_of\"\nHEIGHT_OF: \"height_of\"\nWIDTH_OF: \"width_of\"\nDEGREE_OF: \"degree_of\"\nSHAPE_OF: \"shape_of\"\nCOLUMN_OF: \"column_of\"\nDIRECTION_OF: \"direction_of\"\nIMAGE_POINTS_OF: \"img_pts_of\"\nMIRROR_AXIS_OF: \"mirror_axis_of\"\n\nCOLOR_EQ: \"color_equals\"\nSIZE_EQ: \"size_equals\"\nDEGREE_EQ: \"degree_equals\"\nHEIGHT_EQ: \"height_equals\"\nWIDTH_EQ: \"width_equals\"\nSHAPE_EQ: \"shape_equals\"\nCOLUMN_EQ: \"column_equals\"\nNEIGHBOR_OF: \"neighbor_of\"\n\nTR_UPDATE_COLOR: \"update_color\"\nTR_MOVE_NODE: \"move_node\"\nTR_EXTEND_NODE: \"extend_node\"\nTR_MOVE_NODE_MAX: \"move_node_max\"\nTR_ROTATE_NODE: \"rotate_node\"\nTR_ADD_BORDER: \"add_border\"\nTR_FILL_RECTANGLE: \"fill_rectangle\"\nTR_HOLLOW_RECTANGLE: \"hollow_rectangle\"\nTR_MIRROR: \"mirror\"\nTR_FLIP: \"flip\"\nTR_INSERT: \"insert\"\nTR_NOOP: \"noop\"\n\nCOMMENT: /\\s*/ \";;\" /[^\\n]/*\n\n%import common.WS\n%import common.LCASE_LETTER\n%import common.INT\n%ignore WS\n%ignore COMMENT\n```\n\n\nNow we continue with the visual perception and reasoning task.\nThe input for the task is a small number of pairs of grids of characters.\nThe value of each of the cells of the grids are the colors defined in the DSL, so we can think of grids as images.\nEach pair of images correspond to an input-output example for an unknown program P.\nFor each pair, the program P is evaluated on the image grid and operates on the objects that appear in it.\nThe output of the program is then the output image.\nThe objects in the images are easy and natural to identify for humans, so there is no need to define them explicitly.\nHowever you are able to abstract them correctly, and the DSL is interpreted with the same correct abstraction.\n\n\nNow I will show you some demonstration tasks along with the output you would be expected to produce for each of them.\n\n## DEMONSTRATION TASK 1\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO O O O O R O O\nO R O O O R O R\nO R R O O R O O\nO O O O O O O O\nO R R O O O O O\nO R R O R R O O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO O O O O Y O O\nO Y O O O Y O Y\nO Y Y O O Y O O\nO O O O O O O O\nO Y Y O O O O O\nO Y Y O Y Y O O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O O R O O O O O\nO G O O R O O W O O\nO O G O O O W W O O\nO O G O O O O O O O\nO O O O X O O O O O\nO O O O O O F F F O\nO B O O O O O O O O\nO B B B B O O C C O\nO O O O O O O C O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O Y O O O O O\nO Y O O Y O O Y O O\nO O Y O O O Y Y O O\nO O Y O O O O O O O\nO O O O Y O O O O O\nO O O O O O Y Y Y O\nO Y O O O O O O O O\nO Y Y Y Y O O Y Y O\nO O O O O O O Y O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Recolor all objects to color Y\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter)\\n        (apply\\n            (update_color Y)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 2\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O\nO F F O O O R O\nO F F O O O O O\nO O O O O O O O\nO O O O O O O O\nO O O O O O O O\nO O A O O X X O\nO O O O O O O O\nOUTPUT GRID:\nO O O O O O O O\nO F F R R R R O\nO F F O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O O O O\nO O A O O X X O\nO O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F O O G G G G O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO C C C O O O O O O\nO C C C O O O O A O\nO C C C O O O X O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O Y O G G G G O\nO O F Y O G G G G O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO O F Y O O O O O O\nO C C C O O O O O O\nO C C C A A A A A O\nO C C C X X X X O O\nO O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Extend all the objects of size 1 toward the object of maximum size, without overlapping.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (size_equals (size_of this) 1)\\n                (and\\n                    (neighbor_of this other)\\n                    (size_equals (size_of other) max)\\n                )\\n            )\\n        )\\n        (apply\\n            (extend_node (direction_of other) false)\\n        )    \\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 3\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O O O O O O O\nO O O O O O O G O O\nO O G O O O O G O O\nO O G G O O O G G O\nO O O O O O O O O O\nO G G O O O O O O O\nO G G O O G G G O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O B O O O O G O O\nO O B B O O O G O O\nO O O O O O O G G O\nO O O O O O O O O O\nO G G O O B B B O O\nO G G O O O O O O O\nO O O O O O O O O O\nO O G G O O O G O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O O O O G O O\nO B B O O O O O O C C C O G G O\nO O O O O F O O O O O O O O O O\nO O O O O F O O O O R R O O O O\nO O O O O F O O O O R R O O O O\nO O O O O O O O W O O O O O O O\nO O O A O O O W W O O O X O O O\nO O O A A O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O O O O O O O O O\nO Y O O B O O O G O O O O F F O\nO Y O O O O O O G O O O O F F O\nO Y Y Y O O O O G O O O O O O O\nO O O O O O O O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O O O O B O O\nO O O O O O O O O B B B O B B O\nO B B O O B O O O O O O O O O O\nO O O O O B O O O O O O O O O O\nO O O O O B O O O O R R O O O O\nO O O O O O O O O O R R O O O O\nO O O B O O O O W O O O O O O O\nO O O B B O O W W O O O X O O O\nO O O O O O O W W O O O X X X O\nO O O O O O O O O O O O O O O O\nO O O O O O O O O O Y Y O O O O\nO O O O B O O O B O O O O O O O\nO Y O O B O O O B O O O O F F O\nO Y O O O O O O B O O O O F F O\nO Y Y Y O O O O O O O O O O O O\nO O O O O O O O O O O O O O O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of size 3 one step up, and then recolor them to color B.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this))\\n        (filter\\n            (size_equals (size_of this) 3)\\n        )\\n        (apply\\n            (move_node up)\\n            (update_color B)\\n        )\\n    )\\n)\"\n}\n\n\n## DEMONSTRATION TASK 4\n\n### INPUT\nPAIR 1\nINPUT GRID:\nO O O O R O O O A O\nO B O O O O B O O O\nO O O O O O O O O O\nO O O O X X X O O O\nO O O O X X X O O F\nW O O O O O O O O O\nO O F O O O Y O O O\nO O O O O O O O O O\nO O O O G O O O W O\nO O O O O O O O O O\nOUTPUT GRID:\nO O O O O O O O A O\nO B O O O O O O O O\nO O O O R O B O O O\nO O O O X X X O O O\nO O O O X X X F O O\nW O O O G O Y O O O\nO O F O O O O O O O\nO O O O O O O O O O\nO O O O O O O O W O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nO O O F O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O R O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O O O O O O O C O O O\nG O X X O O O O O O O R\nO O X X O O O O O O Y O\nO O X X O O A O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\nOUTPUT GRID:\nO O O O O O O R O O O O\nO O O O O O O O O Y O O\nO O O O O B O O O O O O\nO O O O O O O O G O O O\nB O O O O G O O O O O A\nO O O O O O R O O O W O\nO O R F O O O O C O O O\nO G X X R O O O O O O O\nO O X X Y O O O O O O O\nO O X X A O O O O O O O\nO F X X O O O O O O O O\nO O O O O Y O O O O O O\n\nPAIR 3\nINPUT GRID:\nO G O O O O O O\nO O O A O O A O\nW O O O W O O O\nO O O O O O O B\nO R O X O F O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\nOUTPUT GRID:\nO G O O O O O O\nO O O O O O A O\nW O O O W O O O\nO O O A O O O B\nO O R X F O O O\nO O O O O O O O\nO G O O F O O G\nO O B O O A O O\n\n### EXPECTED OUTPUT\n{\n    \"nl_description\": \"Move all objects of color different than X, toward the object of color X, if they are neighbors of it.\",\n    \"code\": \"(do\\n    (rule\\n        (vars (this other))\\n        (filter\\n            (and\\n                (not (color_equals (color_of this) X))\\n                (and\\n                    (neighbor_of this other)\\n                    (color_equals (color_of other) X)\\n                )\\n            )\\n        )\\n        (apply\\n            (move_node_max (direction_of other))\\n        )\\n    )\\n)\"\n}\n\n\nNow follows task you will be evaluated on.\nOutput the solution as a JSON object, which should contain both a natural language description of the solution and the solution written in the DSL.\nThe code should be parseable by the DSL grammar.\nThe JSON must have the following structure:\n\n{\n    \"nl_description\": \"TO_BE_FILLED\",\n    \"code\": \"TO_BE_FILLED\"\n}\n\n## TEST TASK\n\nPAIR 1\nINPUT GRID:\nO O O B O O O X O O\nO O O O O O O O O O\nR O O O O R O O O B\nO O B O O O O O O X\nO O C O O O O O O O\nO O O O O O O O O O\nO Y O O O O O O O O\nO X B O B O O O O O\nO C B O O O B O G O\nO O O O O O O G O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nR R R O O O O O O O\nR Y R O O O O O O O\nR R R O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n\nPAIR 2\nINPUT GRID:\nR A A B O G O O O G\nO O O W O O O O G A\nO O O B O O O F O W\nO O O O O O O B O O\nW O O O O O O O O O\nO O O O R O O O G O\nO X O A G O O O B O\nY Y O O O B O O O X\nO O O O O O O X G O\nO O O O Y X O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O R R R O\nO O O O O O R F R O\nO O O O O O R R R O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\n\nPAIR 3\nINPUT GRID:\nF O O O C O O O O O\nO O O O O O O O R C\nO A O O R O X O R O\nO W O B O O O O O O\nO W O O O O O O O B\nO O O O O F O O O O\nO B O A O O O O O O\nO O O O O O O O O O\nO O O O O O G O O O\nO O X O O O O O O O\nOUTPUT GRID:\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O O O O O O\nO O O O O R R R O O\nO O O O O R G R O O\nO O O O O R R R O O\n"
        }
    ],
    "n_valid_json": 100,
    "n_can_parse": 74,
    "completions": [
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the center of the grid, aligning them in a row.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to O and then move all the objects of color R, if they are neighbors of another object of color Y, towards it and then recolor them to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) Y)\n                )\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "O": 2,
                "other": 4,
                "and": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "neighbor_of": 1,
                "Y": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects, then draw a horizontal line of color R at their original Y positions.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (neighbor_of this other)\n        )\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "O": 1,
                "other": 2,
                "neighbor_of": 1,
                "fill_rectangle": 1,
                "R": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the center of the grid in the sixth to eighth rows and first to third columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node": 2,
                "down": 2,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row for the top two input grids and move them to the second to bottom row for the bottom grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to form a horizontal line at the bottom, then recolor them to the background color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 5,
                "down": 5,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row and in the bottom row align them horizontally.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 10,
                "down": 10
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row, maintaining their column position, and then recolor the entire bottom row and neighboring rows with R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (fill_rectangle R false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 2,
                "move_node": 1,
                "down": 1,
                "fill_rectangle": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rows having object of color R to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all R-colored objects within the bottom half of the grid to the center row, and make a row of 'R' in the middle of the grid",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and (color_equals (color_of this) R) \n                     (neighbor_of this other) \n                     (and (or (column_equals (column_of this) [5])) \n                          (or (height_equals (height_of this) even)))))\n        )\n        (apply\n            (move_node up)\n            (update_color R)))\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 22\n\n                     (and (or (column_equals (column_of this)\n                     ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "filter": 1,
                "or": 3,
                "and": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "neighbor_of": 1,
                "other": 1,
                "column_equals": 1,
                "column_of": 1,
                "[5]": 1,
                "height_equals": 1,
                "height_of": 1,
                "even": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all color from the objects, and then color the middle row of the grid red.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) center)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "O": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the top edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the bottom two rows up one row except the objects of color G.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) G))\n                (and\n                    (or\n                        (column_equals (column_of this) 9)\n                        (column_equals (column_of this) 8)\n                    )\n                )\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 12 col 17\n\n                )\n                ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "and": 2,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "G": 1,
                "or": 1,
                "column_equals": 2,
                "column_of": 2,
                "9": 1,
                "8": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the middle rows to color R and move them towards the center.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (or\n                    (column_equals (column_of this) 4)\n                    (column_equals (column_of this) 5)\n                )\n                (not\n                    (or\n                        (column_equals (column_of this) 6)\n                        (column_equals (column_of this) 3)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color R)\n            (move_node_max up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "filter": 1,
                "and": 1,
                "or": 2,
                "column_equals": 4,
                "column_of": 4,
                "4": 1,
                "5": 1,
                "not": 1,
                "6": 1,
                "3": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1,
                "move_node_max": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the middle three rows to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (column_equals (column_of this) 4)\n                (or\n                    (column_equals (column_of this) 5)\n                    (column_equals (column_of this) 6)\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "or": 2,
                "column_equals": 3,
                "column_of": 3,
                "4": 1,
                "5": 1,
                "6": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the 6th row and recolor all objects in that row to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max (down))\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (column_equals (column_of other) 6)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'd' in the current parser context, at line 8 col 29\n\n            (move_node_max (down))\n                            ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 2,
                "move_node_max": 1,
                "down": 1,
                "other": 2,
                "column_equals": 1,
                "column_of": 1,
                "6": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the row where another object with the same color exists, aligning them at their columns.",
            "code": "(do (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (move_node up))) (rule (vars (this)) (filter (color_equals (color_of this) R)) (apply (move_node down))))",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "move_node": 2,
                "up": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row of the grid at column 1, merge them into a single row, and clear the rest of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects on the grid three rows down and change their color.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 3,
                "down": 3,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Transform all objects at or adjacent to the boundary lines to become objects of R and redraw objects within.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or (position_equals (position_of this) border) (neighbors_of this border)))\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'p' in the current parser context, at line 4 col 22\n\n        (filter (or (position_equals (position_of this) borde\n                     ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "or": 1,
                "position_equals": 1,
                "position_of": 1,
                "border": 2,
                "neighbors_of": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom-most row, and extend borders to create rows of Rs.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (add_border R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "add_border": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each B-colored horizontal line, move the left column B with respect to the center column B, and then recolor the center column B to R.",
            "code": "(do\n    (rule\n    (vars (this other))\n    (filter\n         (and\n            (color_equals (color_of this) B)\n            (and\n                (neighbor_of this other)\n                (and\n                    (color_equals (color_of other) B)\n                    (column_equals (column_of other) center)))))\n    (apply\n        (move_node_max (direction_of other))))\n    (rule\n    (vars (this))\n    (filter\n        (and\n            (color_equals (color_of this) B)\n            (column_equals (column_of this) center)))\n    (apply\n        (update_color R))))\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 22 col 1\n\n)\n^\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "other": 5,
                "filter": 2,
                "and": 4,
                "color_equals": 3,
                "color_of": 3,
                "B": 3,
                "neighbor_of": 1,
                "column_equals": 2,
                "column_of": 2,
                "center": 2,
                "apply": 2,
                "move_node_max": 1,
                "direction_of": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects by recoloring them to the background color, except those in the middle row and middle column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (or (column_equals (column_of this) 5) (row_equals (row_of this) 5)))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 5 col 58\n\n(or (column_equals (column_of this) 5) (row_equals (row_of this) 5)))\n                                        ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "not": 1,
                "or": 1,
                "column_equals": 1,
                "column_of": 1,
                "5": 2,
                "row_equals": 1,
                "row_of": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects (lines) with more than one element to color R and move them all to the 7th row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (size_equals (size_of this) 1))\n        )\n        (apply\n            (update_color R)\n            (move_node (row 7))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 9 col 25\n\n            (move_node (row 7))\n                        ^\nExpected one of: \n\t* DIRECTION_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1,
                "move_node": 1,
                "row": 1,
                "7": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the bottom middle row cells to Rights. For each object longer than half the width of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (and\n                (not (color_equals (color_of this) O))\n                (>= (width_of this) 5)\n            )\n        )\n        (apply\n            (update_color N)\n        )\n    ),\n    (rule\n        (vars)\n        (filter (and\n                  (or\n                    (column_equals (column_of this) O)\n                    (not (neighbor_of this other)))\n        )  \n        )\n        (apply\n            (update_color (R))\n        )\n    )\n  )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'a' in the current parser context, at line 5 col 14\n\n            (and\n             ^\nExpected one of: \n\t* APPLY\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "and": 2,
                "not": 2,
                "color_equals": 1,
                "color_of": 1,
                "O": 2,
                ">=": 1,
                "width_of": 1,
                "5": 1,
                "apply": 2,
                "update_color": 2,
                "N": 1,
                ",": 1,
                "or": 1,
                "column_equals": 1,
                "column_of": 1,
                "neighbor_of": 1,
                "other": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the object in the middle of the grid to the top and keep the same relative positions",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (height_equals (height_of this) max)\n                (and\n                    (neighbor_of this other)\n                    (height_equals (height_of other) max)\n                )\n            )\n        )\n        (apply\n            (move_and_keep_rel (direction_of other))\n        )    \n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 14 col 14\n\n            (move_and_keep_rel (direction_of other))\n             ^\nExpected one of: \n\t* TR_MIRROR\n\t* TR_MOVE_NODE\n\t* TR_NOOP\n\t* TR_MOVE_NODE_MAX\n\t* TR_HOLLOW_RECTANGLE\n\t* TR_FILL_RECTANGLE\n\t* TR_ROTATE_NODE\n\t* TR_EXTEND_NODE\n\t* TR_ADD_BORDER\n\t* TR_FLIP\n\t* TR_INSERT\n\t* TR_UPDATE_COLOR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "height_equals": 2,
                "height_of": 2,
                "max": 2,
                "neighbor_of": 1,
                "apply": 1,
                "move_and_keep_rel": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to the bottom-most row and expand them horizontally across the entire row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node_max down)\n            (extend_node right false)\n            (extend_node left false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 2,
                "move_node_max": 1,
                "extend_node": 2,
                "right": 1,
                "false": 2,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the middle row of each grid to [R, R, R, O, O, O, O, O, O, O].",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and \n                (size_equals (size_of this) 1)\n                (column_equals (column_of this) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "column_equals": 1,
                "column_of": 1,
                "5": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Merge all red objects into a single red object at the bottom-most row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the rows containing the object R to color O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (fill_rectangle O false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "fill_rectangle": 1,
                "O": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom-right corner, and recolor all objects to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node max)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 6 col 24\n\n            (move_node max)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 2,
                "move_node": 1,
                "max": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all the objects in the bottom 5 rows to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (>= (row_of this) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '>' in the current parser context, at line 6 col 18\n\n                (>= (row_of this) 5)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "and": 1,
                ">=": 1,
                "row_of": 1,
                "5": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all non-empty cells to O",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 2,
                "apply": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all black objects (B) and cyan objects (C) to the top of the grid, then recolor all objects to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (or (color_equals (color_of this) B) (color_equals (color_of this) C)))\n        (apply (move_node up))\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply (update_color O))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "or": 1,
                "color_equals": 2,
                "color_of": 2,
                "B": 1,
                "C": 1,
                "apply": 2,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the top edge of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row and recolor the row to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "All objects of colors R, Y, and F are collected and moved near the bottom row, positioned in the center.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (color_equals (color_of this) R)\n                (or \n                    (color_equals (color_of this) Y)\n                    (color_equals (color_of this) F)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node center)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'c' in the current parser context, at line 18 col 24\n\n            (move_node center)\n                       ^\nExpected one of: \n\t* LPAR\n\t* DIRECTION\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "or": 2,
                "color_equals": 3,
                "color_of": 3,
                "R": 1,
                "Y": 1,
                "F": 1,
                "apply": 1,
                "move_node": 5,
                "down": 4,
                "center": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Eliminate all objects and then place red objects in the center row and third column.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply \n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (column_equals (column_of this) 3)\n                (degree_equals (degree_of this) 1)\n            )\n        )\n        (apply\n            (insert 0 bottom middle)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "O": 1,
                "and": 1,
                "column_equals": 1,
                "column_of": 1,
                "3": 1,
                "degree_equals": 1,
                "degree_of": 1,
                "1": 1,
                "insert": 1,
                "0": 1,
                "bottom": 1,
                "middle": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color O",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 9,
                "down": 9
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all contiguous blocks of objects, with at least three objects, to color R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (or\n                    (or\n                        (or\n                            (size_equals (size_of this) 3)\n                            (size_equals (size_of this) 4)\n                        )\n                        (size_equals (size_of this) 5)\n                    )\n                    (size_equals (size_of this) 6)\n                )\n                (size_equals (size_of this) 7)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 6,
                "filter": 1,
                "or": 4,
                "size_equals": 5,
                "size_of": 5,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the center row of all rows containing objects of color R to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects except those of color R, and position the remaining objects in the lower middle rows.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) R))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of other) center)\n            )\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "update_color": 1,
                "O": 1,
                "other": 2,
                "and": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the 3x3 block around the object of color 'Y' to color 'R'.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) Y)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "other": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "Y": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all vertical symmetric objects to the second row from the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (shape_equals (shape_of this) vertical))\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'v' in the current parser context, at line 4 col 47\n\n  (filter (shape_equals (shape_of this) vertical))\n                                        ^\nExpected one of: \n\t* LPAR\n\t* SHAPE\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "vertical": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the center rows to R, with the top and bottom 2 rows being clear.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (neighbor_of this other))\n                (or\n                    (or (column_equals (column_of this) 1) (column_equals (column_of this) 2))\n                    (column_equals (column_of this) 3)\n                )\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "filter": 1,
                "and": 1,
                "not": 1,
                "neighbor_of": 1,
                "other": 1,
                "or": 2,
                "column_equals": 3,
                "column_of": 3,
                "1": 1,
                "2": 1,
                "3": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to form a horizontal line and then replace them with a horizontal line of Rs in the middle three rows of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 3,
                "apply": 2,
                "move_node": 3,
                "down": 3,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the lowest row while keeping their columns the same, and then update their color to R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row where nearby Y is present.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (color_equals (color_of other) Y)\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "Y": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor objects of color R into a 'T' shape pattern in the background.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "update_color": 2,
                "O": 2,
                "other": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Change the color of the middle row of objects in each grid to R and remove other objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (and (color_equals (color_of this) X) (column_equals (column_of this) center)))\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "O": 1,
                "and": 1,
                "color_equals": 1,
                "color_of": 1,
                "X": 1,
                "column_equals": 1,
                "column_of": 1,
                "center": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom of the grid and turn all objects to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 2,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color red to the bottom-most row in the grid and form a horizontal line of red objects in that row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (move_node_max right)\n            (move_node_max left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 3,
                "down": 1,
                "right": 1,
                "left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the 2nd row to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) 2)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "column_equals": 1,
                "column_of": 1,
                "2": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects from the grid except for the red objects, and group the red objects together in a rectangular block in the lower middle part of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) R))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (column_equals (column_of this) (column_of other))\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "filter": 2,
                "not": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "update_color": 1,
                "O": 1,
                "other": 2,
                "and": 1,
                "column_equals": 1,
                "column_of": 2,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all rightmost objects of color B to color O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) B)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "B": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects at the bottom middle of the input grid and recolor them with color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R to form a horizontal line at the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply (move_node_max down))\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of size 3 to color R and move them to the bottom left corner in groups.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 3)\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "If there are three consecutive identical objects in a row, replace them and any other neighboring objects that share the same fill pattern with the objects to the bottom left of their original position based on the top grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (color_equals (color_of other) (color_of this))\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 2,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Merge all nearest objects of size 1",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (size_equals (size_of this) 1)\n        )\n        (apply\n            (move_node up)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "apply": 1,
                "move_node": 1,
                "up": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the middle row of the grid to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (row_equals (row_of this) middle)\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 6 col 18\n\n                (row_equals (row_of this) middle)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "row_equals": 1,
                "row_of": 1,
                "middle": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "For each object arrange in such a way that the object is moved up leave a continuous streak of colored objects from left to right.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n            (or true true)\n         (apply\n            (move_node up)\n         )\n     )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'o' in the current parser context, at line 5 col 14\n\n            (or true true)\n             ^\nExpected one of: \n\t* APPLY\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 1,
                "filter": 1,
                "or": 1,
                "true": 2,
                "apply": 1,
                "move_node": 1,
                "up": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects in the upper half to the lower half and form a horizontal line of them, changing their color to R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not (color_equals (color_of this) O))\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to form a horizontal line with their neighbors, and recolor them to color R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 2,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Clear all objects except those that are part of the row with the maximum number of objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter (not (neighbor_of this other)))\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "move_node": 1,
                "up": 1,
                "not": 1,
                "neighbor_of": 1,
                "other": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all the objects of color R to the bottom-most row.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom of the grid, and then clear the remainder of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 2,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 9,
                "down": 9
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the top left corner.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max up_left)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "up_left": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects except the red objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) R))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color Red to the bottommost positions, and then recolor them to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects of color R to color O, and then move them toward the center, if they are neighbors of an object of color X.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (neighbor_of this other)\n                (color_equals (color_of other) X)\n            )\n        )\n        (apply\n            (update_color O)\n            (move_node_max (direction_of other))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 8 col 17\n\n                (color_equals (color_of other) X)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 1,
                "color_equals": 2,
                "color_of": 2,
                "R": 1,
                "neighbor_of": 1,
                "X": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1,
                "move_node_max": 1,
                "direction_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects connected to the leftmost object of size 1 to empty space.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (size_equals (size_of this) 1)\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 2,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "1": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Shift all rows that contain objects of different colors to the row that has a red object and contains one object at the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (color_equals (color_of other) R)\n                (and\n                    (column_equals (column_of this) 0)\n                    (neighbor_of this other)\n                )\n            )\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 3,
                "filter": 1,
                "and": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "column_equals": 1,
                "column_of": 1,
                "0": 1,
                "neighbor_of": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the first object in grid that touches the border and has more than one adjacent object 'R' within it, to blank. Extend the color 'R' downward in its place.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (color_equals (color_of this) R)\n                (or\n                    (and \n                        (neighbor_of this B)\n                        (count_equals (degree_of this) 5)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color O)\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'B' in the current parser context, at line 9 col 43\n\n                      (neighbor_of this B)\n                                        ^\nExpected one of: \n\t* VAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 4,
                "filter": 1,
                "and": 2,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "or": 1,
                "neighbor_of": 1,
                "B": 1,
                "count_equals": 1,
                "degree_of": 1,
                "5": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1,
                "extend_node": 1,
                "down": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the third row and the bottom three rows to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (row_equals (row_of this) 2)\n                (and\n                    (row_equals (row_of this) 7)\n                    (or\n                        (row_equals (row_of this) 8)\n                        (row_equals (row_of this) 9)\n                    )\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 6 col 18\n\n                (row_equals (row_of this) 2)\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 5,
                "filter": 1,
                "or": 2,
                "row_equals": 4,
                "row_of": 4,
                "2": 1,
                "and": 1,
                "7": 1,
                "8": 1,
                "9": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects in the middle row to color R and fill the row directly below it with the same colored objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (row_equals (row_of this) (middle_row))\n                (not (color_equals (color_of this) O))\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (row_equals (row_of this) (middle_row))\n                (not (color_equals (color_of this) O))\n                (below this other)\n                (row_equals (row_of other) (middle_row + 1))\n                (color_equals (color_of other) O)\n            )\n        )\n        (apply\n            (update_color (color_of this))\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'r' in the current parser context, at line 6 col 18\n\n                (row_equals (row_of this) (middle_row))\n                 ^\nExpected one of: \n\t* SHAPE_EQ\n\t* OP_NOT\n\t* OP_AND\n\t* WIDTH_EQ\n\t* DEGREE_EQ\n\t* SIZE_EQ\n\t* COLUMN_EQ\n\t* COLOR_EQ\n\t* NEIGHBOR_OF\n\t* HEIGHT_EQ\n\t* OP_OR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 8,
                "filter": 2,
                "and": 2,
                "row_equals": 3,
                "row_of": 3,
                "middle_row": 3,
                "not": 2,
                "color_equals": 3,
                "color_of": 4,
                "O": 3,
                "apply": 2,
                "update_color": 2,
                "R": 1,
                "other": 4,
                "below": 1,
                "+": 1,
                "1": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move the row containing the object of color Y to the top and replace its previous position, as well as same rows in other grids, with color R.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of other) Y)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n        (and\n            (color_equals (color_of this) O))\n            (column_equals (column_of this) (column_of other))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 15 col 45\n\n        (color_equals (color_of this) O))\n                                        ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "other": 3,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "Y": 1,
                "apply": 2,
                "move_node": 1,
                "up": 1,
                "and": 1,
                "O": 1,
                "column_equals": 1,
                "column_of": 2,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects that are not in the last three rows, and recolor the remaining objects to color R.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (column_equals (column_of this) (or (or (column_equals 7) (column_equals 8)) (column_equals 9)))\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'o' in the current parser context, at line 5 col 46\n\n       (column_equals (column_of this) (or (or (column_equals 7) (column_equals \n                                        ^\nExpected one of: \n\t* COLUMN_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "column_equals": 4,
                "column_of": 1,
                "or": 2,
                "7": 1,
                "8": 1,
                "9": 1,
                "apply": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Eliminate all the objects that are not touching another object",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (not\n                (neighbor_of this other)\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 2,
                "filter": 1,
                "not": 1,
                "neighbor_of": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to the same color and move the object with largest width to a different color",
            "code": "(do\n   (rule\n     (vars (this))\n     (filter)\n     (apply\n      (update_color O)\n     )\n   )\n   (rule\n     (vars (this))\n     (filter\n       (width_equals (width_of this) max)\n     )\n     (apply\n      (update_color R)\n     )\n   )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 2,
                "O": 1,
                "width_equals": 1,
                "width_of": 1,
                "max": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Replace horizontal objects of length 3 with a horizontal red object in the bottom of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (size_equals (size_of this) 3)\n                (shape_equals (shape_of this) square)\n            )\n        )\n        (apply\n            (move_node down)\n            (update_color R)\n        )    \n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "shape_equals": 1,
                "shape_of": 1,
                "square": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color different from O and of maximum size to the bottom of the grid and recolor them to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (and\n                (not (color_equals (color_of this) O))\n                (size_equals (size_of this) max)\n            )\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "and": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "O": 2,
                "size_equals": 1,
                "size_of": 1,
                "max": 1,
                "apply": 1,
                "move_node": 2,
                "down": 2,
                "update_color": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all red objects to the bottom.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row where there are no objects, making them form a contiguous horizontal line.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter (color_equals (color_of this) R))\n        (apply\n            (move_node_max down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects and add a single horizontal line of red color objects in the middle row of the grid.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) O)\n        )\n        (apply\n            (insert 1 (middle) source)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 15 col 24\n\n            (insert 1 (middle) source)\n                       ^\nExpected one of: \n\t* IMAGE_POINTS_OF\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "O": 2,
                "color_equals": 1,
                "color_of": 1,
                "insert": 1,
                "1": 1,
                "middle": 1,
                "source": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row and place them next to each other.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node_max right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "other": 1,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "move_node_max": 1,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to form a horizontal line.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottommost row, maintain their positions, and expand them horizontally by one cell on each side.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n            (extend_node left false)\n            (extend_node right false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node_max": 1,
                "down": 1,
                "extend_node": 2,
                "left": 1,
                "false": 2,
                "right": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor the horizontal center row of the grid to O, and any neighboring columns to R, starting from row 5.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (and\n                    (column_equals (column_of this) \"center\")\n                    (height_equals (height_of this) 5)\n                )\n                (and\n                    (neighbor_of this other)\n                    (column_equals (column_of other) \"center\")\n                )\n            )\n        )\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (neighbor_of this other)\n                (column_equals (column_of other) \"center\")\n                (height_equals (height_of other) 5)\n            )\n        )\n        (apply\n            (update_color R)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '\"' in the current parser context, at line 7 col 53\n\n        (column_equals (column_of this) \"center\")\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 6,
                "filter": 2,
                "or": 1,
                "and": 3,
                "column_equals": 3,
                "column_of": 3,
                "\"center\"": 3,
                "height_equals": 2,
                "height_of": 2,
                "5": 2,
                "neighbor_of": 2,
                "other": 6,
                "apply": 2,
                "update_color": 2,
                "O": 1,
                "R": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the first row where object X is found, and move all other objects to that row if they are neighbors of R",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node up)\n        )\n    )\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (not (color_equals (color_of this) R))\n                (neighbor_of this other)\n                (color_equals (color_of other) R)\n            )\n        )\n        (apply\n            (move_node up)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches '(' in the current parser context, at line 17 col 17\n\n                (color_equals (color_of other) R)\n                ^\nExpected one of: \n\t* RPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 5,
                "other": 4,
                "filter": 2,
                "color_equals": 3,
                "color_of": 3,
                "R": 3,
                "apply": 2,
                "move_node": 2,
                "up": 2,
                "and": 1,
                "not": 1,
                "neighbor_of": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects that are on the bottom row and neighbors with an object of color R, towards the object of color R and then recolor them to O.",
            "code": "(do\n    (rule\n        (vars (this other))\n        (filter\n            (and\n                (and\n                    (neighbor_of this other)\n                    (color_equals (color_of other) R)\n                )\n                (column_equals (column_of this) max)\n            )\n        )\n        (apply\n            (move_node (direction_of other))\n            (update_color O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches 'm' in the current parser context, at line 10 col 49\n\n        (column_equals (column_of this) max)\n                                        ^\nExpected one of: \n\t* LPAR\n\t* COLUMN\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "other": 4,
                "filter": 1,
                "and": 2,
                "neighbor_of": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "column_equals": 1,
                "column_of": 1,
                "max": 1,
                "apply": 1,
                "move_node": 1,
                "direction_of": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all objects to color O and then extend the object R",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter)\n        (apply\n            (update_color O)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (extend_node down false)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 3,
                "filter": 2,
                "apply": 2,
                "update_color": 1,
                "O": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "extend_node": 1,
                "down": 1,
                "false": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row, forming a horizontal line.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n            (move_node down)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 9,
                "down": 9
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom row they appear in, and then recolor them to color O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node down)\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 1,
                "down": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor all red objects to the rightmost three columns.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node right)\n            (move_node right)\n            (move_node right)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "move_node": 3,
                "right": 3
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Recolor any row with a minimum of three objects with bright colors (R, G, B) to empty cells.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (or\n                (shape_equals (shape_of this) enclosed)\n                (or\n                    (size_equals (size_of this) 3)\n                )\n            )\n        )\n        (apply\n            (hollow_rectangle O)\n        )\n    )\n)",
            "can_parse": false,
            "parse_error_message": "No terminal matches ')' in the current parser context, at line 9 col 17\n\n                )\n                ^\nExpected one of: \n\t* LPAR\n",
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 3,
                "filter": 1,
                "or": 2,
                "shape_equals": 1,
                "shape_of": 1,
                "enclosed": 1,
                "size_equals": 1,
                "size_of": 1,
                "3": 1,
                "apply": 1,
                "hollow_rectangle": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Remove all objects from the grid except for the red objects.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (not (color_equals (color_of this) R))\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 1,
                "vars": 1,
                "this": 2,
                "filter": 1,
                "not": 1,
                "color_equals": 1,
                "color_of": 1,
                "R": 1,
                "apply": 1,
                "update_color": 1,
                "O": 1
            }
        },
        {
            "finish_reason": "stop",
            "valid_json": true,
            "nl_description": "Move all objects of color R to the bottom of the grid, and then recolor them to O.",
            "code": "(do\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (move_node_max down)\n        )\n    )\n    (rule\n        (vars (this))\n        (filter\n            (color_equals (color_of this) R)\n        )\n        (apply\n            (update_color O)\n        )\n    )\n)",
            "can_parse": true,
            "token_counts": {
                "do": 1,
                "rule": 2,
                "vars": 2,
                "this": 4,
                "filter": 2,
                "color_equals": 2,
                "color_of": 2,
                "R": 2,
                "apply": 2,
                "move_node_max": 1,
                "down": 1,
                "update_color": 1,
                "O": 1
            }
        }
    ],
    "task_id": "31aa019c"
}